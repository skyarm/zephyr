
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	c0 0f 00 20 81 1f 00 08 41 43 00 08 ad 1f 00 08     ... ....AC......
 8000010:	ad 1f 00 08 ad 1f 00 08 ad 1f 00 08 00 00 00 00     ................
	...
 800002c:	75 1d 00 08 ad 1f 00 08 00 00 00 00 21 1d 00 08     u...........!...
 800003c:	55 1a 00 08                                         U...

08000040 <_irq_vector_table>:
 8000040:	59 1f 00 08 59 1f 00 08 59 1f 00 08 59 1f 00 08     Y...Y...Y...Y...
 8000050:	59 1f 00 08 59 1f 00 08 59 1f 00 08 59 1f 00 08     Y...Y...Y...Y...
 8000060:	59 1f 00 08 59 1f 00 08 59 1f 00 08 59 1f 00 08     Y...Y...Y...Y...
 8000070:	59 1f 00 08 59 1f 00 08 59 1f 00 08 59 1f 00 08     Y...Y...Y...Y...
 8000080:	59 1f 00 08 59 1f 00 08 59 1f 00 08 59 1f 00 08     Y...Y...Y...Y...
 8000090:	59 1f 00 08 59 1f 00 08 59 1f 00 08 59 1f 00 08     Y...Y...Y...Y...
 80000a0:	59 1f 00 08 59 1f 00 08 59 1f 00 08 59 1f 00 08     Y...Y...Y...Y...
 80000b0:	59 1f 00 08 59 1f 00 08 59 1f 00 08 59 1f 00 08     Y...Y...Y...Y...
 80000c0:	59 1f 00 08 59 1f 00 08 59 1f 00 08 59 1f 00 08     Y...Y...Y...Y...
 80000d0:	59 1f 00 08 59 1f 00 08 59 1f 00 08 59 1f 00 08     Y...Y...Y...Y...
 80000e0:	59 1f 00 08 59 1f 00 08 59 1f 00 08 59 1f 00 08     Y...Y...Y...Y...
 80000f0:	59 1f 00 08 59 1f 00 08 59 1f 00 08 59 1f 00 08     Y...Y...Y...Y...
 8000100:	59 1f 00 08 59 1f 00 08 59 1f 00 08 59 1f 00 08     Y...Y...Y...Y...
 8000110:	59 1f 00 08 59 1f 00 08 59 1f 00 08 59 1f 00 08     Y...Y...Y...Y...
 8000120:	59 1f 00 08 59 1f 00 08 59 1f 00 08 59 1f 00 08     Y...Y...Y...Y...
 8000130:	59 1f 00 08 59 1f 00 08                             Y...Y...

Disassembly of section text:

08000138 <__aeabi_uldivmod>:
 8000138:	b953      	cbnz	r3, 8000150 <__aeabi_uldivmod+0x18>
 800013a:	b94a      	cbnz	r2, 8000150 <__aeabi_uldivmod+0x18>
 800013c:	2900      	cmp	r1, #0
 800013e:	bf08      	it	eq
 8000140:	2800      	cmpeq	r0, #0
 8000142:	bf1c      	itt	ne
 8000144:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000148:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800014c:	f000 b974 	b.w	8000438 <__aeabi_idiv0>
 8000150:	f1ad 0c08 	sub.w	ip, sp, #8
 8000154:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000158:	f000 f806 	bl	8000168 <__udivmoddi4>
 800015c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000160:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000164:	b004      	add	sp, #16
 8000166:	4770      	bx	lr

08000168 <__udivmoddi4>:
 8000168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800016c:	9e08      	ldr	r6, [sp, #32]
 800016e:	460d      	mov	r5, r1
 8000170:	4604      	mov	r4, r0
 8000172:	4688      	mov	r8, r1
 8000174:	2b00      	cmp	r3, #0
 8000176:	d14d      	bne.n	8000214 <__udivmoddi4+0xac>
 8000178:	428a      	cmp	r2, r1
 800017a:	4694      	mov	ip, r2
 800017c:	d968      	bls.n	8000250 <__udivmoddi4+0xe8>
 800017e:	fab2 f282 	clz	r2, r2
 8000182:	b152      	cbz	r2, 800019a <__udivmoddi4+0x32>
 8000184:	fa01 f302 	lsl.w	r3, r1, r2
 8000188:	f1c2 0120 	rsb	r1, r2, #32
 800018c:	fa20 f101 	lsr.w	r1, r0, r1
 8000190:	fa0c fc02 	lsl.w	ip, ip, r2
 8000194:	ea41 0803 	orr.w	r8, r1, r3
 8000198:	4094      	lsls	r4, r2
 800019a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 800019e:	0c21      	lsrs	r1, r4, #16
 80001a0:	fbb8 fef5 	udiv	lr, r8, r5
 80001a4:	fa1f f78c 	uxth.w	r7, ip
 80001a8:	fb05 831e 	mls	r3, r5, lr, r8
 80001ac:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001b0:	fb0e f107 	mul.w	r1, lr, r7
 80001b4:	4299      	cmp	r1, r3
 80001b6:	d90b      	bls.n	80001d0 <__udivmoddi4+0x68>
 80001b8:	eb1c 0303 	adds.w	r3, ip, r3
 80001bc:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80001c0:	f080 811e 	bcs.w	8000400 <__udivmoddi4+0x298>
 80001c4:	4299      	cmp	r1, r3
 80001c6:	f240 811b 	bls.w	8000400 <__udivmoddi4+0x298>
 80001ca:	f1ae 0e02 	sub.w	lr, lr, #2
 80001ce:	4463      	add	r3, ip
 80001d0:	1a5b      	subs	r3, r3, r1
 80001d2:	b2a4      	uxth	r4, r4
 80001d4:	fbb3 f0f5 	udiv	r0, r3, r5
 80001d8:	fb05 3310 	mls	r3, r5, r0, r3
 80001dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80001e0:	fb00 f707 	mul.w	r7, r0, r7
 80001e4:	42a7      	cmp	r7, r4
 80001e6:	d90a      	bls.n	80001fe <__udivmoddi4+0x96>
 80001e8:	eb1c 0404 	adds.w	r4, ip, r4
 80001ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80001f0:	f080 8108 	bcs.w	8000404 <__udivmoddi4+0x29c>
 80001f4:	42a7      	cmp	r7, r4
 80001f6:	f240 8105 	bls.w	8000404 <__udivmoddi4+0x29c>
 80001fa:	4464      	add	r4, ip
 80001fc:	3802      	subs	r0, #2
 80001fe:	1be4      	subs	r4, r4, r7
 8000200:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000204:	2100      	movs	r1, #0
 8000206:	b11e      	cbz	r6, 8000210 <__udivmoddi4+0xa8>
 8000208:	40d4      	lsrs	r4, r2
 800020a:	2300      	movs	r3, #0
 800020c:	e9c6 4300 	strd	r4, r3, [r6]
 8000210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000214:	428b      	cmp	r3, r1
 8000216:	d908      	bls.n	800022a <__udivmoddi4+0xc2>
 8000218:	2e00      	cmp	r6, #0
 800021a:	f000 80ee 	beq.w	80003fa <__udivmoddi4+0x292>
 800021e:	2100      	movs	r1, #0
 8000220:	e9c6 0500 	strd	r0, r5, [r6]
 8000224:	4608      	mov	r0, r1
 8000226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800022a:	fab3 f183 	clz	r1, r3
 800022e:	2900      	cmp	r1, #0
 8000230:	d14a      	bne.n	80002c8 <__udivmoddi4+0x160>
 8000232:	42ab      	cmp	r3, r5
 8000234:	d302      	bcc.n	800023c <__udivmoddi4+0xd4>
 8000236:	4282      	cmp	r2, r0
 8000238:	f200 80f9 	bhi.w	800042e <__udivmoddi4+0x2c6>
 800023c:	1a84      	subs	r4, r0, r2
 800023e:	eb65 0303 	sbc.w	r3, r5, r3
 8000242:	2001      	movs	r0, #1
 8000244:	4698      	mov	r8, r3
 8000246:	2e00      	cmp	r6, #0
 8000248:	d0e2      	beq.n	8000210 <__udivmoddi4+0xa8>
 800024a:	e9c6 4800 	strd	r4, r8, [r6]
 800024e:	e7df      	b.n	8000210 <__udivmoddi4+0xa8>
 8000250:	b902      	cbnz	r2, 8000254 <__udivmoddi4+0xec>
 8000252:	deff      	udf	#255	; 0xff
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	2a00      	cmp	r2, #0
 800025a:	f040 8091 	bne.w	8000380 <__udivmoddi4+0x218>
 800025e:	eba1 050c 	sub.w	r5, r1, ip
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f fe8c 	uxth.w	lr, ip
 800026a:	2101      	movs	r1, #1
 800026c:	fbb5 f3f7 	udiv	r3, r5, r7
 8000270:	fb07 5013 	mls	r0, r7, r3, r5
 8000274:	0c25      	lsrs	r5, r4, #16
 8000276:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800027a:	fb0e f003 	mul.w	r0, lr, r3
 800027e:	42a8      	cmp	r0, r5
 8000280:	d908      	bls.n	8000294 <__udivmoddi4+0x12c>
 8000282:	eb1c 0505 	adds.w	r5, ip, r5
 8000286:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800028a:	d202      	bcs.n	8000292 <__udivmoddi4+0x12a>
 800028c:	42a8      	cmp	r0, r5
 800028e:	f200 80cb 	bhi.w	8000428 <__udivmoddi4+0x2c0>
 8000292:	4643      	mov	r3, r8
 8000294:	1a2d      	subs	r5, r5, r0
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb5 f0f7 	udiv	r0, r5, r7
 800029c:	fb07 5510 	mls	r5, r7, r0, r5
 80002a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a4:	fb0e fe00 	mul.w	lr, lr, r0
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d908      	bls.n	80002be <__udivmoddi4+0x156>
 80002ac:	eb1c 0404 	adds.w	r4, ip, r4
 80002b0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80002b4:	d202      	bcs.n	80002bc <__udivmoddi4+0x154>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f200 80bb 	bhi.w	8000432 <__udivmoddi4+0x2ca>
 80002bc:	4628      	mov	r0, r5
 80002be:	eba4 040e 	sub.w	r4, r4, lr
 80002c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80002c6:	e79e      	b.n	8000206 <__udivmoddi4+0x9e>
 80002c8:	f1c1 0720 	rsb	r7, r1, #32
 80002cc:	408b      	lsls	r3, r1
 80002ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80002d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80002d6:	fa20 f407 	lsr.w	r4, r0, r7
 80002da:	fa05 f301 	lsl.w	r3, r5, r1
 80002de:	431c      	orrs	r4, r3
 80002e0:	40fd      	lsrs	r5, r7
 80002e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80002e6:	fa00 f301 	lsl.w	r3, r0, r1
 80002ea:	fbb5 f8f9 	udiv	r8, r5, r9
 80002ee:	0c20      	lsrs	r0, r4, #16
 80002f0:	fa1f fe8c 	uxth.w	lr, ip
 80002f4:	fb09 5518 	mls	r5, r9, r8, r5
 80002f8:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80002fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000300:	42a8      	cmp	r0, r5
 8000302:	fa02 f201 	lsl.w	r2, r2, r1
 8000306:	d90b      	bls.n	8000320 <__udivmoddi4+0x1b8>
 8000308:	eb1c 0505 	adds.w	r5, ip, r5
 800030c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000310:	f080 8088 	bcs.w	8000424 <__udivmoddi4+0x2bc>
 8000314:	42a8      	cmp	r0, r5
 8000316:	f240 8085 	bls.w	8000424 <__udivmoddi4+0x2bc>
 800031a:	f1a8 0802 	sub.w	r8, r8, #2
 800031e:	4465      	add	r5, ip
 8000320:	1a2d      	subs	r5, r5, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb5 f0f9 	udiv	r0, r5, r9
 8000328:	fb09 5510 	mls	r5, r9, r0, r5
 800032c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45ae      	cmp	lr, r5
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x1e2>
 8000338:	eb1c 0505 	adds.w	r5, ip, r5
 800033c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000340:	d26c      	bcs.n	800041c <__udivmoddi4+0x2b4>
 8000342:	45ae      	cmp	lr, r5
 8000344:	d96a      	bls.n	800041c <__udivmoddi4+0x2b4>
 8000346:	3802      	subs	r0, #2
 8000348:	4465      	add	r5, ip
 800034a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800034e:	fba0 9402 	umull	r9, r4, r0, r2
 8000352:	eba5 050e 	sub.w	r5, r5, lr
 8000356:	42a5      	cmp	r5, r4
 8000358:	46c8      	mov	r8, r9
 800035a:	46a6      	mov	lr, r4
 800035c:	d356      	bcc.n	800040c <__udivmoddi4+0x2a4>
 800035e:	d053      	beq.n	8000408 <__udivmoddi4+0x2a0>
 8000360:	b15e      	cbz	r6, 800037a <__udivmoddi4+0x212>
 8000362:	ebb3 0208 	subs.w	r2, r3, r8
 8000366:	eb65 050e 	sbc.w	r5, r5, lr
 800036a:	fa05 f707 	lsl.w	r7, r5, r7
 800036e:	fa22 f301 	lsr.w	r3, r2, r1
 8000372:	40cd      	lsrs	r5, r1
 8000374:	431f      	orrs	r7, r3
 8000376:	e9c6 7500 	strd	r7, r5, [r6]
 800037a:	2100      	movs	r1, #0
 800037c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000380:	f1c2 0320 	rsb	r3, r2, #32
 8000384:	fa20 f103 	lsr.w	r1, r0, r3
 8000388:	fa0c fc02 	lsl.w	ip, ip, r2
 800038c:	fa25 f303 	lsr.w	r3, r5, r3
 8000390:	4095      	lsls	r5, r2
 8000392:	430d      	orrs	r5, r1
 8000394:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fbb3 f1f7 	udiv	r1, r3, r7
 80003a0:	fb07 3011 	mls	r0, r7, r1, r3
 80003a4:	0c2b      	lsrs	r3, r5, #16
 80003a6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003aa:	fb01 f00e 	mul.w	r0, r1, lr
 80003ae:	4298      	cmp	r0, r3
 80003b0:	fa04 f402 	lsl.w	r4, r4, r2
 80003b4:	d908      	bls.n	80003c8 <__udivmoddi4+0x260>
 80003b6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ba:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80003be:	d22f      	bcs.n	8000420 <__udivmoddi4+0x2b8>
 80003c0:	4298      	cmp	r0, r3
 80003c2:	d92d      	bls.n	8000420 <__udivmoddi4+0x2b8>
 80003c4:	3902      	subs	r1, #2
 80003c6:	4463      	add	r3, ip
 80003c8:	1a1b      	subs	r3, r3, r0
 80003ca:	b2ad      	uxth	r5, r5
 80003cc:	fbb3 f0f7 	udiv	r0, r3, r7
 80003d0:	fb07 3310 	mls	r3, r7, r0, r3
 80003d4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d8:	fb00 f30e 	mul.w	r3, r0, lr
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x28a>
 80003e0:	eb1c 0505 	adds.w	r5, ip, r5
 80003e4:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003e8:	d216      	bcs.n	8000418 <__udivmoddi4+0x2b0>
 80003ea:	42ab      	cmp	r3, r5
 80003ec:	d914      	bls.n	8000418 <__udivmoddi4+0x2b0>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4465      	add	r5, ip
 80003f2:	1aed      	subs	r5, r5, r3
 80003f4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f8:	e738      	b.n	800026c <__udivmoddi4+0x104>
 80003fa:	4631      	mov	r1, r6
 80003fc:	4630      	mov	r0, r6
 80003fe:	e707      	b.n	8000210 <__udivmoddi4+0xa8>
 8000400:	4686      	mov	lr, r0
 8000402:	e6e5      	b.n	80001d0 <__udivmoddi4+0x68>
 8000404:	4618      	mov	r0, r3
 8000406:	e6fa      	b.n	80001fe <__udivmoddi4+0x96>
 8000408:	454b      	cmp	r3, r9
 800040a:	d2a9      	bcs.n	8000360 <__udivmoddi4+0x1f8>
 800040c:	ebb9 0802 	subs.w	r8, r9, r2
 8000410:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000414:	3801      	subs	r0, #1
 8000416:	e7a3      	b.n	8000360 <__udivmoddi4+0x1f8>
 8000418:	4640      	mov	r0, r8
 800041a:	e7ea      	b.n	80003f2 <__udivmoddi4+0x28a>
 800041c:	4620      	mov	r0, r4
 800041e:	e794      	b.n	800034a <__udivmoddi4+0x1e2>
 8000420:	4641      	mov	r1, r8
 8000422:	e7d1      	b.n	80003c8 <__udivmoddi4+0x260>
 8000424:	46d0      	mov	r8, sl
 8000426:	e77b      	b.n	8000320 <__udivmoddi4+0x1b8>
 8000428:	3b02      	subs	r3, #2
 800042a:	4465      	add	r5, ip
 800042c:	e732      	b.n	8000294 <__udivmoddi4+0x12c>
 800042e:	4608      	mov	r0, r1
 8000430:	e709      	b.n	8000246 <__udivmoddi4+0xde>
 8000432:	4464      	add	r4, ip
 8000434:	3802      	subs	r0, #2
 8000436:	e742      	b.n	80002be <__udivmoddi4+0x156>

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop

0800043c <strcmp>:
 800043c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000440:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000444:	2a01      	cmp	r2, #1
 8000446:	bf28      	it	cs
 8000448:	429a      	cmpcs	r2, r3
 800044a:	d0f7      	beq.n	800043c <strcmp>
 800044c:	1ad0      	subs	r0, r2, r3
 800044e:	4770      	bx	lr

08000450 <strlen>:
 8000450:	4603      	mov	r3, r0
 8000452:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000456:	2a00      	cmp	r2, #0
 8000458:	d1fb      	bne.n	8000452 <strlen+0x2>
 800045a:	1a18      	subs	r0, r3, r0
 800045c:	3801      	subs	r0, #1
 800045e:	4770      	bx	lr

08000460 <main>:
#include <sys/byteorder.h>
#include <zephyr.h>

#include <stm32wlxx_hal.h>

void main(void) {
 8000460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 8000462:	2001      	movs	r0, #1
 8000464:	f002 fada 	bl	8002a1c <HAL_PWREx_ReleaseCore>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8000468:	4c0a      	ldr	r4, [pc, #40]	; (8000494 <main+0x34>)
 800046a:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <main+0x38>)
		parm0.val = timeout;
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
 800046c:	4e0b      	ldr	r6, [pc, #44]	; (800049c <main+0x3c>)
  * @rmtoll FLASH_SRRVR    SBRV       LL_FLASH_GetC2BootResetVect
  * @retval CPU2 boot reset vector
  */
__STATIC_INLINE uint32_t LL_FLASH_GetC2BootResetVect(void)
{
  return (uint32_t)(READ_BIT(FLASH->SRRVR, FLASH_SRRVR_SBRV));
 800046e:	4d0c      	ldr	r5, [pc, #48]	; (80004a0 <main+0x40>)
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	08e4      	lsrs	r4, r4, #3
    for (;;) {
        k_msleep(10000);
        LOG_INF("Waiting for CPU2 to boot from[%X]", LL_FLASH_GetC2BootResetVect());
 8000474:	01a4      	lsls	r4, r4, #6
 8000476:	2700      	movs	r7, #0
 8000478:	f044 0403 	orr.w	r4, r4, #3
 800047c:	4639      	mov	r1, r7
 800047e:	4630      	mov	r0, r6
 8000480:	f003 f852 	bl	8003528 <z_impl_k_sleep>
 8000484:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 8000488:	4806      	ldr	r0, [pc, #24]	; (80004a4 <main+0x44>)
 800048a:	4622      	mov	r2, r4
 800048c:	b289      	uxth	r1, r1
 800048e:	f003 fb13 	bl	8003ab8 <log_1>
 8000492:	e7f3      	b.n	800047c <main+0x1c>
 8000494:	08004c78 	.word	0x08004c78
 8000498:	08004c78 	.word	0x08004c78
 800049c:	000186a0 	.word	0x000186a0
 80004a0:	58004000 	.word	0x58004000
 80004a4:	08004f22 	.word	0x08004f22

080004a8 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 80004a8:	680b      	ldr	r3, [r1, #0]
 80004aa:	3301      	adds	r3, #1
 80004ac:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 80004ae:	4b01      	ldr	r3, [pc, #4]	; (80004b4 <char_out+0xc>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4718      	bx	r3
 80004b4:	20000000 	.word	0x20000000

080004b8 <__printk_hook_install>:
	_char_out = fn;
 80004b8:	4b01      	ldr	r3, [pc, #4]	; (80004c0 <__printk_hook_install+0x8>)
 80004ba:	6018      	str	r0, [r3, #0]
}
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	20000000 	.word	0x20000000

080004c4 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
 80004c4:	b507      	push	{r0, r1, r2, lr}
 80004c6:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
 80004c8:	2100      	movs	r1, #0
{
 80004ca:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
 80004cc:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
 80004ce:	4803      	ldr	r0, [pc, #12]	; (80004dc <vprintk+0x18>)
 80004d0:	a901      	add	r1, sp, #4
 80004d2:	f000 f879 	bl	80005c8 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
 80004d6:	b003      	add	sp, #12
 80004d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80004dc:	080004a9 	.word	0x080004a9

080004e0 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
 80004e4:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
 80004e8:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
 80004ea:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
 80004ec:	a901      	add	r1, sp, #4
 80004ee:	4805      	ldr	r0, [pc, #20]	; (8000504 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
 80004f0:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
 80004f2:	f000 f869 	bl	80005c8 <cbvprintf>

	if (ctx.count < ctx.max) {
 80004f6:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 80004fa:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
 80004fc:	bfb8      	it	lt
 80004fe:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
 8000500:	b005      	add	sp, #20
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	080039b1 	.word	0x080039b1

08000508 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
 8000508:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
 800050a:	4e08      	ldr	r6, [pc, #32]	; (800052c <extract_decimal+0x24>)
 800050c:	6802      	ldr	r2, [r0, #0]
{
 800050e:	4603      	mov	r3, r0
		val = 10U * val + *sp++ - '0';
 8000510:	270a      	movs	r7, #10
	size_t val = 0;
 8000512:	2000      	movs	r0, #0
 8000514:	4611      	mov	r1, r2
	while (isdigit((int)(unsigned char)*sp)) {
 8000516:	3201      	adds	r2, #1
 8000518:	780c      	ldrb	r4, [r1, #0]
 800051a:	5da5      	ldrb	r5, [r4, r6]
 800051c:	076d      	lsls	r5, r5, #29
 800051e:	d401      	bmi.n	8000524 <extract_decimal+0x1c>
	}
	*str = sp;
 8000520:	6019      	str	r1, [r3, #0]
	return val;
}
 8000522:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
 8000524:	fb07 4000 	mla	r0, r7, r0, r4
 8000528:	3830      	subs	r0, #48	; 0x30
 800052a:	e7f3      	b.n	8000514 <extract_decimal+0xc>
 800052c:	080056a8 	.word	0x080056a8

08000530 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
 8000530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000534:	4615      	mov	r5, r2
 8000536:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 8000538:	78d3      	ldrb	r3, [r2, #3]
 800053a:	4a22      	ldr	r2, [pc, #136]	; (80005c4 <encode_uint+0x94>)
 800053c:	f813 b002 	ldrb.w	fp, [r3, r2]
	switch (specifier) {
 8000540:	2b6f      	cmp	r3, #111	; 0x6f
{
 8000542:	4680      	mov	r8, r0
 8000544:	460f      	mov	r7, r1
 8000546:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
 800054a:	d029      	beq.n	80005a0 <encode_uint+0x70>
 800054c:	d824      	bhi.n	8000598 <encode_uint+0x68>
		return 16;
 800054e:	2b58      	cmp	r3, #88	; 0x58
 8000550:	bf14      	ite	ne
 8000552:	260a      	movne	r6, #10
 8000554:	2610      	moveq	r6, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
 8000556:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
 800055a:	4632      	mov	r2, r6
 800055c:	2300      	movs	r3, #0
 800055e:	4640      	mov	r0, r8
 8000560:	4639      	mov	r1, r7
 8000562:	f7ff fde9 	bl	8000138 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
 8000566:	2a09      	cmp	r2, #9
 8000568:	b2d4      	uxtb	r4, r2
 800056a:	d81e      	bhi.n	80005aa <encode_uint+0x7a>
 800056c:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
 800056e:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8000570:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 8000572:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8000576:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 800057a:	d301      	bcc.n	8000580 <encode_uint+0x50>
 800057c:	45d1      	cmp	r9, sl
 800057e:	d811      	bhi.n	80005a4 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
 8000580:	782b      	ldrb	r3, [r5, #0]
 8000582:	069b      	lsls	r3, r3, #26
 8000584:	d505      	bpl.n	8000592 <encode_uint+0x62>
		if (radix == 8) {
 8000586:	2e08      	cmp	r6, #8
 8000588:	d115      	bne.n	80005b6 <encode_uint+0x86>
			conv->altform_0 = true;
 800058a:	78ab      	ldrb	r3, [r5, #2]
 800058c:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
 8000590:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
 8000592:	4648      	mov	r0, r9
 8000594:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 8000598:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
 800059c:	2b70      	cmp	r3, #112	; 0x70
 800059e:	e7d7      	b.n	8000550 <encode_uint+0x20>
	switch (specifier) {
 80005a0:	2608      	movs	r6, #8
 80005a2:	e7d8      	b.n	8000556 <encode_uint+0x26>
		value /= radix;
 80005a4:	4680      	mov	r8, r0
 80005a6:	460f      	mov	r7, r1
 80005a8:	e7d7      	b.n	800055a <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80005aa:	f1bb 0f01 	cmp.w	fp, #1
 80005ae:	bf0c      	ite	eq
 80005b0:	3437      	addeq	r4, #55	; 0x37
 80005b2:	3457      	addne	r4, #87	; 0x57
 80005b4:	e7db      	b.n	800056e <encode_uint+0x3e>
		} else if (radix == 16) {
 80005b6:	2e10      	cmp	r6, #16
 80005b8:	d1eb      	bne.n	8000592 <encode_uint+0x62>
			conv->altform_0c = true;
 80005ba:	78ab      	ldrb	r3, [r5, #2]
 80005bc:	f043 0310 	orr.w	r3, r3, #16
 80005c0:	e7e6      	b.n	8000590 <encode_uint+0x60>
 80005c2:	bf00      	nop
 80005c4:	080056a8 	.word	0x080056a8

080005c8 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 80005c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005cc:	4682      	mov	sl, r0
 80005ce:	b093      	sub	sp, #76	; 0x4c
 80005d0:	468b      	mov	fp, r1
 80005d2:	4691      	mov	r9, r2
 80005d4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 80005d6:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 80005d8:	f899 0000 	ldrb.w	r0, [r9]
 80005dc:	b908      	cbnz	r0, 80005e2 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
 80005de:	4628      	mov	r0, r5
 80005e0:	e33d      	b.n	8000c5e <cbvprintf+0x696>
			OUTC(*fp++);
 80005e2:	f109 0301 	add.w	r3, r9, #1
		if (*fp != '%') {
 80005e6:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 80005e8:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
 80005ea:	d006      	beq.n	80005fa <cbvprintf+0x32>
			OUTC('%');
 80005ec:	4659      	mov	r1, fp
 80005ee:	47d0      	blx	sl
 80005f0:	2800      	cmp	r0, #0
 80005f2:	f2c0 8334 	blt.w	8000c5e <cbvprintf+0x696>
 80005f6:	3501      	adds	r5, #1
			break;
 80005f8:	e1f5      	b.n	80009e6 <cbvprintf+0x41e>
		} state = {
 80005fa:	2218      	movs	r2, #24
 80005fc:	2100      	movs	r1, #0
 80005fe:	a80c      	add	r0, sp, #48	; 0x30
 8000600:	f004 f9e2 	bl	80049c8 <memset>
	if (*sp == '%') {
 8000604:	f899 3001 	ldrb.w	r3, [r9, #1]
 8000608:	2b25      	cmp	r3, #37	; 0x25
 800060a:	d05a      	beq.n	80006c2 <cbvprintf+0xfa>
 800060c:	f109 0201 	add.w	r2, r9, #1
 8000610:	4616      	mov	r6, r2
		switch (*sp) {
 8000612:	f812 3b01 	ldrb.w	r3, [r2], #1
 8000616:	2b2b      	cmp	r3, #43	; 0x2b
 8000618:	f000 808b 	beq.w	8000732 <cbvprintf+0x16a>
 800061c:	d879      	bhi.n	8000712 <cbvprintf+0x14a>
 800061e:	2b20      	cmp	r3, #32
 8000620:	f000 808c 	beq.w	800073c <cbvprintf+0x174>
 8000624:	2b23      	cmp	r3, #35	; 0x23
 8000626:	f000 808e 	beq.w	8000746 <cbvprintf+0x17e>
	if (conv->flag_zero && conv->flag_dash) {
 800062a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800062e:	f003 0244 	and.w	r2, r3, #68	; 0x44
 8000632:	2a44      	cmp	r2, #68	; 0x44
 8000634:	d103      	bne.n	800063e <cbvprintf+0x76>
		conv->flag_zero = false;
 8000636:	f36f 1386 	bfc	r3, #6, #1
 800063a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
 800063e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8000642:	9605      	str	r6, [sp, #20]
 8000644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000648:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
 800064c:	7833      	ldrb	r3, [r6, #0]
 800064e:	2b2a      	cmp	r3, #42	; 0x2a
 8000650:	d17e      	bne.n	8000750 <cbvprintf+0x188>
		conv->width_star = true;
 8000652:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8000656:	f043 0301 	orr.w	r3, r3, #1
 800065a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
 800065e:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
 8000660:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
 8000662:	781a      	ldrb	r2, [r3, #0]
 8000664:	2a2e      	cmp	r2, #46	; 0x2e
 8000666:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 800066a:	bf0c      	ite	eq
 800066c:	2101      	moveq	r1, #1
 800066e:	2100      	movne	r1, #0
 8000670:	f361 0241 	bfi	r2, r1, #1, #1
 8000674:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
 8000678:	d10b      	bne.n	8000692 <cbvprintf+0xca>
	++sp;
 800067a:	1c5a      	adds	r2, r3, #1
 800067c:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
 800067e:	785a      	ldrb	r2, [r3, #1]
 8000680:	2a2a      	cmp	r2, #42	; 0x2a
 8000682:	d17b      	bne.n	800077c <cbvprintf+0x1b4>
		conv->prec_star = true;
 8000684:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8000688:	f042 0204 	orr.w	r2, r2, #4
 800068c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
 8000690:	3302      	adds	r3, #2
	switch (*sp) {
 8000692:	4619      	mov	r1, r3
 8000694:	f811 0b01 	ldrb.w	r0, [r1], #1
 8000698:	286c      	cmp	r0, #108	; 0x6c
 800069a:	f000 80b6 	beq.w	800080a <cbvprintf+0x242>
 800069e:	d87d      	bhi.n	800079c <cbvprintf+0x1d4>
 80006a0:	2868      	cmp	r0, #104	; 0x68
 80006a2:	f000 8084 	beq.w	80007ae <cbvprintf+0x1e6>
 80006a6:	286a      	cmp	r0, #106	; 0x6a
 80006a8:	f000 80b9 	beq.w	800081e <cbvprintf+0x256>
 80006ac:	284c      	cmp	r0, #76	; 0x4c
 80006ae:	f000 80bd 	beq.w	800082c <cbvprintf+0x264>
		conv->length_mod = LENGTH_NONE;
 80006b2:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 80006b6:	f36f 02c6 	bfc	r2, #3, #4
 80006ba:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
 80006be:	4619      	mov	r1, r3
 80006c0:	e080      	b.n	80007c4 <cbvprintf+0x1fc>
		conv->specifier = *sp++;
 80006c2:	f109 0202 	add.w	r2, r9, #2
 80006c6:	9202      	str	r2, [sp, #8]
 80006c8:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
 80006cc:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 80006d0:	07d9      	lsls	r1, r3, #31
 80006d2:	f140 814a 	bpl.w	800096a <cbvprintf+0x3a2>
			width = va_arg(ap, int);
 80006d6:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
 80006da:	f1b8 0f00 	cmp.w	r8, #0
 80006de:	da07      	bge.n	80006f0 <cbvprintf+0x128>
				conv->flag_dash = true;
 80006e0:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80006e4:	f042 0204 	orr.w	r2, r2, #4
 80006e8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
 80006ec:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
 80006f0:	075a      	lsls	r2, r3, #29
 80006f2:	f140 8143 	bpl.w	800097c <cbvprintf+0x3b4>
			int arg = va_arg(ap, int);
 80006f6:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
 80006fa:	2f00      	cmp	r7, #0
 80006fc:	f280 8142 	bge.w	8000984 <cbvprintf+0x3bc>
				conv->prec_present = false;
 8000700:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8000704:	f36f 0341 	bfc	r3, #1, #1
 8000708:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
 800070c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000710:	e138      	b.n	8000984 <cbvprintf+0x3bc>
		switch (*sp) {
 8000712:	2b2d      	cmp	r3, #45	; 0x2d
 8000714:	d006      	beq.n	8000724 <cbvprintf+0x15c>
 8000716:	2b30      	cmp	r3, #48	; 0x30
 8000718:	d187      	bne.n	800062a <cbvprintf+0x62>
			conv->flag_zero = true;
 800071a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800071e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000722:	e003      	b.n	800072c <cbvprintf+0x164>
			conv->flag_dash = true;
 8000724:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8000728:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
 800072c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
 8000730:	e76e      	b.n	8000610 <cbvprintf+0x48>
			conv->flag_plus = true;
 8000732:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8000736:	f043 0308 	orr.w	r3, r3, #8
 800073a:	e7f7      	b.n	800072c <cbvprintf+0x164>
			conv->flag_space = true;
 800073c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8000740:	f043 0310 	orr.w	r3, r3, #16
 8000744:	e7f2      	b.n	800072c <cbvprintf+0x164>
			conv->flag_hash = true;
 8000746:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800074a:	f043 0320 	orr.w	r3, r3, #32
 800074e:	e7ed      	b.n	800072c <cbvprintf+0x164>
	size_t width = extract_decimal(&sp);
 8000750:	a805      	add	r0, sp, #20
 8000752:	f7ff fed9 	bl	8000508 <extract_decimal>
	if (sp != wp) {
 8000756:	9b05      	ldr	r3, [sp, #20]
 8000758:	42b3      	cmp	r3, r6
 800075a:	d081      	beq.n	8000660 <cbvprintf+0x98>
		conv->unsupported |= ((conv->width_value < 0)
 800075c:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
 8000760:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
 8000762:	f3c1 0240 	ubfx	r2, r1, #1, #1
 8000766:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
 800076a:	0052      	lsls	r2, r2, #1
 800076c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000770:	f001 017d 	and.w	r1, r1, #125	; 0x7d
 8000774:	430a      	orrs	r2, r1
 8000776:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 800077a:	e771      	b.n	8000660 <cbvprintf+0x98>
	size_t prec = extract_decimal(&sp);
 800077c:	a805      	add	r0, sp, #20
 800077e:	f7ff fec3 	bl	8000508 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
 8000782:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
 8000786:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
 8000788:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800078c:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
 8000790:	f360 0341 	bfi	r3, r0, #1, #1
 8000794:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
 8000798:	9b05      	ldr	r3, [sp, #20]
 800079a:	e77a      	b.n	8000692 <cbvprintf+0xca>
	switch (*sp) {
 800079c:	2874      	cmp	r0, #116	; 0x74
 800079e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 80007a2:	d040      	beq.n	8000826 <cbvprintf+0x25e>
 80007a4:	287a      	cmp	r0, #122	; 0x7a
 80007a6:	d184      	bne.n	80006b2 <cbvprintf+0xea>
		conv->length_mod = LENGTH_Z;
 80007a8:	4613      	mov	r3, r2
 80007aa:	2206      	movs	r2, #6
 80007ac:	e028      	b.n	8000800 <cbvprintf+0x238>
		if (*++sp == 'h') {
 80007ae:	785a      	ldrb	r2, [r3, #1]
 80007b0:	2a68      	cmp	r2, #104	; 0x68
 80007b2:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 80007b6:	d121      	bne.n	80007fc <cbvprintf+0x234>
			conv->length_mod = LENGTH_HH;
 80007b8:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 80007ba:	f361 02c6 	bfi	r2, r1, #3, #4
 80007be:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
 80007c2:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
 80007c4:	460b      	mov	r3, r1
 80007c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80007ca:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
 80007cc:	2a78      	cmp	r2, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
 80007ce:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	conv->specifier = *sp++;
 80007d2:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
 80007d6:	f200 80c0 	bhi.w	800095a <cbvprintf+0x392>
 80007da:	2a57      	cmp	r2, #87	; 0x57
 80007dc:	d833      	bhi.n	8000846 <cbvprintf+0x27e>
 80007de:	2a41      	cmp	r2, #65	; 0x41
 80007e0:	d003      	beq.n	80007ea <cbvprintf+0x222>
 80007e2:	3a45      	subs	r2, #69	; 0x45
 80007e4:	2a02      	cmp	r2, #2
 80007e6:	f200 80b8 	bhi.w	800095a <cbvprintf+0x392>
		conv->specifier_cat = SPECIFIER_FP;
 80007ea:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 80007ee:	2204      	movs	r2, #4
 80007f0:	f362 0302 	bfi	r3, r2, #0, #3
 80007f4:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
 80007f8:	2301      	movs	r3, #1
			break;
 80007fa:	e085      	b.n	8000908 <cbvprintf+0x340>
			conv->length_mod = LENGTH_H;
 80007fc:	4613      	mov	r3, r2
 80007fe:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
 8000800:	f362 03c6 	bfi	r3, r2, #3, #4
 8000804:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 8000808:	e7dc      	b.n	80007c4 <cbvprintf+0x1fc>
		if (*++sp == 'l') {
 800080a:	785a      	ldrb	r2, [r3, #1]
 800080c:	2a6c      	cmp	r2, #108	; 0x6c
 800080e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8000812:	d101      	bne.n	8000818 <cbvprintf+0x250>
			conv->length_mod = LENGTH_LL;
 8000814:	2104      	movs	r1, #4
 8000816:	e7d0      	b.n	80007ba <cbvprintf+0x1f2>
			conv->length_mod = LENGTH_L;
 8000818:	4613      	mov	r3, r2
 800081a:	2203      	movs	r2, #3
 800081c:	e7f0      	b.n	8000800 <cbvprintf+0x238>
		conv->length_mod = LENGTH_J;
 800081e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8000822:	2205      	movs	r2, #5
 8000824:	e7ec      	b.n	8000800 <cbvprintf+0x238>
		conv->length_mod = LENGTH_T;
 8000826:	4613      	mov	r3, r2
 8000828:	2207      	movs	r2, #7
 800082a:	e7e9      	b.n	8000800 <cbvprintf+0x238>
		conv->unsupported = true;
 800082c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8000830:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8000834:	f023 0302 	bic.w	r3, r3, #2
 8000838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
 8000844:	e7be      	b.n	80007c4 <cbvprintf+0x1fc>
 8000846:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
 800084a:	2920      	cmp	r1, #32
 800084c:	f200 8085 	bhi.w	800095a <cbvprintf+0x392>
 8000850:	a001      	add	r0, pc, #4	; (adr r0, 8000858 <cbvprintf+0x290>)
 8000852:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8000856:	bf00      	nop
 8000858:	0800091d 	.word	0x0800091d
 800085c:	0800095b 	.word	0x0800095b
 8000860:	0800095b 	.word	0x0800095b
 8000864:	0800095b 	.word	0x0800095b
 8000868:	0800095b 	.word	0x0800095b
 800086c:	0800095b 	.word	0x0800095b
 8000870:	0800095b 	.word	0x0800095b
 8000874:	0800095b 	.word	0x0800095b
 8000878:	0800095b 	.word	0x0800095b
 800087c:	080007eb 	.word	0x080007eb
 8000880:	0800095b 	.word	0x0800095b
 8000884:	0800091d 	.word	0x0800091d
 8000888:	080008dd 	.word	0x080008dd
 800088c:	080007eb 	.word	0x080007eb
 8000890:	080007eb 	.word	0x080007eb
 8000894:	080007eb 	.word	0x080007eb
 8000898:	0800095b 	.word	0x0800095b
 800089c:	080008dd 	.word	0x080008dd
 80008a0:	0800095b 	.word	0x0800095b
 80008a4:	0800095b 	.word	0x0800095b
 80008a8:	0800095b 	.word	0x0800095b
 80008ac:	0800095b 	.word	0x0800095b
 80008b0:	08000925 	.word	0x08000925
 80008b4:	0800091d 	.word	0x0800091d
 80008b8:	08000941 	.word	0x08000941
 80008bc:	0800095b 	.word	0x0800095b
 80008c0:	0800095b 	.word	0x0800095b
 80008c4:	08000941 	.word	0x08000941
 80008c8:	0800095b 	.word	0x0800095b
 80008cc:	0800091d 	.word	0x0800091d
 80008d0:	0800095b 	.word	0x0800095b
 80008d4:	0800095b 	.word	0x0800095b
 80008d8:	0800091d 	.word	0x0800091d
		conv->specifier_cat = SPECIFIER_SINT;
 80008dc:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
 80008e0:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
 80008e2:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 80008e6:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 80008ea:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 80008ec:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
 80008f0:	bf02      	ittt	eq
 80008f2:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
 80008f6:	f041 0101 	orreq.w	r1, r1, #1
 80008fa:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
 80008fe:	2a63      	cmp	r2, #99	; 0x63
 8000900:	d131      	bne.n	8000966 <cbvprintf+0x39e>
			unsupported = (conv->length_mod != LENGTH_NONE);
 8000902:	3b00      	subs	r3, #0
 8000904:	bf18      	it	ne
 8000906:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
 8000908:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800090c:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8000910:	430b      	orrs	r3, r1
 8000912:	f363 0241 	bfi	r2, r3, #1, #1
 8000916:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
 800091a:	e6d7      	b.n	80006cc <cbvprintf+0x104>
		conv->specifier_cat = SPECIFIER_UINT;
 800091c:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
 8000920:	2002      	movs	r0, #2
 8000922:	e7de      	b.n	80008e2 <cbvprintf+0x31a>
		conv->specifier_cat = SPECIFIER_PTR;
 8000924:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000928:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800092c:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
 8000930:	2103      	movs	r1, #3
 8000932:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000936:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
 8000938:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
 800093c:	4143      	adcs	r3, r0
 800093e:	e7e3      	b.n	8000908 <cbvprintf+0x340>
		conv->specifier_cat = SPECIFIER_PTR;
 8000940:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8000944:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
 8000946:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 800094a:	f361 0202 	bfi	r2, r1, #0, #3
 800094e:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
 8000952:	bf14      	ite	ne
 8000954:	2301      	movne	r3, #1
 8000956:	2300      	moveq	r3, #0
 8000958:	e7d6      	b.n	8000908 <cbvprintf+0x340>
		conv->invalid = true;
 800095a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800095e:	f043 0301 	orr.w	r3, r3, #1
 8000962:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
 8000966:	2300      	movs	r3, #0
 8000968:	e7ce      	b.n	8000908 <cbvprintf+0x340>
		} else if (conv->width_present) {
 800096a:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
 800096e:	2a00      	cmp	r2, #0
			width = conv->width_value;
 8000970:	bfb4      	ite	lt
 8000972:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
		int width = -1;
 8000976:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
 800097a:	e6b9      	b.n	80006f0 <cbvprintf+0x128>
		} else if (conv->prec_present) {
 800097c:	079f      	lsls	r7, r3, #30
 800097e:	f57f aec5 	bpl.w	800070c <cbvprintf+0x144>
			precision = conv->prec_value;
 8000982:	9f10      	ldr	r7, [sp, #64]	; 0x40
			= (enum length_mod_enum)conv->length_mod;
 8000984:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->pad0_value = 0;
 8000988:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 800098a:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
 800098e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		enum specifier_cat_enum specifier_cat
 8000992:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 8000996:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 8000998:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 800099c:	d139      	bne.n	8000a12 <cbvprintf+0x44a>
			switch (length_mod) {
 800099e:	1ecb      	subs	r3, r1, #3
 80009a0:	2b04      	cmp	r3, #4
 80009a2:	d823      	bhi.n	80009ec <cbvprintf+0x424>
 80009a4:	e8df f003 	tbb	[pc, r3]
 80009a8:	22090903 	.word	0x22090903
 80009ac:	22          	.byte	0x22
 80009ad:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
 80009ae:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
 80009b2:	17da      	asrs	r2, r3, #31
 80009b4:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
 80009b8:	e006      	b.n	80009c8 <cbvprintf+0x400>
					(sint_value_type)va_arg(ap, intmax_t);
 80009ba:	3407      	adds	r4, #7
 80009bc:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
 80009c0:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 80009c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
 80009c8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80009cc:	f013 0603 	ands.w	r6, r3, #3
 80009d0:	d057      	beq.n	8000a82 <cbvprintf+0x4ba>
			OUTS(sp, fp);
 80009d2:	9b02      	ldr	r3, [sp, #8]
 80009d4:	464a      	mov	r2, r9
 80009d6:	4659      	mov	r1, fp
 80009d8:	4650      	mov	r0, sl
 80009da:	f003 f820 	bl	8003a1e <outs>
 80009de:	2800      	cmp	r0, #0
 80009e0:	f2c0 813d 	blt.w	8000c5e <cbvprintf+0x696>
 80009e4:	4405      	add	r5, r0
			OUTS(bps, bpe);
 80009e6:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80009ea:	e5f5      	b.n	80005d8 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 80009ec:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 80009f0:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
 80009f2:	ea4f 72e3 	mov.w	r2, r3, asr #31
 80009f6:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
 80009fa:	d105      	bne.n	8000a08 <cbvprintf+0x440>
				value->uint = (unsigned char)value->uint;
 80009fc:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
 8000a00:	930c      	str	r3, [sp, #48]	; 0x30
 8000a02:	2300      	movs	r3, #0
 8000a04:	930d      	str	r3, [sp, #52]	; 0x34
 8000a06:	e7df      	b.n	80009c8 <cbvprintf+0x400>
			} else if (length_mod == LENGTH_H) {
 8000a08:	2902      	cmp	r1, #2
 8000a0a:	d1dd      	bne.n	80009c8 <cbvprintf+0x400>
				value->sint = (short)value->sint;
 8000a0c:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8000a10:	e7cf      	b.n	80009b2 <cbvprintf+0x3ea>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8000a12:	2b02      	cmp	r3, #2
 8000a14:	d123      	bne.n	8000a5e <cbvprintf+0x496>
			switch (length_mod) {
 8000a16:	1ecb      	subs	r3, r1, #3
 8000a18:	2b04      	cmp	r3, #4
 8000a1a:	d813      	bhi.n	8000a44 <cbvprintf+0x47c>
 8000a1c:	e8df f003 	tbb	[pc, r3]
 8000a20:	120a0a03 	.word	0x120a0a03
 8000a24:	12          	.byte	0x12
 8000a25:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
 8000a26:	6822      	ldr	r2, [r4, #0]
 8000a28:	920c      	str	r2, [sp, #48]	; 0x30
 8000a2a:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
 8000a2c:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
 8000a2e:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
 8000a30:	4604      	mov	r4, r0
 8000a32:	e7c9      	b.n	80009c8 <cbvprintf+0x400>
					(uint_value_type)va_arg(ap,
 8000a34:	1de0      	adds	r0, r4, #7
 8000a36:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
 8000a3a:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 8000a3e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
 8000a42:	e7f5      	b.n	8000a30 <cbvprintf+0x468>
					(uint_value_type)va_arg(ap, size_t);
 8000a44:	f854 3b04 	ldr.w	r3, [r4], #4
 8000a48:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
 8000a4a:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
 8000a4c:	f04f 0300 	mov.w	r3, #0
 8000a50:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
 8000a52:	d0d3      	beq.n	80009fc <cbvprintf+0x434>
			} else if (length_mod == LENGTH_H) {
 8000a54:	2902      	cmp	r1, #2
 8000a56:	d1b7      	bne.n	80009c8 <cbvprintf+0x400>
				value->uint = (unsigned short)value->uint;
 8000a58:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8000a5c:	e7d0      	b.n	8000a00 <cbvprintf+0x438>
		} else if (specifier_cat == SPECIFIER_FP) {
 8000a5e:	2b04      	cmp	r3, #4
 8000a60:	d109      	bne.n	8000a76 <cbvprintf+0x4ae>
					(sint_value_type)va_arg(ap, long long);
 8000a62:	1de3      	adds	r3, r4, #7
 8000a64:	f023 0307 	bic.w	r3, r3, #7
 8000a68:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
 8000a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a70:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8000a74:	e7a8      	b.n	80009c8 <cbvprintf+0x400>
		} else if (specifier_cat == SPECIFIER_PTR) {
 8000a76:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
 8000a78:	bf04      	itt	eq
 8000a7a:	f854 3b04 	ldreq.w	r3, [r4], #4
 8000a7e:	930c      	streq	r3, [sp, #48]	; 0x30
 8000a80:	e7a2      	b.n	80009c8 <cbvprintf+0x400>
		switch (conv->specifier) {
 8000a82:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
 8000a86:	2878      	cmp	r0, #120	; 0x78
 8000a88:	d8ad      	bhi.n	80009e6 <cbvprintf+0x41e>
 8000a8a:	2862      	cmp	r0, #98	; 0x62
 8000a8c:	d820      	bhi.n	8000ad0 <cbvprintf+0x508>
 8000a8e:	2825      	cmp	r0, #37	; 0x25
 8000a90:	f43f adac 	beq.w	80005ec <cbvprintf+0x24>
 8000a94:	2858      	cmp	r0, #88	; 0x58
 8000a96:	d1a6      	bne.n	80009e6 <cbvprintf+0x41e>
			bps = encode_uint(value->uint, conv, buf, bpe);
 8000a98:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000aa2:	ab06      	add	r3, sp, #24
 8000aa4:	aa0e      	add	r2, sp, #56	; 0x38
 8000aa6:	f7ff fd43 	bl	8000530 <encode_uint>
 8000aaa:	4681      	mov	r9, r0
			if (precision >= 0) {
 8000aac:	2f00      	cmp	r7, #0
 8000aae:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
 8000ab2:	db0b      	blt.n	8000acc <cbvprintf+0x504>
				conv->flag_zero = false;
 8000ab4:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
 8000ab8:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
 8000abc:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 8000ac0:	429f      	cmp	r7, r3
				conv->flag_zero = false;
 8000ac2:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
 8000ac6:	d901      	bls.n	8000acc <cbvprintf+0x504>
					conv->pad0_value = precision - (int)len;
 8000ac8:	1afb      	subs	r3, r7, r3
 8000aca:	930f      	str	r3, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
 8000acc:	4607      	mov	r7, r0
 8000ace:	e03c      	b.n	8000b4a <cbvprintf+0x582>
 8000ad0:	3863      	subs	r0, #99	; 0x63
 8000ad2:	2815      	cmp	r0, #21
 8000ad4:	d887      	bhi.n	80009e6 <cbvprintf+0x41e>
 8000ad6:	a201      	add	r2, pc, #4	; (adr r2, 8000adc <cbvprintf+0x514>)
 8000ad8:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 8000adc:	08000b5b 	.word	0x08000b5b
 8000ae0:	08000bbd 	.word	0x08000bbd
 8000ae4:	080009e7 	.word	0x080009e7
 8000ae8:	080009e7 	.word	0x080009e7
 8000aec:	080009e7 	.word	0x080009e7
 8000af0:	080009e7 	.word	0x080009e7
 8000af4:	08000bbd 	.word	0x08000bbd
 8000af8:	080009e7 	.word	0x080009e7
 8000afc:	080009e7 	.word	0x080009e7
 8000b00:	080009e7 	.word	0x080009e7
 8000b04:	080009e7 	.word	0x080009e7
 8000b08:	08000c17 	.word	0x08000c17
 8000b0c:	08000be5 	.word	0x08000be5
 8000b10:	08000be9 	.word	0x08000be9
 8000b14:	080009e7 	.word	0x080009e7
 8000b18:	080009e7 	.word	0x080009e7
 8000b1c:	08000b35 	.word	0x08000b35
 8000b20:	080009e7 	.word	0x080009e7
 8000b24:	08000be5 	.word	0x08000be5
 8000b28:	080009e7 	.word	0x080009e7
 8000b2c:	080009e7 	.word	0x080009e7
 8000b30:	08000be5 	.word	0x08000be5
			if (precision >= 0) {
 8000b34:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
 8000b36:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
 8000b3a:	db0a      	blt.n	8000b52 <cbvprintf+0x58a>
				len = strnlen(bps, precision);
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	4648      	mov	r0, r9
 8000b40:	f003 ff5d 	bl	80049fe <strnlen>
			bpe = bps + len;
 8000b44:	eb09 0700 	add.w	r7, r9, r0
		char sign = 0;
 8000b48:	2600      	movs	r6, #0
		if (bps == NULL) {
 8000b4a:	f1b9 0f00 	cmp.w	r9, #0
 8000b4e:	d10c      	bne.n	8000b6a <cbvprintf+0x5a2>
 8000b50:	e749      	b.n	80009e6 <cbvprintf+0x41e>
				len = strlen(bps);
 8000b52:	4648      	mov	r0, r9
 8000b54:	f7ff fc7c 	bl	8000450 <strlen>
 8000b58:	e7f4      	b.n	8000b44 <cbvprintf+0x57c>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8000b5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000b5c:	f88d 3018 	strb.w	r3, [sp, #24]
			break;
 8000b60:	2600      	movs	r6, #0
			bpe = buf + 1;
 8000b62:	f10d 0719 	add.w	r7, sp, #25
			bps = buf;
 8000b66:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
 8000b6a:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
 8000b6e:	b106      	cbz	r6, 8000b72 <cbvprintf+0x5aa>
			nj_len += 1U;
 8000b70:	3301      	adds	r3, #1
		if (conv->altform_0c) {
 8000b72:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8000b76:	06d0      	lsls	r0, r2, #27
 8000b78:	d566      	bpl.n	8000c48 <cbvprintf+0x680>
			nj_len += 2U;
 8000b7a:	3302      	adds	r3, #2
		if (conv->pad_fp) {
 8000b7c:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
 8000b7e:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
 8000b80:	bf48      	it	mi
 8000b82:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
 8000b84:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
 8000b86:	bf48      	it	mi
 8000b88:	189b      	addmi	r3, r3, r2
		if (width > 0) {
 8000b8a:	f1b8 0f00 	cmp.w	r8, #0
 8000b8e:	dd73      	ble.n	8000c78 <cbvprintf+0x6b0>
			if (!conv->flag_dash) {
 8000b90:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
 8000b94:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
 8000b98:	f3c2 0380 	ubfx	r3, r2, #2, #1
 8000b9c:	9303      	str	r3, [sp, #12]
 8000b9e:	0753      	lsls	r3, r2, #29
 8000ba0:	d46a      	bmi.n	8000c78 <cbvprintf+0x6b0>
				if (conv->flag_zero) {
 8000ba2:	0650      	lsls	r0, r2, #25
 8000ba4:	d55e      	bpl.n	8000c64 <cbvprintf+0x69c>
					if (sign != 0) {
 8000ba6:	b13e      	cbz	r6, 8000bb8 <cbvprintf+0x5f0>
						OUTC(sign);
 8000ba8:	4659      	mov	r1, fp
 8000baa:	4630      	mov	r0, r6
 8000bac:	47d0      	blx	sl
 8000bae:	2800      	cmp	r0, #0
 8000bb0:	db55      	blt.n	8000c5e <cbvprintf+0x696>
						sign = 0;
 8000bb2:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
 8000bb4:	3501      	adds	r5, #1
						sign = 0;
 8000bb6:	461e      	mov	r6, r3
					pad = '0';
 8000bb8:	2330      	movs	r3, #48	; 0x30
 8000bba:	e054      	b.n	8000c66 <cbvprintf+0x69e>
			if (conv->flag_plus) {
 8000bbc:	071e      	lsls	r6, r3, #28
 8000bbe:	d40f      	bmi.n	8000be0 <cbvprintf+0x618>
				sign = ' ';
 8000bc0:	f013 0610 	ands.w	r6, r3, #16
 8000bc4:	bf18      	it	ne
 8000bc6:	2620      	movne	r6, #32
			sint = value->sint;
 8000bc8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	f6bf af63 	bge.w	8000a98 <cbvprintf+0x4d0>
				value->uint = (uint_value_type)-sint;
 8000bd2:	4252      	negs	r2, r2
 8000bd4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bd8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
 8000bdc:	262d      	movs	r6, #45	; 0x2d
 8000bde:	e75b      	b.n	8000a98 <cbvprintf+0x4d0>
				sign = '+';
 8000be0:	262b      	movs	r6, #43	; 0x2b
 8000be2:	e7f1      	b.n	8000bc8 <cbvprintf+0x600>
		switch (conv->specifier) {
 8000be4:	2600      	movs	r6, #0
 8000be6:	e757      	b.n	8000a98 <cbvprintf+0x4d0>
			if (value->ptr != NULL) {
 8000be8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000bea:	b340      	cbz	r0, 8000c3e <cbvprintf+0x676>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000bec:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	aa0e      	add	r2, sp, #56	; 0x38
 8000bf4:	ab06      	add	r3, sp, #24
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	f7ff fc9a 	bl	8000530 <encode_uint>
				conv->altform_0c = true;
 8000bfc:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8000c00:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8000c04:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8000c08:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000c0c:	4681      	mov	r9, r0
				conv->altform_0c = true;
 8000c0e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
 8000c12:	2600      	movs	r6, #0
				goto prec_int_pad0;
 8000c14:	e74a      	b.n	8000aac <cbvprintf+0x4e4>
				store_count(conv, value->ptr, count);
 8000c16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
 8000c18:	2907      	cmp	r1, #7
 8000c1a:	f63f aee4 	bhi.w	80009e6 <cbvprintf+0x41e>
 8000c1e:	e8df f001 	tbb	[pc, r1]
 8000c22:	040c      	.short	0x040c
 8000c24:	08080c06 	.word	0x08080c06
 8000c28:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
 8000c2a:	701d      	strb	r5, [r3, #0]
		break;
 8000c2c:	e6db      	b.n	80009e6 <cbvprintf+0x41e>
		*(short *)dp = (short)count;
 8000c2e:	801d      	strh	r5, [r3, #0]
		break;
 8000c30:	e6d9      	b.n	80009e6 <cbvprintf+0x41e>
		*(intmax_t *)dp = (intmax_t)count;
 8000c32:	17ea      	asrs	r2, r5, #31
 8000c34:	e9c3 5200 	strd	r5, r2, [r3]
		break;
 8000c38:	e6d5      	b.n	80009e6 <cbvprintf+0x41e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8000c3a:	601d      	str	r5, [r3, #0]
		break;
 8000c3c:	e6d3      	b.n	80009e6 <cbvprintf+0x41e>
			bpe = bps + 5;
 8000c3e:	4f2e      	ldr	r7, [pc, #184]	; (8000cf8 <cbvprintf+0x730>)
 8000c40:	4606      	mov	r6, r0
			bps = "(nil)";
 8000c42:	f1a7 0905 	sub.w	r9, r7, #5
 8000c46:	e790      	b.n	8000b6a <cbvprintf+0x5a2>
		} else if (conv->altform_0) {
 8000c48:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
 8000c4a:	bf48      	it	mi
 8000c4c:	3301      	addmi	r3, #1
 8000c4e:	e795      	b.n	8000b7c <cbvprintf+0x5b4>
					OUTC(pad);
 8000c50:	4618      	mov	r0, r3
 8000c52:	4659      	mov	r1, fp
 8000c54:	9303      	str	r3, [sp, #12]
 8000c56:	47d0      	blx	sl
 8000c58:	2800      	cmp	r0, #0
 8000c5a:	9b03      	ldr	r3, [sp, #12]
 8000c5c:	da04      	bge.n	8000c68 <cbvprintf+0x6a0>
#undef OUTS
#undef OUTC
}
 8000c5e:	b013      	add	sp, #76	; 0x4c
 8000c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 8000c64:	2320      	movs	r3, #32
 8000c66:	4445      	add	r5, r8
 8000c68:	4642      	mov	r2, r8
				while (width-- > 0) {
 8000c6a:	2a00      	cmp	r2, #0
 8000c6c:	eba5 0108 	sub.w	r1, r5, r8
 8000c70:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8000c74:	dcec      	bgt.n	8000c50 <cbvprintf+0x688>
 8000c76:	460d      	mov	r5, r1
		if (sign != 0) {
 8000c78:	b12e      	cbz	r6, 8000c86 <cbvprintf+0x6be>
			OUTC(sign);
 8000c7a:	4659      	mov	r1, fp
 8000c7c:	4630      	mov	r0, r6
 8000c7e:	47d0      	blx	sl
 8000c80:	2800      	cmp	r0, #0
 8000c82:	dbec      	blt.n	8000c5e <cbvprintf+0x696>
 8000c84:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 8000c86:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8000c8a:	06d9      	lsls	r1, r3, #27
 8000c8c:	d401      	bmi.n	8000c92 <cbvprintf+0x6ca>
 8000c8e:	071a      	lsls	r2, r3, #28
 8000c90:	d505      	bpl.n	8000c9e <cbvprintf+0x6d6>
				OUTC('0');
 8000c92:	4659      	mov	r1, fp
 8000c94:	2030      	movs	r0, #48	; 0x30
 8000c96:	47d0      	blx	sl
 8000c98:	2800      	cmp	r0, #0
 8000c9a:	dbe0      	blt.n	8000c5e <cbvprintf+0x696>
 8000c9c:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 8000c9e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8000ca2:	06db      	lsls	r3, r3, #27
 8000ca4:	d506      	bpl.n	8000cb4 <cbvprintf+0x6ec>
				OUTC(conv->specifier);
 8000ca6:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
 8000caa:	4659      	mov	r1, fp
 8000cac:	47d0      	blx	sl
 8000cae:	2800      	cmp	r0, #0
 8000cb0:	dbd5      	blt.n	8000c5e <cbvprintf+0x696>
 8000cb2:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8000cb4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8000cb6:	442e      	add	r6, r5
 8000cb8:	1b73      	subs	r3, r6, r5
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	dc15      	bgt.n	8000cea <cbvprintf+0x722>
			OUTS(bps, bpe);
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	464a      	mov	r2, r9
 8000cc2:	4659      	mov	r1, fp
 8000cc4:	4650      	mov	r0, sl
 8000cc6:	f002 feaa 	bl	8003a1e <outs>
 8000cca:	2800      	cmp	r0, #0
 8000ccc:	dbc7      	blt.n	8000c5e <cbvprintf+0x696>
 8000cce:	4405      	add	r5, r0
		while (width > 0) {
 8000cd0:	44a8      	add	r8, r5
 8000cd2:	eba8 0305 	sub.w	r3, r8, r5
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f77f ae85 	ble.w	80009e6 <cbvprintf+0x41e>
			OUTC(' ');
 8000cdc:	4659      	mov	r1, fp
 8000cde:	2020      	movs	r0, #32
 8000ce0:	47d0      	blx	sl
 8000ce2:	2800      	cmp	r0, #0
 8000ce4:	dbbb      	blt.n	8000c5e <cbvprintf+0x696>
 8000ce6:	3501      	adds	r5, #1
			--width;
 8000ce8:	e7f3      	b.n	8000cd2 <cbvprintf+0x70a>
				OUTC('0');
 8000cea:	4659      	mov	r1, fp
 8000cec:	2030      	movs	r0, #48	; 0x30
 8000cee:	47d0      	blx	sl
 8000cf0:	2800      	cmp	r0, #0
 8000cf2:	dbb4      	blt.n	8000c5e <cbvprintf+0x696>
 8000cf4:	3501      	adds	r5, #1
 8000cf6:	e7df      	b.n	8000cb8 <cbvprintf+0x6f0>
 8000cf8:	08004f50 	.word	0x08004f50

08000cfc <stm32wl_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8000cfc:	f04f 0210 	mov.w	r2, #16
 8000d00:	f3ef 8311 	mrs	r3, BASEPRI
 8000d04:	f382 8811 	msr	BASEPRI, r2
 8000d08:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8000d0c:	f383 8811 	msr	BASEPRI, r3
 8000d10:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 4 MHz from MSI */
	SystemCoreClock = 4000000;
 8000d14:	4b02      	ldr	r3, [pc, #8]	; (8000d20 <stm32wl_init+0x24>)
 8000d16:	4a03      	ldr	r2, [pc, #12]	; (8000d24 <stm32wl_init+0x28>)
 8000d18:	601a      	str	r2, [r3, #0]

	return 0;
}
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000028 	.word	0x20000028
 8000d24:	003d0900 	.word	0x003d0900

08000d28 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
 8000d28:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 8000d2a:	4910      	ldr	r1, [pc, #64]	; (8000d6c <enable_logger+0x44>)
 8000d2c:	4810      	ldr	r0, [pc, #64]	; (8000d70 <enable_logger+0x48>)
{
 8000d2e:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
 8000d30:	2200      	movs	r2, #0
 8000d32:	f003 fe11 	bl	8004958 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8000d36:	4d0f      	ldr	r5, [pc, #60]	; (8000d74 <enable_logger+0x4c>)
 8000d38:	490f      	ldr	r1, [pc, #60]	; (8000d78 <enable_logger+0x50>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000d42:	2400      	movs	r4, #0
 8000d44:	230e      	movs	r3, #14
 8000d46:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8000d4a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <enable_logger+0x54>)
 8000d50:	9400      	str	r4, [sp, #0]
 8000d52:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d56:	4628      	mov	r0, r5
 8000d58:	f002 f966 	bl	8003028 <z_impl_k_thread_create>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&thread, *(uintptr_t *)&str, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
 8000d5c:	4908      	ldr	r1, [pc, #32]	; (8000d80 <enable_logger+0x58>)
 8000d5e:	4628      	mov	r0, r5
 8000d60:	f003 fd06 	bl	8004770 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
 8000d64:	4620      	mov	r0, r4
 8000d66:	b009      	add	sp, #36	; 0x24
 8000d68:	bd30      	pop	{r4, r5, pc}
 8000d6a:	bf00      	nop
 8000d6c:	08000d85 	.word	0x08000d85
 8000d70:	20000120 	.word	0x20000120
 8000d74:	20000158 	.word	0x20000158
 8000d78:	200004a0 	.word	0x200004a0
 8000d7c:	08001145 	.word	0x08001145
 8000d80:	08004f51 	.word	0x08004f51

08000d84 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8000d84:	4801      	ldr	r0, [pc, #4]	; (8000d8c <log_process_thread_timer_expiry_fn+0x8>)
 8000d86:	f002 b9c7 	b.w	8003118 <z_impl_k_sem_give>
 8000d8a:	bf00      	nop
 8000d8c:	2000010c 	.word	0x2000010c

08000d90 <z_log_get_s_mask>:
{
 8000d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d92:	4605      	mov	r5, r0
		} else if (arm && isalpha((int)curr)) {
 8000d94:	4e0f      	ldr	r6, [pc, #60]	; (8000dd4 <z_log_get_s_mask+0x44>)
	uint32_t mask = 0U;
 8000d96:	2000      	movs	r0, #0
	uint32_t arg = 0U;
 8000d98:	4603      	mov	r3, r0
	bool arm = false;
 8000d9a:	4602      	mov	r2, r0
				mask |= BIT(arg);
 8000d9c:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
 8000d9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000da2:	b10c      	cbz	r4, 8000da8 <z_log_get_s_mask+0x18>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d300      	bcc.n	8000daa <z_log_get_s_mask+0x1a>
}
 8000da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
 8000daa:	2c25      	cmp	r4, #37	; 0x25
 8000dac:	d102      	bne.n	8000db4 <z_log_get_s_mask+0x24>
			arm = !arm;
 8000dae:	f082 0201 	eor.w	r2, r2, #1
 8000db2:	e7f4      	b.n	8000d9e <z_log_get_s_mask+0xe>
		} else if (arm && isalpha((int)curr)) {
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	d0f2      	beq.n	8000d9e <z_log_get_s_mask+0xe>
 8000db8:	f814 c006 	ldrb.w	ip, [r4, r6]
 8000dbc:	f01c 0f03 	tst.w	ip, #3
 8000dc0:	d0ed      	beq.n	8000d9e <z_log_get_s_mask+0xe>
			if (curr == 's') {
 8000dc2:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
 8000dc4:	bf04      	itt	eq
 8000dc6:	fa07 f203 	lsleq.w	r2, r7, r3
 8000dca:	4310      	orreq	r0, r2
			arg++;
 8000dcc:	3301      	adds	r3, #1
			arm = false;
 8000dce:	2200      	movs	r2, #0
 8000dd0:	e7e5      	b.n	8000d9e <z_log_get_s_mask+0xe>
 8000dd2:	bf00      	nop
 8000dd4:	080056a8 	.word	0x080056a8

08000dd8 <log_core_init>:
{
 8000dd8:	b510      	push	{r4, lr}
		timestamp_func = default_lf_get_timestamp;
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <log_core_init+0x2c>)
 8000ddc:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <log_core_init+0x30>)
 8000dde:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
 8000de0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000de4:	f000 fcc2 	bl	800176c <log_output_timestamp_freq_set>
		log_msg_pool_init();
 8000de8:	f000 fa70 	bl	80012cc <log_msg_pool_init>
		log_list_init(&list);
 8000dec:	4807      	ldr	r0, [pc, #28]	; (8000e0c <log_core_init+0x34>)
 8000dee:	f002 fe2d 	bl	8003a4c <log_list_init>
}
 8000df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
 8000df6:	4906      	ldr	r1, [pc, #24]	; (8000e10 <log_core_init+0x38>)
 8000df8:	4806      	ldr	r0, [pc, #24]	; (8000e14 <log_core_init+0x3c>)
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	2228      	movs	r2, #40	; 0x28
 8000dfe:	f003 bc73 	b.w	80046e8 <k_mem_slab_init>
 8000e02:	bf00      	nop
 8000e04:	20000004 	.word	0x20000004
 8000e08:	08003a8b 	.word	0x08003a8b
 8000e0c:	200002ec 	.word	0x200002ec
 8000e10:	20001960 	.word	0x20001960
 8000e14:	200002f4 	.word	0x200002f4

08000e18 <get_msg>:
{
 8000e18:	b510      	push	{r4, lr}
	__asm__ volatile(
 8000e1a:	f04f 0310 	mov.w	r3, #16
 8000e1e:	f3ef 8411 	mrs	r4, BASEPRI
 8000e22:	f383 8811 	msr	BASEPRI, r3
 8000e26:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
 8000e2a:	4804      	ldr	r0, [pc, #16]	; (8000e3c <get_msg+0x24>)
 8000e2c:	f002 fe1e 	bl	8003a6c <log_list_head_get>
	__asm__ volatile(
 8000e30:	f384 8811 	msr	BASEPRI, r4
 8000e34:	f3bf 8f6f 	isb	sy
}
 8000e38:	bd10      	pop	{r4, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200002ec 	.word	0x200002ec

08000e40 <z_log_dropped>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <z_log_dropped+0x1c>)
 8000e42:	f3bf 8f5b 	dmb	ish
 8000e46:	e853 2f00 	ldrex	r2, [r3]
 8000e4a:	3201      	adds	r2, #1
 8000e4c:	e843 2100 	strex	r1, r2, [r3]
 8000e50:	2900      	cmp	r1, #0
 8000e52:	d1f8      	bne.n	8000e46 <z_log_dropped+0x6>
 8000e54:	f3bf 8f5b 	dmb	ish
}
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	200002e4 	.word	0x200002e4

08000e60 <z_log_dropped_read_and_clear>:
}
 8000e60:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <z_log_dropped_read_and_clear+0x1c>)
 8000e64:	f3bf 8f5b 	dmb	ish
 8000e68:	4602      	mov	r2, r0
 8000e6a:	e853 0f00 	ldrex	r0, [r3]
 8000e6e:	e843 2100 	strex	r1, r2, [r3]
 8000e72:	2900      	cmp	r1, #0
 8000e74:	d1f9      	bne.n	8000e6a <z_log_dropped_read_and_clear+0xa>
 8000e76:	f3bf 8f5b 	dmb	ish
 8000e7a:	4770      	bx	lr
 8000e7c:	200002e4 	.word	0x200002e4

08000e80 <dropped_notify>:
{
 8000e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
 8000e82:	f7ff ffed 	bl	8000e60 <z_log_dropped_read_and_clear>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
 8000e86:	4c0a      	ldr	r4, [pc, #40]	; (8000eb0 <dropped_notify+0x30>)
 8000e88:	4d0a      	ldr	r5, [pc, #40]	; (8000eb4 <dropped_notify+0x34>)
 8000e8a:	1b2d      	subs	r5, r5, r4
 8000e8c:	4607      	mov	r7, r0
 8000e8e:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 8000e90:	2600      	movs	r6, #0
 8000e92:	42ae      	cmp	r6, r5
 8000e94:	db00      	blt.n	8000e98 <dropped_notify+0x18>
}
 8000e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 8000e98:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 8000e9a:	795b      	ldrb	r3, [r3, #5]
 8000e9c:	b12b      	cbz	r3, 8000eaa <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
 8000e9e:	6823      	ldr	r3, [r4, #0]
 8000ea0:	691b      	ldr	r3, [r3, #16]
 8000ea2:	b113      	cbz	r3, 8000eaa <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
 8000ea4:	4639      	mov	r1, r7
 8000ea6:	4620      	mov	r0, r4
 8000ea8:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 8000eaa:	3601      	adds	r6, #1
 8000eac:	3410      	adds	r4, #16
 8000eae:	e7f0      	b.n	8000e92 <dropped_notify+0x12>
 8000eb0:	08004ca8 	.word	0x08004ca8
 8000eb4:	08004cb8 	.word	0x08004cb8

08000eb8 <log_source_name_get>:
 8000eb8:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <log_source_name_get+0x14>)
 8000eba:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <log_source_name_get+0x18>)
 8000ebc:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
 8000ebe:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
 8000ec2:	bf34      	ite	cc
 8000ec4:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
 8000ec8:	2000      	movcs	r0, #0
}
 8000eca:	4770      	bx	lr
 8000ecc:	08004c78 	.word	0x08004c78
 8000ed0:	08004ca8 	.word	0x08004ca8

08000ed4 <log_backend_enable>:
	id += backend - log_backend_get(0);
 8000ed4:	4a09      	ldr	r2, [pc, #36]	; (8000efc <log_backend_enable+0x28>)
	backend->cb->id = id;
 8000ed6:	6843      	ldr	r3, [r0, #4]
 8000ed8:	1a80      	subs	r0, r0, r2
{
 8000eda:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
 8000edc:	1100      	asrs	r0, r0, #4
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 8000ede:	4c08      	ldr	r4, [pc, #32]	; (8000f00 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
 8000ee0:	6019      	str	r1, [r3, #0]
	id += backend - log_backend_get(0);
 8000ee2:	3001      	adds	r0, #1
	backend->cb->active = true;
 8000ee4:	2201      	movs	r2, #1
	log_backend_id_set(backend, id);
 8000ee6:	7118      	strb	r0, [r3, #4]
 8000ee8:	715a      	strb	r2, [r3, #5]
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 8000eea:	7823      	ldrb	r3, [r4, #0]
 8000eec:	b913      	cbnz	r3, 8000ef4 <log_backend_enable+0x20>
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <log_backend_enable+0x30>)
 8000ef0:	f002 f912 	bl	8003118 <z_impl_k_sem_give>
	backend_attached = true;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	7023      	strb	r3, [r4, #0]
}
 8000ef8:	bd10      	pop	{r4, pc}
 8000efa:	bf00      	nop
 8000efc:	08004ca8 	.word	0x08004ca8
 8000f00:	2000048c 	.word	0x2000048c
 8000f04:	2000010c 	.word	0x2000010c

08000f08 <log_init>:
{
 8000f08:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <log_init+0x48>)
 8000f0c:	f3bf 8f5b 	dmb	ish
 8000f10:	e853 5f00 	ldrex	r5, [r3]
 8000f14:	1c6a      	adds	r2, r5, #1
 8000f16:	e843 2100 	strex	r1, r2, [r3]
 8000f1a:	2900      	cmp	r1, #0
 8000f1c:	d1f8      	bne.n	8000f10 <log_init+0x8>
 8000f1e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
 8000f22:	b92d      	cbnz	r5, 8000f30 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
 8000f24:	4c0b      	ldr	r4, [pc, #44]	; (8000f54 <log_init+0x4c>)
 8000f26:	4e0c      	ldr	r6, [pc, #48]	; (8000f58 <log_init+0x50>)
 8000f28:	1b36      	subs	r6, r6, r4
 8000f2a:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
 8000f2c:	42b5      	cmp	r5, r6
 8000f2e:	db00      	blt.n	8000f32 <log_init+0x2a>
}
 8000f30:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
 8000f32:	7b23      	ldrb	r3, [r4, #12]
 8000f34:	b14b      	cbz	r3, 8000f4a <log_init+0x42>
			if (backend->api->init != NULL) {
 8000f36:	6823      	ldr	r3, [r4, #0]
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	b10b      	cbz	r3, 8000f40 <log_init+0x38>
				backend->api->init(backend);
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
 8000f40:	2204      	movs	r2, #4
 8000f42:	2100      	movs	r1, #0
 8000f44:	4620      	mov	r0, r4
 8000f46:	f7ff ffc5 	bl	8000ed4 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 8000f4a:	3501      	adds	r5, #1
 8000f4c:	3410      	adds	r4, #16
 8000f4e:	e7ed      	b.n	8000f2c <log_init+0x24>
 8000f50:	200002e8 	.word	0x200002e8
 8000f54:	08004ca8 	.word	0x08004ca8
 8000f58:	08004cb8 	.word	0x08004cb8

08000f5c <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <z_log_strdup+0x60>)
 8000f5e:	4298      	cmp	r0, r3
{
 8000f60:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000f62:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
 8000f64:	d302      	bcc.n	8000f6c <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
 8000f66:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <z_log_strdup+0x64>)
 8000f68:	4298      	cmp	r0, r3
 8000f6a:	d321      	bcc.n	8000fb0 <z_log_strdup+0x54>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
 8000f6c:	4815      	ldr	r0, [pc, #84]	; (8000fc4 <z_log_strdup+0x68>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2300      	movs	r3, #0
 8000f72:	a901      	add	r1, sp, #4
 8000f74:	f001 fff8 	bl	8002f68 <k_mem_slab_alloc>
	if (err != 0) {
 8000f78:	4605      	mov	r5, r0
 8000f7a:	b9e0      	cbnz	r0, 8000fb6 <z_log_strdup+0x5a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	9b01      	ldr	r3, [sp, #4]
 8000f80:	f3bf 8f5b 	dmb	ish
 8000f84:	e853 1f00 	ldrex	r1, [r3]
 8000f88:	e843 2000 	strex	r0, r2, [r3]
 8000f8c:	2800      	cmp	r0, #0
 8000f8e:	d1f9      	bne.n	8000f84 <z_log_strdup+0x28>
 8000f90:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
 8000f94:	9e01      	ldr	r6, [sp, #4]
 8000f96:	1d33      	adds	r3, r6, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 8000f98:	221f      	movs	r2, #31
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	4621      	mov	r1, r4
 8000f9e:	f003 fd1b 	bl	80049d8 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
 8000fa2:	227e      	movs	r2, #126	; 0x7e
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	f886 2023 	strb.w	r2, [r6, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
 8000faa:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
	return dup->buf;
 8000fae:	461c      	mov	r4, r3
}
 8000fb0:	4620      	mov	r0, r4
 8000fb2:	b002      	add	sp, #8
 8000fb4:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
 8000fb6:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <z_log_strdup+0x6c>)
 8000fb8:	e7f9      	b.n	8000fae <z_log_strdup+0x52>
 8000fba:	bf00      	nop
 8000fbc:	08004a20 	.word	0x08004a20
 8000fc0:	080057a8 	.word	0x080057a8
 8000fc4:	200002f4 	.word	0x200002f4
 8000fc8:	08004f59 	.word	0x08004f59

08000fcc <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
 8000fcc:	b148      	cbz	r0, 8000fe2 <log_is_strdup+0x16>
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <log_is_strdup+0x18>)
 8000fd0:	4298      	cmp	r0, r3
 8000fd2:	d305      	bcc.n	8000fe0 <log_is_strdup+0x14>
 8000fd4:	33a0      	adds	r3, #160	; 0xa0
 8000fd6:	4298      	cmp	r0, r3
 8000fd8:	bf2c      	ite	cs
 8000fda:	2000      	movcs	r0, #0
 8000fdc:	2001      	movcc	r0, #1
 8000fde:	4770      	bx	lr
 8000fe0:	2000      	movs	r0, #0
}
 8000fe2:	4770      	bx	lr
 8000fe4:	20001960 	.word	0x20001960

08000fe8 <z_impl_log_process>:
{
 8000fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
 8000fec:	4b47      	ldr	r3, [pc, #284]	; (800110c <z_impl_log_process+0x124>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
{
 8000ff0:	b085      	sub	sp, #20
 8000ff2:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
 8000ff4:	b903      	cbnz	r3, 8000ff8 <z_impl_log_process+0x10>
 8000ff6:	b300      	cbz	r0, 800103a <z_impl_log_process+0x52>
	msg = get_msg();
 8000ff8:	f7ff ff0e 	bl	8000e18 <get_msg>
	if (msg.msg) {
 8000ffc:	4605      	mov	r5, r0
 8000ffe:	b178      	cbz	r0, 8001020 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8001000:	f3bf 8f5b 	dmb	ish
 8001004:	4b42      	ldr	r3, [pc, #264]	; (8001110 <z_impl_log_process+0x128>)
 8001006:	e853 2f00 	ldrex	r2, [r3]
 800100a:	3a01      	subs	r2, #1
 800100c:	e843 2100 	strex	r1, r2, [r3]
 8001010:	2900      	cmp	r1, #0
 8001012:	d1f8      	bne.n	8001006 <z_impl_log_process+0x1e>
 8001014:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
 8001018:	b19c      	cbz	r4, 8001042 <z_impl_log_process+0x5a>
			log_msg_put(msg.msg);
 800101a:	4628      	mov	r0, r5
 800101c:	f002 fe1a 	bl	8003c54 <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
 8001020:	b92c      	cbnz	r4, 800102e <z_impl_log_process+0x46>
	return dropped_cnt > 0;
 8001022:	4b3c      	ldr	r3, [pc, #240]	; (8001114 <z_impl_log_process+0x12c>)
	if (!bypass && z_log_dropped_pending()) {
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	dd01      	ble.n	800102e <z_impl_log_process+0x46>
		dropped_notify();
 800102a:	f7ff ff29 	bl	8000e80 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
 800102e:	483a      	ldr	r0, [pc, #232]	; (8001118 <z_impl_log_process+0x130>)
 8001030:	f002 fd1a 	bl	8003a68 <log_list_head_peek>
 8001034:	1e04      	subs	r4, r0, #0
 8001036:	bf18      	it	ne
 8001038:	2401      	movne	r4, #1
}
 800103a:	4620      	mov	r0, r4
 800103c:	b005      	add	sp, #20
 800103e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
 8001042:	4b36      	ldr	r3, [pc, #216]	; (800111c <z_impl_log_process+0x134>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	b9e3      	cbnz	r3, 8001082 <z_impl_log_process+0x9a>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8001048:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
 800104a:	07db      	lsls	r3, r3, #31
 800104c:	d419      	bmi.n	8001082 <z_impl_log_process+0x9a>
	msg_str = log_msg_str_get(msg);
 800104e:	f002 fe14 	bl	8003c7a <log_msg_str_get>
 8001052:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
 8001054:	4628      	mov	r0, r5
 8001056:	f002 fddb 	bl	8003c10 <log_msg_nargs_get>
 800105a:	4601      	mov	r1, r0
 800105c:	4638      	mov	r0, r7
 800105e:	f7ff fe97 	bl	8000d90 <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8001062:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8001120 <z_impl_log_process+0x138>
 8001066:	4b2f      	ldr	r3, [pc, #188]	; (8001124 <z_impl_log_process+0x13c>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
 8001068:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 8001128 <z_impl_log_process+0x140>
 800106c:	eba3 0308 	sub.w	r3, r3, r8
 8001070:	08db      	lsrs	r3, r3, #3
 8001072:	9303      	str	r3, [sp, #12]
 8001074:	4b2d      	ldr	r3, [pc, #180]	; (800112c <z_impl_log_process+0x144>)
 8001076:	eba3 0308 	sub.w	r3, r3, r8
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
 800107a:	4606      	mov	r6, r0
 800107c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
 8001080:	b936      	cbnz	r6, 8001090 <z_impl_log_process+0xa8>
 8001082:	4e2b      	ldr	r6, [pc, #172]	; (8001130 <z_impl_log_process+0x148>)
 8001084:	4f2b      	ldr	r7, [pc, #172]	; (8001134 <z_impl_log_process+0x14c>)
 8001086:	1bbf      	subs	r7, r7, r6
 8001088:	113f      	asrs	r7, r7, #4
 800108a:	f04f 0800 	mov.w	r8, #0
 800108e:	e03a      	b.n	8001106 <z_impl_log_process+0x11e>
		idx = 31 - __builtin_clz(mask);
 8001090:	fab6 f186 	clz	r1, r6
 8001094:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
 8001098:	4649      	mov	r1, r9
 800109a:	4628      	mov	r0, r5
 800109c:	f002 fdbb 	bl	8003c16 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
 80010a0:	4b25      	ldr	r3, [pc, #148]	; (8001138 <z_impl_log_process+0x150>)
 80010a2:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
 80010a4:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
 80010a6:	d302      	bcc.n	80010ae <z_impl_log_process+0xc6>
		if (!is_rodata(str) && !log_is_strdup(str) &&
 80010a8:	4a24      	ldr	r2, [pc, #144]	; (800113c <z_impl_log_process+0x154>)
 80010aa:	4290      	cmp	r0, r2
 80010ac:	d31a      	bcc.n	80010e4 <z_impl_log_process+0xfc>
 80010ae:	4608      	mov	r0, r1
 80010b0:	f7ff ff8c 	bl	8000fcc <log_is_strdup>
 80010b4:	4602      	mov	r2, r0
 80010b6:	b9a8      	cbnz	r0, 80010e4 <z_impl_log_process+0xfc>
 80010b8:	4b21      	ldr	r3, [pc, #132]	; (8001140 <z_impl_log_process+0x158>)
 80010ba:	4299      	cmp	r1, r3
 80010bc:	d012      	beq.n	80010e4 <z_impl_log_process+0xfc>
	return msg->hdr.ids.source_id;
 80010be:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
 80010c0:	9903      	ldr	r1, [sp, #12]
 80010c2:	f3c3 1389 	ubfx	r3, r3, #6, #10
 80010c6:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
 80010c8:	bf38      	it	cc
 80010ca:	f858 2033 	ldrcc.w	r2, [r8, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
 80010ce:	ea4f 138a 	mov.w	r3, sl, lsl #6
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	f8ad 3000 	strh.w	r3, [sp]
 80010da:	4649      	mov	r1, r9
 80010dc:	463b      	mov	r3, r7
 80010de:	4658      	mov	r0, fp
 80010e0:	f002 fd17 	bl	8003b12 <log_3>
		mask &= ~BIT(idx);
 80010e4:	2301      	movs	r3, #1
 80010e6:	fa03 f109 	lsl.w	r1, r3, r9
 80010ea:	ea26 0601 	bic.w	r6, r6, r1
 80010ee:	e7c7      	b.n	8001080 <z_impl_log_process+0x98>
	return backend->cb->active;
 80010f0:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
 80010f2:	795b      	ldrb	r3, [r3, #5]
 80010f4:	b123      	cbz	r3, 8001100 <z_impl_log_process+0x118>
	backend->api->put(backend, msg);
 80010f6:	6833      	ldr	r3, [r6, #0]
 80010f8:	4629      	mov	r1, r5
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	4630      	mov	r0, r6
 80010fe:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
 8001100:	f108 0801 	add.w	r8, r8, #1
 8001104:	3610      	adds	r6, #16
 8001106:	45b8      	cmp	r8, r7
 8001108:	dbf2      	blt.n	80010f0 <z_impl_log_process+0x108>
 800110a:	e786      	b.n	800101a <z_impl_log_process+0x32>
 800110c:	2000048c 	.word	0x2000048c
 8001110:	200002e0 	.word	0x200002e0
 8001114:	200002e4 	.word	0x200002e4
 8001118:	200002ec 	.word	0x200002ec
 800111c:	2000048d 	.word	0x2000048d
 8001120:	08004c78 	.word	0x08004c78
 8001124:	08004ca8 	.word	0x08004ca8
 8001128:	08004f73 	.word	0x08004f73
 800112c:	08004c88 	.word	0x08004c88
 8001130:	08004ca8 	.word	0x08004ca8
 8001134:	08004cb8 	.word	0x08004cb8
 8001138:	08004a20 	.word	0x08004a20
 800113c:	080057a8 	.word	0x080057a8
 8001140:	08004f59 	.word	0x08004f59

08001144 <log_process_thread_func>:
{
 8001144:	b510      	push	{r4, lr}
	log_init();
 8001146:	f7ff fedf 	bl	8000f08 <log_init>
	return z_impl_k_current_get();
 800114a:	f002 fa05 	bl	8003558 <z_impl_k_current_get>
	proc_tid = process_tid;
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <log_process_thread_func+0x3c>)
 8001150:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 8001152:	b130      	cbz	r0, 8001162 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 8001154:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <log_process_thread_func+0x40>)
	    process_tid &&
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b09      	cmp	r3, #9
 800115a:	dd02      	ble.n	8001162 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
 800115c:	480a      	ldr	r0, [pc, #40]	; (8001188 <log_process_thread_func+0x44>)
 800115e:	f001 ffdb 	bl	8003118 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
 8001162:	4c09      	ldr	r4, [pc, #36]	; (8001188 <log_process_thread_func+0x44>)
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
 8001164:	2000      	movs	r0, #0
 8001166:	f7ff ff3f 	bl	8000fe8 <z_impl_log_process>
		if (log_process(false) == false) {
 800116a:	2800      	cmp	r0, #0
 800116c:	d1fa      	bne.n	8001164 <log_process_thread_func+0x20>
 800116e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001172:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001176:	4620      	mov	r0, r4
 8001178:	f001 ffee 	bl	8003158 <z_impl_k_sem_take>
 800117c:	e7f2      	b.n	8001164 <log_process_thread_func+0x20>
 800117e:	bf00      	nop
 8001180:	20000310 	.word	0x20000310
 8001184:	200002e0 	.word	0x200002e0
 8001188:	2000010c 	.word	0x2000010c

0800118c <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
 800118c:	4b29      	ldr	r3, [pc, #164]	; (8001234 <msg_finalize+0xa8>)
{
 800118e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
 8001190:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
 8001192:	8141      	strh	r1, [r0, #10]
{
 8001194:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
 8001196:	4798      	blx	r3
 8001198:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 800119a:	f04f 0310 	mov.w	r3, #16
 800119e:	f3ef 8511 	mrs	r5, BASEPRI
 80011a2:	f383 8811 	msr	BASEPRI, r3
 80011a6:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 80011aa:	4823      	ldr	r0, [pc, #140]	; (8001238 <msg_finalize+0xac>)
 80011ac:	4621      	mov	r1, r4
 80011ae:	f002 fc51 	bl	8003a54 <log_list_add_tail>
	__asm__ volatile(
 80011b2:	f385 8811 	msr	BASEPRI, r5
 80011b6:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 80011ba:	f3bf 8f5b 	dmb	ish
 80011be:	4b1f      	ldr	r3, [pc, #124]	; (800123c <msg_finalize+0xb0>)
 80011c0:	e853 2f00 	ldrex	r2, [r3]
 80011c4:	3201      	adds	r2, #1
 80011c6:	e843 2100 	strex	r1, r2, [r3]
 80011ca:	2900      	cmp	r1, #0
 80011cc:	d1f8      	bne.n	80011c0 <msg_finalize+0x34>
 80011ce:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
 80011d2:	4a1b      	ldr	r2, [pc, #108]	; (8001240 <msg_finalize+0xb4>)
 80011d4:	7812      	ldrb	r2, [r2, #0]
 80011d6:	b182      	cbz	r2, 80011fa <msg_finalize+0x6e>
	__asm__ volatile(
 80011d8:	f04f 0310 	mov.w	r3, #16
 80011dc:	f3ef 8411 	mrs	r4, BASEPRI
 80011e0:	f383 8811 	msr	BASEPRI, r3
 80011e4:	f3bf 8f6f 	isb	sy
 80011e8:	2000      	movs	r0, #0
 80011ea:	f7ff fefd 	bl	8000fe8 <z_impl_log_process>
	__asm__ volatile(
 80011ee:	f384 8811 	msr	BASEPRI, r4
 80011f2:	f3bf 8f6f 	isb	sy
}
 80011f6:	b003      	add	sp, #12
 80011f8:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 80011fa:	4a12      	ldr	r2, [pc, #72]	; (8001244 <msg_finalize+0xb8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	6812      	ldr	r2, [r2, #0]
 8001200:	2a00      	cmp	r2, #0
 8001202:	d0f8      	beq.n	80011f6 <msg_finalize+0x6a>
 8001204:	2b01      	cmp	r3, #1
 8001206:	d10a      	bne.n	800121e <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
 8001208:	2200      	movs	r2, #0
 800120a:	2300      	movs	r3, #0
 800120c:	e9cd 2300 	strd	r2, r3, [sp]
 8001210:	480d      	ldr	r0, [pc, #52]	; (8001248 <msg_finalize+0xbc>)
 8001212:	f242 7210 	movw	r2, #10000	; 0x2710
 8001216:	2300      	movs	r3, #0
 8001218:	f002 fb6c 	bl	80038f4 <z_impl_k_timer_start>
 800121c:	e7eb      	b.n	80011f6 <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 800121e:	2b0a      	cmp	r3, #10
 8001220:	d1e9      	bne.n	80011f6 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
 8001222:	4809      	ldr	r0, [pc, #36]	; (8001248 <msg_finalize+0xbc>)
 8001224:	f003 fba4 	bl	8004970 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 8001228:	4808      	ldr	r0, [pc, #32]	; (800124c <msg_finalize+0xc0>)
}
 800122a:	b003      	add	sp, #12
 800122c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001230:	f001 bf72 	b.w	8003118 <z_impl_k_sem_give>
 8001234:	20000004 	.word	0x20000004
 8001238:	200002ec 	.word	0x200002ec
 800123c:	200002e0 	.word	0x200002e0
 8001240:	2000048d 	.word	0x2000048d
 8001244:	20000310 	.word	0x20000310
 8001248:	20000120 	.word	0x20000120
 800124c:	2000010c 	.word	0x2000010c

08001250 <z_impl_log_panic>:
{
 8001250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
 8001252:	4f0e      	ldr	r7, [pc, #56]	; (800128c <z_impl_log_panic+0x3c>)
 8001254:	783d      	ldrb	r5, [r7, #0]
 8001256:	b975      	cbnz	r5, 8001276 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
 8001258:	4c0d      	ldr	r4, [pc, #52]	; (8001290 <z_impl_log_panic+0x40>)
 800125a:	4e0e      	ldr	r6, [pc, #56]	; (8001294 <z_impl_log_panic+0x44>)
	log_init();
 800125c:	f7ff fe54 	bl	8000f08 <log_init>
 8001260:	1b36      	subs	r6, r6, r4
 8001262:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 8001264:	42b5      	cmp	r5, r6
 8001266:	db07      	blt.n	8001278 <z_impl_log_panic+0x28>
 8001268:	2000      	movs	r0, #0
 800126a:	f7ff febd 	bl	8000fe8 <z_impl_log_process>
		while (log_process(false) == true) {
 800126e:	2800      	cmp	r0, #0
 8001270:	d1fa      	bne.n	8001268 <z_impl_log_panic+0x18>
	panic_mode = true;
 8001272:	2301      	movs	r3, #1
 8001274:	703b      	strb	r3, [r7, #0]
}
 8001276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
 8001278:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 800127a:	795b      	ldrb	r3, [r3, #5]
 800127c:	b11b      	cbz	r3, 8001286 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
 800127e:	6823      	ldr	r3, [r4, #0]
 8001280:	4620      	mov	r0, r4
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 8001286:	3501      	adds	r5, #1
 8001288:	3410      	adds	r4, #16
 800128a:	e7eb      	b.n	8001264 <z_impl_log_panic+0x14>
 800128c:	2000048d 	.word	0x2000048d
 8001290:	08004ca8 	.word	0x08004ca8
 8001294:	08004cb8 	.word	0x08004cb8

08001298 <log_free>:
{
 8001298:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
 800129a:	3804      	subs	r0, #4
 800129c:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 800129e:	f3bf 8f5b 	dmb	ish
 80012a2:	e850 3f00 	ldrex	r3, [r0]
 80012a6:	1e5a      	subs	r2, r3, #1
 80012a8:	e840 2100 	strex	r1, r2, [r0]
 80012ac:	2900      	cmp	r1, #0
 80012ae:	d1f8      	bne.n	80012a2 <log_free+0xa>
 80012b0:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d103      	bne.n	80012c0 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
 80012b8:	4803      	ldr	r0, [pc, #12]	; (80012c8 <log_free+0x30>)
 80012ba:	a901      	add	r1, sp, #4
 80012bc:	f003 fa2f 	bl	800471e <k_mem_slab_free>
}
 80012c0:	b003      	add	sp, #12
 80012c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80012c6:	bf00      	nop
 80012c8:	200002f4 	.word	0x200002f4

080012cc <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
 80012cc:	4902      	ldr	r1, [pc, #8]	; (80012d8 <log_msg_pool_init+0xc>)
 80012ce:	4803      	ldr	r0, [pc, #12]	; (80012dc <log_msg_pool_init+0x10>)
 80012d0:	2340      	movs	r3, #64	; 0x40
 80012d2:	2220      	movs	r2, #32
 80012d4:	f003 ba08 	b.w	80046e8 <k_mem_slab_init>
 80012d8:	20001a00 	.word	0x20001a00
 80012dc:	20000314 	.word	0x20000314

080012e0 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
 80012e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
 80012e2:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
 80012e4:	4d09      	ldr	r5, [pc, #36]	; (800130c <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	2001      	movs	r0, #1
 80012ea:	f7ff fe7d 	bl	8000fe8 <z_impl_log_process>
 80012ee:	4604      	mov	r4, r0
			z_log_dropped();
 80012f0:	f7ff fda6 	bl	8000e40 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
 80012f4:	2200      	movs	r2, #0
 80012f6:	2300      	movs	r3, #0
 80012f8:	a901      	add	r1, sp, #4
 80012fa:	4628      	mov	r0, r5
 80012fc:	f001 fe34 	bl	8002f68 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
 8001300:	b108      	cbz	r0, 8001306 <log_msg_no_space_handle+0x26>
 8001302:	2c00      	cmp	r4, #0
 8001304:	d1f0      	bne.n	80012e8 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
 8001306:	9801      	ldr	r0, [sp, #4]
 8001308:	b003      	add	sp, #12
 800130a:	bd30      	pop	{r4, r5, pc}
 800130c:	20000314 	.word	0x20000314

08001310 <log_msg_chunk_alloc>:
{
 8001310:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
 8001312:	2300      	movs	r3, #0
 8001314:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
 8001316:	4807      	ldr	r0, [pc, #28]	; (8001334 <log_msg_chunk_alloc+0x24>)
 8001318:	2200      	movs	r2, #0
 800131a:	2300      	movs	r3, #0
 800131c:	a901      	add	r1, sp, #4
 800131e:	f001 fe23 	bl	8002f68 <k_mem_slab_alloc>
	if (err != 0) {
 8001322:	b110      	cbz	r0, 800132a <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
 8001324:	f7ff ffdc 	bl	80012e0 <log_msg_no_space_handle>
 8001328:	9001      	str	r0, [sp, #4]
}
 800132a:	9801      	ldr	r0, [sp, #4]
 800132c:	b003      	add	sp, #12
 800132e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001332:	bf00      	nop
 8001334:	20000314 	.word	0x20000314

08001338 <msg_free>:
{
 8001338:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 800133a:	7a03      	ldrb	r3, [r0, #8]
 800133c:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
 800133e:	07dc      	lsls	r4, r3, #31
{
 8001340:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
 8001342:	d41e      	bmi.n	8001382 <msg_free+0x4a>
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
 8001344:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
 8001346:	092d      	lsrs	r5, r5, #4
 8001348:	d01b      	beq.n	8001382 <msg_free+0x4a>
		uint32_t smask = 0U;
 800134a:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
 800134c:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
 800134e:	9801      	ldr	r0, [sp, #4]
 8001350:	4631      	mov	r1, r6
 8001352:	f002 fc60 	bl	8003c16 <log_msg_arg_get>
 8001356:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
 8001358:	f7ff fe38 	bl	8000fcc <log_is_strdup>
 800135c:	b170      	cbz	r0, 800137c <msg_free+0x44>
				if (smask == 0U) {
 800135e:	b934      	cbnz	r4, 800136e <msg_free+0x36>
					smask = z_log_get_s_mask(
 8001360:	9b01      	ldr	r3, [sp, #4]
 8001362:	4629      	mov	r1, r5
 8001364:	6918      	ldr	r0, [r3, #16]
 8001366:	f7ff fd13 	bl	8000d90 <z_log_get_s_mask>
					if (smask == 0U) {
 800136a:	4604      	mov	r4, r0
 800136c:	b148      	cbz	r0, 8001382 <msg_free+0x4a>
				if (smask & BIT(i)) {
 800136e:	fa24 f306 	lsr.w	r3, r4, r6
 8001372:	07d9      	lsls	r1, r3, #31
 8001374:	d502      	bpl.n	800137c <msg_free+0x44>
					log_free(buf);
 8001376:	4638      	mov	r0, r7
 8001378:	f7ff ff8e 	bl	8001298 <log_free>
		for (i = 0U; i < nargs; i++) {
 800137c:	3601      	adds	r6, #1
 800137e:	42ae      	cmp	r6, r5
 8001380:	d3e5      	bcc.n	800134e <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
 8001382:	9b01      	ldr	r3, [sp, #4]
 8001384:	7a1a      	ldrb	r2, [r3, #8]
 8001386:	0792      	lsls	r2, r2, #30
 8001388:	d504      	bpl.n	8001394 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
 800138a:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
 800138c:	4c08      	ldr	r4, [pc, #32]	; (80013b0 <msg_free+0x78>)
 800138e:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
 8001390:	9b03      	ldr	r3, [sp, #12]
 8001392:	b92b      	cbnz	r3, 80013a0 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
 8001394:	4806      	ldr	r0, [pc, #24]	; (80013b0 <msg_free+0x78>)
 8001396:	a901      	add	r1, sp, #4
 8001398:	f003 f9c1 	bl	800471e <k_mem_slab_free>
}
 800139c:	b005      	add	sp, #20
 800139e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
 80013a0:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
 80013a2:	a903      	add	r1, sp, #12
 80013a4:	4620      	mov	r0, r4
 80013a6:	f003 f9ba 	bl	800471e <k_mem_slab_free>
		cont = next;
 80013aa:	9503      	str	r5, [sp, #12]
 80013ac:	e7f0      	b.n	8001390 <msg_free+0x58>
 80013ae:	bf00      	nop
 80013b0:	20000314 	.word	0x20000314

080013b4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
 80013b4:	b40e      	push	{r1, r2, r3}
 80013b6:	b503      	push	{r0, r1, lr}
 80013b8:	ab03      	add	r3, sp, #12
 80013ba:	4601      	mov	r1, r0
 80013bc:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
 80013c0:	4804      	ldr	r0, [pc, #16]	; (80013d4 <print_formatted+0x20>)
	va_start(args, fmt);
 80013c2:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
 80013c4:	f7ff f900 	bl	80005c8 <cbvprintf>
	va_end(args);

	return length;
}
 80013c8:	b002      	add	sp, #8
 80013ca:	f85d eb04 	ldr.w	lr, [sp], #4
 80013ce:	b003      	add	sp, #12
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	08003f7b 	.word	0x08003f7b

080013d8 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
 80013d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013dc:	461d      	mov	r5, r3
 80013de:	9b08      	ldr	r3, [sp, #32]
 80013e0:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 80013e2:	06da      	lsls	r2, r3, #27
{
 80013e4:	4604      	mov	r4, r0
 80013e6:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 80013e8:	d405      	bmi.n	80013f6 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 80013ea:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
 80013ec:	bf4c      	ite	mi
 80013ee:	492b      	ldrmi	r1, [pc, #172]	; (800149c <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
 80013f0:	492b      	ldrpl	r1, [pc, #172]	; (80014a0 <hexdump_line_print+0xc8>)
 80013f2:	f7ff ffdf 	bl	80013b4 <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
 80013f6:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80014a4 <hexdump_line_print+0xcc>
{
 80013fa:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
 80013fe:	45a8      	cmp	r8, r5
 8001400:	db2d      	blt.n	800145e <hexdump_line_print+0x86>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
 8001402:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80014a8 <hexdump_line_print+0xd0>
			print_formatted(output, "%02x ", data[i]);
 8001406:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80014ac <hexdump_line_print+0xd4>
			print_formatted(output, " ");
 800140a:	f8df a098 	ldr.w	sl, [pc, #152]	; 80014a4 <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 800140e:	2500      	movs	r5, #0
		if (i < length) {
 8001410:	42bd      	cmp	r5, r7
 8001412:	d232      	bcs.n	800147a <hexdump_line_print+0xa2>
			print_formatted(output, "%02x ", data[i]);
 8001414:	5d72      	ldrb	r2, [r6, r5]
 8001416:	4649      	mov	r1, r9
 8001418:	4620      	mov	r0, r4
 800141a:	f7ff ffcb 	bl	80013b4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 800141e:	3501      	adds	r5, #1
 8001420:	2d10      	cmp	r5, #16
 8001422:	d123      	bne.n	800146c <hexdump_line_print+0x94>
		}
	}

	print_formatted(output, "|");
 8001424:	4922      	ldr	r1, [pc, #136]	; (80014b0 <hexdump_line_print+0xd8>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
 8001426:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80014a4 <hexdump_line_print+0xcc>
			      isprint((int)c) ? c : '.');
 800142a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80014b4 <hexdump_line_print+0xdc>
			print_formatted(output, "%c",
 800142e:	f8df a088 	ldr.w	sl, [pc, #136]	; 80014b8 <hexdump_line_print+0xe0>
	print_formatted(output, "|");
 8001432:	4620      	mov	r0, r4
 8001434:	f7ff ffbe 	bl	80013b4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8001438:	2500      	movs	r5, #0
		if (i < length) {
 800143a:	42af      	cmp	r7, r5
 800143c:	d929      	bls.n	8001492 <hexdump_line_print+0xba>
			char c = (char)data[i];
 800143e:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
 8001440:	f812 3009 	ldrb.w	r3, [r2, r9]
 8001444:	f013 0f97 	tst.w	r3, #151	; 0x97
 8001448:	bf08      	it	eq
 800144a:	222e      	moveq	r2, #46	; 0x2e
 800144c:	4651      	mov	r1, sl
 800144e:	4620      	mov	r0, r4
 8001450:	f7ff ffb0 	bl	80013b4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8001454:	3501      	adds	r5, #1
 8001456:	2d10      	cmp	r5, #16
 8001458:	d114      	bne.n	8001484 <hexdump_line_print+0xac>
		}
	}
}
 800145a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
 800145e:	4649      	mov	r1, r9
 8001460:	4620      	mov	r0, r4
 8001462:	f7ff ffa7 	bl	80013b4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 8001466:	f108 0801 	add.w	r8, r8, #1
 800146a:	e7c8      	b.n	80013fe <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
 800146c:	076a      	lsls	r2, r5, #29
 800146e:	d1cf      	bne.n	8001410 <hexdump_line_print+0x38>
			print_formatted(output, " ");
 8001470:	4651      	mov	r1, sl
 8001472:	4620      	mov	r0, r4
 8001474:	f7ff ff9e 	bl	80013b4 <print_formatted>
 8001478:	e7ca      	b.n	8001410 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
 800147a:	4641      	mov	r1, r8
 800147c:	4620      	mov	r0, r4
 800147e:	f7ff ff99 	bl	80013b4 <print_formatted>
 8001482:	e7cc      	b.n	800141e <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
 8001484:	076b      	lsls	r3, r5, #29
 8001486:	d1d8      	bne.n	800143a <hexdump_line_print+0x62>
			print_formatted(output, " ");
 8001488:	4641      	mov	r1, r8
 800148a:	4620      	mov	r0, r4
 800148c:	f7ff ff92 	bl	80013b4 <print_formatted>
 8001490:	e7d3      	b.n	800143a <hexdump_line_print+0x62>
			print_formatted(output, " ");
 8001492:	4641      	mov	r1, r8
 8001494:	4620      	mov	r0, r4
 8001496:	f7ff ff8d 	bl	80013b4 <print_formatted>
 800149a:	e7db      	b.n	8001454 <hexdump_line_print+0x7c>
 800149c:	080050ee 	.word	0x080050ee
 80014a0:	080050ed 	.word	0x080050ed
 80014a4:	08004fbe 	.word	0x08004fbe
 80014a8:	08004fbc 	.word	0x08004fbc
 80014ac:	08004fb6 	.word	0x08004fb6
 80014b0:	08004fc0 	.word	0x08004fc0
 80014b4:	080056a8 	.word	0x080056a8
 80014b8:	08004fc2 	.word	0x08004fc2

080014bc <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
 80014bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014c0:	b087      	sub	sp, #28
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
 80014c2:	f011 0602 	ands.w	r6, r1, #2
{
 80014c6:	9205      	str	r2, [sp, #20]
 80014c8:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 80014cc:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
 80014d0:	4607      	mov	r7, r0
 80014d2:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 80014d4:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 80014d8:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
 80014dc:	d006      	beq.n	80014ec <prefix_print+0x30>
	if (!format) {
 80014de:	f011 0f44 	tst.w	r1, #68	; 0x44
 80014e2:	d138      	bne.n	8001556 <prefix_print+0x9a>
		length = print_formatted(output, "[%08lu] ", timestamp);
 80014e4:	4933      	ldr	r1, [pc, #204]	; (80015b4 <prefix_print+0xf8>)
 80014e6:	f7ff ff65 	bl	80013b4 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
 80014ea:	4606      	mov	r6, r0
	if (color) {
 80014ec:	f1ba 0f00 	cmp.w	sl, #0
 80014f0:	d00a      	beq.n	8001508 <prefix_print+0x4c>
		const char *log_color = start && (colors[level] != NULL) ?
 80014f2:	4b31      	ldr	r3, [pc, #196]	; (80015b8 <prefix_print+0xfc>)
		print_formatted(output, "%s", log_color);
 80014f4:	4931      	ldr	r1, [pc, #196]	; (80015bc <prefix_print+0x100>)
		const char *log_color = start && (colors[level] != NULL) ?
 80014f6:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
		print_formatted(output, "%s", log_color);
 80014fa:	4b31      	ldr	r3, [pc, #196]	; (80015c0 <prefix_print+0x104>)
 80014fc:	4638      	mov	r0, r7
 80014fe:	2a00      	cmp	r2, #0
 8001500:	bf08      	it	eq
 8001502:	461a      	moveq	r2, r3
 8001504:	f7ff ff56 	bl	80013b4 <print_formatted>
	if (level_on) {
 8001508:	b13d      	cbz	r5, 800151a <prefix_print+0x5e>
		total += print_formatted(output, "<%s> ", severity[level]);
 800150a:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <prefix_print+0x108>)
 800150c:	492e      	ldr	r1, [pc, #184]	; (80015c8 <prefix_print+0x10c>)
 800150e:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 8001512:	4638      	mov	r0, r7
 8001514:	f7ff ff4e 	bl	80013b4 <print_formatted>
 8001518:	4605      	mov	r5, r0
	if (source_id >= 0) {
 800151a:	f1b9 0f00 	cmp.w	r9, #0
 800151e:	db16      	blt.n	800154e <prefix_print+0x92>
		total += print_formatted(output,
 8001520:	9b05      	ldr	r3, [sp, #20]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d043      	beq.n	80015ae <prefix_print+0xf2>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
 8001526:	2301      	movs	r3, #1
 8001528:	fa03 f808 	lsl.w	r8, r3, r8
		total += print_formatted(output,
 800152c:	4b27      	ldr	r3, [pc, #156]	; (80015cc <prefix_print+0x110>)
 800152e:	4c28      	ldr	r4, [pc, #160]	; (80015d0 <prefix_print+0x114>)
 8001530:	f018 0f10 	tst.w	r8, #16
 8001534:	bf18      	it	ne
 8001536:	461c      	movne	r4, r3
 8001538:	4649      	mov	r1, r9
 800153a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800153e:	f7ff fcbb 	bl	8000eb8 <log_source_name_get>
 8001542:	4621      	mov	r1, r4
 8001544:	4602      	mov	r2, r0
 8001546:	4638      	mov	r0, r7
 8001548:	f7ff ff34 	bl	80013b4 <print_formatted>
 800154c:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
 800154e:	19a8      	adds	r0, r5, r6
 8001550:	b007      	add	sp, #28
 8001552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
 8001556:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <prefix_print+0x118>)
 8001558:	6819      	ldr	r1, [r3, #0]
 800155a:	b331      	cbz	r1, 80015aa <prefix_print+0xee>
		timestamp /= timestamp_div;
 800155c:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <prefix_print+0x11c>)
 800155e:	f44f 6661 	mov.w	r6, #3600	; 0xe10
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
 8001568:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
		total_seconds = timestamp / freq;
 800156c:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
 8001570:	fbb4 f2f6 	udiv	r2, r4, r6
 8001574:	fb06 4612 	mls	r6, r6, r2, r4
		remainder = timestamp % freq;
 8001578:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
 800157c:	fb0b f404 	mul.w	r4, fp, r4
		mins = seconds / 60U;
 8001580:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8001584:	fbb4 fef1 	udiv	lr, r4, r1
		mins = seconds / 60U;
 8001588:	fbb6 f3fc 	udiv	r3, r6, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 800158c:	fb01 441e 	mls	r4, r1, lr, r4
			length = print_formatted(output,
 8001590:	fb0c 6613 	mls	r6, ip, r3, r6
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8001594:	fb0b f404 	mul.w	r4, fp, r4
			length = print_formatted(output,
 8001598:	9600      	str	r6, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 800159a:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
 800159e:	e9cd e101 	strd	lr, r1, [sp, #4]
 80015a2:	490e      	ldr	r1, [pc, #56]	; (80015dc <prefix_print+0x120>)
 80015a4:	f7ff ff06 	bl	80013b4 <print_formatted>
 80015a8:	e79f      	b.n	80014ea <prefix_print+0x2e>
		length = 0;
 80015aa:	4608      	mov	r0, r1
 80015ac:	e79d      	b.n	80014ea <prefix_print+0x2e>
		total += print_formatted(output,
 80015ae:	4c08      	ldr	r4, [pc, #32]	; (80015d0 <prefix_print+0x114>)
 80015b0:	e7c2      	b.n	8001538 <prefix_print+0x7c>
 80015b2:	bf00      	nop
 80015b4:	08004fd3 	.word	0x08004fd3
 80015b8:	08004d20 	.word	0x08004d20
 80015bc:	08004ff8 	.word	0x08004ff8
 80015c0:	08004fc5 	.word	0x08004fc5
 80015c4:	08004d34 	.word	0x08004d34
 80015c8:	08004ffb 	.word	0x08004ffb
 80015cc:	08004fcf 	.word	0x08004fcf
 80015d0:	08004fca 	.word	0x08004fca
 80015d4:	20000330 	.word	0x20000330
 80015d8:	20000334 	.word	0x20000334
 80015dc:	08004fdc 	.word	0x08004fdc

080015e0 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
 80015e0:	b538      	push	{r3, r4, r5, lr}
 80015e2:	460c      	mov	r4, r1
	if (color) {
 80015e4:	07e1      	lsls	r1, r4, #31
{
 80015e6:	4605      	mov	r5, r0
	if (color) {
 80015e8:	d503      	bpl.n	80015f2 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
 80015ea:	4a08      	ldr	r2, [pc, #32]	; (800160c <postfix_print+0x2c>)
 80015ec:	4908      	ldr	r1, [pc, #32]	; (8001610 <postfix_print+0x30>)
 80015ee:	f7ff fee1 	bl	80013b4 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 80015f2:	06e2      	lsls	r2, r4, #27
 80015f4:	d408      	bmi.n	8001608 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 80015f6:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
 80015f8:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
 80015fa:	bf4c      	ite	mi
 80015fc:	4905      	ldrmi	r1, [pc, #20]	; (8001614 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
 80015fe:	4906      	ldrpl	r1, [pc, #24]	; (8001618 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
 8001600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
 8001604:	f7ff bed6 	b.w	80013b4 <print_formatted>
}
 8001608:	bd38      	pop	{r3, r4, r5, pc}
 800160a:	bf00      	nop
 800160c:	08004fc5 	.word	0x08004fc5
 8001610:	08004ff8 	.word	0x08004ff8
 8001614:	080050ee 	.word	0x080050ee
 8001618:	080050ed 	.word	0x080050ed

0800161c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
 800161c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
 8001620:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
 8001622:	f013 0807 	ands.w	r8, r3, #7
{
 8001626:	b08a      	sub	sp, #40	; 0x28
 8001628:	4605      	mov	r5, r0
 800162a:	460e      	mov	r6, r1
 800162c:	4617      	mov	r7, r2
			0 : prefix_print(output, flags, std_msg, timestamp,
 800162e:	d022      	beq.n	8001676 <log_output_msg_process+0x5a>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8001630:	7a0a      	ldrb	r2, [r1, #8]
	return msg->hdr.ids.source_id;
 8001632:	8949      	ldrh	r1, [r1, #10]
 8001634:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8001638:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 800163c:	43d2      	mvns	r2, r2
 800163e:	e9cd 8300 	strd	r8, r3, [sp]
 8001642:	9102      	str	r1, [sp, #8]
 8001644:	68f3      	ldr	r3, [r6, #12]
 8001646:	f002 0201 	and.w	r2, r2, #1
 800164a:	4639      	mov	r1, r7
 800164c:	f7ff ff36 	bl	80014bc <prefix_print>
 8001650:	4681      	mov	r9, r0
 8001652:	7a34      	ldrb	r4, [r6, #8]
 8001654:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
 8001656:	f014 0401 	ands.w	r4, r4, #1
 800165a:	d00e      	beq.n	800167a <log_output_msg_process+0x5e>
		std_print(msg, output);
 800165c:	4629      	mov	r1, r5
 800165e:	4630      	mov	r0, r6
 8001660:	f002 fb21 	bl	8003ca6 <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
 8001664:	f1b8 0f00 	cmp.w	r8, #0
 8001668:	d02b      	beq.n	80016c2 <log_output_msg_process+0xa6>
		postfix_print(output, flags, level);
 800166a:	4642      	mov	r2, r8
 800166c:	4639      	mov	r1, r7
 800166e:	4628      	mov	r0, r5
 8001670:	f7ff ffb6 	bl	80015e0 <postfix_print>
 8001674:	e025      	b.n	80016c2 <log_output_msg_process+0xa6>
			0 : prefix_print(output, flags, std_msg, timestamp,
 8001676:	46c1      	mov	r9, r8
 8001678:	e7eb      	b.n	8001652 <log_output_msg_process+0x36>
	} else if (raw_string) {
 800167a:	f1b8 0f00 	cmp.w	r8, #0
 800167e:	d126      	bne.n	80016ce <log_output_msg_process+0xb2>
	size_t offset = 0;
 8001680:	4627      	mov	r7, r4
		length = output->size;
 8001682:	68eb      	ldr	r3, [r5, #12]
 8001684:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
 8001686:	aa06      	add	r2, sp, #24
 8001688:	463b      	mov	r3, r7
 800168a:	68a9      	ldr	r1, [r5, #8]
 800168c:	4630      	mov	r0, r6
 800168e:	f002 faf6 	bl	8003c7e <log_msg_hexdump_data_get>
		output->control_block->offset = length;
 8001692:	9a06      	ldr	r2, [sp, #24]
 8001694:	686b      	ldr	r3, [r5, #4]
 8001696:	601a      	str	r2, [r3, #0]
		if (length != 0) {
 8001698:	b13a      	cbz	r2, 80016aa <log_output_msg_process+0x8e>
			eol = (output->buf[length - 1] == '\n');
 800169a:	68ab      	ldr	r3, [r5, #8]
 800169c:	4413      	add	r3, r2
 800169e:	f813 4c01 	ldrb.w	r4, [r3, #-1]
 80016a2:	f1a4 030a 	sub.w	r3, r4, #10
 80016a6:	425c      	negs	r4, r3
 80016a8:	415c      	adcs	r4, r3
		log_output_flush(output);
 80016aa:	4628      	mov	r0, r5
 80016ac:	f002 fc58 	bl	8003f60 <log_output_flush>
		offset += length;
 80016b0:	9b06      	ldr	r3, [sp, #24]
 80016b2:	441f      	add	r7, r3
	} while (length > 0);
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1e4      	bne.n	8001682 <log_output_msg_process+0x66>
	if (eol) {
 80016b8:	b11c      	cbz	r4, 80016c2 <log_output_msg_process+0xa6>
		print_formatted(output, "\r");
 80016ba:	4914      	ldr	r1, [pc, #80]	; (800170c <log_output_msg_process+0xf0>)
 80016bc:	4628      	mov	r0, r5
 80016be:	f7ff fe79 	bl	80013b4 <print_formatted>
	}

	log_output_flush(output);
 80016c2:	4628      	mov	r0, r5
}
 80016c4:	b00a      	add	sp, #40	; 0x28
 80016c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
 80016ca:	f002 bc49 	b.w	8003f60 <log_output_flush>
	print_formatted(output, "%s", log_msg_str_get(msg));
 80016ce:	4630      	mov	r0, r6
 80016d0:	f002 fad3 	bl	8003c7a <log_msg_str_get>
 80016d4:	490e      	ldr	r1, [pc, #56]	; (8001710 <log_output_msg_process+0xf4>)
 80016d6:	4602      	mov	r2, r0
 80016d8:	4628      	mov	r0, r5
 80016da:	f7ff fe6b 	bl	80013b4 <print_formatted>
		length = sizeof(buf);
 80016de:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
 80016e2:	aa05      	add	r2, sp, #20
 80016e4:	4623      	mov	r3, r4
 80016e6:	a906      	add	r1, sp, #24
 80016e8:	4630      	mov	r0, r6
		length = sizeof(buf);
 80016ea:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
 80016ee:	f002 fac6 	bl	8003c7e <log_msg_hexdump_data_get>
		if (length) {
 80016f2:	9a05      	ldr	r2, [sp, #20]
 80016f4:	2a00      	cmp	r2, #0
 80016f6:	d0b8      	beq.n	800166a <log_output_msg_process+0x4e>
			hexdump_line_print(output, buf, length,
 80016f8:	464b      	mov	r3, r9
 80016fa:	9700      	str	r7, [sp, #0]
 80016fc:	a906      	add	r1, sp, #24
 80016fe:	4628      	mov	r0, r5
 8001700:	f7ff fe6a 	bl	80013d8 <hexdump_line_print>
			offset += length;
 8001704:	9b05      	ldr	r3, [sp, #20]
 8001706:	441c      	add	r4, r3
		length = sizeof(buf);
 8001708:	e7eb      	b.n	80016e2 <log_output_msg_process+0xc6>
 800170a:	bf00      	nop
 800170c:	08005001 	.word	0x08005001
 8001710:	08004ff8 	.word	0x08004ff8

08001714 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
 8001714:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8001716:	f242 730f 	movw	r3, #9999	; 0x270f
 800171a:	428b      	cmp	r3, r1
 800171c:	bf28      	it	cs
 800171e:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
 8001720:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8001722:	4a0f      	ldr	r2, [pc, #60]	; (8001760 <log_output_dropped_process+0x4c>)
{
 8001724:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8001726:	2105      	movs	r1, #5
 8001728:	4668      	mov	r0, sp
 800172a:	f002 f961 	bl	80039f0 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 800172e:	6863      	ldr	r3, [r4, #4]
 8001730:	490c      	ldr	r1, [pc, #48]	; (8001764 <log_output_dropped_process+0x50>)
 8001732:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8001734:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 8001736:	220b      	movs	r2, #11
 8001738:	4628      	mov	r0, r5
 800173a:	f002 faa7 	bl	8003c8c <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
 800173e:	6863      	ldr	r3, [r4, #4]
 8001740:	4632      	mov	r2, r6
 8001742:	4669      	mov	r1, sp
 8001744:	4628      	mov	r0, r5
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f002 faa0 	bl	8003c8c <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
 800174c:	6863      	ldr	r3, [r4, #4]
 800174e:	4906      	ldr	r1, [pc, #24]	; (8001768 <log_output_dropped_process+0x54>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	221b      	movs	r2, #27
 8001754:	4628      	mov	r0, r5
 8001756:	f002 fa99 	bl	8003c8c <buffer_write>
		     output->control_block->ctx);
}
 800175a:	b002      	add	sp, #8
 800175c:	bd70      	pop	{r4, r5, r6, pc}
 800175e:	bf00      	nop
 8001760:	080055d1 	.word	0x080055d1
 8001764:	0800503f 	.word	0x0800503f
 8001768:	08005023 	.word	0x08005023

0800176c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
 800176c:	4a08      	ldr	r2, [pc, #32]	; (8001790 <log_output_timestamp_freq_set+0x24>)
{
 800176e:	b510      	push	{r4, lr}
	timestamp_div = 1U;
 8001770:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 8001772:	4c08      	ldr	r4, [pc, #32]	; (8001794 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
 8001774:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
 8001776:	2100      	movs	r1, #0
 8001778:	42a0      	cmp	r0, r4
 800177a:	d804      	bhi.n	8001786 <log_output_timestamp_freq_set+0x1a>
 800177c:	b101      	cbz	r1, 8001780 <log_output_timestamp_freq_set+0x14>
 800177e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <log_output_timestamp_freq_set+0x2c>)
 8001782:	6018      	str	r0, [r3, #0]
}
 8001784:	bd10      	pop	{r4, pc}
		frequency /= 2U;
 8001786:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	2101      	movs	r1, #1
 800178c:	e7f4      	b.n	8001778 <log_output_timestamp_freq_set+0xc>
 800178e:	bf00      	nop
 8001790:	20000334 	.word	0x20000334
 8001794:	000f4240 	.word	0x000f4240
 8001798:	20000330 	.word	0x20000330

0800179c <char_out>:
static const char LOG_HEX_SEP[10] = "##ZLOGV1##";

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
 800179c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* lower 8-bit */
		x = data[i] & 0x0FU;
		(void)hex2char(x, &c);
		uart_poll_out(uart_dev, c);
#else
		uart_poll_out(uart_dev, data[i]);
 800179e:	4f07      	ldr	r7, [pc, #28]	; (80017bc <char_out+0x20>)
{
 80017a0:	460d      	mov	r5, r1
 80017a2:	4604      	mov	r4, r0
 80017a4:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
 80017a6:	42b4      	cmp	r4, r6
 80017a8:	d101      	bne.n	80017ae <char_out+0x12>
#endif
	}

	return length;
}
 80017aa:	4628      	mov	r0, r5
 80017ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
 80017ae:	6838      	ldr	r0, [r7, #0]
 80017b0:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 80017b4:	6883      	ldr	r3, [r0, #8]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
 80017ba:	e7f4      	b.n	80017a6 <char_out+0xa>
 80017bc:	2000034c 	.word	0x2000034c

080017c0 <panic>:
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
 80017c0:	4801      	ldr	r0, [pc, #4]	; (80017c8 <panic+0x8>)
 80017c2:	f002 bbcd 	b.w	8003f60 <log_output_flush>
 80017c6:	bf00      	nop
 80017c8:	08004d64 	.word	0x08004d64

080017cc <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
 80017cc:	4801      	ldr	r0, [pc, #4]	; (80017d4 <dropped+0x8>)
 80017ce:	f7ff bfa1 	b.w	8001714 <log_output_dropped_process>
 80017d2:	bf00      	nop
 80017d4:	08004d64 	.word	0x08004d64

080017d8 <log_backend_uart_init>:
		log_output_msg2_process(&log_output_uart, &msg->log, flags);
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
 80017d8:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 80017da:	4803      	ldr	r0, [pc, #12]	; (80017e8 <log_backend_uart_init+0x10>)
 80017dc:	f001 fa54 	bl	8002c88 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 80017e0:	4b02      	ldr	r3, [pc, #8]	; (80017ec <log_backend_uart_init+0x14>)
 80017e2:	6018      	str	r0, [r3, #0]
		 */
		for (int i = 0; i < sizeof(LOG_HEX_SEP); i++) {
			uart_poll_out(uart_dev, LOG_HEX_SEP[i]);
		}
	}
}
 80017e4:	bd08      	pop	{r3, pc}
 80017e6:	bf00      	nop
 80017e8:	0800504b 	.word	0x0800504b
 80017ec:	2000034c 	.word	0x2000034c

080017f0 <put>:
{
 80017f0:	b510      	push	{r4, lr}
	log_msg_get(msg);
 80017f2:	4608      	mov	r0, r1
 80017f4:	460c      	mov	r4, r1
 80017f6:	f002 f9fe 	bl	8003bf6 <log_msg_get>
	log_output_msg_process(output, msg, flags);
 80017fa:	4805      	ldr	r0, [pc, #20]	; (8001810 <put+0x20>)
 80017fc:	4621      	mov	r1, r4
 80017fe:	220f      	movs	r2, #15
 8001800:	f7ff ff0c 	bl	800161c <log_output_msg_process>
	log_msg_put(msg);
 8001804:	4620      	mov	r0, r4
}
 8001806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800180a:	f002 ba23 	b.w	8003c54 <log_msg_put>
 800180e:	bf00      	nop
 8001810:	08004d64 	.word	0x08004d64

08001814 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 8001814:	b510      	push	{r4, lr}
 8001816:	4807      	ldr	r0, [pc, #28]	; (8001834 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
 8001818:	4c07      	ldr	r4, [pc, #28]	; (8001838 <uart_console_init+0x24>)
 800181a:	f001 fa35 	bl	8002c88 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 800181e:	4b07      	ldr	r3, [pc, #28]	; (800183c <uart_console_init+0x28>)
 8001820:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
 8001822:	4620      	mov	r0, r4
 8001824:	f000 ff00 	bl	8002628 <__stdout_hook_install>
	__printk_hook_install(console_out);
 8001828:	4620      	mov	r0, r4
 800182a:	f7fe fe45 	bl	80004b8 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
 800182e:	2000      	movs	r0, #0
 8001830:	bd10      	pop	{r4, pc}
 8001832:	bf00      	nop
 8001834:	0800504b 	.word	0x0800504b
 8001838:	08001841 	.word	0x08001841
 800183c:	20000350 	.word	0x20000350

08001840 <console_out>:
	if ('\n' == c) {
 8001840:	280a      	cmp	r0, #10
{
 8001842:	b538      	push	{r3, r4, r5, lr}
 8001844:	4d07      	ldr	r5, [pc, #28]	; (8001864 <console_out+0x24>)
 8001846:	4604      	mov	r4, r0
	if ('\n' == c) {
 8001848:	d104      	bne.n	8001854 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
 800184a:	6828      	ldr	r0, [r5, #0]
 800184c:	6883      	ldr	r3, [r0, #8]
 800184e:	210d      	movs	r1, #13
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
 8001854:	6828      	ldr	r0, [r5, #0]
 8001856:	6883      	ldr	r3, [r0, #8]
 8001858:	b2e1      	uxtb	r1, r4
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	4798      	blx	r3
}
 800185e:	4620      	mov	r0, r4
 8001860:	bd38      	pop	{r3, r4, r5, pc}
 8001862:	bf00      	nop
 8001864:	20000350 	.word	0x20000350

08001868 <__stm32_exti_isr.isra.0>:
 *
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
 8001868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  *         @arg @ref LL_EXTI_LINE_22
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800186c:	4f0d      	ldr	r7, [pc, #52]	; (80018a4 <__stm32_exti_isr.isra.0+0x3c>)
 800186e:	4604      	mov	r4, r0
 8001870:	460e      	mov	r6, r1
 8001872:	4615      	mov	r5, r2
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8001874:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8001878:	f102 0904 	add.w	r9, r2, #4
	for (line = min; line < max; line++) {
 800187c:	42b4      	cmp	r4, r6
 800187e:	db01      	blt.n	8001884 <__stm32_exti_isr.isra.0+0x1c>
		}
	}
}
 8001880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001884:	68fa      	ldr	r2, [r7, #12]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8001886:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 800188a:	ea33 0202 	bics.w	r2, r3, r2
 800188e:	d107      	bne.n	80018a0 <__stm32_exti_isr.isra.0+0x38>
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001890:	60fb      	str	r3, [r7, #12]
			if (!data->cb[line].cb) {
 8001892:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 8001896:	b11b      	cbz	r3, 80018a0 <__stm32_exti_isr.isra.0+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 8001898:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 800189c:	4620      	mov	r0, r4
 800189e:	4798      	blx	r3
	for (line = min; line < max; line++) {
 80018a0:	3401      	adds	r4, #1
 80018a2:	e7eb      	b.n	800187c <__stm32_exti_isr.isra.0+0x14>
 80018a4:	58000800 	.word	0x58000800

080018a8 <stm32_exti_enable>:
  SET_BIT(EXTI->IMR1, ExtiLine);
 80018a8:	4a05      	ldr	r2, [pc, #20]	; (80018c0 <stm32_exti_enable+0x18>)
	LL_EXTI_EnableIT_0_31(1 << line);
 80018aa:	2301      	movs	r3, #1
 80018ac:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
 80018b0:	4083      	lsls	r3, r0
 80018b2:	430b      	orrs	r3, r1
 80018b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	irq_enable(irqnum);
 80018b8:	4b02      	ldr	r3, [pc, #8]	; (80018c4 <stm32_exti_enable+0x1c>)
 80018ba:	5618      	ldrsb	r0, [r3, r0]
 80018bc:	f000 ba6a 	b.w	8001d94 <arch_irq_enable>
 80018c0:	58000800 	.word	0x58000800
 80018c4:	08005083 	.word	0x08005083

080018c8 <stm32_exti_disable>:
	if (line < 32) {
 80018c8:	281f      	cmp	r0, #31
 80018ca:	dc09      	bgt.n	80018e0 <stm32_exti_disable+0x18>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80018cc:	4905      	ldr	r1, [pc, #20]	; (80018e4 <stm32_exti_disable+0x1c>)
		LL_EXTI_DisableIT_0_31(1 << line);
 80018ce:	2201      	movs	r2, #1
 80018d0:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 80018d4:	fa02 f000 	lsl.w	r0, r2, r0
 80018d8:	ea23 0000 	bic.w	r0, r3, r0
 80018dc:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
}
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	58000800 	.word	0x58000800

080018e8 <stm32_exti_trigger>:
	switch (trigger) {
 80018e8:	2903      	cmp	r1, #3
 80018ea:	d80f      	bhi.n	800190c <stm32_exti_trigger+0x24>
 80018ec:	e8df f001 	tbb	[pc, r1]
 80018f0:	23170f02 	.word	0x23170f02
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80018f4:	4b15      	ldr	r3, [pc, #84]	; (800194c <stm32_exti_trigger+0x64>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 80018f6:	2201      	movs	r2, #1
 80018f8:	6819      	ldr	r1, [r3, #0]
 80018fa:	fa02 f000 	lsl.w	r0, r2, r0
 80018fe:	ea21 0100 	bic.w	r1, r1, r0
 8001902:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	ea22 0000 	bic.w	r0, r2, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800190a:	6058      	str	r0, [r3, #4]
}
 800190c:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 800190e:	2301      	movs	r3, #1
 8001910:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001914:	4b0d      	ldr	r3, [pc, #52]	; (800194c <stm32_exti_trigger+0x64>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4302      	orrs	r2, r0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	e7f2      	b.n	8001904 <stm32_exti_trigger+0x1c>
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 800191e:	2301      	movs	r3, #1
 8001920:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001924:	4b09      	ldr	r3, [pc, #36]	; (800194c <stm32_exti_trigger+0x64>)
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	4302      	orrs	r2, r0
 800192a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	ea22 0000 	bic.w	r0, r2, r0
 8001932:	6018      	str	r0, [r3, #0]
}
 8001934:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8001936:	2301      	movs	r3, #1
 8001938:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <stm32_exti_trigger+0x64>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4302      	orrs	r2, r0
 8001942:	601a      	str	r2, [r3, #0]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	4310      	orrs	r0, r2
 8001948:	e7df      	b.n	800190a <stm32_exti_trigger+0x22>
 800194a:	bf00      	nop
 800194c:	58000800 	.word	0x58000800

08001950 <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 8001950:	4b07      	ldr	r3, [pc, #28]	; (8001970 <stm32_exti_set_callback+0x20>)
{
 8001952:	b510      	push	{r4, lr}
 8001954:	4604      	mov	r4, r0
	if (data->cb[line].cb) {
 8001956:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 800195a:	b928      	cbnz	r0, 8001968 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 800195c:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 8001960:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001964:	605a      	str	r2, [r3, #4]

	return 0;
}
 8001966:	bd10      	pop	{r4, pc}
		return -EBUSY;
 8001968:	f06f 000f 	mvn.w	r0, #15
 800196c:	e7fb      	b.n	8001966 <stm32_exti_set_callback+0x16>
 800196e:	bf00      	nop
 8001970:	20000358 	.word	0x20000358

08001974 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8001974:	4b03      	ldr	r3, [pc, #12]	; (8001984 <stm32_exti_unset_callback+0x10>)
 8001976:	2200      	movs	r2, #0
 8001978:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 800197c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8001980:	605a      	str	r2, [r3, #4]
}
 8001982:	4770      	bx	lr
 8001984:	20000358 	.word	0x20000358

08001988 <stm32_clock_control_get_subsys_rate>:
	uint32_t apb2_clock = get_bus_clock(ahb_clock, STM32_APB2_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8001988:	680b      	ldr	r3, [r1, #0]
 800198a:	2b04      	cmp	r3, #4
 800198c:	d901      	bls.n	8001992 <stm32_clock_control_get_subsys_rate+0xa>
 800198e:	2b06      	cmp	r3, #6
 8001990:	d104      	bne.n	800199c <stm32_clock_control_get_subsys_rate+0x14>
	uint32_t ahb_clock = SystemCoreClock;
 8001992:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <stm32_clock_control_get_subsys_rate+0x1c>)
 8001994:	681b      	ldr	r3, [r3, #0]
		*rate = apb1_clock;
		break;
#if !defined (CONFIG_SOC_SERIES_STM32F0X) && \
	!defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_APB2:
		*rate = apb2_clock;
 8001996:	6013      	str	r3, [r2, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8001998:	2000      	movs	r0, #0
		break;
 800199a:	4770      	bx	lr
	switch (pclken->bus) {
 800199c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000028 	.word	0x20000028

080019a8 <stm32_dt_pinctrl_configure>:
 *
 * @return 0 on success, -EINVAL otherwise
 */
int stm32_dt_pinctrl_configure(const struct soc_gpio_pinctrl *pinctrl,
			       size_t list_size, uint32_t base)
{
 80019a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct device *port_device;
	uint32_t pin, mux;
	uint32_t func = 0;
	int ret = 0;

	if (!list_size) {
 80019ac:	460e      	mov	r6, r1
 80019ae:	b911      	cbnz	r1, 80019b6 <stm32_dt_pinctrl_configure+0xe>
		/* Empty pinctrl. Exit */
		return 0;
 80019b0:	2000      	movs	r0, #0

		stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
	}

	return 0;
}
 80019b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < list_size; i++) {
 80019b6:	2700      	movs	r7, #0
		port_device = gpio_ports[STM32_PORT(pin)];
 80019b8:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8001a14 <stm32_dt_pinctrl_configure+0x6c>
 80019bc:	1d04      	adds	r4, r0, #4
	uint32_t func = 0;
 80019be:	46bb      	mov	fp, r7
		mux = pinctrl[i].pinmux;
 80019c0:	f854 5c04 	ldr.w	r5, [r4, #-4]
		if (STM32_DT_PINMUX_FUNC(mux) < ANALOG) {
 80019c4:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 80019c8:	d11e      	bne.n	8001a08 <stm32_dt_pinctrl_configure+0x60>
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
 80019ca:	6822      	ldr	r2, [r4, #0]
 80019cc:	f042 0b20 	orr.w	fp, r2, #32
		port_device = gpio_ports[STM32_PORT(pin)];
 80019d0:	f3c5 3303 	ubfx	r3, r5, #12, #4
		ret = gpio_stm32_clock_request(port_device, true);
 80019d4:	2101      	movs	r1, #1
		port_device = gpio_ports[STM32_PORT(pin)];
 80019d6:	f859 8023 	ldr.w	r8, [r9, r3, lsl #2]
		ret = gpio_stm32_clock_request(port_device, true);
 80019da:	4640      	mov	r0, r8
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 80019dc:	f3c5 2a07 	ubfx	sl, r5, #8, #8
		ret = gpio_stm32_clock_request(port_device, true);
 80019e0:	f000 fea0 	bl	8002724 <gpio_stm32_clock_request>
		if (ret != 0) {
 80019e4:	2800      	cmp	r0, #0
 80019e6:	d1e4      	bne.n	80019b2 <stm32_dt_pinctrl_configure+0xa>
		stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
 80019e8:	b2eb      	uxtb	r3, r5
	if (port_device == NULL) {
 80019ea:	f1b8 0f00 	cmp.w	r8, #0
 80019ee:	d005      	beq.n	80019fc <stm32_dt_pinctrl_configure+0x54>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 80019f0:	465a      	mov	r2, fp
 80019f2:	f00a 010f 	and.w	r1, sl, #15
 80019f6:	4640      	mov	r0, r8
 80019f8:	f002 fd09 	bl	800440e <gpio_stm32_configure>
	for (int i = 0; i < list_size; i++) {
 80019fc:	3701      	adds	r7, #1
 80019fe:	42b7      	cmp	r7, r6
 8001a00:	f104 0408 	add.w	r4, r4, #8
 8001a04:	d1dc      	bne.n	80019c0 <stm32_dt_pinctrl_configure+0x18>
 8001a06:	e7d3      	b.n	80019b0 <stm32_dt_pinctrl_configure+0x8>
		} else if (STM32_DT_PINMUX_FUNC(mux) == ANALOG) {
 8001a08:	b2eb      	uxtb	r3, r5
			func = STM32_MODER_ANALOG_MODE;
 8001a0a:	2b10      	cmp	r3, #16
 8001a0c:	bf08      	it	eq
 8001a0e:	f04f 0b30 	moveq.w	fp, #48	; 0x30
 8001a12:	e7dd      	b.n	80019d0 <stm32_dt_pinctrl_configure+0x28>
 8001a14:	08004d74 	.word	0x08004d74

08001a18 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 8001a18:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 8001a1c:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 8001a1e:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8001a20:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8001a22:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8001a24:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <elapsed+0x34>)
 8001a26:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8001a2a:	4909      	ldr	r1, [pc, #36]	; (8001a50 <elapsed+0x38>)
 8001a2c:	d101      	bne.n	8001a32 <elapsed+0x1a>
	    || (val1 < val2)) {
 8001a2e:	4282      	cmp	r2, r0
 8001a30:	d206      	bcs.n	8001a40 <elapsed+0x28>
		overflow_cyc += last_load;
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	680c      	ldr	r4, [r1, #0]
 8001a36:	4422      	add	r2, r4
 8001a38:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8001a3a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001a3e:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	680a      	ldr	r2, [r1, #0]
 8001a44:	4413      	add	r3, r2
}
 8001a46:	1a18      	subs	r0, r3, r0
 8001a48:	bd10      	pop	{r4, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200003ec 	.word	0x200003ec
 8001a50:	200003e8 	.word	0x200003e8

08001a54 <sys_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void sys_clock_isr(void *arg)
{
 8001a54:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	uint32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
 8001a56:	f7ff ffdf 	bl	8001a18 <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <sys_clock_isr+0x38>)
 8001a5c:	4a0c      	ldr	r2, [pc, #48]	; (8001a90 <sys_clock_isr+0x3c>)
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	6811      	ldr	r1, [r2, #0]
 8001a62:	4408      	add	r0, r1
 8001a64:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <sys_clock_isr+0x40>)
 8001a6c:	6813      	ldr	r3, [r2, #0]
 8001a6e:	f44f 5196 	mov.w	r1, #4800	; 0x12c0
 8001a72:	1ac0      	subs	r0, r0, r3
 8001a74:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 8001a78:	fb01 3300 	mla	r3, r1, r0, r3
 8001a7c:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 8001a7e:	f001 fe9f 	bl	80037c0 <sys_clock_announce>
	} else {
		sys_clock_announce(1);
	}
	z_arm_int_exit();
}
 8001a82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8001a86:	f000 bcbf 	b.w	8002408 <z_arm_exc_exit>
 8001a8a:	bf00      	nop
 8001a8c:	200003ec 	.word	0x200003ec
 8001a90:	200003e4 	.word	0x200003e4
 8001a94:	200003e0 	.word	0x200003e0

08001a98 <sys_clock_driver_init>:
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <sys_clock_driver_init+0x28>)
 8001a9a:	2210      	movs	r2, #16
 8001a9c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <sys_clock_driver_init+0x2c>)
 8001aa2:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001aa6:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8001aa8:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <sys_clock_driver_init+0x30>)
 8001aaa:	2000      	movs	r0, #0
 8001aac:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8001aae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001ab2:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8001ab4:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8001ab6:	691a      	ldr	r2, [r3, #16]
 8001ab8:	f042 0207 	orr.w	r2, r2, #7
 8001abc:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8001abe:	4770      	bx	lr
 8001ac0:	e000ed00 	.word	0xe000ed00
 8001ac4:	200003e8 	.word	0x200003e8
 8001ac8:	200003ec 	.word	0x200003ec

08001acc <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
 8001acc:	b570      	push	{r4, r5, r6, lr}
 8001ace:	4d2c      	ldr	r5, [pc, #176]	; (8001b80 <sys_clock_set_timeout+0xb4>)
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8001ad0:	b159      	cbz	r1, 8001aea <sys_clock_set_timeout+0x1e>
 8001ad2:	1c43      	adds	r3, r0, #1
 8001ad4:	d10f      	bne.n	8001af6 <sys_clock_set_timeout+0x2a>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8001ad6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001ada:	6913      	ldr	r3, [r2, #16]
 8001adc:	f023 0301 	bic.w	r3, r3, #1
 8001ae0:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8001ae2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001ae6:	602b      	str	r3, [r5, #0]
	SysTick->LOAD = last_load - 1;
	SysTick->VAL = 0; /* resets timer to last_load */

	k_spin_unlock(&lock, key);
#endif
}
 8001ae8:	bd70      	pop	{r4, r5, r6, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8001aea:	f640 53a6 	movw	r3, #3494	; 0xda6
 8001aee:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001af2:	bf08      	it	eq
 8001af4:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8001af6:	1e44      	subs	r4, r0, #1
 8001af8:	2c00      	cmp	r4, #0
 8001afa:	dd28      	ble.n	8001b4e <sys_clock_set_timeout+0x82>
 8001afc:	f640 53a6 	movw	r3, #3494	; 0xda6
 8001b00:	429c      	cmp	r4, r3
 8001b02:	bfa8      	it	ge
 8001b04:	461c      	movge	r4, r3
	__asm__ volatile(
 8001b06:	f04f 0310 	mov.w	r3, #16
 8001b0a:	f3ef 8611 	mrs	r6, BASEPRI
 8001b0e:	f383 8811 	msr	BASEPRI, r3
 8001b12:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8001b16:	f7ff ff7f 	bl	8001a18 <elapsed>
	cycle_count += pending;
 8001b1a:	4a1a      	ldr	r2, [pc, #104]	; (8001b84 <sys_clock_set_timeout+0xb8>)
 8001b1c:	6813      	ldr	r3, [r2, #0]
 8001b1e:	4418      	add	r0, r3
	overflow_cyc = 0U;
 8001b20:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <sys_clock_set_timeout+0xbc>)
	cycle_count += pending;
 8001b22:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0U;
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8001b28:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <sys_clock_set_timeout+0xc0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 8001b2c:	1ac2      	subs	r2, r0, r3
 8001b2e:	d510      	bpl.n	8001b52 <sys_clock_set_timeout+0x86>
		last_load = MIN_DELAY;
 8001b30:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = MAX_CYCLES;
 8001b34:	602b      	str	r3, [r5, #0]
	SysTick->LOAD = last_load - 1;
 8001b36:	682b      	ldr	r3, [r5, #0]
 8001b38:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	6153      	str	r3, [r2, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8001b40:	2300      	movs	r3, #0
 8001b42:	6193      	str	r3, [r2, #24]
	__asm__ volatile(
 8001b44:	f386 8811 	msr	BASEPRI, r6
 8001b48:	f3bf 8f6f 	isb	sy
 8001b4c:	e7cc      	b.n	8001ae8 <sys_clock_set_timeout+0x1c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8001b4e:	2400      	movs	r4, #0
 8001b50:	e7d9      	b.n	8001b06 <sys_clock_set_timeout+0x3a>
		delay = ticks * CYC_PER_TICK;
 8001b52:	f44f 5196 	mov.w	r1, #4800	; 0x12c0
		delay += unannounced;
 8001b56:	fb01 2404 	mla	r4, r1, r4, r2
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8001b5a:	f504 5495 	add.w	r4, r4, #4768	; 0x12a0
		delay -= unannounced;
 8001b5e:	1a1b      	subs	r3, r3, r0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8001b60:	341f      	adds	r4, #31
 8001b62:	fbb4 f4f1 	udiv	r4, r4, r1
		delay -= unannounced;
 8001b66:	fb01 3104 	mla	r1, r1, r4, r3
		delay = MAX(delay, MIN_DELAY);
 8001b6a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8001b6e:	d904      	bls.n	8001b7a <sys_clock_set_timeout+0xae>
		if (delay > MAX_CYCLES) {
 8001b70:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <sys_clock_set_timeout+0xc4>)
 8001b72:	4299      	cmp	r1, r3
 8001b74:	d8de      	bhi.n	8001b34 <sys_clock_set_timeout+0x68>
			last_load = delay;
 8001b76:	6029      	str	r1, [r5, #0]
 8001b78:	e7dd      	b.n	8001b36 <sys_clock_set_timeout+0x6a>
		delay = MAX(delay, MIN_DELAY);
 8001b7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b7e:	e7fa      	b.n	8001b76 <sys_clock_set_timeout+0xaa>
 8001b80:	200003e8 	.word	0x200003e8
 8001b84:	200003e4 	.word	0x200003e4
 8001b88:	200003ec 	.word	0x200003ec
 8001b8c:	200003e0 	.word	0x200003e0
 8001b90:	00ffe880 	.word	0x00ffe880

08001b94 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
 8001b94:	b510      	push	{r4, lr}
	__asm__ volatile(
 8001b96:	f04f 0310 	mov.w	r3, #16
 8001b9a:	f3ef 8411 	mrs	r4, BASEPRI
 8001b9e:	f383 8811 	msr	BASEPRI, r3
 8001ba2:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8001ba6:	f7ff ff37 	bl	8001a18 <elapsed>
 8001baa:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <sys_clock_elapsed+0x34>)
 8001bac:	4a07      	ldr	r2, [pc, #28]	; (8001bcc <sys_clock_elapsed+0x38>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6812      	ldr	r2, [r2, #0]
 8001bb2:	1a9b      	subs	r3, r3, r2
 8001bb4:	4403      	add	r3, r0
	__asm__ volatile(
 8001bb6:	f384 8811 	msr	BASEPRI, r4
 8001bba:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
}
 8001bbe:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 8001bc2:	fbb3 f0f0 	udiv	r0, r3, r0
 8001bc6:	bd10      	pop	{r4, pc}
 8001bc8:	200003e4 	.word	0x200003e4
 8001bcc:	200003e0 	.word	0x200003e0

08001bd0 <stm32_ipcc_mailbox_ipm_send>:
}
#endif /* CONFIG_IPM_STM32_IPCC2_PROCID == 1 */

static int stm32_ipcc_mailbox_ipm_send(const struct device *dev, int wait,
                                       uint32_t id, const void *buff,
                                       int size) {
 8001bd0:	b570      	push	{r4, r5, r6, lr}
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	9d04      	ldr	r5, [sp, #16]
  struct stm32_ipcc_mbx_data *data = dev->data;
 8001bd6:	6902      	ldr	r2, [r0, #16]
  const struct stm32_ipcc_mailbox_config *cfg = DEV_CFG(dev);
 8001bd8:	6846      	ldr	r6, [r0, #4]

  ARG_UNUSED(wait);

  if (buff == NULL && size != 0) {
 8001bda:	b96b      	cbnz	r3, 8001bf8 <stm32_ipcc_mailbox_ipm_send+0x28>
 8001bdc:	b165      	cbz	r5, 8001bf8 <stm32_ipcc_mailbox_ipm_send+0x28>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8001bde:	4921      	ldr	r1, [pc, #132]	; (8001c64 <stm32_ipcc_mailbox_ipm_send+0x94>)
 8001be0:	4b21      	ldr	r3, [pc, #132]	; (8001c68 <stm32_ipcc_mailbox_ipm_send+0x98>)
    LOG_ERR("invalid sending buffer.");
 8001be2:	4822      	ldr	r0, [pc, #136]	; (8001c6c <stm32_ipcc_mailbox_ipm_send+0x9c>)
 8001be4:	1ac9      	subs	r1, r1, r3
 8001be6:	08c9      	lsrs	r1, r1, #3
 8001be8:	0189      	lsls	r1, r1, #6
 8001bea:	f041 0101 	orr.w	r1, r1, #1
 8001bee:	f001 ff56 	bl	8003a9e <log_0>
    return -EMSGSIZE;
  }

  if (id >= data->num_ch) {
    LOG_ERR("invalid id (%d)\r\n", id);
    return -EINVAL;
 8001bf2:	f06f 0015 	mvn.w	r0, #21
 8001bf6:	e00f      	b.n	8001c18 <stm32_ipcc_mailbox_ipm_send+0x48>
  if (size > cfg->buff_size) {
 8001bf8:	6970      	ldr	r0, [r6, #20]
 8001bfa:	42a8      	cmp	r0, r5
 8001bfc:	d20d      	bcs.n	8001c1a <stm32_ipcc_mailbox_ipm_send+0x4a>
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <stm32_ipcc_mailbox_ipm_send+0x98>)
 8001c00:	4a18      	ldr	r2, [pc, #96]	; (8001c64 <stm32_ipcc_mailbox_ipm_send+0x94>)
    LOG_ERR("invalid buffer size (%d)\r\n", size);
 8001c02:	481b      	ldr	r0, [pc, #108]	; (8001c70 <stm32_ipcc_mailbox_ipm_send+0xa0>)
 8001c04:	1ad2      	subs	r2, r2, r3
 8001c06:	08d2      	lsrs	r2, r2, #3
 8001c08:	0192      	lsls	r2, r2, #6
 8001c0a:	f042 0201 	orr.w	r2, r2, #1
 8001c0e:	4629      	mov	r1, r5
 8001c10:	f001 ff52 	bl	8003ab8 <log_1>
    return -EMSGSIZE;
 8001c14:	f06f 0079 	mvn.w	r0, #121	; 0x79

  IPCC_EnableTransmitChannel(cfg->ipcc, id);
  IPCC_SetFlag_CHx(cfg->ipcc, id);

  return 0;
}
 8001c18:	bd70      	pop	{r4, r5, r6, pc}
  if (id >= data->num_ch) {
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	428a      	cmp	r2, r1
 8001c1e:	d80a      	bhi.n	8001c36 <stm32_ipcc_mailbox_ipm_send+0x66>
 8001c20:	4a11      	ldr	r2, [pc, #68]	; (8001c68 <stm32_ipcc_mailbox_ipm_send+0x98>)
 8001c22:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <stm32_ipcc_mailbox_ipm_send+0x94>)
    LOG_ERR("invalid id (%d)\r\n", id);
 8001c24:	4813      	ldr	r0, [pc, #76]	; (8001c74 <stm32_ipcc_mailbox_ipm_send+0xa4>)
 8001c26:	1a9b      	subs	r3, r3, r2
 8001c28:	08db      	lsrs	r3, r3, #3
 8001c2a:	019b      	lsls	r3, r3, #6
 8001c2c:	f043 0201 	orr.w	r2, r3, #1
 8001c30:	f001 ff42 	bl	8003ab8 <log_1>
 8001c34:	e7dd      	b.n	8001bf2 <stm32_ipcc_mailbox_ipm_send+0x22>
  if (IPCC_IsActiveFlag_CHx(cfg->ipcc, id)) {
 8001c36:	2401      	movs	r4, #1
 8001c38:	6870      	ldr	r0, [r6, #4]
 8001c3a:	408c      	lsls	r4, r1
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001c3c:	68c2      	ldr	r2, [r0, #12]
 8001c3e:	ea34 0202 	bics.w	r2, r4, r2
 8001c42:	d0fb      	beq.n	8001c3c <stm32_ipcc_mailbox_ipm_send+0x6c>
  if (buff != NULL && size != 0) {
 8001c44:	b12b      	cbz	r3, 8001c52 <stm32_ipcc_mailbox_ipm_send+0x82>
 8001c46:	b125      	cbz	r5, 8001c52 <stm32_ipcc_mailbox_ipm_send+0x82>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8001c48:	6930      	ldr	r0, [r6, #16]
 8001c4a:	462a      	mov	r2, r5
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f002 fead 	bl	80049ac <memcpy>
  IPCC_EnableTransmitChannel(cfg->ipcc, id);
 8001c52:	6873      	ldr	r3, [r6, #4]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001c54:	6859      	ldr	r1, [r3, #4]
 8001c56:	0422      	lsls	r2, r4, #16
 8001c58:	ea21 4404 	bic.w	r4, r1, r4, lsl #16
 8001c5c:	605c      	str	r4, [r3, #4]
  return 0;
 8001c5e:	2000      	movs	r0, #0
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8001c60:	609a      	str	r2, [r3, #8]
 8001c62:	e7d9      	b.n	8001c18 <stm32_ipcc_mailbox_ipm_send+0x48>
 8001c64:	08004c80 	.word	0x08004c80
 8001c68:	08004c78 	.word	0x08004c78
 8001c6c:	080050ab 	.word	0x080050ab
 8001c70:	080050c3 	.word	0x080050c3
 8001c74:	080050de 	.word	0x080050de

08001c78 <stm32_ipcc_mailbox_init>:
  }

  return 0;
}

static int stm32_ipcc_mailbox_init(const struct device *dev) {
 8001c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct stm32_ipcc_mbx_data *data = DEV_DATA(dev);
  const struct stm32_ipcc_mailbox_config *cfg = DEV_CFG(dev);
 8001c7c:	6846      	ldr	r6, [r0, #4]
  struct stm32_ipcc_mbx_data *data = DEV_DATA(dev);
 8001c7e:	6907      	ldr	r7, [r0, #16]
static int stm32_ipcc_mailbox_init(const struct device *dev) {
 8001c80:	4605      	mov	r5, r0
  uint32_t i;

  clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);

  /* enable clock */
  if (clock_control_on(clk, (clock_control_subsys_t *)&cfg->pclken) != 0) {
 8001c82:	f106 0808 	add.w	r8, r6, #8
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
 8001c86:	4c18      	ldr	r4, [pc, #96]	; (8001ce8 <stm32_ipcc_mailbox_init+0x70>)
 8001c88:	4620      	mov	r0, r4
 8001c8a:	f002 fd1b 	bl	80046c4 <z_device_ready>
 8001c8e:	b920      	cbnz	r0, 8001c9a <stm32_ipcc_mailbox_init+0x22>
    return -EIO;
 8001c90:	f06f 0404 	mvn.w	r4, #4
  }

  cfg->irq_config_func(dev);

  return 0;
}
 8001c94:	4620      	mov	r0, r4
 8001c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8001c9a:	68a3      	ldr	r3, [r4, #8]
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4641      	mov	r1, r8
 8001ca2:	4798      	blx	r3
  if (clock_control_on(clk, (clock_control_subsys_t *)&cfg->pclken) != 0) {
 8001ca4:	4604      	mov	r4, r0
 8001ca6:	2800      	cmp	r0, #0
 8001ca8:	d1f2      	bne.n	8001c90 <stm32_ipcc_mailbox_init+0x18>
  IPCC_DisableIT_TXF(cfg->ipcc);
 8001caa:	6873      	ldr	r3, [r6, #4]
  CLEAR_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001cb2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	f022 0201 	bic.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]
  data->num_ch = 6;
 8001cbc:	2206      	movs	r2, #6
 8001cbe:	603a      	str	r2, [r7, #0]
  for (i = 0; i < data->num_ch; i++) {
 8001cc0:	4602      	mov	r2, r0
    IPCC_ClearFlag_CHx(cfg->ipcc, i);
 8001cc2:	2701      	movs	r7, #1
 8001cc4:	fa07 f002 	lsl.w	r0, r7, r2
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001cc8:	6098      	str	r0, [r3, #8]
  SET_BIT(IPCCx->C2MR, Channel);
 8001cca:	6959      	ldr	r1, [r3, #20]
 8001ccc:	4301      	orrs	r1, r0
 8001cce:	6159      	str	r1, [r3, #20]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001cd0:	6859      	ldr	r1, [r3, #4]
  for (i = 0; i < data->num_ch; i++) {
 8001cd2:	3201      	adds	r2, #1
 8001cd4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001cd8:	2a06      	cmp	r2, #6
 8001cda:	6059      	str	r1, [r3, #4]
 8001cdc:	d1f2      	bne.n	8001cc4 <stm32_ipcc_mailbox_init+0x4c>
  cfg->irq_config_func(dev);
 8001cde:	6833      	ldr	r3, [r6, #0]
 8001ce0:	4628      	mov	r0, r5
 8001ce2:	4798      	blx	r3
  return 0;
 8001ce4:	e7d6      	b.n	8001c94 <stm32_ipcc_mailbox_init+0x1c>
 8001ce6:	bf00      	nop
 8001ce8:	20000034 	.word	0x20000034

08001cec <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8001cec:	4a09      	ldr	r2, [pc, #36]	; (8001d14 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8001cee:	490a      	ldr	r1, [pc, #40]	; (8001d18 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8001cf0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8001cf2:	6809      	ldr	r1, [r1, #0]
 8001cf4:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8001cf6:	4909      	ldr	r1, [pc, #36]	; (8001d1c <arch_swap+0x30>)
	_current->arch.basepri = key;
 8001cf8:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8001cfa:	684b      	ldr	r3, [r1, #4]
 8001cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d00:	604b      	str	r3, [r1, #4]
 8001d02:	2300      	movs	r3, #0
 8001d04:	f383 8811 	msr	BASEPRI, r3
 8001d08:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8001d0c:	6893      	ldr	r3, [r2, #8]
}
 8001d0e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20000460 	.word	0x20000460
 8001d18:	08004f04 	.word	0x08004f04
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8001d20:	4912      	ldr	r1, [pc, #72]	; (8001d6c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8001d22:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8001d24:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8001d28:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8001d2a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8001d2e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8001d32:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8001d34:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8001d38:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8001d3c:	4f0c      	ldr	r7, [pc, #48]	; (8001d70 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8001d3e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8001d42:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
 8001d44:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8001d46:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8001d48:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
 8001d4a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8001d4c:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8001d4e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8001d52:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8001d54:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8001d56:	f000 fb8f 	bl	8002478 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8001d5a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8001d5e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8001d62:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8001d66:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8001d6a:	4770      	bx	lr
    ldr r1, =_kernel
 8001d6c:	20000460 	.word	0x20000460
    ldr v4, =_SCS_ICSR
 8001d70:	e000ed04 	.word	0xe000ed04

08001d74 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
 8001d74:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8001d78:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8001d7a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8001d7e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8001d82:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8001d84:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8001d88:	2902      	cmp	r1, #2
    beq _oops
 8001d8a:	d0ff      	beq.n	8001d8c <_oops>

08001d8c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8001d8c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8001d8e:	f002 fad3 	bl	8004338 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 8001d92:	bd01      	pop	{r0, pc}

08001d94 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8001d94:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	db08      	blt.n	8001dac <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f000 001f 	and.w	r0, r0, #31
 8001da0:	fa02 f000 	lsl.w	r0, r2, r0
 8001da4:	095b      	lsrs	r3, r3, #5
 8001da6:	4a02      	ldr	r2, [pc, #8]	; (8001db0 <arch_irq_enable+0x1c>)
 8001da8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000e100 	.word	0xe000e100

08001db4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8001db4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8001db6:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db8:	bfa8      	it	ge
 8001dba:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
 8001dbe:	f101 0101 	add.w	r1, r1, #1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc2:	bfb8      	it	lt
 8001dc4:	4b06      	ldrlt	r3, [pc, #24]	; (8001de0 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc6:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8001dca:	bfac      	ite	ge
 8001dcc:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd4:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd6:	bfb4      	ite	lt
 8001dd8:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dda:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
 8001dde:	4770      	bx	lr
 8001de0:	e000ed14 	.word	0xe000ed14

08001de4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8001de4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8001de8:	9b00      	ldr	r3, [sp, #0]
 8001dea:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
 8001dee:	490a      	ldr	r1, [pc, #40]	; (8001e18 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
 8001df0:	9b01      	ldr	r3, [sp, #4]
 8001df2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8001df6:	9b02      	ldr	r3, [sp, #8]
 8001df8:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 8001dfc:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8001e00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e04:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 8001e08:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8001e0c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8001e0e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 8001e10:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8001e12:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	08003a0b 	.word	0x08003a0b

08001e1c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8001e1c:	4a09      	ldr	r2, [pc, #36]	; (8001e44 <z_check_thread_stack_fail+0x28>)
{
 8001e1e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 8001e20:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
 8001e22:	b170      	cbz	r0, 8001e42 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8001e24:	f113 0f16 	cmn.w	r3, #22
 8001e28:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8001e2a:	d005      	beq.n	8001e38 <z_check_thread_stack_fail+0x1c>
 8001e2c:	f1a0 0220 	sub.w	r2, r0, #32
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d805      	bhi.n	8001e40 <z_check_thread_stack_fail+0x24>
 8001e34:	4283      	cmp	r3, r0
 8001e36:	d203      	bcs.n	8001e40 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 8001e38:	4281      	cmp	r1, r0
 8001e3a:	bf28      	it	cs
 8001e3c:	2000      	movcs	r0, #0
 8001e3e:	4770      	bx	lr
 8001e40:	2000      	movs	r0, #0
}
 8001e42:	4770      	bx	lr
 8001e44:	20000460 	.word	0x20000460

08001e48 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8001e48:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8001e4a:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <arch_switch_to_main_thread+0x28>)
 8001e4c:	6098      	str	r0, [r3, #8]
{
 8001e4e:	460d      	mov	r5, r1
 8001e50:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8001e52:	f000 fb11 	bl	8002478 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8001e56:	4620      	mov	r0, r4
 8001e58:	f385 8809 	msr	PSP, r5
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	b663      	cpsie	if
 8001e60:	f381 8811 	msr	BASEPRI, r1
 8001e64:	f3bf 8f6f 	isb	sy
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f001 fdcd 	bl	8003a0a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8001e70:	20000460 	.word	0x20000460

08001e74 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8001e74:	4901      	ldr	r1, [pc, #4]	; (8001e7c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8001e76:	2210      	movs	r2, #16
	str	r2, [r1]
 8001e78:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8001e7a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8001e7c:	e000ed10 	.word	0xe000ed10

08001e80 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8001e80:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8001e82:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8001e84:	f380 8811 	msr	BASEPRI, r0
	isb
 8001e88:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8001e8c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8001e90:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8001e92:	b662      	cpsie	i
	isb
 8001e94:	f3bf 8f6f 	isb	sy

	bx	lr
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop

08001e9c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8001e9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e9e:	4606      	mov	r6, r0

	if (esf != NULL) {
 8001ea0:	460c      	mov	r4, r1
 8001ea2:	b301      	cbz	r1, 8001ee6 <z_arm_fatal_error+0x4a>
 8001ea4:	4b13      	ldr	r3, [pc, #76]	; (8001ef4 <z_arm_fatal_error+0x58>)
 8001ea6:	4d14      	ldr	r5, [pc, #80]	; (8001ef8 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 8001ea8:	4814      	ldr	r0, [pc, #80]	; (8001efc <z_arm_fatal_error+0x60>)
 8001eaa:	1aed      	subs	r5, r5, r3
 8001eac:	08ed      	lsrs	r5, r5, #3
 8001eae:	01ad      	lsls	r5, r5, #6
 8001eb0:	f045 0501 	orr.w	r5, r5, #1
 8001eb4:	f8ad 5000 	strh.w	r5, [sp]
 8001eb8:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
 8001ebc:	6809      	ldr	r1, [r1, #0]
 8001ebe:	f001 fe28 	bl	8003b12 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 8001ec2:	f8ad 5000 	strh.w	r5, [sp]
 8001ec6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8001eca:	68e1      	ldr	r1, [r4, #12]
 8001ecc:	480c      	ldr	r0, [pc, #48]	; (8001f00 <z_arm_fatal_error+0x64>)
 8001ece:	f001 fe20 	bl	8003b12 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 8001ed2:	69e1      	ldr	r1, [r4, #28]
 8001ed4:	480b      	ldr	r0, [pc, #44]	; (8001f04 <z_arm_fatal_error+0x68>)
 8001ed6:	462a      	mov	r2, r5
 8001ed8:	f001 fdee 	bl	8003ab8 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 8001edc:	69a1      	ldr	r1, [r4, #24]
 8001ede:	480a      	ldr	r0, [pc, #40]	; (8001f08 <z_arm_fatal_error+0x6c>)
 8001ee0:	462a      	mov	r2, r5
 8001ee2:	f001 fde9 	bl	8003ab8 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8001ee6:	4621      	mov	r1, r4
 8001ee8:	4630      	mov	r0, r6
}
 8001eea:	b002      	add	sp, #8
 8001eec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
 8001ef0:	f000 bf0c 	b.w	8002d0c <z_fatal_error>
 8001ef4:	08004c78 	.word	0x08004c78
 8001ef8:	08004c98 	.word	0x08004c98
 8001efc:	08005104 	.word	0x08005104
 8001f00:	08005133 	.word	0x08005133
 8001f04:	08005162 	.word	0x08005162
 8001f08:	08005171 	.word	0x08005171

08001f0c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8001f0c:	bf30      	wfi
    b z_SysNmiOnReset
 8001f0e:	f7ff bffd 	b.w	8001f0c <z_SysNmiOnReset>
 8001f12:	bf00      	nop

08001f14 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8001f14:	4a0e      	ldr	r2, [pc, #56]	; (8001f50 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 8001f16:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8001f18:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <z_arm_prep_c+0x40>)
 8001f1a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8001f1e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f24:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8001f28:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f2c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8001f34:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8001f38:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8001f3c:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8001f40:	f000 ff42 	bl	8002dc8 <z_bss_zero>
	z_data_copy();
 8001f44:	f001 fb60 	bl	8003608 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8001f48:	f000 fa6c 	bl	8002424 <z_arm_interrupt_init>
	z_cstart();
 8001f4c:	f000 ff60 	bl	8002e10 <z_cstart>
 8001f50:	08000000 	.word	0x08000000
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8001f58:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8001f5a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8001f5e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8001f62:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8001f66:	4904      	ldr	r1, [pc, #16]	; (8001f78 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8001f68:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8001f6a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8001f6c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8001f6e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8001f72:	4902      	ldr	r1, [pc, #8]	; (8001f7c <_isr_wrapper+0x24>)
	bx r1
 8001f74:	4708      	bx	r1
 8001f76:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8001f78:	08004a88 	.word	0x08004a88
	ldr r1, =z_arm_int_exit
 8001f7c:	08002409 	.word	0x08002409

08001f80 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8001f80:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8001f82:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8001f86:	4808      	ldr	r0, [pc, #32]	; (8001fa8 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8001f88:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 8001f8c:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8001f8e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8001f92:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8001f96:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8001f98:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8001f9a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8001f9e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8001fa2:	f7ff ffb7 	bl	8001f14 <z_arm_prep_c>
 8001fa6:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8001fa8:	20001140 	.word	0x20001140

08001fac <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8001fac:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8001fb0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8001fb4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 8001fb6:	4672      	mov	r2, lr
	bl z_arm_fault
 8001fb8:	f000 f94e 	bl	8002258 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8001fbc:	bd01      	pop	{r0, pc}
 8001fbe:	bf00      	nop

08001fc0 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
 8001fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001fc4:	4b35      	ldr	r3, [pc, #212]	; (800209c <mem_manage_fault+0xdc>)
 8001fc6:	4c36      	ldr	r4, [pc, #216]	; (80020a0 <mem_manage_fault+0xe0>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8001fc8:	4d36      	ldr	r5, [pc, #216]	; (80020a4 <mem_manage_fault+0xe4>)
 8001fca:	1ae4      	subs	r4, r4, r3
 8001fcc:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
 8001fce:	01a4      	lsls	r4, r4, #6
 8001fd0:	f044 0901 	orr.w	r9, r4, #1
{
 8001fd4:	4607      	mov	r7, r0
 8001fd6:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
 8001fd8:	4833      	ldr	r0, [pc, #204]	; (80020a8 <mem_manage_fault+0xe8>)
 8001fda:	4649      	mov	r1, r9
{
 8001fdc:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
 8001fde:	f001 fd5e 	bl	8003a9e <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8001fe2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001fe4:	06db      	lsls	r3, r3, #27
 8001fe6:	d503      	bpl.n	8001ff0 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
 8001fe8:	4830      	ldr	r0, [pc, #192]	; (80020ac <mem_manage_fault+0xec>)
 8001fea:	4649      	mov	r1, r9
 8001fec:	f001 fd57 	bl	8003a9e <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8001ff0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001ff2:	0718      	lsls	r0, r3, #28
 8001ff4:	d504      	bpl.n	8002000 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
 8001ff6:	482e      	ldr	r0, [pc, #184]	; (80020b0 <mem_manage_fault+0xf0>)
 8001ff8:	f044 0101 	orr.w	r1, r4, #1
 8001ffc:	f001 fd4f 	bl	8003a9e <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8002000:	4d28      	ldr	r5, [pc, #160]	; (80020a4 <mem_manage_fault+0xe4>)
 8002002:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002004:	0799      	lsls	r1, r3, #30
 8002006:	d423      	bmi.n	8002050 <mem_manage_fault+0x90>
	uint32_t mmfar = -EINVAL;
 8002008:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 800200c:	4d25      	ldr	r5, [pc, #148]	; (80020a4 <mem_manage_fault+0xe4>)
 800200e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002010:	07db      	lsls	r3, r3, #31
 8002012:	d504      	bpl.n	800201e <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
 8002014:	4827      	ldr	r0, [pc, #156]	; (80020b4 <mem_manage_fault+0xf4>)
 8002016:	f044 0101 	orr.w	r1, r4, #1
 800201a:	f001 fd40 	bl	8003a9e <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 800201e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002020:	0698      	lsls	r0, r3, #26
 8002022:	d504      	bpl.n	800202e <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
 8002024:	4824      	ldr	r0, [pc, #144]	; (80020b8 <mem_manage_fault+0xf8>)
 8002026:	f044 0101 	orr.w	r1, r4, #1
 800202a:	f001 fd38 	bl	8003a9e <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 800202e:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <mem_manage_fault+0xe4>)
 8002030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002032:	06d1      	lsls	r1, r2, #27
 8002034:	d424      	bmi.n	8002080 <mem_manage_fault+0xc0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8002036:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8002038:	0792      	lsls	r2, r2, #30
 800203a:	d421      	bmi.n	8002080 <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800203c:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 800203e:	4a19      	ldr	r2, [pc, #100]	; (80020a4 <mem_manage_fault+0xe4>)
 8002040:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002042:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8002046:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
 8002048:	2300      	movs	r3, #0
 800204a:	7033      	strb	r3, [r6, #0]

	return reason;
}
 800204c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
 8002050:	f044 0a01 	orr.w	sl, r4, #1
 8002054:	4819      	ldr	r0, [pc, #100]	; (80020bc <mem_manage_fault+0xfc>)
 8002056:	4651      	mov	r1, sl
 8002058:	f001 fd21 	bl	8003a9e <log_0>
		uint32_t temp = SCB->MMFAR;
 800205c:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8002060:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002062:	061a      	lsls	r2, r3, #24
 8002064:	d5d0      	bpl.n	8002008 <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 8002066:	4816      	ldr	r0, [pc, #88]	; (80020c0 <mem_manage_fault+0x100>)
 8002068:	4652      	mov	r2, sl
 800206a:	4649      	mov	r1, r9
 800206c:	f001 fd24 	bl	8003ab8 <log_1>
			if (from_hard_fault != 0) {
 8002070:	f1b8 0f00 	cmp.w	r8, #0
 8002074:	d0ca      	beq.n	800200c <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8002076:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002078:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800207c:	62ab      	str	r3, [r5, #40]	; 0x28
 800207e:	e7c5      	b.n	800200c <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	051b      	lsls	r3, r3, #20
 8002084:	d5da      	bpl.n	800203c <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8002086:	4639      	mov	r1, r7
 8002088:	4648      	mov	r0, r9
 800208a:	f7ff fec7 	bl	8001e1c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 800208e:	2800      	cmp	r0, #0
 8002090:	d0d4      	beq.n	800203c <mem_manage_fault+0x7c>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002092:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 8002096:	2002      	movs	r0, #2
 8002098:	e7d1      	b.n	800203e <mem_manage_fault+0x7e>
 800209a:	bf00      	nop
 800209c:	08004c78 	.word	0x08004c78
 80020a0:	08004c98 	.word	0x08004c98
 80020a4:	e000ed00 	.word	0xe000ed00
 80020a8:	0800519f 	.word	0x0800519f
 80020ac:	080051b5 	.word	0x080051b5
 80020b0:	080051e8 	.word	0x080051e8
 80020b4:	08005229 	.word	0x08005229
 80020b8:	08005248 	.word	0x08005248
 80020bc:	080051fb 	.word	0x080051fb
 80020c0:	08005213 	.word	0x08005213

080020c4 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
 80020c4:	b570      	push	{r4, r5, r6, lr}
 80020c6:	4b23      	ldr	r3, [pc, #140]	; (8002154 <usage_fault.constprop.0+0x90>)
 80020c8:	4c23      	ldr	r4, [pc, #140]	; (8002158 <usage_fault.constprop.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 80020ca:	4d24      	ldr	r5, [pc, #144]	; (800215c <usage_fault.constprop.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
 80020cc:	4824      	ldr	r0, [pc, #144]	; (8002160 <usage_fault.constprop.0+0x9c>)
 80020ce:	1ae4      	subs	r4, r4, r3
 80020d0:	08e4      	lsrs	r4, r4, #3
 80020d2:	01a4      	lsls	r4, r4, #6
 80020d4:	f044 0601 	orr.w	r6, r4, #1
 80020d8:	4631      	mov	r1, r6
 80020da:	f001 fce0 	bl	8003a9e <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 80020de:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80020e0:	019b      	lsls	r3, r3, #6
 80020e2:	d503      	bpl.n	80020ec <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Division by zero");
 80020e4:	481f      	ldr	r0, [pc, #124]	; (8002164 <usage_fault.constprop.0+0xa0>)
 80020e6:	4631      	mov	r1, r6
 80020e8:	f001 fcd9 	bl	8003a9e <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 80020ec:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80020ee:	01dd      	lsls	r5, r3, #7
 80020f0:	d504      	bpl.n	80020fc <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
 80020f2:	481d      	ldr	r0, [pc, #116]	; (8002168 <usage_fault.constprop.0+0xa4>)
 80020f4:	f044 0101 	orr.w	r1, r4, #1
 80020f8:	f001 fcd1 	bl	8003a9e <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 80020fc:	4d17      	ldr	r5, [pc, #92]	; (800215c <usage_fault.constprop.0+0x98>)
 80020fe:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002100:	0318      	lsls	r0, r3, #12
 8002102:	d504      	bpl.n	800210e <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
 8002104:	4819      	ldr	r0, [pc, #100]	; (800216c <usage_fault.constprop.0+0xa8>)
 8002106:	f044 0101 	orr.w	r1, r4, #1
 800210a:	f001 fcc8 	bl	8003a9e <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 800210e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002110:	0359      	lsls	r1, r3, #13
 8002112:	d504      	bpl.n	800211e <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 8002114:	4816      	ldr	r0, [pc, #88]	; (8002170 <usage_fault.constprop.0+0xac>)
 8002116:	f044 0101 	orr.w	r1, r4, #1
 800211a:	f001 fcc0 	bl	8003a9e <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 800211e:	4d0f      	ldr	r5, [pc, #60]	; (800215c <usage_fault.constprop.0+0x98>)
 8002120:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002122:	039a      	lsls	r2, r3, #14
 8002124:	d504      	bpl.n	8002130 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
 8002126:	4813      	ldr	r0, [pc, #76]	; (8002174 <usage_fault.constprop.0+0xb0>)
 8002128:	f044 0101 	orr.w	r1, r4, #1
 800212c:	f001 fcb7 	bl	8003a9e <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8002130:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002132:	03db      	lsls	r3, r3, #15
 8002134:	d504      	bpl.n	8002140 <usage_fault.constprop.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 8002136:	4810      	ldr	r0, [pc, #64]	; (8002178 <usage_fault.constprop.0+0xb4>)
 8002138:	f044 0101 	orr.w	r1, r4, #1
 800213c:	f001 fcaf 	bl	8003a9e <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8002140:	4a06      	ldr	r2, [pc, #24]	; (800215c <usage_fault.constprop.0+0x98>)
 8002142:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002144:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8002148:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 800214c:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
 800214e:	2000      	movs	r0, #0
 8002150:	bd70      	pop	{r4, r5, r6, pc}
 8002152:	bf00      	nop
 8002154:	08004c78 	.word	0x08004c78
 8002158:	08004c98 	.word	0x08004c98
 800215c:	e000ed00 	.word	0xe000ed00
 8002160:	08005277 	.word	0x08005277
 8002164:	0800528f 	.word	0x0800528f
 8002168:	080052a2 	.word	0x080052a2
 800216c:	080052bc 	.word	0x080052bc
 8002170:	080052da 	.word	0x080052da
 8002174:	080052ff 	.word	0x080052ff
 8002178:	08005319 	.word	0x08005319

0800217c <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 800217c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002180:	4b2a      	ldr	r3, [pc, #168]	; (800222c <bus_fault.constprop.0+0xb0>)
 8002182:	4c2b      	ldr	r4, [pc, #172]	; (8002230 <bus_fault.constprop.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8002184:	4d2b      	ldr	r5, [pc, #172]	; (8002234 <bus_fault.constprop.0+0xb8>)
 8002186:	1ae4      	subs	r4, r4, r3
 8002188:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
 800218a:	01a4      	lsls	r4, r4, #6
 800218c:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 8002190:	4607      	mov	r7, r0
 8002192:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
 8002194:	4828      	ldr	r0, [pc, #160]	; (8002238 <bus_fault.constprop.0+0xbc>)
 8002196:	4641      	mov	r1, r8
 8002198:	f001 fc81 	bl	8003a9e <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 800219c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800219e:	04d9      	lsls	r1, r3, #19
 80021a0:	d503      	bpl.n	80021aa <bus_fault.constprop.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
 80021a2:	4826      	ldr	r0, [pc, #152]	; (800223c <bus_fault.constprop.0+0xc0>)
 80021a4:	4641      	mov	r1, r8
 80021a6:	f001 fc7a 	bl	8003a9e <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 80021aa:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80021ac:	051a      	lsls	r2, r3, #20
 80021ae:	d504      	bpl.n	80021ba <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
 80021b0:	4823      	ldr	r0, [pc, #140]	; (8002240 <bus_fault.constprop.0+0xc4>)
 80021b2:	f044 0101 	orr.w	r1, r4, #1
 80021b6:	f001 fc72 	bl	8003a9e <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 80021ba:	4d1e      	ldr	r5, [pc, #120]	; (8002234 <bus_fault.constprop.0+0xb8>)
 80021bc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80021be:	059b      	lsls	r3, r3, #22
 80021c0:	d512      	bpl.n	80021e8 <bus_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
 80021c2:	f044 0801 	orr.w	r8, r4, #1
 80021c6:	481f      	ldr	r0, [pc, #124]	; (8002244 <bus_fault.constprop.0+0xc8>)
 80021c8:	4641      	mov	r1, r8
 80021ca:	f001 fc68 	bl	8003a9e <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
 80021ce:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 80021d0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80021d2:	0418      	lsls	r0, r3, #16
 80021d4:	d508      	bpl.n	80021e8 <bus_fault.constprop.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
 80021d6:	481c      	ldr	r0, [pc, #112]	; (8002248 <bus_fault.constprop.0+0xcc>)
 80021d8:	4642      	mov	r2, r8
 80021da:	f001 fc6d 	bl	8003ab8 <log_1>
			if (from_hard_fault != 0) {
 80021de:	b11f      	cbz	r7, 80021e8 <bus_fault.constprop.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 80021e0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80021e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80021e6:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 80021e8:	4d12      	ldr	r5, [pc, #72]	; (8002234 <bus_fault.constprop.0+0xb8>)
 80021ea:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80021ec:	0559      	lsls	r1, r3, #21
 80021ee:	d504      	bpl.n	80021fa <bus_fault.constprop.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
 80021f0:	4816      	ldr	r0, [pc, #88]	; (800224c <bus_fault.constprop.0+0xd0>)
 80021f2:	f044 0101 	orr.w	r1, r4, #1
 80021f6:	f001 fc52 	bl	8003a9e <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 80021fa:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80021fc:	05da      	lsls	r2, r3, #23
 80021fe:	d50d      	bpl.n	800221c <bus_fault.constprop.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
 8002200:	4813      	ldr	r0, [pc, #76]	; (8002250 <bus_fault.constprop.0+0xd4>)
 8002202:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 8002206:	f001 fc4a 	bl	8003a9e <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 800220a:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <bus_fault.constprop.0+0xb8>)
 800220c:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 800220e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8002210:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8002214:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8002216:	7030      	strb	r0, [r6, #0]
}
 8002218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 800221c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800221e:	049b      	lsls	r3, r3, #18
 8002220:	d5f3      	bpl.n	800220a <bus_fault.constprop.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 8002222:	480c      	ldr	r0, [pc, #48]	; (8002254 <bus_fault.constprop.0+0xd8>)
 8002224:	f044 0101 	orr.w	r1, r4, #1
 8002228:	e7ed      	b.n	8002206 <bus_fault.constprop.0+0x8a>
 800222a:	bf00      	nop
 800222c:	08004c78 	.word	0x08004c78
 8002230:	08004c98 	.word	0x08004c98
 8002234:	e000ed00 	.word	0xe000ed00
 8002238:	08005344 	.word	0x08005344
 800223c:	0800535a 	.word	0x0800535a
 8002240:	080051e8 	.word	0x080051e8
 8002244:	0800536b 	.word	0x0800536b
 8002248:	08005384 	.word	0x08005384
 800224c:	08005399 	.word	0x08005399
 8002250:	080053b4 	.word	0x080053b4
 8002254:	08005248 	.word	0x08005248

08002258 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8002258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800225c:	4b5b      	ldr	r3, [pc, #364]	; (80023cc <z_arm_fault+0x174>)
 800225e:	685f      	ldr	r7, [r3, #4]
{
 8002260:	b08b      	sub	sp, #44	; 0x2c
 8002262:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8002264:	f3c7 0408 	ubfx	r4, r7, #0, #9
 8002268:	2600      	movs	r6, #0
 800226a:	f386 8811 	msr	BASEPRI, r6
 800226e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8002272:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 8002276:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800227a:	d10d      	bne.n	8002298 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 800227c:	f002 030c 	and.w	r3, r2, #12
 8002280:	2b08      	cmp	r3, #8
 8002282:	d10b      	bne.n	800229c <z_arm_fault+0x44>
 8002284:	4952      	ldr	r1, [pc, #328]	; (80023d0 <z_arm_fault+0x178>)
 8002286:	4b53      	ldr	r3, [pc, #332]	; (80023d4 <z_arm_fault+0x17c>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 8002288:	4853      	ldr	r0, [pc, #332]	; (80023d8 <z_arm_fault+0x180>)
 800228a:	1ac9      	subs	r1, r1, r3
 800228c:	08c9      	lsrs	r1, r1, #3
 800228e:	0189      	lsls	r1, r1, #6
 8002290:	f041 0101 	orr.w	r1, r1, #1
 8002294:	f001 fc03 	bl	8003a9e <log_0>
		return NULL;
 8002298:	4635      	mov	r5, r6
 800229a:	e003      	b.n	80022a4 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 800229c:	0712      	lsls	r2, r2, #28
 800229e:	d401      	bmi.n	80022a4 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
 80022a0:	4605      	mov	r5, r0
			*nested_exc = true;
 80022a2:	2601      	movs	r6, #1
	*recoverable = false;
 80022a4:	2300      	movs	r3, #0
 80022a6:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
 80022aa:	1ee3      	subs	r3, r4, #3
 80022ac:	2b09      	cmp	r3, #9
 80022ae:	d874      	bhi.n	800239a <z_arm_fault+0x142>
 80022b0:	e8df f003 	tbb	[pc, r3]
 80022b4:	40666205 	.word	0x40666205
 80022b8:	73737373 	.word	0x73737373
 80022bc:	6a73      	.short	0x6a73
 80022be:	4b45      	ldr	r3, [pc, #276]	; (80023d4 <z_arm_fault+0x17c>)
 80022c0:	4f43      	ldr	r7, [pc, #268]	; (80023d0 <z_arm_fault+0x178>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 80022c2:	f8df 8108 	ldr.w	r8, [pc, #264]	; 80023cc <z_arm_fault+0x174>
	PR_FAULT_INFO("***** HARD FAULT *****");
 80022c6:	4845      	ldr	r0, [pc, #276]	; (80023dc <z_arm_fault+0x184>)
 80022c8:	1aff      	subs	r7, r7, r3
 80022ca:	08ff      	lsrs	r7, r7, #3
 80022cc:	01bf      	lsls	r7, r7, #6
 80022ce:	f047 0701 	orr.w	r7, r7, #1
 80022d2:	4639      	mov	r1, r7
 80022d4:	f001 fbe3 	bl	8003a9e <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 80022d8:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
 80022dc:	f04f 0900 	mov.w	r9, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 80022e0:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
 80022e4:	f88d 9007 	strb.w	r9, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 80022e8:	d005      	beq.n	80022f6 <z_arm_fault+0x9e>
		PR_EXC("  Bus fault on vector table read");
 80022ea:	483d      	ldr	r0, [pc, #244]	; (80023e0 <z_arm_fault+0x188>)
 80022ec:	4639      	mov	r1, r7
	PR_FAULT_INFO(
 80022ee:	f001 fbd6 	bl	8003a9e <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80022f2:	2400      	movs	r4, #0
}
 80022f4:	e021      	b.n	800233a <z_arm_fault+0xe2>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 80022f6:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	d51d      	bpl.n	800233a <z_arm_fault+0xe2>
		PR_EXC("  Fault escalation (see below)");
 80022fe:	4839      	ldr	r0, [pc, #228]	; (80023e4 <z_arm_fault+0x18c>)
 8002300:	4639      	mov	r1, r7
 8002302:	f001 fbcc 	bl	8003a9e <log_0>
		if (SCB_MMFSR != 0) {
 8002306:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 800230a:	b133      	cbz	r3, 800231a <z_arm_fault+0xc2>
			reason = mem_manage_fault(esf, 1, recoverable);
 800230c:	f10d 0207 	add.w	r2, sp, #7
 8002310:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 8002312:	4628      	mov	r0, r5
 8002314:	f7ff fe54 	bl	8001fc0 <mem_manage_fault>
 8002318:	e00e      	b.n	8002338 <z_arm_fault+0xe0>
		} else if (SCB_BFSR != 0) {
 800231a:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
 800231e:	b12b      	cbz	r3, 800232c <z_arm_fault+0xd4>
			reason = bus_fault(esf, 1, recoverable);
 8002320:	f10d 0107 	add.w	r1, sp, #7
 8002324:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 8002326:	f7ff ff29 	bl	800217c <bus_fault.constprop.0>
 800232a:	e005      	b.n	8002338 <z_arm_fault+0xe0>
		} else if (SCB_UFSR != 0) {
 800232c:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
 8002330:	b29b      	uxth	r3, r3
 8002332:	b113      	cbz	r3, 800233a <z_arm_fault+0xe2>
			reason = usage_fault(esf);
 8002334:	f7ff fec6 	bl	80020c4 <usage_fault.constprop.0>
 8002338:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 800233a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800233e:	b9c3      	cbnz	r3, 8002372 <z_arm_fault+0x11a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8002340:	aa02      	add	r2, sp, #8
 8002342:	f105 0720 	add.w	r7, r5, #32
 8002346:	6828      	ldr	r0, [r5, #0]
 8002348:	6869      	ldr	r1, [r5, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	c303      	stmia	r3!, {r0, r1}
 800234e:	3508      	adds	r5, #8
 8002350:	42bd      	cmp	r5, r7
 8002352:	461a      	mov	r2, r3
 8002354:	d1f7      	bne.n	8002346 <z_arm_fault+0xee>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 8002356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002358:	b39e      	cbz	r6, 80023c2 <z_arm_fault+0x16a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 800235a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800235e:	b922      	cbnz	r2, 800236a <z_arm_fault+0x112>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8002360:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8002364:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8002368:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 800236a:	a902      	add	r1, sp, #8
 800236c:	4620      	mov	r0, r4
 800236e:	f7ff fd95 	bl	8001e9c <z_arm_fatal_error>
}
 8002372:	b00b      	add	sp, #44	; 0x2c
 8002374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
 8002378:	f10d 0207 	add.w	r2, sp, #7
 800237c:	2100      	movs	r1, #0
 800237e:	e7c8      	b.n	8002312 <z_arm_fault+0xba>
		reason = bus_fault(esf, 0, recoverable);
 8002380:	f10d 0107 	add.w	r1, sp, #7
 8002384:	2000      	movs	r0, #0
 8002386:	e7ce      	b.n	8002326 <z_arm_fault+0xce>
 8002388:	4911      	ldr	r1, [pc, #68]	; (80023d0 <z_arm_fault+0x178>)
 800238a:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <z_arm_fault+0x17c>)
	PR_FAULT_INFO(
 800238c:	4816      	ldr	r0, [pc, #88]	; (80023e8 <z_arm_fault+0x190>)
 800238e:	1ac9      	subs	r1, r1, r3
 8002390:	08c9      	lsrs	r1, r1, #3
 8002392:	0189      	lsls	r1, r1, #6
 8002394:	f041 0101 	orr.w	r1, r1, #1
 8002398:	e7a9      	b.n	80022ee <z_arm_fault+0x96>
 800239a:	4a0e      	ldr	r2, [pc, #56]	; (80023d4 <z_arm_fault+0x17c>)
 800239c:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <z_arm_fault+0x178>)
	PR_FAULT_INFO("***** %s %d) *****",
 800239e:	4813      	ldr	r0, [pc, #76]	; (80023ec <z_arm_fault+0x194>)
 80023a0:	4913      	ldr	r1, [pc, #76]	; (80023f0 <z_arm_fault+0x198>)
 80023a2:	1a9b      	subs	r3, r3, r2
 80023a4:	08db      	lsrs	r3, r3, #3
 80023a6:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
 80023aa:	ea4f 1383 	mov.w	r3, r3, lsl #6
 80023ae:	bf18      	it	ne
 80023b0:	4601      	movne	r1, r0
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	480f      	ldr	r0, [pc, #60]	; (80023f4 <z_arm_fault+0x19c>)
 80023b8:	f1a4 0210 	sub.w	r2, r4, #16
 80023bc:	f001 fb90 	bl	8003ae0 <log_2>
 80023c0:	e797      	b.n	80022f2 <z_arm_fault+0x9a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80023c2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80023c6:	f023 0301 	bic.w	r3, r3, #1
 80023ca:	e7cd      	b.n	8002368 <z_arm_fault+0x110>
 80023cc:	e000ed00 	.word	0xe000ed00
 80023d0:	08004c98 	.word	0x08004c98
 80023d4:	08004c78 	.word	0x08004c78
 80023d8:	080053cc 	.word	0x080053cc
 80023dc:	080053f7 	.word	0x080053f7
 80023e0:	0800540e 	.word	0x0800540e
 80023e4:	0800542f 	.word	0x0800542f
 80023e8:	0800544e 	.word	0x0800544e
 80023ec:	08005487 	.word	0x08005487
 80023f0:	08005472 	.word	0x08005472
 80023f4:	080054a0 	.word	0x080054a0

080023f8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 80023f8:	4a02      	ldr	r2, [pc, #8]	; (8002404 <z_arm_fault_init+0xc>)
 80023fa:	6953      	ldr	r3, [r2, #20]
 80023fc:	f043 0310 	orr.w	r3, r3, #16
 8002400:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 8002402:	4770      	bx	lr
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8002408:	4b04      	ldr	r3, [pc, #16]	; (800241c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 800240a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 800240c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
 800240e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8002410:	d003      	beq.n	800241a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8002412:	4903      	ldr	r1, [pc, #12]	; (8002420 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8002414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8002418:	600a      	str	r2, [r1, #0]

0800241a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 800241a:	4770      	bx	lr
	ldr r3, =_kernel
 800241c:	20000460 	.word	0x20000460
	ldr r1, =_SCS_ICSR
 8002420:	e000ed04 	.word	0xe000ed04

08002424 <z_arm_interrupt_init>:
 8002424:	4804      	ldr	r0, [pc, #16]	; (8002438 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8002426:	2300      	movs	r3, #0
 8002428:	2110      	movs	r1, #16
 800242a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 800242c:	3301      	adds	r3, #1
 800242e:	2b3e      	cmp	r3, #62	; 0x3e
 8002430:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8002434:	d1f9      	bne.n	800242a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 8002436:	4770      	bx	lr
 8002438:	e000e100 	.word	0xe000e100

0800243c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <z_impl_k_thread_abort+0x1c>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	4283      	cmp	r3, r0
 8002442:	d107      	bne.n	8002454 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002444:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8002448:	b123      	cbz	r3, 8002454 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800244a:	4a04      	ldr	r2, [pc, #16]	; (800245c <z_impl_k_thread_abort+0x20>)
 800244c:	6853      	ldr	r3, [r2, #4]
 800244e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002452:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
 8002454:	f001 b886 	b.w	8003564 <z_thread_abort>
 8002458:	20000460 	.word	0x20000460
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8002460:	4b02      	ldr	r3, [pc, #8]	; (800246c <z_arm_configure_static_mpu_regions+0xc>)
 8002462:	4a03      	ldr	r2, [pc, #12]	; (8002470 <z_arm_configure_static_mpu_regions+0x10>)
 8002464:	4803      	ldr	r0, [pc, #12]	; (8002474 <z_arm_configure_static_mpu_regions+0x14>)
 8002466:	2101      	movs	r1, #1
 8002468:	f000 b88c 	b.w	8002584 <arm_core_mpu_configure_static_mpu_regions>
 800246c:	20008000 	.word	0x20008000
 8002470:	20000000 	.word	0x20000000
 8002474:	08004dcc 	.word	0x08004dcc

08002478 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8002478:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 800247a:	4b05      	ldr	r3, [pc, #20]	; (8002490 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
 800247c:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
 800247e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8002480:	4a04      	ldr	r2, [pc, #16]	; (8002494 <z_arm_configure_dynamic_mpu_regions+0x1c>)
 8002482:	2120      	movs	r1, #32
 8002484:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8002488:	4618      	mov	r0, r3
 800248a:	2101      	movs	r1, #1
 800248c:	f000 b884 	b.w	8002598 <arm_core_mpu_configure_dynamic_mpu_regions>
 8002490:	20000400 	.word	0x20000400
 8002494:	150b0000 	.word	0x150b0000

08002498 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8002498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
 800249a:	4f2a      	ldr	r7, [pc, #168]	; (8002544 <mpu_configure_regions+0xac>)
 800249c:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 800249e:	2100      	movs	r1, #0
 80024a0:	42b1      	cmp	r1, r6
 80024a2:	da14      	bge.n	80024ce <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
 80024a4:	6844      	ldr	r4, [r0, #4]
 80024a6:	2c00      	cmp	r4, #0
 80024a8:	d048      	beq.n	800253c <mpu_configure_regions+0xa4>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
 80024aa:	b1c3      	cbz	r3, 80024de <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 80024ac:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 80024b0:	ea14 0f0c 	tst.w	r4, ip
 80024b4:	d00d      	beq.n	80024d2 <mpu_configure_regions+0x3a>
 80024b6:	4a24      	ldr	r2, [pc, #144]	; (8002548 <mpu_configure_regions+0xb0>)
 80024b8:	4b24      	ldr	r3, [pc, #144]	; (800254c <mpu_configure_regions+0xb4>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
 80024ba:	4825      	ldr	r0, [pc, #148]	; (8002550 <mpu_configure_regions+0xb8>)
 80024bc:	1ad2      	subs	r2, r2, r3
 80024be:	08d2      	lsrs	r2, r2, #3
 80024c0:	0192      	lsls	r2, r2, #6
 80024c2:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 80024c6:	f001 faf7 	bl	8003ab8 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
 80024ca:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 80024ce:	4610      	mov	r0, r2
 80024d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
 80024d2:	2c1f      	cmp	r4, #31
 80024d4:	d9ef      	bls.n	80024b6 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
 80024d6:	6805      	ldr	r5, [r0, #0]
		&&
 80024d8:	ea1c 0f05 	tst.w	ip, r5
 80024dc:	d1eb      	bne.n	80024b6 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 80024de:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 80024e0:	b2d5      	uxtb	r5, r2
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80024e2:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
 80024e6:	6802      	ldr	r2, [r0, #0]
	if (size <= 32U) {
 80024e8:	d916      	bls.n	8002518 <mpu_configure_regions+0x80>
	if (size > (1UL << 31)) {
 80024ea:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80024ee:	d815      	bhi.n	800251c <mpu_configure_regions+0x84>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 80024f0:	3c01      	subs	r4, #1
 80024f2:	fab4 f484 	clz	r4, r4
 80024f6:	f1c4 041f 	rsb	r4, r4, #31
 80024fa:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 80024fc:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80024fe:	ea4c 0404 	orr.w	r4, ip, r4
 8002502:	d90d      	bls.n	8002520 <mpu_configure_regions+0x88>
 8002504:	4a10      	ldr	r2, [pc, #64]	; (8002548 <mpu_configure_regions+0xb0>)
 8002506:	4b11      	ldr	r3, [pc, #68]	; (800254c <mpu_configure_regions+0xb4>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 8002508:	4812      	ldr	r0, [pc, #72]	; (8002554 <mpu_configure_regions+0xbc>)
 800250a:	1ad2      	subs	r2, r2, r3
 800250c:	08d2      	lsrs	r2, r2, #3
 800250e:	0192      	lsls	r2, r2, #6
 8002510:	f042 0201 	orr.w	r2, r2, #1
 8002514:	4629      	mov	r1, r5
 8002516:	e7d6      	b.n	80024c6 <mpu_configure_regions+0x2e>
		return REGION_32B;
 8002518:	2408      	movs	r4, #8
 800251a:	e7ef      	b.n	80024fc <mpu_configure_regions+0x64>
		return REGION_4G;
 800251c:	243e      	movs	r4, #62	; 0x3e
 800251e:	e7ed      	b.n	80024fc <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8002520:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
 8002524:	432a      	orrs	r2, r5
 8002526:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800252a:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
 800252e:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8002532:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8002536:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
		reg_index++;
 800253a:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
 800253c:	3101      	adds	r1, #1
 800253e:	300c      	adds	r0, #12
 8002540:	e7ae      	b.n	80024a0 <mpu_configure_regions+0x8>
 8002542:	bf00      	nop
 8002544:	e000ed00 	.word	0xe000ed00
 8002548:	08004c90 	.word	0x08004c90
 800254c:	08004c78 	.word	0x08004c78
 8002550:	080054b7 	.word	0x080054b7
 8002554:	080054da 	.word	0x080054da

08002558 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8002558:	4b04      	ldr	r3, [pc, #16]	; (800256c <arm_core_mpu_enable+0x14>)
 800255a:	2205      	movs	r2, #5
 800255c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8002560:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002564:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002570:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8002574:	4b02      	ldr	r3, [pc, #8]	; (8002580 <arm_core_mpu_disable+0x10>)
 8002576:	2200      	movs	r2, #0
 8002578:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 8002584:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 8002586:	4c03      	ldr	r4, [pc, #12]	; (8002594 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8002588:	2301      	movs	r3, #1
 800258a:	7822      	ldrb	r2, [r4, #0]
 800258c:	f7ff ff84 	bl	8002498 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8002590:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 8002592:	bd10      	pop	{r4, pc}
 8002594:	2000048f 	.word	0x2000048f

08002598 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 8002598:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 800259a:	4a09      	ldr	r2, [pc, #36]	; (80025c0 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
 800259c:	2300      	movs	r3, #0
 800259e:	7812      	ldrb	r2, [r2, #0]
 80025a0:	f7ff ff7a 	bl	8002498 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 80025a4:	f110 0f16 	cmn.w	r0, #22
 80025a8:	d003      	beq.n	80025b2 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
 80025ac:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 80025ae:	2807      	cmp	r0, #7
 80025b0:	dd00      	ble.n	80025b4 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 80025b2:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
 80025b4:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
 80025b8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80025bc:	3001      	adds	r0, #1
 80025be:	e7f6      	b.n	80025ae <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
 80025c0:	2000048f 	.word	0x2000048f
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 80025c8:	4914      	ldr	r1, [pc, #80]	; (800261c <z_arm_mpu_init+0x54>)
 80025ca:	6808      	ldr	r0, [r1, #0]
 80025cc:	2808      	cmp	r0, #8
{
 80025ce:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 80025d0:	d821      	bhi.n	8002616 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 80025d2:	f7ff ffcd 	bl	8002570 <arm_core_mpu_disable>
	MPU->RNR = index;
 80025d6:	4c12      	ldr	r4, [pc, #72]	; (8002620 <z_arm_mpu_init+0x58>)
 80025d8:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80025da:	2200      	movs	r2, #0
 80025dc:	4290      	cmp	r0, r2
 80025de:	f101 010c 	add.w	r1, r1, #12
 80025e2:	d105      	bne.n	80025f0 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 80025e4:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <z_arm_mpu_init+0x5c>)
 80025e6:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 80025e8:	f7ff ffb6 	bl	8002558 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 80025ec:	2000      	movs	r0, #0
}
 80025ee:	bd10      	pop	{r4, pc}
 80025f0:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80025f4:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 80025f8:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8002602:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8002606:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8002612:	3201      	adds	r2, #1
 8002614:	e7e2      	b.n	80025dc <z_arm_mpu_init+0x14>
		return -1;
 8002616:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800261a:	e7e8      	b.n	80025ee <z_arm_mpu_init+0x26>
 800261c:	08004dd8 	.word	0x08004dd8
 8002620:	e000ed00 	.word	0xe000ed00
 8002624:	2000048f 	.word	0x2000048f

08002628 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 8002628:	4b01      	ldr	r3, [pc, #4]	; (8002630 <__stdout_hook_install+0x8>)
 800262a:	6018      	str	r0, [r3, #0]
}
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	2000001c 	.word	0x2000001c

08002634 <gpio_stm32_pin_interrupt_configure>:

static int gpio_stm32_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
 8002634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002636:	460c      	mov	r4, r1
 8002638:	4611      	mov	r1, r2
	const struct gpio_stm32_config *cfg = dev->config;
	struct gpio_stm32_data *data = dev->data;
	int edge = 0;
	int err = 0;

	if (mode == GPIO_INT_MODE_DISABLED) {
 800263a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
	const struct gpio_stm32_config *cfg = dev->config;
 800263e:	6846      	ldr	r6, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 8002640:	6902      	ldr	r2, [r0, #16]
{
 8002642:	461f      	mov	r7, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 8002644:	d125      	bne.n	8002692 <gpio_stm32_pin_interrupt_configure+0x5e>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8002646:	f004 0303 	and.w	r3, r4, #3
 800264a:	3304      	adds	r3, #4
 800264c:	009a      	lsls	r2, r3, #2
 800264e:	230f      	movs	r3, #15
 8002650:	4093      	lsls	r3, r2
 8002652:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0x03U], ((Line >> LL_SYSCFG_EXTI_REGISTER_PINPOS_SHFT)) >> ((POSITION_VAL(Line >> LL_SYSCFG_EXTI_REGISTER_PINPOS_SHFT)) & 0x0000000FUL)));
 8002656:	f003 0203 	and.w	r2, r3, #3
 800265a:	3202      	adds	r2, #2
 800265c:	492f      	ldr	r1, [pc, #188]	; (800271c <gpio_stm32_pin_interrupt_configure+0xe8>)
 800265e:	0c1b      	lsrs	r3, r3, #16
 8002660:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002664:	fa93 f2a3 	rbit	r2, r3
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002668:	fab2 f282 	clz	r2, r2
 800266c:	f002 020f 	and.w	r2, r2, #15
 8002670:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8002672:	68b2      	ldr	r2, [r6, #8]
 8002674:	400b      	ands	r3, r1
 8002676:	429a      	cmp	r2, r3
 8002678:	d109      	bne.n	800268e <gpio_stm32_pin_interrupt_configure+0x5a>
			stm32_exti_disable(pin);
 800267a:	4620      	mov	r0, r4
 800267c:	f7ff f924 	bl	80018c8 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8002680:	4620      	mov	r0, r4
 8002682:	f7ff f977 	bl	8001974 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8002686:	2100      	movs	r1, #0
 8002688:	4620      	mov	r0, r4
 800268a:	f7ff f92d 	bl	80018e8 <stm32_exti_trigger>
	int err = 0;
 800268e:	2500      	movs	r5, #0
 8002690:	e037      	b.n	8002702 <gpio_stm32_pin_interrupt_configure+0xce>
		/* else: No irq source configured for pin. Nothing to disable */
		goto exit;
	}

	/* Level trigger interrupts not supported */
	if (mode == GPIO_INT_MODE_LEVEL) {
 8002692:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8002696:	d03a      	beq.n	800270e <gpio_stm32_pin_interrupt_configure+0xda>
		err = -ENOTSUP;
		goto exit;
	}

	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8002698:	4921      	ldr	r1, [pc, #132]	; (8002720 <gpio_stm32_pin_interrupt_configure+0xec>)
 800269a:	4620      	mov	r0, r4
 800269c:	f7ff f958 	bl	8001950 <stm32_exti_set_callback>
 80026a0:	4605      	mov	r5, r0
 80026a2:	bbb8      	cbnz	r0, 8002714 <gpio_stm32_pin_interrupt_configure+0xe0>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80026a4:	f004 0303 	and.w	r3, r4, #3
 80026a8:	3304      	adds	r3, #4
 80026aa:	009a      	lsls	r2, r3, #2
 80026ac:	230f      	movs	r3, #15
 80026ae:	4093      	lsls	r3, r2
 80026b0:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x03U], (Line >> LL_SYSCFG_EXTI_REGISTER_PINPOS_SHFT), (Port << ((POSITION_VAL((Line >> LL_SYSCFG_EXTI_REGISTER_PINPOS_SHFT))) & 0x0000000FUL)));
 80026b4:	f003 0203 	and.w	r2, r3, #3
 80026b8:	0092      	lsls	r2, r2, #2
 80026ba:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80026be:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
	LL_SYSCFG_SetEXTISource(port, line);
 80026c2:	68b0      	ldr	r0, [r6, #8]
 80026c4:	6896      	ldr	r6, [r2, #8]
 80026c6:	0c19      	lsrs	r1, r3, #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c8:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 80026cc:	fab1 f181 	clz	r1, r1
 80026d0:	f001 010f 	and.w	r1, r1, #15
 80026d4:	ea26 4313 	bic.w	r3, r6, r3, lsr #16
 80026d8:	fa00 f101 	lsl.w	r1, r0, r1
 80026dc:	430b      	orrs	r3, r1
		goto exit;
	}

	gpio_stm32_enable_int(cfg->port, pin);

	switch (trig) {
 80026de:	f5b7 2f80 	cmp.w	r7, #262144	; 0x40000
 80026e2:	6093      	str	r3, [r2, #8]
 80026e4:	d00f      	beq.n	8002706 <gpio_stm32_pin_interrupt_configure+0xd2>
 80026e6:	f5b7 2fc0 	cmp.w	r7, #393216	; 0x60000
 80026ea:	d00e      	beq.n	800270a <gpio_stm32_pin_interrupt_configure+0xd6>
 80026ec:	f5b7 3f00 	cmp.w	r7, #131072	; 0x20000
 80026f0:	bf14      	ite	ne
 80026f2:	2100      	movne	r1, #0
 80026f4:	2102      	moveq	r1, #2
	case GPIO_INT_TRIG_BOTH:
		edge = STM32_EXTI_TRIG_BOTH;
		break;
	}

	stm32_exti_trigger(pin, edge);
 80026f6:	4620      	mov	r0, r4
 80026f8:	f7ff f8f6 	bl	80018e8 <stm32_exti_trigger>

	stm32_exti_enable(pin);
 80026fc:	4620      	mov	r0, r4
 80026fe:	f7ff f8d3 	bl	80018a8 <stm32_exti_enable>

exit:
	return err;
}
 8002702:	4628      	mov	r0, r5
 8002704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		edge = STM32_EXTI_TRIG_RISING;
 8002706:	2101      	movs	r1, #1
 8002708:	e7f5      	b.n	80026f6 <gpio_stm32_pin_interrupt_configure+0xc2>
		edge = STM32_EXTI_TRIG_BOTH;
 800270a:	2103      	movs	r1, #3
 800270c:	e7f3      	b.n	80026f6 <gpio_stm32_pin_interrupt_configure+0xc2>
		err = -ENOTSUP;
 800270e:	f06f 0585 	mvn.w	r5, #133	; 0x85
 8002712:	e7f6      	b.n	8002702 <gpio_stm32_pin_interrupt_configure+0xce>
		err = -EBUSY;
 8002714:	f06f 050f 	mvn.w	r5, #15
	return err;
 8002718:	e7f3      	b.n	8002702 <gpio_stm32_pin_interrupt_configure+0xce>
 800271a:	bf00      	nop
 800271c:	40010000 	.word	0x40010000
 8002720:	080043e9 	.word	0x080043e9

08002724 <gpio_stm32_clock_request>:
{
 8002724:	b570      	push	{r4, r5, r6, lr}
					(clock_control_subsys_t *)&cfg->pclken);
 8002726:	6845      	ldr	r5, [r0, #4]
 8002728:	4c0b      	ldr	r4, [pc, #44]	; (8002758 <gpio_stm32_clock_request+0x34>)
 800272a:	350c      	adds	r5, #12
	if (on) {
 800272c:	b151      	cbz	r1, 8002744 <gpio_stm32_clock_request+0x20>
 800272e:	4620      	mov	r0, r4
 8002730:	f001 ffc8 	bl	80046c4 <z_device_ready>
 8002734:	b168      	cbz	r0, 8002752 <gpio_stm32_clock_request+0x2e>
 8002736:	68a3      	ldr	r3, [r4, #8]
 8002738:	681b      	ldr	r3, [r3, #0]
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->off(dev, sys);
 800273a:	4629      	mov	r1, r5
 800273c:	4620      	mov	r0, r4
}
 800273e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002742:	4718      	bx	r3
 8002744:	4620      	mov	r0, r4
 8002746:	f001 ffbd 	bl	80046c4 <z_device_ready>
 800274a:	b110      	cbz	r0, 8002752 <gpio_stm32_clock_request+0x2e>
 800274c:	68a3      	ldr	r3, [r4, #8]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	e7f3      	b.n	800273a <gpio_stm32_clock_request+0x16>
 8002752:	f06f 0012 	mvn.w	r0, #18
 8002756:	bd70      	pop	{r4, r5, r6, pc}
 8002758:	20000034 	.word	0x20000034

0800275c <uart_stm32_set_baudrate>:

#define TIMEOUT 1000

static inline void uart_stm32_set_baudrate(const struct device *dev,
					   uint32_t baud_rate)
{
 800275c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);

	uint32_t clock_rate;

	/* Get clock rate */
	if (clock_control_get_rate(data->clock,
 800275e:	6903      	ldr	r3, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002760:	6847      	ldr	r7, [r0, #4]
	if (clock_control_get_rate(data->clock,
 8002762:	685c      	ldr	r4, [r3, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002764:	f857 6b08 	ldr.w	r6, [r7], #8
{
 8002768:	460d      	mov	r5, r1
 800276a:	4620      	mov	r0, r4
 800276c:	f001 ffaa 	bl	80046c4 <z_device_ready>
 8002770:	b958      	cbnz	r0, 800278a <uart_stm32_set_baudrate+0x2e>
 8002772:	491a      	ldr	r1, [pc, #104]	; (80027dc <uart_stm32_set_baudrate+0x80>)
 8002774:	4b1a      	ldr	r3, [pc, #104]	; (80027e0 <uart_stm32_set_baudrate+0x84>)
			       (clock_control_subsys_t *)&config->pclken,
			       &clock_rate) < 0) {
		LOG_ERR("Failed call clock_control_get_rate");
 8002776:	481b      	ldr	r0, [pc, #108]	; (80027e4 <uart_stm32_set_baudrate+0x88>)
 8002778:	1ac9      	subs	r1, r1, r3
 800277a:	08c9      	lsrs	r1, r1, #3
 800277c:	0189      	lsls	r1, r1, #6
 800277e:	f041 0101 	orr.w	r1, r1, #1
 8002782:	f001 f98c 	bl	8003a9e <log_0>
				     baud_rate);

#if HAS_LPUART_1
	}
#endif /* HAS_LPUART_1 */
}
 8002786:	b003      	add	sp, #12
 8002788:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 800278a:	68a3      	ldr	r3, [r4, #8]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0ef      	beq.n	8002772 <uart_stm32_set_baudrate+0x16>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 8002792:	aa01      	add	r2, sp, #4
 8002794:	4639      	mov	r1, r7
 8002796:	4620      	mov	r0, r4
 8002798:	4798      	blx	r3
	if (clock_control_get_rate(data->clock,
 800279a:	2800      	cmp	r0, #0
 800279c:	dbe9      	blt.n	8002772 <uart_stm32_set_baudrate+0x16>
	if (IS_LPUART_INSTANCE(UartInstance)) {
 800279e:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <uart_stm32_set_baudrate+0x8c>)
		LL_LPUART_SetBaudRate(UartInstance,
 80027a0:	9c01      	ldr	r4, [sp, #4]
	if (IS_LPUART_INSTANCE(UartInstance)) {
 80027a2:	429e      	cmp	r6, r3
 80027a4:	d10f      	bne.n	80027c6 <uart_stm32_set_baudrate+0x6a>
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetBaudRate(USART_TypeDef *LPUARTx, uint32_t PeriphClk, uint32_t PrescalerValue,
                                           uint32_t BaudRate)
{
  if (BaudRate != 0U)
 80027a6:	2d00      	cmp	r5, #0
 80027a8:	d0ed      	beq.n	8002786 <uart_stm32_set_baudrate+0x2a>
  {
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, PrescalerValue, BaudRate);
 80027aa:	2300      	movs	r3, #0
 80027ac:	4619      	mov	r1, r3
 80027ae:	0868      	lsrs	r0, r5, #1
 80027b0:	f44f 7780 	mov.w	r7, #256	; 0x100
 80027b4:	462a      	mov	r2, r5
 80027b6:	fbe4 0107 	umlal	r0, r1, r4, r7
 80027ba:	f7fd fcbd 	bl	8000138 <__aeabi_uldivmod>
 80027be:	f3c0 0013 	ubfx	r0, r0, #0, #20
 80027c2:	60f0      	str	r0, [r6, #12]
 80027c4:	e7df      	b.n	8002786 <uart_stm32_set_baudrate+0x2a>
  *         @arg @ref LL_USART_OVERSAMPLING_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetOverSampling(USART_TypeDef *USARTx, uint32_t OverSampling)
{
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 80027c6:	6833      	ldr	r3, [r6, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    USARTx->BRR = brrtemp;
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80027c8:	eb04 0455 	add.w	r4, r4, r5, lsr #1
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 80027cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80027d0:	fbb4 f4f5 	udiv	r4, r4, r5
 80027d4:	b2a4      	uxth	r4, r4
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 80027d6:	6033      	str	r3, [r6, #0]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80027d8:	60f4      	str	r4, [r6, #12]
 80027da:	e7d4      	b.n	8002786 <uart_stm32_set_baudrate+0x2a>
 80027dc:	08004ca0 	.word	0x08004ca0
 80027e0:	08004c78 	.word	0x08004c78
 80027e4:	08005527 	.word	0x08005527
 80027e8:	40008000 	.word	0x40008000

080027ec <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 80027ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const struct uart_stm32_config *config = DEV_CFG(dev);
 80027f0:	6846      	ldr	r6, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 80027f2:	6907      	ldr	r7, [r0, #16]
	data->clock = clk;
 80027f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80028c8 <uart_stm32_init+0xdc>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80027f8:	46b1      	mov	r9, r6
{
 80027fa:	4605      	mov	r5, r0
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80027fc:	f859 4b08 	ldr.w	r4, [r9], #8
	data->clock = clk;
 8002800:	f8c7 8004 	str.w	r8, [r7, #4]
 8002804:	4640      	mov	r0, r8
 8002806:	f001 ff5d 	bl	80046c4 <z_device_ready>
 800280a:	2800      	cmp	r0, #0
 800280c:	d058      	beq.n	80028c0 <uart_stm32_init+0xd4>
	return api->on(dev, sys);
 800280e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8002812:	4640      	mov	r0, r8
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4649      	mov	r1, r9
 8002818:	4798      	blx	r3
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 800281a:	4680      	mov	r8, r0
 800281c:	2800      	cmp	r0, #0
 800281e:	d14f      	bne.n	80028c0 <uart_stm32_init+0xd4>
	}

	/* Configure dt provided device signals when available */
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
					 config->pinctrl_list_size,
					 (uint32_t)UART_STRUCT(dev));
 8002820:	686b      	ldr	r3, [r5, #4]
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
 8002822:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	f7ff f8be 	bl	80019a8 <stm32_dt_pinctrl_configure>
	if (err < 0) {
 800282c:	2800      	cmp	r0, #0
 800282e:	db49      	blt.n	80028c4 <uart_stm32_init+0xd8>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8002830:	6823      	ldr	r3, [r4, #0]
				      LL_USART_DIRECTION_TX_RX);

	/* Determine the datawidth and parity. If we use other parity than
	 * 'none' we must use datawidth = 9 (to get 8 databit + 1 parity bit).
	 */
	if (config->parity == 2) {
 8002832:	6971      	ldr	r1, [r6, #20]
 8002834:	f023 0301 	bic.w	r3, r3, #1
 8002838:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800283a:	6823      	ldr	r3, [r4, #0]
 800283c:	2902      	cmp	r1, #2
 800283e:	f043 030c 	orr.w	r3, r3, #12
 8002842:	6023      	str	r3, [r4, #0]
 8002844:	d00f      	beq.n	8002866 <uart_stm32_init+0x7a>
		/* 8 databit, 1 parity bit, parity even */
		ll_parity = LL_USART_PARITY_EVEN;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else if (config->parity == 1) {
 8002846:	2901      	cmp	r1, #1
 8002848:	d035      	beq.n	80028b6 <uart_stm32_init+0xca>
		/* 8 databit, 1 parity bit, parity odd */
		ll_parity = LL_USART_PARITY_ODD;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else {  /* Default to 8N0, but show warning if invalid value */
		if (config->parity != 0) {
 800284a:	b151      	cbz	r1, 8002862 <uart_stm32_init+0x76>
 800284c:	4b1f      	ldr	r3, [pc, #124]	; (80028cc <uart_stm32_init+0xe0>)
 800284e:	4a20      	ldr	r2, [pc, #128]	; (80028d0 <uart_stm32_init+0xe4>)
			LOG_WRN("Invalid parity setting '%d'."
 8002850:	4820      	ldr	r0, [pc, #128]	; (80028d4 <uart_stm32_init+0xe8>)
 8002852:	1ad2      	subs	r2, r2, r3
 8002854:	08d2      	lsrs	r2, r2, #3
 8002856:	0192      	lsls	r2, r2, #6
 8002858:	f042 0202 	orr.w	r2, r2, #2
 800285c:	f001 f92c 	bl	8003ab8 <log_1>
				"Defaulting to 'none'.", config->parity);
		}
		/* 8 databit, parity none */
		ll_parity = LL_USART_PARITY_NONE;
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8002860:	4641      	mov	r1, r8
		ll_parity = LL_USART_PARITY_NONE;
 8002862:	4608      	mov	r0, r1
 8002864:	e003      	b.n	800286e <uart_stm32_init+0x82>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8002866:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 800286a:	f44f 6080 	mov.w	r0, #1024	; 0x400
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 800286e:	6823      	ldr	r3, [r4, #0]
 8002870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002874:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002878:	4301      	orrs	r1, r0
 800287a:	4319      	orrs	r1, r3
 800287c:	6021      	str	r1, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800287e:	6863      	ldr	r3, [r4, #4]
 8002880:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002884:	6063      	str	r3, [r4, #4]
	LL_USART_ConfigCharacter(UartInstance,
				 ll_datawidth,
				 ll_parity,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 8002886:	7c33      	ldrb	r3, [r6, #16]
 8002888:	b12b      	cbz	r3, 8002896 <uart_stm32_init+0xaa>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800288a:	686b      	ldr	r3, [r5, #4]
 800288c:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800288e:	6893      	ldr	r3, [r2, #8]
 8002890:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002894:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8002896:	6839      	ldr	r1, [r7, #0]
 8002898:	4628      	mov	r0, r5
 800289a:	f7ff ff5f 	bl	800275c <uart_stm32_set_baudrate>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800289e:	6823      	ldr	r3, [r4, #0]
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6023      	str	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80028a6:	69e3      	ldr	r3, [r4, #28]
 80028a8:	029a      	lsls	r2, r3, #10
 80028aa:	d5fc      	bpl.n	80028a6 <uart_stm32_init+0xba>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80028ac:	69e3      	ldr	r3, [r4, #28]
 80028ae:	025b      	lsls	r3, r3, #9
 80028b0:	d5fc      	bpl.n	80028ac <uart_stm32_init+0xc0>
#endif /* CONFIG_PM_DEVICE */

#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
 80028b2:	2000      	movs	r0, #0
 80028b4:	e006      	b.n	80028c4 <uart_stm32_init+0xd8>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 80028b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 80028ba:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80028be:	e7d6      	b.n	800286e <uart_stm32_init+0x82>
		return -EIO;
 80028c0:	f06f 0004 	mvn.w	r0, #4
#endif
}
 80028c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028c8:	20000034 	.word	0x20000034
 80028cc:	08004c78 	.word	0x08004c78
 80028d0:	08004ca0 	.word	0x08004ca0
 80028d4:	0800554a 	.word	0x0800554a

080028d8 <uart_stm32_configure>:
{
 80028d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80028dc:	6843      	ldr	r3, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 80028de:	6906      	ldr	r6, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80028e0:	681c      	ldr	r4, [r3, #0]
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 80028e2:	790b      	ldrb	r3, [r1, #4]
	switch (parity) {
 80028e4:	2b01      	cmp	r3, #1
{
 80028e6:	460d      	mov	r5, r1
	switch (parity) {
 80028e8:	d01b      	beq.n	8002922 <uart_stm32_configure+0x4a>
		return LL_USART_PARITY_NONE;
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	bf0c      	ite	eq
 80028ee:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 80028f2:	2100      	movne	r1, #0
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 80028f4:	f895 9005 	ldrb.w	r9, [r5, #5]
	switch (sb) {
 80028f8:	f1b9 0f02 	cmp.w	r9, #2
 80028fc:	bf9c      	itt	ls
 80028fe:	4a44      	ldrls	r2, [pc, #272]	; (8002a10 <uart_stm32_configure+0x138>)
 8002900:	f832 e019 	ldrhls.w	lr, [r2, r9, lsl #1]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8002904:	79aa      	ldrb	r2, [r5, #6]
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8002906:	bf88      	it	hi
 8002908:	f44f 5e00 	movhi.w	lr, #8192	; 0x2000
	switch (db) {
 800290c:	2a02      	cmp	r2, #2
 800290e:	d00b      	beq.n	8002928 <uart_stm32_configure+0x50>
 8002910:	2a04      	cmp	r2, #4
 8002912:	d077      	beq.n	8002a04 <uart_stm32_configure+0x12c>
			return LL_USART_DATAWIDTH_8B;
 8002914:	2b00      	cmp	r3, #0
 8002916:	bf14      	ite	ne
 8002918:	f44f 5c80 	movne.w	ip, #4096	; 0x1000
 800291c:	f04f 0c00 	moveq.w	ip, #0
 8002920:	e008      	b.n	8002934 <uart_stm32_configure+0x5c>
	switch (parity) {
 8002922:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002926:	e7e5      	b.n	80028f4 <uart_stm32_configure+0x1c>
			return LL_USART_DATAWIDTH_8B;
 8002928:	2b00      	cmp	r3, #0
 800292a:	bf0c      	ite	eq
 800292c:	f04f 5c80 	moveq.w	ip, #268435456	; 0x10000000
 8002930:	f04f 0c00 	movne.w	ip, #0
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8002934:	f895 8007 	ldrb.w	r8, [r5, #7]
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8002938:	f1a3 0a03 	sub.w	sl, r3, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 800293c:	f1b8 0f01 	cmp.w	r8, #1
 8002940:	bf14      	ite	ne
 8002942:	2700      	movne	r7, #0
 8002944:	f44f 7740 	moveq.w	r7, #768	; 0x300
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8002948:	f1ba 0f01 	cmp.w	sl, #1
 800294c:	d95d      	bls.n	8002a0a <uart_stm32_configure+0x132>
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 800294e:	b10b      	cbz	r3, 8002954 <uart_stm32_configure+0x7c>
 8002950:	2a04      	cmp	r2, #4
 8002952:	d05a      	beq.n	8002a0a <uart_stm32_configure+0x132>
	if (IS_LPUART_INSTANCE(UartInstance) &&
 8002954:	4b2f      	ldr	r3, [pc, #188]	; (8002a14 <uart_stm32_configure+0x13c>)
 8002956:	429c      	cmp	r4, r3
 8002958:	d102      	bne.n	8002960 <uart_stm32_configure+0x88>
 800295a:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 800295e:	d054      	beq.n	8002a0a <uart_stm32_configure+0x132>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8002960:	2a01      	cmp	r2, #1
 8002962:	d952      	bls.n	8002a0a <uart_stm32_configure+0x132>
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 8002964:	2a04      	cmp	r2, #4
 8002966:	d050      	beq.n	8002a0a <uart_stm32_configure+0x132>
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 8002968:	f1b8 0f00 	cmp.w	r8, #0
 800296c:	d00d      	beq.n	800298a <uart_stm32_configure+0xb2>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 800296e:	4b2a      	ldr	r3, [pc, #168]	; (8002a18 <uart_stm32_configure+0x140>)
 8002970:	429c      	cmp	r4, r3
 8002972:	d007      	beq.n	8002984 <uart_stm32_configure+0xac>
 8002974:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8002978:	429c      	cmp	r4, r3
 800297a:	d003      	beq.n	8002984 <uart_stm32_configure+0xac>
 800297c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8002980:	429c      	cmp	r4, r3
 8002982:	d142      	bne.n	8002a0a <uart_stm32_configure+0x132>
 8002984:	f1b8 0f01 	cmp.w	r8, #1
 8002988:	d13f      	bne.n	8002a0a <uart_stm32_configure+0x132>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800298a:	6823      	ldr	r3, [r4, #0]
 800298c:	f023 0301 	bic.w	r3, r3, #1
 8002990:	6023      	str	r3, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8002992:	6823      	ldr	r3, [r4, #0]
 8002994:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 8002998:	4299      	cmp	r1, r3
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 800299a:	bf1f      	itttt	ne
 800299c:	6823      	ldrne	r3, [r4, #0]
 800299e:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 80029a2:	430b      	orrne	r3, r1
 80029a4:	6023      	strne	r3, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 80029a6:	6863      	ldr	r3, [r4, #4]
 80029a8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 80029ac:	459e      	cmp	lr, r3
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80029ae:	bf1f      	itttt	ne
 80029b0:	6861      	ldrne	r1, [r4, #4]
 80029b2:	f421 5140 	bicne.w	r1, r1, #12288	; 0x3000
 80029b6:	ea41 010e 	orrne.w	r1, r1, lr
 80029ba:	6061      	strne	r1, [r4, #4]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80029bc:	6823      	ldr	r3, [r4, #0]
	if (cfg->baudrate != data->baud_rate) {
 80029be:	6829      	ldr	r1, [r5, #0]
 80029c0:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
	if (databits != uart_stm32_get_databits(dev)) {
 80029c4:	459c      	cmp	ip, r3
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 80029c6:	bf1f      	itttt	ne
 80029c8:	6822      	ldrne	r2, [r4, #0]
 80029ca:	f022 2210 	bicne.w	r2, r2, #268439552	; 0x10001000
 80029ce:	ea42 020c 	orrne.w	r2, r2, ip
 80029d2:	6022      	strne	r2, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 80029d4:	68a3      	ldr	r3, [r4, #8]
 80029d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 80029da:	429f      	cmp	r7, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80029dc:	bf1f      	itttt	ne
 80029de:	68a3      	ldrne	r3, [r4, #8]
 80029e0:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 80029e4:	433b      	orrne	r3, r7
 80029e6:	60a3      	strne	r3, [r4, #8]
	if (cfg->baudrate != data->baud_rate) {
 80029e8:	6833      	ldr	r3, [r6, #0]
 80029ea:	4299      	cmp	r1, r3
 80029ec:	d003      	beq.n	80029f6 <uart_stm32_configure+0x11e>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 80029ee:	f7ff feb5 	bl	800275c <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 80029f2:	682b      	ldr	r3, [r5, #0]
 80029f4:	6033      	str	r3, [r6, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80029f6:	6823      	ldr	r3, [r4, #0]
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	6023      	str	r3, [r4, #0]
	return 0;
 80029fe:	2000      	movs	r0, #0
};
 8002a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (db) {
 8002a04:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 8002a08:	e794      	b.n	8002934 <uart_stm32_configure+0x5c>
		return -ENOTSUP;
 8002a0a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8002a0e:	e7f7      	b.n	8002a00 <uart_stm32_configure+0x128>
 8002a10:	08004f1c 	.word	0x08004f1c
 8002a14:	40008000 	.word	0x40008000
 8002a18:	40013800 	.word	0x40013800

08002a1c <HAL_PWREx_ReleaseCore>:
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8002a1c:	4a02      	ldr	r2, [pc, #8]	; (8002a28 <HAL_PWREx_ReleaseCore+0xc>)
 8002a1e:	68d3      	ldr	r3, [r2, #12]
 8002a20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a24:	60d3      	str	r3, [r2, #12]
{
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
}
 8002a26:	4770      	bx	lr
 8002a28:	58000400 	.word	0x58000400

08002a2c <LL_SetFlashLatency>:

  /* Flash Clock source (HCLK3) range in MHz with a VCORE is range2 */
  const uint32_t UTILS_CLK_SRC_RANGE_VOS2[] = {6000000U, 12000000U, UTILS_MAX_FREQUENCY_SCALE2};

  /* Flash Latency range */
  const uint32_t UTILS_LATENCY_RANGE[] = {LL_FLASH_LATENCY_0, LL_FLASH_LATENCY_1, LL_FLASH_LATENCY_2};
 8002a2c:	4a1f      	ldr	r2, [pc, #124]	; (8002aac <LL_SetFlashLatency+0x80>)
{
 8002a2e:	4603      	mov	r3, r0
  const uint32_t UTILS_LATENCY_RANGE[] = {LL_FLASH_LATENCY_0, LL_FLASH_LATENCY_1, LL_FLASH_LATENCY_2};
 8002a30:	ca07      	ldmia	r2, {r0, r1, r2}
{
 8002a32:	b084      	sub	sp, #16
  const uint32_t UTILS_LATENCY_RANGE[] = {LL_FLASH_LATENCY_0, LL_FLASH_LATENCY_1, LL_FLASH_LATENCY_2};
 8002a34:	f10d 0c10 	add.w	ip, sp, #16
 8002a38:	e90c 0007 	stmdb	ip, {r0, r1, r2}

  /* Frequency cannot be equal to 0 */
  if (HCLK3_Frequency != 0U)
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	b333      	cbz	r3, 8002a8e <LL_SetFlashLatency+0x62>
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 8002a40:	4b1b      	ldr	r3, [pc, #108]	; (8002ab0 <LL_SetFlashLatency+0x84>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  {
    if (LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8002a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a4c:	d122      	bne.n	8002a94 <LL_SetFlashLatency+0x68>
    {
      /* Frequency cannot be greater than a defined max clock */
      if (HCLK3_Frequency <= UTILS_MAX_FREQUENCY_SCALE1)
 8002a4e:	4b19      	ldr	r3, [pc, #100]	; (8002ab4 <LL_SetFlashLatency+0x88>)
 8002a50:	4298      	cmp	r0, r3
 8002a52:	d81c      	bhi.n	8002a8e <LL_SetFlashLatency+0x62>
      {
        for (index = 0; index < COUNTOF(UTILS_CLK_SRC_RANGE_VOS1); index++)
        {
          if (HCLK3_Frequency <= UTILS_CLK_SRC_RANGE_VOS1[index])
 8002a54:	4b18      	ldr	r3, [pc, #96]	; (8002ab8 <LL_SetFlashLatency+0x8c>)
 8002a56:	4298      	cmp	r0, r3
 8002a58:	d924      	bls.n	8002aa4 <LL_SetFlashLatency+0x78>
 8002a5a:	4b18      	ldr	r3, [pc, #96]	; (8002abc <LL_SetFlashLatency+0x90>)
      /* Frequency cannot be greater than a defined max clock */
      if (HCLK3_Frequency <= UTILS_MAX_FREQUENCY_SCALE2)
      {
        for (index = 0; index < COUNTOF(UTILS_CLK_SRC_RANGE_VOS2); index++)
        {
          if (HCLK3_Frequency <= UTILS_CLK_SRC_RANGE_VOS2[index])
 8002a5c:	4298      	cmp	r0, r3
 8002a5e:	bf94      	ite	ls
 8002a60:	2001      	movls	r0, #1
 8002a62:	2002      	movhi	r0, #2
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002a64:	4916      	ldr	r1, [pc, #88]	; (8002ac0 <LL_SetFlashLatency+0x94>)
          {
            latency = UTILS_LATENCY_RANGE[index];
 8002a66:	ab04      	add	r3, sp, #16
 8002a68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002a6c:	680b      	ldr	r3, [r1, #0]
 8002a6e:	f850 2c0c 	ldr.w	r2, [r0, #-12]
 8002a72:	f023 0307 	bic.w	r3, r3, #7
 8002a76:	4313      	orrs	r3, r2
 8002a78:	600b      	str	r3, [r1, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002a7a:	680b      	ldr	r3, [r1, #0]
 8002a7c:	f003 0307 	and.w	r3, r3, #7
      do
      {
        /* Wait for Flash latency to be updated */
        getlatency = LL_FLASH_GetLatency();
        timeout--;
      } while ((getlatency != latency) && (timeout > 0U));
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d011      	beq.n	8002aa8 <LL_SetFlashLatency+0x7c>
 8002a84:	680b      	ldr	r3, [r1, #0]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d00c      	beq.n	8002aa8 <LL_SetFlashLatency+0x7c>
  ErrorStatus status = ERROR;
 8002a8e:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8002a90:	b004      	add	sp, #16
 8002a92:	4770      	bx	lr
      if (HCLK3_Frequency <= UTILS_MAX_FREQUENCY_SCALE2)
 8002a94:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <LL_SetFlashLatency+0x98>)
 8002a96:	4298      	cmp	r0, r3
 8002a98:	d8f9      	bhi.n	8002a8e <LL_SetFlashLatency+0x62>
          if (HCLK3_Frequency <= UTILS_CLK_SRC_RANGE_VOS2[index])
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <LL_SetFlashLatency+0x9c>)
 8002a9c:	4298      	cmp	r0, r3
 8002a9e:	d901      	bls.n	8002aa4 <LL_SetFlashLatency+0x78>
 8002aa0:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <LL_SetFlashLatency+0xa0>)
 8002aa2:	e7db      	b.n	8002a5c <LL_SetFlashLatency+0x30>
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	e7dd      	b.n	8002a64 <LL_SetFlashLatency+0x38>
 8002aa8:	2001      	movs	r0, #1
 8002aaa:	e7f1      	b.n	8002a90 <LL_SetFlashLatency+0x64>
 8002aac:	08004d14 	.word	0x08004d14
 8002ab0:	58000400 	.word	0x58000400
 8002ab4:	02dc6c00 	.word	0x02dc6c00
 8002ab8:	0112a880 	.word	0x0112a880
 8002abc:	02255100 	.word	0x02255100
 8002ac0:	58004000 	.word	0x58004000
 8002ac4:	00f42400 	.word	0x00f42400
 8002ac8:	005b8d80 	.word	0x005b8d80
 8002acc:	00b71b00 	.word	0x00b71b00

08002ad0 <UTILS_EnablePLLAndSwitchSystem>:
  *          - SUCCESS: No problem to switch system to PLL
  *          - ERROR: Problem to switch system to PLL
  */
static ErrorStatus UTILS_EnablePLLAndSwitchSystem(uint32_t SYSCLK_Frequency,
                                                  LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 8002ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHB3CLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK3 frequency based on SYSCLK_Frequency target */
  hclks_frequency_target = __LL_RCC_CALC_HCLK3_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHB3CLKDivider);
 8002ad4:	688b      	ldr	r3, [r1, #8]
 8002ad6:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8002bc0 <UTILS_EnablePLLAndSwitchSystem+0xf0>

  /* Calculate HCLK3 frequency current */
  sysclk_current = (SystemCoreClock * AHBPrescTable[(LL_RCC_GetAHBPrescaler() & RCC_CFGR_HPRE) >>  RCC_CFGR_HPRE_Pos]);
 8002ada:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8002bc4 <UTILS_EnablePLLAndSwitchSystem+0xf4>
  hclks_frequency_target = __LL_RCC_CALC_HCLK3_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHB3CLKDivider);
 8002ade:	f3c3 1303 	ubfx	r3, r3, #4, #4
{
 8002ae2:	4607      	mov	r7, r0
  hclks_frequency_target = __LL_RCC_CALC_HCLK3_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHB3CLKDivider);
 8002ae4:	f858 5023 	ldr.w	r5, [r8, r3, lsl #2]
 8002ae8:	fbb0 f5f5 	udiv	r5, r0, r5
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8002af0:	460c      	mov	r4, r1
 8002af2:	689a      	ldr	r2, [r3, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002af4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  sysclk_current = (SystemCoreClock * AHBPrescTable[(LL_RCC_GetAHBPrescaler() & RCC_CFGR_HPRE) >>  RCC_CFGR_HPRE_Pos]);
 8002af8:	f3c2 1203 	ubfx	r2, r2, #4, #4
  hclks_frequency_current = __LL_RCC_CALC_HCLK3_FREQ(sysclk_current, LL_RCC_GetAHB3Prescaler());
 8002afc:	f003 030f 	and.w	r3, r3, #15
  sysclk_current = (SystemCoreClock * AHBPrescTable[(LL_RCC_GetAHBPrescaler() & RCC_CFGR_HPRE) >>  RCC_CFGR_HPRE_Pos]);
 8002b00:	f858 6022 	ldr.w	r6, [r8, r2, lsl #2]
 8002b04:	f8d9 2000 	ldr.w	r2, [r9]
  hclks_frequency_current = __LL_RCC_CALC_HCLK3_FREQ(sysclk_current, LL_RCC_GetAHB3Prescaler());
 8002b08:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
  sysclk_current = (SystemCoreClock * AHBPrescTable[(LL_RCC_GetAHBPrescaler() & RCC_CFGR_HPRE) >>  RCC_CFGR_HPRE_Pos]);
 8002b0c:	4356      	muls	r6, r2
  hclks_frequency_current = __LL_RCC_CALC_HCLK3_FREQ(sysclk_current, LL_RCC_GetAHB3Prescaler());
 8002b0e:	fbb6 f6f3 	udiv	r6, r6, r3

  /* Increasing the number of wait states because of higher CPU frequency */
  if (hclks_frequency_current < hclks_frequency_target)
 8002b12:	42b5      	cmp	r5, r6
 8002b14:	d847      	bhi.n	8002ba6 <UTILS_EnablePLLAndSwitchSystem+0xd6>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002b20:	601a      	str	r2, [r3, #0]
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b28:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	0192      	lsls	r2, r2, #6
 8002b2e:	d5fc      	bpl.n	8002b2a <UTILS_EnablePLLAndSwitchSystem+0x5a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002b30:	6899      	ldr	r1, [r3, #8]
 8002b32:	6822      	ldr	r2, [r4, #0]
 8002b34:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002b3c:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8002b40:	6862      	ldr	r2, [r4, #4]
 8002b42:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8002b46:	430a      	orrs	r2, r1
 8002b48:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002b4c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002b50:	68a1      	ldr	r1, [r4, #8]
 8002b52:	f022 020f 	bic.w	r2, r2, #15
 8002b56:	ea42 1211 	orr.w	r2, r2, r1, lsr #4
 8002b5a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	f042 0203 	orr.w	r2, r2, #3
 8002b64:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	f002 020c 	and.w	r2, r2, #12
#if defined(DUAL_CORE)
    LL_C2_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->CPU2CLKDivider);
#endif /* DUAL_CORE */
    LL_RCC_SetAHB3Prescaler(UTILS_ClkInitStruct->AHB3CLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002b70:	2a0c      	cmp	r2, #12
 8002b72:	d1fa      	bne.n	8002b6a <UTILS_EnablePLLAndSwitchSystem+0x9a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002b74:	6899      	ldr	r1, [r3, #8]
 8002b76:	68e2      	ldr	r2, [r4, #12]
 8002b78:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002b80:	6899      	ldr	r1, [r3, #8]
 8002b82:	6922      	ldr	r2, [r4, #16]
 8002b84:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 8002b88:	430a      	orrs	r2, r1
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (hclks_frequency_current > hclks_frequency_target)
 8002b8a:	42b5      	cmp	r5, r6
 8002b8c:	609a      	str	r2, [r3, #8]
 8002b8e:	d311      	bcc.n	8002bb4 <UTILS_EnablePLLAndSwitchSystem+0xe4>
  if (status == SUCCESS)
  {
#if defined(CORE_CM0PLUS) && defined(DUAL_CORE)
    LL_SetSystemCoreClock(__LL_RCC_CALC_HCLK2_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->CPU2CLKDivider));
#else
    LL_SetSystemCoreClock(__LL_RCC_CALC_HCLK1_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->CPU1CLKDivider));
 8002b90:	6823      	ldr	r3, [r4, #0]
 8002b92:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002b96:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 8002b9a:	fbb7 f7f0 	udiv	r7, r7, r0
}
 8002b9e:	2001      	movs	r0, #1
  SystemCoreClock = HCLKFrequency;
 8002ba0:	f8c9 7000 	str.w	r7, [r9]
}
 8002ba4:	e004      	b.n	8002bb0 <UTILS_EnablePLLAndSwitchSystem+0xe0>
    status = LL_SetFlashLatency(hclks_frequency_target);
 8002ba6:	4628      	mov	r0, r5
 8002ba8:	f7ff ff40 	bl	8002a2c <LL_SetFlashLatency>
  if (status == SUCCESS)
 8002bac:	2801      	cmp	r0, #1
 8002bae:	d0b2      	beq.n	8002b16 <UTILS_EnablePLLAndSwitchSystem+0x46>
#endif /* CORE_CM0PLUS && DUAL_CORE */
  }

  return status;
}
 8002bb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    status = LL_SetFlashLatency(hclks_frequency_target);
 8002bb4:	4628      	mov	r0, r5
 8002bb6:	f7ff ff39 	bl	8002a2c <LL_SetFlashLatency>
  if (status == SUCCESS)
 8002bba:	2801      	cmp	r0, #1
 8002bbc:	d1f8      	bne.n	8002bb0 <UTILS_EnablePLLAndSwitchSystem+0xe0>
 8002bbe:	e7e7      	b.n	8002b90 <UTILS_EnablePLLAndSwitchSystem+0xc0>
 8002bc0:	08004eb0 	.word	0x08004eb0
 8002bc4:	20000028 	.word	0x20000028

08002bc8 <LL_PLL_ConfigSystemClock_HSE>:
{
 8002bc8:	b570      	push	{r4, r5, r6, lr}
 8002bca:	4604      	mov	r4, r0
  if (UTILS_PLL_IsBusy() == SUCCESS)
 8002bcc:	f001 fd71 	bl	80046b2 <UTILS_PLL_IsBusy>
 8002bd0:	2801      	cmp	r0, #1
{
 8002bd2:	460d      	mov	r5, r1
  if (UTILS_PLL_IsBusy() == SUCCESS)
 8002bd4:	d12e      	bne.n	8002c34 <LL_PLL_ConfigSystemClock_HSE+0x6c>
    pllrfreq = UTILS_GetPLLOutputFrequency(HSE_VALUE, UTILS_PLLInitStruct);
 8002bd6:	4818      	ldr	r0, [pc, #96]	; (8002c38 <LL_PLL_ConfigSystemClock_HSE+0x70>)
 8002bd8:	4621      	mov	r1, r4
 8002bda:	f001 fd5b 	bl	8004694 <UTILS_GetPLLOutputFrequency>
    hclk2freq = __LL_RCC_CALC_HCLK2_FREQ(pllrfreq, UTILS_ClkInitStruct->CPU2CLKDivider);
 8002bde:	686b      	ldr	r3, [r5, #4]
 8002be0:	4a16      	ldr	r2, [pc, #88]	; (8002c3c <LL_PLL_ConfigSystemClock_HSE+0x74>)
 8002be2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (hclk2freq > UTILS_HCLK2_MAX)
 8002bea:	4a15      	ldr	r2, [pc, #84]	; (8002c40 <LL_PLL_ConfigSystemClock_HSE+0x78>)
    hclk2freq = __LL_RCC_CALC_HCLK2_FREQ(pllrfreq, UTILS_ClkInitStruct->CPU2CLKDivider);
 8002bec:	fbb0 f3f3 	udiv	r3, r0, r3
    if (hclk2freq > UTILS_HCLK2_MAX)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d81f      	bhi.n	8002c34 <LL_PLL_ConfigSystemClock_HSE+0x6c>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	0391      	lsls	r1, r2, #14
 8002bfc:	d406      	bmi.n	8002c0c <LL_PLL_ConfigSystemClock_HSE+0x44>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002c04:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	0392      	lsls	r2, r2, #14
 8002c0a:	d5fc      	bpl.n	8002c06 <LL_PLL_ConfigSystemClock_HSE+0x3e>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8002c0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c10:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <LL_PLL_ConfigSystemClock_HSE+0x7c>)
 8002c12:	68d6      	ldr	r6, [r2, #12]
 8002c14:	6861      	ldr	r1, [r4, #4]
 8002c16:	4033      	ands	r3, r6
 8002c18:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002c1c:	6821      	ldr	r1, [r4, #0]
 8002c1e:	430b      	orrs	r3, r1
 8002c20:	68a1      	ldr	r1, [r4, #8]
 8002c22:	430b      	orrs	r3, r1
 8002c24:	f043 0303 	orr.w	r3, r3, #3
      status = UTILS_EnablePLLAndSwitchSystem(pllrfreq, UTILS_ClkInitStruct);
 8002c28:	4629      	mov	r1, r5
 8002c2a:	60d3      	str	r3, [r2, #12]
}
 8002c2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      status = UTILS_EnablePLLAndSwitchSystem(pllrfreq, UTILS_ClkInitStruct);
 8002c30:	f7ff bf4e 	b.w	8002ad0 <UTILS_EnablePLLAndSwitchSystem>
}
 8002c34:	2000      	movs	r0, #0
 8002c36:	bd70      	pop	{r4, r5, r6, pc}
 8002c38:	01e84800 	.word	0x01e84800
 8002c3c:	08004eb0 	.word	0x08004eb0
 8002c40:	02dc6c00 	.word	0x02dc6c00
 8002c44:	1fff808c 	.word	0x1fff808c

08002c48 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8002c48:	4b0e      	ldr	r3, [pc, #56]	; (8002c84 <z_sys_init_run_level+0x3c>)
{
 8002c4a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8002c4c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8002c50:	3001      	adds	r0, #1
 8002c52:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8002c56:	42a6      	cmp	r6, r4
 8002c58:	d800      	bhi.n	8002c5c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 8002c5a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 8002c5c:	e9d4 3500 	ldrd	r3, r5, [r4]
 8002c60:	4628      	mov	r0, r5
 8002c62:	4798      	blx	r3
		if (dev != NULL) {
 8002c64:	b165      	cbz	r5, 8002c80 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
 8002c66:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
 8002c68:	b130      	cbz	r0, 8002c78 <z_sys_init_run_level+0x30>
				if (rc < 0) {
 8002c6a:	2800      	cmp	r0, #0
 8002c6c:	bfb8      	it	lt
 8002c6e:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 8002c70:	28ff      	cmp	r0, #255	; 0xff
 8002c72:	bfa8      	it	ge
 8002c74:	20ff      	movge	r0, #255	; 0xff
 8002c76:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 8002c78:	785a      	ldrb	r2, [r3, #1]
 8002c7a:	f042 0201 	orr.w	r2, r2, #1
 8002c7e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8002c80:	3408      	adds	r4, #8
 8002c82:	e7e8      	b.n	8002c56 <z_sys_init_run_level+0xe>
 8002c84:	08004ef0 	.word	0x08004ef0

08002c88 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
 8002c88:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
 8002c8a:	4605      	mov	r5, r0
 8002c8c:	b910      	cbnz	r0, 8002c94 <z_impl_device_get_binding+0xc>
		return NULL;
 8002c8e:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
 8002c90:	4620      	mov	r0, r4
 8002c92:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
 8002c94:	7803      	ldrb	r3, [r0, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f9      	beq.n	8002c8e <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
 8002c9a:	4c0e      	ldr	r4, [pc, #56]	; (8002cd4 <z_impl_device_get_binding+0x4c>)
 8002c9c:	4e0e      	ldr	r6, [pc, #56]	; (8002cd8 <z_impl_device_get_binding+0x50>)
 8002c9e:	42b4      	cmp	r4, r6
 8002ca0:	d108      	bne.n	8002cb4 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
 8002ca2:	4c0c      	ldr	r4, [pc, #48]	; (8002cd4 <z_impl_device_get_binding+0x4c>)
 8002ca4:	42b4      	cmp	r4, r6
 8002ca6:	d0f2      	beq.n	8002c8e <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 8002ca8:	4620      	mov	r0, r4
 8002caa:	f001 fd0b 	bl	80046c4 <z_device_ready>
 8002cae:	b950      	cbnz	r0, 8002cc6 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
 8002cb0:	3418      	adds	r4, #24
 8002cb2:	e7f7      	b.n	8002ca4 <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	f001 fd05 	bl	80046c4 <z_device_ready>
 8002cba:	b110      	cbz	r0, 8002cc2 <z_impl_device_get_binding+0x3a>
 8002cbc:	6823      	ldr	r3, [r4, #0]
 8002cbe:	42ab      	cmp	r3, r5
 8002cc0:	d0e6      	beq.n	8002c90 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
 8002cc2:	3418      	adds	r4, #24
 8002cc4:	e7eb      	b.n	8002c9e <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 8002cc6:	6821      	ldr	r1, [r4, #0]
 8002cc8:	4628      	mov	r0, r5
 8002cca:	f7fd fbb7 	bl	800043c <strcmp>
 8002cce:	2800      	cmp	r0, #0
 8002cd0:	d1ee      	bne.n	8002cb0 <z_impl_device_get_binding+0x28>
 8002cd2:	e7dd      	b.n	8002c90 <z_impl_device_get_binding+0x8>
 8002cd4:	20000034 	.word	0x20000034
 8002cd8:	2000010c 	.word	0x2000010c

08002cdc <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 8002cdc:	b510      	push	{r4, lr}
 8002cde:	4604      	mov	r4, r0
	z_impl_log_panic();
 8002ce0:	f7fe fab6 	bl	8001250 <z_impl_log_panic>
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <k_sys_fatal_error_handler+0x24>)
 8002ce6:	4907      	ldr	r1, [pc, #28]	; (8002d04 <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
 8002ce8:	4807      	ldr	r0, [pc, #28]	; (8002d08 <k_sys_fatal_error_handler+0x2c>)
 8002cea:	1ac9      	subs	r1, r1, r3
 8002cec:	08c9      	lsrs	r1, r1, #3
 8002cee:	0189      	lsls	r1, r1, #6
 8002cf0:	f041 0101 	orr.w	r1, r1, #1
 8002cf4:	f000 fed3 	bl	8003a9e <log_0>
	arch_system_halt(reason);
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	f001 fcec 	bl	80046d6 <arch_system_halt>
 8002cfe:	bf00      	nop
 8002d00:	08004c78 	.word	0x08004c78
 8002d04:	08004c98 	.word	0x08004c98
 8002d08:	08005587 	.word	0x08005587

08002d0c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8002d0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002d10:	4606      	mov	r6, r0
 8002d12:	460f      	mov	r7, r1
	__asm__ volatile(
 8002d14:	f04f 0310 	mov.w	r3, #16
 8002d18:	f3ef 8811 	mrs	r8, BASEPRI
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
 8002d24:	f000 fc18 	bl	8003558 <z_impl_k_current_get>
 8002d28:	4c1f      	ldr	r4, [pc, #124]	; (8002da8 <z_fatal_error+0x9c>)
 8002d2a:	4b20      	ldr	r3, [pc, #128]	; (8002dac <z_fatal_error+0xa0>)
 8002d2c:	1ae4      	subs	r4, r4, r3
 8002d2e:	2e04      	cmp	r6, #4
 8002d30:	ea4f 04d4 	mov.w	r4, r4, lsr #3
 8002d34:	bf96      	itet	ls
 8002d36:	4a1e      	ldrls	r2, [pc, #120]	; (8002db0 <z_fatal_error+0xa4>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 8002d38:	4a1e      	ldrhi	r2, [pc, #120]	; (8002db4 <z_fatal_error+0xa8>)
 8002d3a:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
 8002d3e:	01a4      	lsls	r4, r4, #6
 8002d40:	f044 0301 	orr.w	r3, r4, #1
 8002d44:	4605      	mov	r5, r0
 8002d46:	f8ad 3000 	strh.w	r3, [sp]
 8002d4a:	481b      	ldr	r0, [pc, #108]	; (8002db8 <z_fatal_error+0xac>)
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	4631      	mov	r1, r6
 8002d50:	f000 fedf 	bl	8003b12 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 8002d54:	b147      	cbz	r7, 8002d68 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d5c:	b123      	cbz	r3, 8002d68 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
 8002d5e:	4817      	ldr	r0, [pc, #92]	; (8002dbc <z_fatal_error+0xb0>)
 8002d60:	f044 0101 	orr.w	r1, r4, #1
 8002d64:	f000 fe9b 	bl	8003a9e <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 8002d68:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 8002d6c:	b12d      	cbz	r5, 8002d7a <z_fatal_error+0x6e>
 8002d6e:	4628      	mov	r0, r5
 8002d70:	f001 fd01 	bl	8004776 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
 8002d74:	b108      	cbz	r0, 8002d7a <z_fatal_error+0x6e>
 8002d76:	7803      	ldrb	r3, [r0, #0]
 8002d78:	b903      	cbnz	r3, 8002d7c <z_fatal_error+0x70>
		thread_name = "unknown";
 8002d7a:	4811      	ldr	r0, [pc, #68]	; (8002dc0 <z_fatal_error+0xb4>)
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
 8002d7c:	f7fe f8ee 	bl	8000f5c <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
 8002d80:	4623      	mov	r3, r4
 8002d82:	4602      	mov	r2, r0
 8002d84:	4629      	mov	r1, r5
 8002d86:	480f      	ldr	r0, [pc, #60]	; (8002dc4 <z_fatal_error+0xb8>)
 8002d88:	f000 feaa 	bl	8003ae0 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 8002d8c:	4639      	mov	r1, r7
 8002d8e:	4630      	mov	r0, r6
 8002d90:	f7ff ffa4 	bl	8002cdc <k_sys_fatal_error_handler>
	__asm__ volatile(
 8002d94:	f388 8811 	msr	BASEPRI, r8
 8002d98:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 8002d9c:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 8002d9e:	b002      	add	sp, #8
 8002da0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002da4:	f7ff bb4a 	b.w	800243c <z_impl_k_thread_abort>
 8002da8:	08004c98 	.word	0x08004c98
 8002dac:	08004c78 	.word	0x08004c78
 8002db0:	08004f08 	.word	0x08004f08
 8002db4:	08005596 	.word	0x08005596
 8002db8:	080055ac 	.word	0x080055ac
 8002dbc:	080055d4 	.word	0x080055d4
 8002dc0:	080055a4 	.word	0x080055a4
 8002dc4:	080055f5 	.word	0x080055f5

08002dc8 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 8002dc8:	4802      	ldr	r0, [pc, #8]	; (8002dd4 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
 8002dca:	4a03      	ldr	r2, [pc, #12]	; (8002dd8 <z_bss_zero+0x10>)
 8002dcc:	2100      	movs	r1, #0
 8002dce:	1a12      	subs	r2, r2, r0
 8002dd0:	f001 bdfa 	b.w	80049c8 <memset>
 8002dd4:	20000120 	.word	0x20000120
 8002dd8:	20000494 	.word	0x20000494

08002ddc <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 8002ddc:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 8002dde:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <bg_thread_main+0x2c>)
 8002de0:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8002de2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 8002de4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8002de6:	f7ff ff2f 	bl	8002c48 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 8002dea:	f000 fdd3 	bl	8003994 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 8002dee:	2003      	movs	r0, #3
 8002df0:	f7ff ff2a 	bl	8002c48 <z_sys_init_run_level>

	z_init_static_threads();
 8002df4:	f000 f944 	bl	8003080 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
 8002df8:	f7fd fb32 	bl	8000460 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8002dfc:	4a03      	ldr	r2, [pc, #12]	; (8002e0c <bg_thread_main+0x30>)
 8002dfe:	7b13      	ldrb	r3, [r2, #12]
 8002e00:	f023 0301 	bic.w	r3, r3, #1
 8002e04:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8002e06:	bd08      	pop	{r3, pc}
 8002e08:	20000490 	.word	0x20000490
 8002e0c:	20000258 	.word	0x20000258

08002e10 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
 8002e10:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002e14:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
 8002e16:	f7fd ffdf 	bl	8000dd8 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8002e1a:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8002efc <z_cstart+0xec>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8002e1e:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8002e22:	4d37      	ldr	r5, [pc, #220]	; (8002f00 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
 8002e24:	4e37      	ldr	r6, [pc, #220]	; (8002f04 <z_cstart+0xf4>)
 8002e26:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8002e28:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8002f08 <z_cstart+0xf8>
	z_setup_new_thread(thread, stack,
 8002e2c:	4f37      	ldr	r7, [pc, #220]	; (8002f0c <z_cstart+0xfc>)
 8002e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e32:	2400      	movs	r4, #0
 8002e34:	616b      	str	r3, [r5, #20]
 8002e36:	23f0      	movs	r3, #240	; 0xf0
 8002e38:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 8002e3c:	77ec      	strb	r4, [r5, #31]
 8002e3e:	762c      	strb	r4, [r5, #24]
 8002e40:	766c      	strb	r4, [r5, #25]
 8002e42:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8002e44:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002e46:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8002e4a:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8002e4c:	f7ff fad4 	bl	80023f8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8002e50:	f7ff f810 	bl	8001e74 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8002e54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e58:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8002e5a:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 8002e5c:	f7ff fbb4 	bl	80025c8 <z_arm_mpu_init>
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
 8002e60:	4d2b      	ldr	r5, [pc, #172]	; (8002f10 <z_cstart+0x100>)
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 8002e62:	f7ff fafd 	bl	8002460 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
 8002e66:	f240 1301 	movw	r3, #257	; 0x101
 8002e6a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 8002e6e:	ab06      	add	r3, sp, #24
 8002e70:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
 8002e72:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 8002e76:	f001 fc24 	bl	80046c2 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8002e7a:	4620      	mov	r0, r4
 8002e7c:	f7ff fee4 	bl	8002c48 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8002e80:	2001      	movs	r0, #1
 8002e82:	f7ff fee1 	bl	8002c48 <z_sys_init_run_level>
	z_sched_init();
 8002e86:	f000 fabf 	bl	8003408 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8002e8a:	4b22      	ldr	r3, [pc, #136]	; (8002f14 <z_cstart+0x104>)
	_kernel.ready_q.cache = &z_main_thread;
 8002e8c:	61ee      	str	r6, [r5, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8002e8e:	f04f 0b01 	mov.w	fp, #1
 8002e92:	9305      	str	r3, [sp, #20]
 8002e94:	2307      	movs	r3, #7
 8002e96:	4920      	ldr	r1, [pc, #128]	; (8002f18 <z_cstart+0x108>)
 8002e98:	9400      	str	r4, [sp, #0]
 8002e9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e9e:	e9cd 3b03 	strd	r3, fp, [sp, #12]
 8002ea2:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002ea6:	4653      	mov	r3, sl
 8002ea8:	4630      	mov	r0, r6
 8002eaa:	f000 f88b 	bl	8002fc4 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8002eae:	7b73      	ldrb	r3, [r6, #13]
 8002eb0:	4680      	mov	r8, r0
 8002eb2:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
 8002eb6:	4630      	mov	r0, r6
 8002eb8:	7373      	strb	r3, [r6, #13]
 8002eba:	f001 fcd2 	bl	8004862 <z_ready_thread>
	z_setup_new_thread(thread, stack,
 8002ebe:	230f      	movs	r3, #15
 8002ec0:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8002ec4:	4915      	ldr	r1, [pc, #84]	; (8002f1c <z_cstart+0x10c>)
 8002ec6:	4b16      	ldr	r3, [pc, #88]	; (8002f20 <z_cstart+0x110>)
 8002ec8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002ecc:	e9cd b404 	strd	fp, r4, [sp, #16]
 8002ed0:	e9cd 5400 	strd	r5, r4, [sp]
 8002ed4:	4638      	mov	r0, r7
 8002ed6:	f000 f875 	bl	8002fc4 <z_setup_new_thread>
 8002eda:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 8002edc:	60ef      	str	r7, [r5, #12]
 8002ede:	f023 0304 	bic.w	r3, r3, #4
 8002ee2:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 8002ee4:	f105 0314 	add.w	r3, r5, #20
	list->tail = (sys_dnode_t *)list;
 8002ee8:	e9c5 3305 	strd	r3, r3, [r5, #20]
		_kernel.cpus[i].id = i;
 8002eec:	742c      	strb	r4, [r5, #16]
		_kernel.cpus[i].irq_stack =
 8002eee:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8002ef2:	4652      	mov	r2, sl
 8002ef4:	4641      	mov	r1, r8
 8002ef6:	4630      	mov	r0, r6
 8002ef8:	f7fe ffa6 	bl	8001e48 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8002efc:	20001960 	.word	0x20001960
 8002f00:	e000ed00 	.word	0xe000ed00
 8002f04:	20000258 	.word	0x20000258
 8002f08:	08002ddd 	.word	0x08002ddd
 8002f0c:	200001d8 	.word	0x200001d8
 8002f10:	20000460 	.word	0x20000460
 8002f14:	08005657 	.word	0x08005657
 8002f18:	200007c0 	.word	0x200007c0
 8002f1c:	20000fe0 	.word	0x20000fe0
 8002f20:	0800477b 	.word	0x0800477b

08002f24 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
 8002f24:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 8002f26:	4b0e      	ldr	r3, [pc, #56]	; (8002f60 <init_mem_slab_module+0x3c>)
 8002f28:	4c0e      	ldr	r4, [pc, #56]	; (8002f64 <init_mem_slab_module+0x40>)
 8002f2a:	42a3      	cmp	r3, r4
 8002f2c:	d301      	bcc.n	8002f32 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
 8002f2e:	2000      	movs	r0, #0
	return rc;
}
 8002f30:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 8002f32:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
 8002f36:	ea41 0200 	orr.w	r2, r1, r0
 8002f3a:	f012 0203 	ands.w	r2, r2, #3
 8002f3e:	d10b      	bne.n	8002f58 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
 8002f40:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
 8002f42:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
 8002f44:	42aa      	cmp	r2, r5
 8002f46:	d101      	bne.n	8002f4c <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 8002f48:	331c      	adds	r3, #28
 8002f4a:	e7ee      	b.n	8002f2a <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
 8002f4c:	695e      	ldr	r6, [r3, #20]
 8002f4e:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
 8002f50:	3201      	adds	r2, #1
		slab->free_list = p;
 8002f52:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
 8002f54:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
 8002f56:	e7f5      	b.n	8002f44 <init_mem_slab_module+0x20>
	return rc;
 8002f58:	f06f 0015 	mvn.w	r0, #21
 8002f5c:	e7e8      	b.n	8002f30 <init_mem_slab_module+0xc>
 8002f5e:	bf00      	nop
 8002f60:	2000010c 	.word	0x2000010c
 8002f64:	2000010c 	.word	0x2000010c

08002f68 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
 8002f68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f6a:	460c      	mov	r4, r1
	__asm__ volatile(
 8002f6c:	f04f 0510 	mov.w	r5, #16
 8002f70:	f3ef 8111 	mrs	r1, BASEPRI
 8002f74:	f385 8811 	msr	BASEPRI, r5
 8002f78:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	if (slab->free_list != NULL) {
 8002f7c:	6945      	ldr	r5, [r0, #20]
 8002f7e:	b15d      	cbz	r5, 8002f98 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
 8002f80:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
 8002f82:	682b      	ldr	r3, [r5, #0]
 8002f84:	6143      	str	r3, [r0, #20]
		slab->num_used++;
 8002f86:	6983      	ldr	r3, [r0, #24]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
 8002f8c:	2000      	movs	r0, #0
	__asm__ volatile(
 8002f8e:	f381 8811 	msr	BASEPRI, r1
 8002f92:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&slab->lock, key);

	return result;
 8002f96:	e011      	b.n	8002fbc <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
 8002f98:	ea52 0c03 	orrs.w	ip, r2, r3
 8002f9c:	d103      	bne.n	8002fa6 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
 8002f9e:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
 8002fa0:	f06f 000b 	mvn.w	r0, #11
 8002fa4:	e7f3      	b.n	8002f8e <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
 8002fa6:	e9cd 2300 	strd	r2, r3, [sp]
 8002faa:	4602      	mov	r2, r0
 8002fac:	3008      	adds	r0, #8
 8002fae:	f000 f979 	bl	80032a4 <z_pend_curr>
		if (result == 0) {
 8002fb2:	b918      	cbnz	r0, 8002fbc <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
 8002fb4:	4b02      	ldr	r3, [pc, #8]	; (8002fc0 <k_mem_slab_alloc+0x58>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	6023      	str	r3, [r4, #0]
}
 8002fbc:	b003      	add	sp, #12
 8002fbe:	bd30      	pop	{r4, r5, pc}
 8002fc0:	20000460 	.word	0x20000460

08002fc4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8002fc4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 8002fc8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8002fca:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 8002fcc:	2604      	movs	r6, #4
 8002fce:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
 8002fd0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8002fd2:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8002fd4:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
 8002fd8:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8002fda:	1dd6      	adds	r6, r2, #7
 8002fdc:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002fe0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
 8002fe2:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8002fe4:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 8002fe8:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 8002fea:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
 8002fee:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
 8002ff2:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
 8002ff4:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 8002ff6:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8002ff8:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002ffc:	9202      	str	r2, [sp, #8]
 8002ffe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003000:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
 8003002:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8003004:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003006:	9200      	str	r2, [sp, #0]
 8003008:	4642      	mov	r2, r8
{
 800300a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800300c:	f7fe feea 	bl	8001de4 <arch_new_thread>
	if (!_current) {
 8003010:	4b04      	ldr	r3, [pc, #16]	; (8003024 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
 8003012:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	b103      	cbz	r3, 800301a <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
 8003018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
 800301a:	6723      	str	r3, [r4, #112]	; 0x70
}
 800301c:	4640      	mov	r0, r8
 800301e:	b004      	add	sp, #16
 8003020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003024:	20000460 	.word	0x20000460

08003028 <z_impl_k_thread_create>:
{
 8003028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800302a:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800302c:	2700      	movs	r7, #0
 800302e:	9705      	str	r7, [sp, #20]
 8003030:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8003032:	9704      	str	r7, [sp, #16]
 8003034:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8003036:	9703      	str	r7, [sp, #12]
 8003038:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800303a:	9702      	str	r7, [sp, #8]
{
 800303c:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8003040:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003042:	9701      	str	r7, [sp, #4]
 8003044:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8003046:	9700      	str	r7, [sp, #0]
{
 8003048:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800304a:	f7ff ffbb 	bl	8002fc4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 800304e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003052:	bf08      	it	eq
 8003054:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 8003058:	d005      	beq.n	8003066 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800305a:	ea55 0306 	orrs.w	r3, r5, r6
 800305e:	d105      	bne.n	800306c <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
 8003060:	4620      	mov	r0, r4
 8003062:	f000 f9b3 	bl	80033cc <z_sched_start>
}
 8003066:	4620      	mov	r0, r4
 8003068:	b007      	add	sp, #28
 800306a:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800306c:	4903      	ldr	r1, [pc, #12]	; (800307c <z_impl_k_thread_create+0x54>)
 800306e:	4632      	mov	r2, r6
 8003070:	462b      	mov	r3, r5
 8003072:	f104 0018 	add.w	r0, r4, #24
 8003076:	f000 fb25 	bl	80036c4 <z_add_timeout>
 800307a:	e7f4      	b.n	8003066 <z_impl_k_thread_create+0x3e>
 800307c:	08004883 	.word	0x08004883

08003080 <z_init_static_threads>:
{
 8003080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003082:	4c22      	ldr	r4, [pc, #136]	; (800310c <z_init_static_threads+0x8c>)
	_FOREACH_STATIC_THREAD(thread_data) {
 8003084:	4d22      	ldr	r5, [pc, #136]	; (8003110 <z_init_static_threads+0x90>)
{
 8003086:	b087      	sub	sp, #28
 8003088:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 800308a:	42ae      	cmp	r6, r5
 800308c:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8003090:	d30b      	bcc.n	80030aa <z_init_static_threads+0x2a>
	k_sched_lock();
 8003092:	f000 f89b 	bl	80031cc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 8003096:	4c1d      	ldr	r4, [pc, #116]	; (800310c <z_init_static_threads+0x8c>)
 8003098:	4f1e      	ldr	r7, [pc, #120]	; (8003114 <z_init_static_threads+0x94>)
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * (to_hz / from_hz);
 800309a:	260a      	movs	r6, #10
 800309c:	42ac      	cmp	r4, r5
 800309e:	d320      	bcc.n	80030e2 <z_init_static_threads+0x62>
}
 80030a0:	b007      	add	sp, #28
 80030a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 80030a6:	f000 b93f 	b.w	8003328 <k_sched_unlock>
		z_setup_new_thread(
 80030aa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80030ae:	9305      	str	r3, [sp, #20]
 80030b0:	f854 3c10 	ldr.w	r3, [r4, #-16]
 80030b4:	9304      	str	r3, [sp, #16]
 80030b6:	f854 3c14 	ldr.w	r3, [r4, #-20]
 80030ba:	9303      	str	r3, [sp, #12]
 80030bc:	f854 3c18 	ldr.w	r3, [r4, #-24]
 80030c0:	9302      	str	r3, [sp, #8]
 80030c2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 80030c6:	9301      	str	r3, [sp, #4]
 80030c8:	f854 3c20 	ldr.w	r3, [r4, #-32]
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 80030d2:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 80030d6:	f7ff ff75 	bl	8002fc4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 80030da:	f854 3c30 	ldr.w	r3, [r4, #-48]
 80030de:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 80030e0:	e7d2      	b.n	8003088 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 80030e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80030e4:	1c53      	adds	r3, r2, #1
 80030e6:	d009      	beq.n	80030fc <z_init_static_threads+0x7c>
					    K_MSEC(thread_data->init_delay));
 80030e8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80030ec:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 80030f0:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 80030f4:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 80030f6:	d103      	bne.n	8003100 <z_init_static_threads+0x80>
	z_sched_start(thread);
 80030f8:	f000 f968 	bl	80033cc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 80030fc:	3430      	adds	r4, #48	; 0x30
 80030fe:	e7cd      	b.n	800309c <z_init_static_threads+0x1c>
 8003100:	4639      	mov	r1, r7
 8003102:	3018      	adds	r0, #24
 8003104:	f000 fade 	bl	80036c4 <z_add_timeout>
 8003108:	e7f8      	b.n	80030fc <z_init_static_threads+0x7c>
 800310a:	bf00      	nop
 800310c:	2000010c 	.word	0x2000010c
 8003110:	2000010c 	.word	0x2000010c
 8003114:	08004883 	.word	0x08004883

08003118 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 8003118:	b538      	push	{r3, r4, r5, lr}
 800311a:	4604      	mov	r4, r0
	__asm__ volatile(
 800311c:	f04f 0310 	mov.w	r3, #16
 8003120:	f3ef 8511 	mrs	r5, BASEPRI
 8003124:	f383 8811 	msr	BASEPRI, r3
 8003128:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
 800312c:	f001 fbe0 	bl	80048f0 <z_unpend_first_thread>

	if (thread != NULL) {
 8003130:	b148      	cbz	r0, 8003146 <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8003132:	2200      	movs	r2, #0
 8003134:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 8003136:	f001 fb94 	bl	8004862 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 800313a:	4629      	mov	r1, r5
 800313c:	4805      	ldr	r0, [pc, #20]	; (8003154 <z_impl_k_sem_give+0x3c>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
 800313e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 8003142:	f000 b831 	b.w	80031a8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8003146:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800314a:	429a      	cmp	r2, r3
 800314c:	bf18      	it	ne
 800314e:	3301      	addne	r3, #1
 8003150:	60a3      	str	r3, [r4, #8]
}
 8003152:	e7f2      	b.n	800313a <z_impl_k_sem_give+0x22>
 8003154:	20000491 	.word	0x20000491

08003158 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 8003158:	b513      	push	{r0, r1, r4, lr}
 800315a:	f04f 0410 	mov.w	r4, #16
 800315e:	f3ef 8111 	mrs	r1, BASEPRI
 8003162:	f384 8811 	msr	BASEPRI, r4
 8003166:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
 800316a:	6884      	ldr	r4, [r0, #8]
 800316c:	b144      	cbz	r4, 8003180 <z_impl_k_sem_take+0x28>
		sem->count--;
 800316e:	3c01      	subs	r4, #1
 8003170:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 8003172:	f381 8811 	msr	BASEPRI, r1
 8003176:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 800317a:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
 800317c:	b002      	add	sp, #8
 800317e:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8003180:	ea52 0403 	orrs.w	r4, r2, r3
 8003184:	d106      	bne.n	8003194 <z_impl_k_sem_take+0x3c>
 8003186:	f381 8811 	msr	BASEPRI, r1
 800318a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 800318e:	f06f 000f 	mvn.w	r0, #15
 8003192:	e7f3      	b.n	800317c <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8003194:	e9cd 2300 	strd	r2, r3, [sp]
 8003198:	4602      	mov	r2, r0
 800319a:	4802      	ldr	r0, [pc, #8]	; (80031a4 <z_impl_k_sem_take+0x4c>)
 800319c:	f000 f882 	bl	80032a4 <z_pend_curr>
	return ret;
 80031a0:	e7ec      	b.n	800317c <z_impl_k_sem_take+0x24>
 80031a2:	bf00      	nop
 80031a4:	20000491 	.word	0x20000491

080031a8 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
 80031a8:	b949      	cbnz	r1, 80031be <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031aa:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
 80031ae:	b930      	cbnz	r0, 80031be <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 80031b2:	69da      	ldr	r2, [r3, #28]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d001      	beq.n	80031be <z_reschedule+0x16>
	ret = arch_swap(key);
 80031ba:	f7fe bd97 	b.w	8001cec <arch_swap>
 80031be:	f381 8811 	msr	BASEPRI, r1
 80031c2:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
 80031c6:	4770      	bx	lr
 80031c8:	20000460 	.word	0x20000460

080031cc <k_sched_lock>:
	__asm__ volatile(
 80031cc:	f04f 0310 	mov.w	r3, #16
 80031d0:	f3ef 8111 	mrs	r1, BASEPRI
 80031d4:	f383 8811 	msr	BASEPRI, r3
 80031d8:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 80031dc:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <k_sched_lock+0x24>)
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	7bd3      	ldrb	r3, [r2, #15]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 80031e6:	f381 8811 	msr	BASEPRI, r1
 80031ea:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
 80031ee:	4770      	bx	lr
 80031f0:	20000460 	.word	0x20000460

080031f4 <update_cache>:
{
 80031f4:	b508      	push	{r3, lr}
 80031f6:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
 80031f8:	4809      	ldr	r0, [pc, #36]	; (8003220 <update_cache+0x2c>)
 80031fa:	f001 fb02 	bl	8004802 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 80031fe:	4b09      	ldr	r3, [pc, #36]	; (8003224 <update_cache+0x30>)
 8003200:	b900      	cbnz	r0, 8003204 <update_cache+0x10>
 8003202:	68d8      	ldr	r0, [r3, #12]
	if (preempt_ok != 0) {
 8003204:	b94a      	cbnz	r2, 800321a <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	7b51      	ldrb	r1, [r2, #13]
 800320a:	06c9      	lsls	r1, r1, #27
 800320c:	d105      	bne.n	800321a <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 800320e:	6981      	ldr	r1, [r0, #24]
 8003210:	b919      	cbnz	r1, 800321a <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
 8003212:	89d1      	ldrh	r1, [r2, #14]
 8003214:	297f      	cmp	r1, #127	; 0x7f
 8003216:	bf88      	it	hi
 8003218:	4610      	movhi	r0, r2
 800321a:	61d8      	str	r0, [r3, #28]
}
 800321c:	bd08      	pop	{r3, pc}
 800321e:	bf00      	nop
 8003220:	20000480 	.word	0x20000480
 8003224:	20000460 	.word	0x20000460

08003228 <unready_thread>:
{
 8003228:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 800322a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 800322e:	7b43      	ldrb	r3, [r0, #13]
 8003230:	2a00      	cmp	r2, #0
{
 8003232:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8003234:	da04      	bge.n	8003240 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8003236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800323a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 800323c:	f001 faa9 	bl	8004792 <sys_dlist_remove>
	update_cache(thread == _current);
 8003240:	4b04      	ldr	r3, [pc, #16]	; (8003254 <unready_thread+0x2c>)
 8003242:	6898      	ldr	r0, [r3, #8]
 8003244:	1a43      	subs	r3, r0, r1
 8003246:	4258      	negs	r0, r3
 8003248:	4158      	adcs	r0, r3
}
 800324a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 800324e:	f7ff bfd1 	b.w	80031f4 <update_cache>
 8003252:	bf00      	nop
 8003254:	20000460 	.word	0x20000460

08003258 <pend>:
{
 8003258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800325c:	4606      	mov	r6, r0
 800325e:	4615      	mov	r5, r2
 8003260:	461c      	mov	r4, r3
	__asm__ volatile(
 8003262:	f04f 0310 	mov.w	r3, #16
 8003266:	f3ef 8711 	mrs	r7, BASEPRI
 800326a:	f383 8811 	msr	BASEPRI, r3
 800326e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
 8003272:	f001 facc 	bl	800480e <add_to_waitq_locked>
	__asm__ volatile(
 8003276:	f387 8811 	msr	BASEPRI, r7
 800327a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800327e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8003282:	bf08      	it	eq
 8003284:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 8003288:	d008      	beq.n	800329c <pend+0x44>
 800328a:	462a      	mov	r2, r5
 800328c:	4623      	mov	r3, r4
 800328e:	f106 0018 	add.w	r0, r6, #24
 8003292:	4903      	ldr	r1, [pc, #12]	; (80032a0 <pend+0x48>)
}
 8003294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003298:	f000 ba14 	b.w	80036c4 <z_add_timeout>
 800329c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032a0:	08004883 	.word	0x08004883

080032a4 <z_pend_curr>:
{
 80032a4:	b510      	push	{r4, lr}
	pend(_current, wait_q, timeout);
 80032a6:	4806      	ldr	r0, [pc, #24]	; (80032c0 <z_pend_curr+0x1c>)
{
 80032a8:	460c      	mov	r4, r1
	pend(_current, wait_q, timeout);
 80032aa:	6880      	ldr	r0, [r0, #8]
{
 80032ac:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
 80032ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80032b2:	f7ff ffd1 	bl	8003258 <pend>
 80032b6:	4620      	mov	r0, r4
}
 80032b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032bc:	f7fe bd16 	b.w	8001cec <arch_swap>
 80032c0:	20000460 	.word	0x20000460

080032c4 <z_impl_k_thread_suspend>:
{
 80032c4:	b570      	push	{r4, r5, r6, lr}
 80032c6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 80032c8:	3018      	adds	r0, #24
 80032ca:	f001 fb29 	bl	8004920 <z_abort_timeout>
	__asm__ volatile(
 80032ce:	f04f 0310 	mov.w	r3, #16
 80032d2:	f3ef 8611 	mrs	r6, BASEPRI
 80032d6:	f383 8811 	msr	BASEPRI, r3
 80032da:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 80032de:	f994 200d 	ldrsb.w	r2, [r4, #13]
 80032e2:	7b63      	ldrb	r3, [r4, #13]
 80032e4:	2a00      	cmp	r2, #0
 80032e6:	da05      	bge.n	80032f4 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80032e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032ec:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80032ee:	4620      	mov	r0, r4
 80032f0:	f001 fa4f 	bl	8004792 <sys_dlist_remove>
		update_cache(thread == _current);
 80032f4:	4d0b      	ldr	r5, [pc, #44]	; (8003324 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 80032f6:	7b63      	ldrb	r3, [r4, #13]
 80032f8:	68a8      	ldr	r0, [r5, #8]
 80032fa:	f043 0310 	orr.w	r3, r3, #16
 80032fe:	7363      	strb	r3, [r4, #13]
 8003300:	1b03      	subs	r3, r0, r4
 8003302:	4258      	negs	r0, r3
 8003304:	4158      	adcs	r0, r3
 8003306:	f7ff ff75 	bl	80031f4 <update_cache>
	__asm__ volatile(
 800330a:	f386 8811 	msr	BASEPRI, r6
 800330e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 8003312:	68ab      	ldr	r3, [r5, #8]
 8003314:	42a3      	cmp	r3, r4
 8003316:	d103      	bne.n	8003320 <z_impl_k_thread_suspend+0x5c>
}
 8003318:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 800331c:	f001 ba67 	b.w	80047ee <z_reschedule_unlocked>
}
 8003320:	bd70      	pop	{r4, r5, r6, pc}
 8003322:	bf00      	nop
 8003324:	20000460 	.word	0x20000460

08003328 <k_sched_unlock>:
{
 8003328:	b510      	push	{r4, lr}
	__asm__ volatile(
 800332a:	f04f 0310 	mov.w	r3, #16
 800332e:	f3ef 8411 	mrs	r4, BASEPRI
 8003332:	f383 8811 	msr	BASEPRI, r3
 8003336:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 800333a:	4b08      	ldr	r3, [pc, #32]	; (800335c <k_sched_unlock+0x34>)
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	7bd3      	ldrb	r3, [r2, #15]
 8003340:	3301      	adds	r3, #1
 8003342:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8003344:	2000      	movs	r0, #0
 8003346:	f7ff ff55 	bl	80031f4 <update_cache>
	__asm__ volatile(
 800334a:	f384 8811 	msr	BASEPRI, r4
 800334e:	f3bf 8f6f 	isb	sy
}
 8003352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 8003356:	f001 ba4a 	b.w	80047ee <z_reschedule_unlocked>
 800335a:	bf00      	nop
 800335c:	20000460 	.word	0x20000460

08003360 <ready_thread>:
{
 8003360:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 8003362:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 8003366:	7b43      	ldrb	r3, [r0, #13]
 8003368:	2a00      	cmp	r2, #0
 800336a:	db2a      	blt.n	80033c2 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800336c:	06da      	lsls	r2, r3, #27
 800336e:	d128      	bne.n	80033c2 <ready_thread+0x62>
 8003370:	6982      	ldr	r2, [r0, #24]
 8003372:	bb32      	cbnz	r2, 80033c2 <ready_thread+0x62>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8003374:	4a14      	ldr	r2, [pc, #80]	; (80033c8 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
 8003376:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800337a:	7343      	strb	r3, [r0, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 800337c:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003380:	f102 0520 	add.w	r5, r2, #32
 8003384:	42ab      	cmp	r3, r5
 8003386:	d017      	beq.n	80033b8 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8003388:	b1b3      	cbz	r3, 80033b8 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
 800338a:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 800338e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 8003392:	428e      	cmp	r6, r1
 8003394:	d00b      	beq.n	80033ae <ready_thread+0x4e>
		return b2 - b1;
 8003396:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 8003398:	2900      	cmp	r1, #0
 800339a:	dd08      	ble.n	80033ae <ready_thread+0x4e>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 800339c:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
 800339e:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 80033a2:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 80033a4:	6058      	str	r0, [r3, #4]
}
 80033a6:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 80033a8:	2000      	movs	r0, #0
 80033aa:	f7ff bf23 	b.w	80031f4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 80033ae:	42a3      	cmp	r3, r4
 80033b0:	d002      	beq.n	80033b8 <ready_thread+0x58>
 80033b2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1ea      	bne.n	800338e <ready_thread+0x2e>
	node->prev = tail;
 80033b8:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
 80033bc:	6020      	str	r0, [r4, #0]
	list->tail = node;
 80033be:	6250      	str	r0, [r2, #36]	; 0x24
}
 80033c0:	e7f1      	b.n	80033a6 <ready_thread+0x46>
}
 80033c2:	bc70      	pop	{r4, r5, r6}
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	20000460 	.word	0x20000460

080033cc <z_sched_start>:
{
 80033cc:	b510      	push	{r4, lr}
	__asm__ volatile(
 80033ce:	f04f 0210 	mov.w	r2, #16
 80033d2:	f3ef 8411 	mrs	r4, BASEPRI
 80033d6:	f382 8811 	msr	BASEPRI, r2
 80033da:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 80033de:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 80033e0:	0751      	lsls	r1, r2, #29
 80033e2:	d404      	bmi.n	80033ee <z_sched_start+0x22>
	__asm__ volatile(
 80033e4:	f384 8811 	msr	BASEPRI, r4
 80033e8:	f3bf 8f6f 	isb	sy
}
 80033ec:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80033ee:	f022 0204 	bic.w	r2, r2, #4
 80033f2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 80033f4:	f7ff ffb4 	bl	8003360 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 80033f8:	4621      	mov	r1, r4
 80033fa:	4802      	ldr	r0, [pc, #8]	; (8003404 <z_sched_start+0x38>)
}
 80033fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 8003400:	f7ff bed2 	b.w	80031a8 <z_reschedule>
 8003404:	20000491 	.word	0x20000491

08003408 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 8003408:	4b02      	ldr	r3, [pc, #8]	; (8003414 <z_sched_init+0xc>)
 800340a:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
 800340e:	e9c3 2208 	strd	r2, r2, [r3, #32]

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
 8003412:	4770      	bx	lr
 8003414:	20000460 	.word	0x20000460

08003418 <z_impl_k_yield>:

void z_impl_k_yield(void)
{
	__ASSERT(!arch_is_in_isr(), "");

	if (!z_is_idle_thread_object(_current)) {
 8003418:	4925      	ldr	r1, [pc, #148]	; (80034b0 <z_impl_k_yield+0x98>)
{
 800341a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
 800341c:	688a      	ldr	r2, [r1, #8]
 800341e:	4b25      	ldr	r3, [pc, #148]	; (80034b4 <z_impl_k_yield+0x9c>)
 8003420:	429a      	cmp	r2, r3
 8003422:	d03b      	beq.n	800349c <z_impl_k_yield+0x84>
	__asm__ volatile(
 8003424:	f04f 0310 	mov.w	r3, #16
 8003428:	f3ef 8511 	mrs	r5, BASEPRI
 800342c:	f383 8811 	msr	BASEPRI, r3
 8003430:	f3bf 8f6f 	isb	sy
		k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

		if (!IS_ENABLED(CONFIG_SMP) ||
			z_is_thread_queued(_current)) {
			dequeue_thread(&_kernel.ready_q.runq,
 8003434:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8003436:	7b43      	ldrb	r3, [r0, #13]
 8003438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800343c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 800343e:	f001 f9a8 	bl	8004792 <sys_dlist_remove>
					_current);
		}
		queue_thread(&_kernel.ready_q.runq, _current);
 8003442:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 8003444:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
 8003446:	4608      	mov	r0, r1
 8003448:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800344c:	735a      	strb	r2, [r3, #13]
 800344e:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003452:	4282      	cmp	r2, r0
 8003454:	d01c      	beq.n	8003490 <z_impl_k_yield+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8003456:	b1da      	cbz	r2, 8003490 <z_impl_k_yield+0x78>
	return (node == list->tail) ? NULL : node->next;
 8003458:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
 800345a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 800345e:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
 8003462:	42a6      	cmp	r6, r4
 8003464:	d00f      	beq.n	8003486 <z_impl_k_yield+0x6e>
		return b2 - b1;
 8003466:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 8003468:	2c00      	cmp	r4, #0
 800346a:	dd0c      	ble.n	8003486 <z_impl_k_yield+0x6e>
	sys_dnode_t *const prev = successor->prev;
 800346c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 800346e:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 8003472:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 8003474:	6053      	str	r3, [r2, #4]
		update_cache(1);
 8003476:	2001      	movs	r0, #1
 8003478:	f7ff febc 	bl	80031f4 <update_cache>
 800347c:	4628      	mov	r0, r5
		z_swap(&sched_spinlock, key);
	} else {
		z_swap_unlocked();
	}
}
 800347e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003482:	f7fe bc33 	b.w	8001cec <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 8003486:	42ba      	cmp	r2, r7
 8003488:	d002      	beq.n	8003490 <z_impl_k_yield+0x78>
 800348a:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800348c:	2a00      	cmp	r2, #0
 800348e:	d1e6      	bne.n	800345e <z_impl_k_yield+0x46>
	sys_dnode_t *const tail = list->tail;
 8003490:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
 8003492:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
 8003496:	6013      	str	r3, [r2, #0]
	list->tail = node;
 8003498:	624b      	str	r3, [r1, #36]	; 0x24
}
 800349a:	e7ec      	b.n	8003476 <z_impl_k_yield+0x5e>
 800349c:	f04f 0310 	mov.w	r3, #16
 80034a0:	f3ef 8011 	mrs	r0, BASEPRI
 80034a4:	f383 8811 	msr	BASEPRI, r3
 80034a8:	f3bf 8f6f 	isb	sy
 80034ac:	e7e7      	b.n	800347e <z_impl_k_yield+0x66>
 80034ae:	bf00      	nop
 80034b0:	20000460 	.word	0x20000460
 80034b4:	200001d8 	.word	0x200001d8

080034b8 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 80034b8:	ea50 0301 	orrs.w	r3, r0, r1
{
 80034bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034c0:	4605      	mov	r5, r0
 80034c2:	460e      	mov	r6, r1
	if (ticks == 0) {
 80034c4:	d104      	bne.n	80034d0 <z_tick_sleep+0x18>
	z_impl_k_yield();
 80034c6:	f7ff ffa7 	bl	8003418 <z_impl_k_yield>
		k_yield();
		return 0;
 80034ca:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
 80034cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 80034d0:	f001 fa3c 	bl	800494c <sys_clock_tick_get_32>
 80034d4:	4604      	mov	r4, r0
 80034d6:	f04f 0310 	mov.w	r3, #16
 80034da:	f3ef 8811 	mrs	r8, BASEPRI
 80034de:	f383 8811 	msr	BASEPRI, r3
 80034e2:	f3bf 8f6f 	isb	sy
	unready_thread(_current);
 80034e6:	4f0e      	ldr	r7, [pc, #56]	; (8003520 <z_tick_sleep+0x68>)
 80034e8:	68b8      	ldr	r0, [r7, #8]
 80034ea:	f7ff fe9d 	bl	8003228 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 80034ee:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 80034f0:	490c      	ldr	r1, [pc, #48]	; (8003524 <z_tick_sleep+0x6c>)
 80034f2:	462a      	mov	r2, r5
 80034f4:	4633      	mov	r3, r6
 80034f6:	3018      	adds	r0, #24
 80034f8:	f000 f8e4 	bl	80036c4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 80034fc:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 80034fe:	7b53      	ldrb	r3, [r2, #13]
 8003500:	f043 0310 	orr.w	r3, r3, #16
 8003504:	7353      	strb	r3, [r2, #13]
 8003506:	4640      	mov	r0, r8
 8003508:	f7fe fbf0 	bl	8001cec <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 800350c:	f001 fa1e 	bl	800494c <sys_clock_tick_get_32>
	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 8003510:	1962      	adds	r2, r4, r5
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 8003512:	1a10      	subs	r0, r2, r0
 8003514:	eb63 0303 	sbc.w	r3, r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	bfb8      	it	lt
 800351c:	2000      	movlt	r0, #0
 800351e:	e7d5      	b.n	80034cc <z_tick_sleep+0x14>
 8003520:	20000460 	.word	0x20000460
 8003524:	08004883 	.word	0x08004883

08003528 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8003528:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800352c:	bf08      	it	eq
 800352e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 8003532:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8003534:	d106      	bne.n	8003544 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 8003536:	4b07      	ldr	r3, [pc, #28]	; (8003554 <z_impl_k_sleep+0x2c>)
 8003538:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 800353a:	f7ff fec3 	bl	80032c4 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
 800353e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
 8003542:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 8003544:	f7ff ffb8 	bl	80034b8 <z_tick_sleep>
			return t / (from_hz / to_hz);
 8003548:	220a      	movs	r2, #10
 800354a:	2300      	movs	r3, #0
 800354c:	17c1      	asrs	r1, r0, #31
 800354e:	f7fc fdf3 	bl	8000138 <__aeabi_uldivmod>
	return k_ticks_to_ms_floor64(ticks);
 8003552:	e7f6      	b.n	8003542 <z_impl_k_sleep+0x1a>
 8003554:	20000460 	.word	0x20000460

08003558 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 8003558:	4b01      	ldr	r3, [pc, #4]	; (8003560 <z_impl_k_current_get+0x8>)
 800355a:	6898      	ldr	r0, [r3, #8]
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	20000460 	.word	0x20000460

08003564 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 8003564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003568:	4604      	mov	r4, r0
 800356a:	f04f 0310 	mov.w	r3, #16
 800356e:	f3ef 8611 	mrs	r6, BASEPRI
 8003572:	f383 8811 	msr	BASEPRI, r3
 8003576:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 800357a:	7b43      	ldrb	r3, [r0, #13]
 800357c:	071a      	lsls	r2, r3, #28
 800357e:	d505      	bpl.n	800358c <z_thread_abort+0x28>
	__asm__ volatile(
 8003580:	f386 8811 	msr	BASEPRI, r6
 8003584:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8003588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
 800358c:	f023 0220 	bic.w	r2, r3, #32
 8003590:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 8003594:	09d2      	lsrs	r2, r2, #7
 8003596:	d120      	bne.n	80035da <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8003598:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 800359a:	68a3      	ldr	r3, [r4, #8]
 800359c:	b113      	cbz	r3, 80035a4 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
 800359e:	4620      	mov	r0, r4
 80035a0:	f001 f8ff 	bl	80047a2 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
 80035a4:	f104 0018 	add.w	r0, r4, #24
 80035a8:	f001 f9ba 	bl	8004920 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 80035ac:	f104 0758 	add.w	r7, r4, #88	; 0x58
 80035b0:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
 80035b4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80035b6:	42bd      	cmp	r5, r7
 80035b8:	d000      	beq.n	80035bc <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 80035ba:	b9b5      	cbnz	r5, 80035ea <z_thread_abort+0x86>
		update_cache(1);
 80035bc:	2001      	movs	r0, #1
 80035be:	f7ff fe19 	bl	80031f4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 80035c2:	4b10      	ldr	r3, [pc, #64]	; (8003604 <z_thread_abort+0xa0>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	42a3      	cmp	r3, r4
 80035c8:	d1da      	bne.n	8003580 <z_thread_abort+0x1c>
 80035ca:	f3ef 8305 	mrs	r3, IPSR
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1d6      	bne.n	8003580 <z_thread_abort+0x1c>
 80035d2:	4630      	mov	r0, r6
 80035d4:	f7fe fb8a 	bl	8001cec <arch_swap>
	return ret;
 80035d8:	e7d2      	b.n	8003580 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80035da:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 80035de:	f043 0308 	orr.w	r3, r3, #8
 80035e2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80035e4:	f001 f8d5 	bl	8004792 <sys_dlist_remove>
}
 80035e8:	e7d7      	b.n	800359a <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
 80035ea:	4628      	mov	r0, r5
 80035ec:	f001 f8d9 	bl	80047a2 <unpend_thread_no_timeout>
 80035f0:	f105 0018 	add.w	r0, r5, #24
 80035f4:	f001 f994 	bl	8004920 <z_abort_timeout>
 80035f8:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
 80035fc:	4628      	mov	r0, r5
 80035fe:	f7ff feaf 	bl	8003360 <ready_thread>
 8003602:	e7d7      	b.n	80035b4 <z_thread_abort+0x50>
 8003604:	20000460 	.word	0x20000460

08003608 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
 8003608:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800360a:	4806      	ldr	r0, [pc, #24]	; (8003624 <z_data_copy+0x1c>)
 800360c:	4a06      	ldr	r2, [pc, #24]	; (8003628 <z_data_copy+0x20>)
 800360e:	4907      	ldr	r1, [pc, #28]	; (800362c <z_data_copy+0x24>)
 8003610:	1a12      	subs	r2, r2, r0
 8003612:	f001 f9cb 	bl	80049ac <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8003616:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800361a:	4a05      	ldr	r2, [pc, #20]	; (8003630 <z_data_copy+0x28>)
 800361c:	4905      	ldr	r1, [pc, #20]	; (8003634 <z_data_copy+0x2c>)
 800361e:	4806      	ldr	r0, [pc, #24]	; (8003638 <z_data_copy+0x30>)
 8003620:	f001 b9c4 	b.w	80049ac <memcpy>
 8003624:	20000000 	.word	0x20000000
 8003628:	2000011c 	.word	0x2000011c
 800362c:	080057a8 	.word	0x080057a8
 8003630:	00000000 	.word	0x00000000
 8003634:	080057a8 	.word	0x080057a8
 8003638:	20000000 	.word	0x20000000

0800363c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800363c:	4b03      	ldr	r3, [pc, #12]	; (800364c <elapsed+0x10>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	b90b      	cbnz	r3, 8003646 <elapsed+0xa>
 8003642:	f7fe baa7 	b.w	8001b94 <sys_clock_elapsed>
}
 8003646:	2000      	movs	r0, #0
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	20000488 	.word	0x20000488

08003650 <next_timeout>:
	return list->head == list;
 8003650:	4b0e      	ldr	r3, [pc, #56]	; (800368c <next_timeout+0x3c>)

static int32_t next_timeout(void)
{
 8003652:	b510      	push	{r4, lr}
 8003654:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003656:	429c      	cmp	r4, r3
 8003658:	bf08      	it	eq
 800365a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 800365c:	f7ff ffee 	bl	800363c <elapsed>
 8003660:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
 8003662:	b16c      	cbz	r4, 8003680 <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 8003664:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8003668:	1ac0      	subs	r0, r0, r3
 800366a:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
 800366e:	2801      	cmp	r0, #1
 8003670:	f173 0200 	sbcs.w	r2, r3, #0
 8003674:	db07      	blt.n	8003686 <next_timeout+0x36>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 8003676:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 800367a:	f173 0300 	sbcs.w	r3, r3, #0
 800367e:	db01      	blt.n	8003684 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
 8003680:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 8003684:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
 8003686:	2000      	movs	r0, #0
	return ret;
 8003688:	e7fc      	b.n	8003684 <next_timeout+0x34>
 800368a:	bf00      	nop
 800368c:	2000002c 	.word	0x2000002c

08003690 <remove_timeout>:
{
 8003690:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
 8003692:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8003694:	b168      	cbz	r0, 80036b2 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 8003696:	4a0a      	ldr	r2, [pc, #40]	; (80036c0 <remove_timeout+0x30>)
 8003698:	6852      	ldr	r2, [r2, #4]
 800369a:	4290      	cmp	r0, r2
 800369c:	d009      	beq.n	80036b2 <remove_timeout+0x22>
	if (next(t) != NULL) {
 800369e:	b143      	cbz	r3, 80036b2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 80036a0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 80036a4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 80036a8:	1912      	adds	r2, r2, r4
 80036aa:	eb41 0105 	adc.w	r1, r1, r5
 80036ae:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 80036b2:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 80036b4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 80036b6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80036b8:	2300      	movs	r3, #0
	node->prev = NULL;
 80036ba:	e9c0 3300 	strd	r3, r3, [r0]
}
 80036be:	bd30      	pop	{r4, r5, pc}
 80036c0:	2000002c 	.word	0x2000002c

080036c4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80036c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036c8:	bf08      	it	eq
 80036ca:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 80036ce:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036d2:	4605      	mov	r5, r0
 80036d4:	460e      	mov	r6, r1
 80036d6:	4691      	mov	r9, r2
 80036d8:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80036da:	d061      	beq.n	80037a0 <z_add_timeout+0xdc>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;
 80036dc:	1c57      	adds	r7, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
 80036de:	f06f 0a01 	mvn.w	sl, #1
	k_ticks_t ticks = timeout.ticks + 1;
 80036e2:	f143 0400 	adc.w	r4, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
 80036e6:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80036ea:	ebba 0307 	subs.w	r3, sl, r7
 80036ee:	eb6b 0304 	sbc.w	r3, fp, r4
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	db0f      	blt.n	8003716 <z_add_timeout+0x52>
		ticks = Z_TICK_ABS(timeout.ticks) - (curr_tick + elapsed());
 80036f6:	f7ff ffa1 	bl	800363c <elapsed>
 80036fa:	4b2f      	ldr	r3, [pc, #188]	; (80037b8 <z_add_timeout+0xf4>)
 80036fc:	e9d3 2400 	ldrd	r2, r4, [r3]
 8003700:	ebba 0202 	subs.w	r2, sl, r2
 8003704:	eb6b 0404 	sbc.w	r4, fp, r4
 8003708:	ebb2 0209 	subs.w	r2, r2, r9
 800370c:	eb64 0408 	sbc.w	r4, r4, r8
 8003710:	1a17      	subs	r7, r2, r0
 8003712:	eb64 74e0 	sbc.w	r4, r4, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 8003716:	60ae      	str	r6, [r5, #8]
	__asm__ volatile(
 8003718:	f04f 0310 	mov.w	r3, #16
 800371c:	f3ef 8611 	mrs	r6, BASEPRI
 8003720:	f383 8811 	msr	BASEPRI, r3
 8003724:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
 8003728:	f7ff ff88 	bl	800363c <elapsed>
	ticks = MAX(1, ticks);
 800372c:	463a      	mov	r2, r7
 800372e:	2f01      	cmp	r7, #1
	return list->head == list;
 8003730:	4f22      	ldr	r7, [pc, #136]	; (80037bc <z_add_timeout+0xf8>)
 8003732:	f174 0300 	sbcs.w	r3, r4, #0
 8003736:	bfb8      	it	lt
 8003738:	2201      	movlt	r2, #1
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	bfb8      	it	lt
 800373e:	2400      	movlt	r4, #0
		to->dticks = ticks + elapsed();
 8003740:	1812      	adds	r2, r2, r0
 8003742:	eb44 74e0 	adc.w	r4, r4, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003746:	42bb      	cmp	r3, r7
 8003748:	e9c5 2404 	strd	r2, r4, [r5, #16]
 800374c:	d002      	beq.n	8003754 <z_add_timeout+0x90>
	return (node == list->tail) ? NULL : node->next;
 800374e:	f8d7 c004 	ldr.w	ip, [r7, #4]
		for (t = first(); t != NULL; t = next(t)) {
 8003752:	b92b      	cbnz	r3, 8003760 <z_add_timeout+0x9c>
	sys_dnode_t *const tail = list->tail;
 8003754:	687b      	ldr	r3, [r7, #4]
	node->prev = tail;
 8003756:	e9c5 7300 	strd	r7, r3, [r5]
	tail->next = node;
 800375a:	601d      	str	r5, [r3, #0]
	list->tail = node;
 800375c:	607d      	str	r5, [r7, #4]
}
 800375e:	e011      	b.n	8003784 <z_add_timeout+0xc0>
			if (t->dticks > to->dticks) {
 8003760:	e9d3 1404 	ldrd	r1, r4, [r3, #16]
 8003764:	e9d5 2004 	ldrd	r2, r0, [r5, #16]
 8003768:	428a      	cmp	r2, r1
 800376a:	eb70 0e04 	sbcs.w	lr, r0, r4
 800376e:	da19      	bge.n	80037a4 <z_add_timeout+0xe0>
				t->dticks -= to->dticks;
 8003770:	1a8a      	subs	r2, r1, r2
 8003772:	eb64 0000 	sbc.w	r0, r4, r0
 8003776:	e9c3 2004 	strd	r2, r0, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
 800377a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800377c:	e9c5 3200 	strd	r3, r2, [r5]
	prev->next = node;
 8003780:	6015      	str	r5, [r2, #0]
	successor->prev = node;
 8003782:	605d      	str	r5, [r3, #4]
	return list->head == list;
 8003784:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003786:	42bb      	cmp	r3, r7
 8003788:	d006      	beq.n	8003798 <z_add_timeout+0xd4>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 800378a:	429d      	cmp	r5, r3
 800378c:	d104      	bne.n	8003798 <z_add_timeout+0xd4>
			if (next_time == 0 ||
			    _current_cpu->slice_ticks != next_time) {
				sys_clock_set_timeout(next_time, false);
			}
#else
			sys_clock_set_timeout(next_timeout(), false);
 800378e:	f7ff ff5f 	bl	8003650 <next_timeout>
 8003792:	2100      	movs	r1, #0
 8003794:	f7fe f99a 	bl	8001acc <sys_clock_set_timeout>
	__asm__ volatile(
 8003798:	f386 8811 	msr	BASEPRI, r6
 800379c:	f3bf 8f6f 	isb	sy
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 80037a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
 80037a4:	1a52      	subs	r2, r2, r1
 80037a6:	eb60 0004 	sbc.w	r0, r0, r4
	return (node == list->tail) ? NULL : node->next;
 80037aa:	4563      	cmp	r3, ip
 80037ac:	e9c5 2004 	strd	r2, r0, [r5, #16]
 80037b0:	d0d0      	beq.n	8003754 <z_add_timeout+0x90>
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	e7cd      	b.n	8003752 <z_add_timeout+0x8e>
 80037b6:	bf00      	nop
 80037b8:	200002d8 	.word	0x200002d8
 80037bc:	2000002c 	.word	0x2000002c

080037c0 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 80037c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	__asm__ volatile(
 80037c4:	f04f 0310 	mov.w	r3, #16
 80037c8:	f3ef 8411 	mrs	r4, BASEPRI
 80037cc:	f383 8811 	msr	BASEPRI, r3
 80037d0:	f3bf 8f6f 	isb	sy
	z_time_slice(ticks);
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 80037d4:	4e23      	ldr	r6, [pc, #140]	; (8003864 <sys_clock_announce+0xa4>)
	return list->head == list;
 80037d6:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8003868 <sys_clock_announce+0xa8>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 80037da:	4d24      	ldr	r5, [pc, #144]	; (800386c <sys_clock_announce+0xac>)
	announce_remaining = ticks;
 80037dc:	6030      	str	r0, [r6, #0]
 80037de:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
 80037e2:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80037e4:	4540      	cmp	r0, r8
		curr_tick += dt;
 80037e6:	e9d5 1e00 	ldrd	r1, lr, [r5]
 80037ea:	ea4f 77e2 	mov.w	r7, r2, asr #31
 80037ee:	d00b      	beq.n	8003808 <sys_clock_announce+0x48>
	while (first() != NULL && first()->dticks <= announce_remaining) {
 80037f0:	b150      	cbz	r0, 8003808 <sys_clock_announce+0x48>
 80037f2:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	eb77 090c 	sbcs.w	r9, r7, ip
 80037fc:	da16      	bge.n	800382c <sys_clock_announce+0x6c>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	eb6c 0c07 	sbc.w	ip, ip, r7
 8003804:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
 8003808:	1852      	adds	r2, r2, r1
 800380a:	eb4e 0707 	adc.w	r7, lr, r7
 800380e:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
 8003812:	2500      	movs	r5, #0
 8003814:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 8003816:	f7ff ff1b 	bl	8003650 <next_timeout>
 800381a:	4629      	mov	r1, r5
 800381c:	f7fe f956 	bl	8001acc <sys_clock_set_timeout>
	__asm__ volatile(
 8003820:	f384 8811 	msr	BASEPRI, r4
 8003824:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8003828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
 800382c:	1859      	adds	r1, r3, r1
 800382e:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
 8003836:	2200      	movs	r2, #0
 8003838:	2300      	movs	r3, #0
 800383a:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
 800383e:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
 8003842:	f7ff ff25 	bl	8003690 <remove_timeout>
 8003846:	f384 8811 	msr	BASEPRI, r4
 800384a:	f3bf 8f6f 	isb	sy
		t->fn(t);
 800384e:	6883      	ldr	r3, [r0, #8]
 8003850:	4798      	blx	r3
	__asm__ volatile(
 8003852:	f04f 0310 	mov.w	r3, #16
 8003856:	f3ef 8411 	mrs	r4, BASEPRI
 800385a:	f383 8811 	msr	BASEPRI, r3
 800385e:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 8003862:	e7bc      	b.n	80037de <sys_clock_announce+0x1e>
 8003864:	20000488 	.word	0x20000488
 8003868:	2000002c 	.word	0x2000002c
 800386c:	200002d8 	.word	0x200002d8

08003870 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 8003870:	b510      	push	{r4, lr}
 8003872:	f04f 0310 	mov.w	r3, #16
 8003876:	f3ef 8411 	mrs	r4, BASEPRI
 800387a:	f383 8811 	msr	BASEPRI, r3
 800387e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
 8003882:	f7fe f987 	bl	8001b94 <sys_clock_elapsed>
 8003886:	4a05      	ldr	r2, [pc, #20]	; (800389c <sys_clock_tick_get+0x2c>)
 8003888:	e9d2 3100 	ldrd	r3, r1, [r2]
 800388c:	18c0      	adds	r0, r0, r3
 800388e:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 8003892:	f384 8811 	msr	BASEPRI, r4
 8003896:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 800389a:	bd10      	pop	{r4, pc}
 800389c:	200002d8 	.word	0x200002d8

080038a0 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 80038a0:	b538      	push	{r3, r4, r5, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 80038a2:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
 80038a6:	3301      	adds	r3, #1
 80038a8:	f142 0200 	adc.w	r2, r2, #0
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	f172 0300 	sbcs.w	r3, r2, #0
{
 80038b2:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 80038b4:	d304      	bcc.n	80038c0 <z_timer_expiration_handler+0x20>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 80038b6:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 80038ba:	490d      	ldr	r1, [pc, #52]	; (80038f0 <z_timer_expiration_handler+0x50>)
 80038bc:	f7ff ff02 	bl	80036c4 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 80038c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80038c2:	3301      	adds	r3, #1
 80038c4:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 80038c6:	6a23      	ldr	r3, [r4, #32]
 80038c8:	b10b      	cbz	r3, 80038ce <z_timer_expiration_handler+0x2e>
		timer->expiry_fn(timer);
 80038ca:	4620      	mov	r0, r4
 80038cc:	4798      	blx	r3
	return list->head == list;
 80038ce:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80038d2:	42a5      	cmp	r5, r4
 80038d4:	d00a      	beq.n	80038ec <z_timer_expiration_handler+0x4c>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 80038d6:	b14d      	cbz	r5, 80038ec <z_timer_expiration_handler+0x4c>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
 80038d8:	4628      	mov	r0, r5
 80038da:	f000 ff6c 	bl	80047b6 <z_unpend_thread_no_timeout>
 80038de:	2300      	movs	r3, #0
 80038e0:	67ab      	str	r3, [r5, #120]	; 0x78

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
 80038e2:	4628      	mov	r0, r5
}
 80038e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
 80038e8:	f000 bfbb 	b.w	8004862 <z_ready_thread>
}
 80038ec:	bd38      	pop	{r3, r4, r5, pc}
 80038ee:	bf00      	nop
 80038f0:	080038a1 	.word	0x080038a1

080038f4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 80038f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038f8:	4611      	mov	r1, r2
 80038fa:	4605      	mov	r5, r0
 80038fc:	4618      	mov	r0, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 80038fe:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003902:	bf08      	it	eq
 8003904:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
 8003908:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800390c:	4688      	mov	r8, r1
 800390e:	4607      	mov	r7, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 8003910:	d03c      	beq.n	800398c <z_impl_k_timer_start+0x98>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 8003912:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003916:	bf08      	it	eq
 8003918:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800391c:	4614      	mov	r4, r2
 800391e:	461e      	mov	r6, r3
 8003920:	d013      	beq.n	800394a <z_impl_k_timer_start+0x56>
 8003922:	431a      	orrs	r2, r3
 8003924:	d011      	beq.n	800394a <z_impl_k_timer_start+0x56>
	    Z_TICK_ABS(period.ticks) < 0) {
 8003926:	f06f 0201 	mvn.w	r2, #1
 800392a:	1b12      	subs	r2, r2, r4
 800392c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003930:	eb62 0203 	sbc.w	r2, r2, r3
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 8003934:	2a00      	cmp	r2, #0
 8003936:	da08      	bge.n	800394a <z_impl_k_timer_start+0x56>
		period.ticks = MAX(period.ticks - 1, 1);
 8003938:	3c01      	subs	r4, #1
 800393a:	f163 0600 	sbc.w	r6, r3, #0
 800393e:	2c01      	cmp	r4, #1
 8003940:	f176 0300 	sbcs.w	r3, r6, #0
 8003944:	bfbc      	itt	lt
 8003946:	2401      	movlt	r4, #1
 8003948:	2600      	movlt	r6, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 800394a:	f06f 0301 	mvn.w	r3, #1
 800394e:	1a5b      	subs	r3, r3, r1
 8003950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003954:	eb63 0300 	sbc.w	r3, r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	da08      	bge.n	800396e <z_impl_k_timer_start+0x7a>
		duration.ticks = MAX(duration.ticks - 1, 0);
 800395c:	1e4a      	subs	r2, r1, #1
 800395e:	f160 0700 	sbc.w	r7, r0, #0
 8003962:	2f00      	cmp	r7, #0
 8003964:	4690      	mov	r8, r2
 8003966:	bfbc      	itt	lt
 8003968:	f04f 0800 	movlt.w	r8, #0
 800396c:	4647      	movlt	r7, r8
	}

	(void)z_abort_timeout(&timer->timeout);
 800396e:	4628      	mov	r0, r5
 8003970:	f000 ffd6 	bl	8004920 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
 8003978:	e9c5 460a 	strd	r4, r6, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800397c:	4642      	mov	r2, r8
 800397e:	463b      	mov	r3, r7
 8003980:	4628      	mov	r0, r5
 8003982:	4903      	ldr	r1, [pc, #12]	; (8003990 <z_impl_k_timer_start+0x9c>)
		     duration);
}
 8003984:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8003988:	f7ff be9c 	b.w	80036c4 <z_add_timeout>
}
 800398c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003990:	080038a1 	.word	0x080038a1

08003994 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 8003994:	4a02      	ldr	r2, [pc, #8]	; (80039a0 <boot_banner+0xc>)
 8003996:	4903      	ldr	r1, [pc, #12]	; (80039a4 <boot_banner+0x10>)
 8003998:	4803      	ldr	r0, [pc, #12]	; (80039a8 <boot_banner+0x14>)
 800399a:	f000 b81c 	b.w	80039d6 <printk>
 800399e:	bf00      	nop
 80039a0:	080050ef 	.word	0x080050ef
 80039a4:	0800565f 	.word	0x0800565f
 80039a8:	08005680 	.word	0x08005680

080039ac <arch_printk_char_out>:
}
 80039ac:	2000      	movs	r0, #0
 80039ae:	4770      	bx	lr

080039b0 <str_out>:
{
 80039b0:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 80039b2:	688a      	ldr	r2, [r1, #8]
 80039b4:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
 80039b6:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 80039b8:	b114      	cbz	r4, 80039c0 <str_out+0x10>
 80039ba:	684b      	ldr	r3, [r1, #4]
 80039bc:	4293      	cmp	r3, r2
 80039be:	dc01      	bgt.n	80039c4 <str_out+0x14>
		ctx->count++;
 80039c0:	608d      	str	r5, [r1, #8]
}
 80039c2:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
 80039c4:	3b01      	subs	r3, #1
 80039c6:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
 80039c8:	bf08      	it	eq
 80039ca:	2200      	moveq	r2, #0
 80039cc:	608d      	str	r5, [r1, #8]
 80039ce:	bf0c      	ite	eq
 80039d0:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
 80039d2:	54a0      	strbne	r0, [r4, r2]
 80039d4:	e7f5      	b.n	80039c2 <str_out+0x12>

080039d6 <printk>:
{
 80039d6:	b40f      	push	{r0, r1, r2, r3}
 80039d8:	b507      	push	{r0, r1, r2, lr}
 80039da:	a904      	add	r1, sp, #16
 80039dc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 80039e0:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
 80039e2:	f7fc fd6f 	bl	80004c4 <vprintk>
}
 80039e6:	b003      	add	sp, #12
 80039e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80039ec:	b004      	add	sp, #16
 80039ee:	4770      	bx	lr

080039f0 <snprintk>:
{
 80039f0:	b40c      	push	{r2, r3}
 80039f2:	b507      	push	{r0, r1, r2, lr}
 80039f4:	ab04      	add	r3, sp, #16
 80039f6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 80039fa:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 80039fc:	f7fc fd70 	bl	80004e0 <vsnprintk>
}
 8003a00:	b003      	add	sp, #12
 8003a02:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a06:	b002      	add	sp, #8
 8003a08:	4770      	bx	lr

08003a0a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8003a0a:	4604      	mov	r4, r0
 8003a0c:	b508      	push	{r3, lr}
 8003a0e:	4608      	mov	r0, r1
 8003a10:	4611      	mov	r1, r2
	entry(p1, p2, p3);
 8003a12:	461a      	mov	r2, r3
 8003a14:	47a0      	blx	r4
	return z_impl_k_current_get();
 8003a16:	f7ff fd9f 	bl	8003558 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
 8003a1a:	f7fe fd0f 	bl	800243c <z_impl_k_thread_abort>

08003a1e <outs>:
{
 8003a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a22:	4607      	mov	r7, r0
 8003a24:	4688      	mov	r8, r1
 8003a26:	4615      	mov	r5, r2
 8003a28:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8003a2a:	4614      	mov	r4, r2
 8003a2c:	42b4      	cmp	r4, r6
 8003a2e:	eba4 0005 	sub.w	r0, r4, r5
 8003a32:	d302      	bcc.n	8003a3a <outs+0x1c>
 8003a34:	b93e      	cbnz	r6, 8003a46 <outs+0x28>
 8003a36:	7823      	ldrb	r3, [r4, #0]
 8003a38:	b12b      	cbz	r3, 8003a46 <outs+0x28>
		int rc = out((int)*sp++, ctx);
 8003a3a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003a3e:	4641      	mov	r1, r8
 8003a40:	47b8      	blx	r7
		if (rc < 0) {
 8003a42:	2800      	cmp	r0, #0
 8003a44:	daf2      	bge.n	8003a2c <outs+0xe>
}
 8003a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003a4a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8003a4a:	4770      	bx	lr

08003a4c <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
 8003a4c:	2300      	movs	r3, #0
	list->head = NULL;
 8003a4e:	e9c0 3300 	strd	r3, r3, [r0]
}
 8003a52:	4770      	bx	lr

08003a54 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
 8003a54:	6803      	ldr	r3, [r0, #0]
 8003a56:	b923      	cbnz	r3, 8003a62 <log_list_add_tail+0xe>
		list->head = msg;
 8003a58:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
 8003a5a:	2300      	movs	r3, #0
	list->tail = msg;
 8003a5c:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
 8003a5e:	600b      	str	r3, [r1, #0]
}
 8003a60:	4770      	bx	lr
		list->tail->next = msg;
 8003a62:	6843      	ldr	r3, [r0, #4]
 8003a64:	6019      	str	r1, [r3, #0]
 8003a66:	e7f8      	b.n	8003a5a <log_list_add_tail+0x6>

08003a68 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
 8003a68:	6800      	ldr	r0, [r0, #0]
 8003a6a:	4770      	bx	lr

08003a6c <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
 8003a6c:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
 8003a6e:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
 8003a70:	b108      	cbz	r0, 8003a76 <log_list_head_get+0xa>
		list->head = list->head->next;
 8003a72:	6802      	ldr	r2, [r0, #0]
 8003a74:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
 8003a76:	4770      	bx	lr

08003a78 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
 8003a78:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 8003a7a:	f7fd fc49 	bl	8001310 <log_msg_chunk_alloc>

	if (msg != NULL) {
 8003a7e:	b118      	cbz	r0, 8003a88 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
 8003a80:	2301      	movs	r3, #1
 8003a82:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
 8003a88:	bd08      	pop	{r3, pc}

08003a8a <default_lf_get_timestamp>:
{
 8003a8a:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8003a8c:	f000 ff62 	bl	8004954 <z_impl_k_uptime_ticks>
 8003a90:	220a      	movs	r2, #10
 8003a92:	2300      	movs	r3, #0
 8003a94:	f7fc fb50 	bl	8000138 <__aeabi_uldivmod>
}
 8003a98:	bd08      	pop	{r3, pc}

08003a9a <dummy_timestamp>:
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	4770      	bx	lr

08003a9e <log_0>:
{
 8003a9e:	b538      	push	{r3, r4, r5, lr}
 8003aa0:	4605      	mov	r5, r0
 8003aa2:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
 8003aa4:	f7ff ffe8 	bl	8003a78 <z_log_msg_std_alloc>

	if (msg != NULL) {
 8003aa8:	b128      	cbz	r0, 8003ab6 <log_0+0x18>
		msg->str = str;
 8003aaa:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
 8003aac:	4621      	mov	r1, r4
}
 8003aae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
 8003ab2:	f7fd bb6b 	b.w	800118c <msg_finalize>
}
 8003ab6:	bd38      	pop	{r3, r4, r5, pc}

08003ab8 <log_1>:
{
 8003ab8:	b570      	push	{r4, r5, r6, lr}
 8003aba:	4606      	mov	r6, r0
 8003abc:	460d      	mov	r5, r1
 8003abe:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
 8003ac0:	f7ff ffda 	bl	8003a78 <z_log_msg_std_alloc>

	if (msg != NULL) {
 8003ac4:	b158      	cbz	r0, 8003ade <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
 8003ac6:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
 8003ac8:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
 8003aca:	2101      	movs	r1, #1
 8003acc:	f361 1207 	bfi	r2, r1, #4, #4
 8003ad0:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
 8003ad2:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
 8003ad4:	4621      	mov	r1, r4
}
 8003ad6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
 8003ada:	f7fd bb57 	b.w	800118c <msg_finalize>
}
 8003ade:	bd70      	pop	{r4, r5, r6, pc}

08003ae0 <log_2>:
{
 8003ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ae4:	4680      	mov	r8, r0
 8003ae6:	460f      	mov	r7, r1
 8003ae8:	4616      	mov	r6, r2
 8003aea:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
 8003aec:	f7ff ffc4 	bl	8003a78 <z_log_msg_std_alloc>

	if (msg != NULL) {
 8003af0:	b168      	cbz	r0, 8003b0e <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
 8003af2:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
 8003af4:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
 8003af8:	2202      	movs	r2, #2
 8003afa:	f362 1307 	bfi	r3, r2, #4, #4
 8003afe:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
 8003b00:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
 8003b04:	4629      	mov	r1, r5
}
 8003b06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
 8003b0a:	f7fd bb3f 	b.w	800118c <msg_finalize>
}
 8003b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003b12 <log_3>:
{
 8003b12:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b16:	4680      	mov	r8, r0
 8003b18:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 8003b1c:	460f      	mov	r7, r1
 8003b1e:	4616      	mov	r6, r2
 8003b20:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
 8003b22:	f7ff ffa9 	bl	8003a78 <z_log_msg_std_alloc>

	if (msg != NULL) {
 8003b26:	b170      	cbz	r0, 8003b46 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
 8003b28:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
 8003b2a:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
 8003b2e:	2203      	movs	r2, #3
 8003b30:	f362 1307 	bfi	r3, r2, #4, #4
 8003b34:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
 8003b36:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
 8003b3a:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
 8003b3c:	4649      	mov	r1, r9
}
 8003b3e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
 8003b42:	f7fd bb23 	b.w	800118c <msg_finalize>
}
 8003b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003b4a <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
 8003b4a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b4e:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
 8003b50:	8903      	ldrh	r3, [r0, #8]
{
 8003b52:	f89d 7020 	ldrb.w	r7, [sp, #32]
 8003b56:	460e      	mov	r6, r1
 8003b58:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
 8003b5a:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
 8003b5e:	42a2      	cmp	r2, r4
 8003b60:	d803      	bhi.n	8003b6a <log_msg_hexdump_data_op+0x20>
		*length = 0;
 8003b62:	2300      	movs	r3, #0
 8003b64:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
 8003b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
 8003b6a:	680b      	ldr	r3, [r1, #0]
 8003b6c:	4423      	add	r3, r4
 8003b6e:	4293      	cmp	r3, r2
		*length = available_len - offset;
 8003b70:	bf84      	itt	hi
 8003b72:	1b13      	subhi	r3, r2, r4
 8003b74:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
 8003b76:	2a0c      	cmp	r2, #12
	req_len = *length;
 8003b78:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
 8003b7c:	d92a      	bls.n	8003bd4 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
 8003b7e:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
 8003b80:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
 8003b84:	d82d      	bhi.n	8003be2 <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
 8003b86:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
 8003b88:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 8003b8a:	454a      	cmp	r2, r9
 8003b8c:	bf28      	it	cs
 8003b8e:	464a      	movcs	r2, r9
 8003b90:	4615      	mov	r5, r2
			(void)memcpy(&head_data[offset], data, cpy_len);
 8003b92:	4420      	add	r0, r4
		if (put_op) {
 8003b94:	b317      	cbz	r7, 8003bdc <log_msg_hexdump_data_op+0x92>
 8003b96:	4631      	mov	r1, r6
 8003b98:	f000 ff08 	bl	80049ac <memcpy>
		req_len -= cpy_len;
 8003b9c:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
 8003ba0:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
 8003ba2:	f1b9 0f00 	cmp.w	r9, #0
 8003ba6:	d0de      	beq.n	8003b66 <log_msg_hexdump_data_op+0x1c>
 8003ba8:	f1b8 0f00 	cmp.w	r8, #0
 8003bac:	d0db      	beq.n	8003b66 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
 8003bae:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 8003bb2:	454d      	cmp	r5, r9
 8003bb4:	bf28      	it	cs
 8003bb6:	464d      	movcs	r5, r9
			(void)memcpy(&cont->payload.bytes[offset],
 8003bb8:	1d20      	adds	r0, r4, #4
 8003bba:	4440      	add	r0, r8
 8003bbc:	462a      	mov	r2, r5
		if (put_op) {
 8003bbe:	b1bf      	cbz	r7, 8003bf0 <log_msg_hexdump_data_op+0xa6>
 8003bc0:	4631      	mov	r1, r6
 8003bc2:	f000 fef3 	bl	80049ac <memcpy>
		req_len -= cpy_len;
 8003bc6:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
 8003bca:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
 8003bce:	442e      	add	r6, r5
		offset = 0;
 8003bd0:	2400      	movs	r4, #0
 8003bd2:	e7e6      	b.n	8003ba2 <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
 8003bd4:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
 8003bd6:	f04f 0800 	mov.w	r8, #0
 8003bda:	e7d6      	b.n	8003b8a <log_msg_hexdump_data_op+0x40>
 8003bdc:	4601      	mov	r1, r0
 8003bde:	4630      	mov	r0, r6
 8003be0:	e7da      	b.n	8003b98 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
 8003be2:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
 8003be4:	2c1b      	cmp	r4, #27
 8003be6:	d9dc      	bls.n	8003ba2 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
 8003be8:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
 8003bec:	3c1c      	subs	r4, #28
 8003bee:	e7f9      	b.n	8003be4 <log_msg_hexdump_data_op+0x9a>
 8003bf0:	4601      	mov	r1, r0
 8003bf2:	4630      	mov	r0, r6
 8003bf4:	e7e5      	b.n	8003bc2 <log_msg_hexdump_data_op+0x78>

08003bf6 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8003bf6:	3004      	adds	r0, #4
 8003bf8:	f3bf 8f5b 	dmb	ish
 8003bfc:	e850 3f00 	ldrex	r3, [r0]
 8003c00:	3301      	adds	r3, #1
 8003c02:	e840 3200 	strex	r2, r3, [r0]
 8003c06:	2a00      	cmp	r2, #0
 8003c08:	d1f8      	bne.n	8003bfc <log_msg_get+0x6>
 8003c0a:	f3bf 8f5b 	dmb	ish
}
 8003c0e:	4770      	bx	lr

08003c10 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
 8003c10:	7a40      	ldrb	r0, [r0, #9]
}
 8003c12:	0900      	lsrs	r0, r0, #4
 8003c14:	4770      	bx	lr

08003c16 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
 8003c16:	7a43      	ldrb	r3, [r0, #9]
 8003c18:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
 8003c1c:	ea4f 1213 	mov.w	r2, r3, lsr #4
 8003c20:	d216      	bcs.n	8003c50 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
 8003c22:	2a03      	cmp	r2, #3
 8003c24:	d803      	bhi.n	8003c2e <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
 8003c26:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8003c2a:	6940      	ldr	r0, [r0, #20]
 8003c2c:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
 8003c2e:	2901      	cmp	r1, #1
 8003c30:	d803      	bhi.n	8003c3a <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
 8003c32:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8003c36:	6980      	ldr	r0, [r0, #24]
 8003c38:	4770      	bx	lr
	cont = msg->payload.ext.next;
 8003c3a:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
 8003c3c:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
 8003c3e:	2906      	cmp	r1, #6
 8003c40:	d803      	bhi.n	8003c4a <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
 8003c42:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8003c46:	6848      	ldr	r0, [r1, #4]
 8003c48:	4770      	bx	lr
		cont = cont->next;
 8003c4a:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
 8003c4c:	3907      	subs	r1, #7
		cont = cont->next;
 8003c4e:	e7f6      	b.n	8003c3e <log_msg_arg_get+0x28>
		return 0;
 8003c50:	2000      	movs	r0, #0
}
 8003c52:	4770      	bx	lr

08003c54 <log_msg_put>:
{
 8003c54:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8003c56:	1d02      	adds	r2, r0, #4
 8003c58:	f3bf 8f5b 	dmb	ish
 8003c5c:	e852 1f00 	ldrex	r1, [r2]
 8003c60:	3901      	subs	r1, #1
 8003c62:	e842 1c00 	strex	ip, r1, [r2]
 8003c66:	f1bc 0f00 	cmp.w	ip, #0
 8003c6a:	d1f7      	bne.n	8003c5c <log_msg_put+0x8>
 8003c6c:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	b90b      	cbnz	r3, 8003c78 <log_msg_put+0x24>
		msg_free(msg);
 8003c74:	f7fd bb60 	b.w	8001338 <msg_free>
}
 8003c78:	4770      	bx	lr

08003c7a <log_msg_str_get>:
}
 8003c7a:	6900      	ldr	r0, [r0, #16]
 8003c7c:	4770      	bx	lr

08003c7e <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
 8003c7e:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
 8003c80:	2400      	movs	r4, #0
 8003c82:	9400      	str	r4, [sp, #0]
 8003c84:	f7ff ff61 	bl	8003b4a <log_msg_hexdump_data_op>
}
 8003c88:	b002      	add	sp, #8
 8003c8a:	bd10      	pop	{r4, pc}

08003c8c <buffer_write>:
{
 8003c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8e:	4606      	mov	r6, r0
 8003c90:	460d      	mov	r5, r1
 8003c92:	4614      	mov	r4, r2
 8003c94:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
 8003c96:	4621      	mov	r1, r4
 8003c98:	4628      	mov	r0, r5
 8003c9a:	463a      	mov	r2, r7
 8003c9c:	47b0      	blx	r6
	} while (len != 0);
 8003c9e:	1a24      	subs	r4, r4, r0
		buf += processed;
 8003ca0:	4405      	add	r5, r0
	} while (len != 0);
 8003ca2:	d1f8      	bne.n	8003c96 <buffer_write+0xa>
}
 8003ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003ca6 <std_print>:
{
 8003ca6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003caa:	b08e      	sub	sp, #56	; 0x38
 8003cac:	af0e      	add	r7, sp, #56	; 0x38
 8003cae:	4680      	mov	r8, r0
 8003cb0:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
 8003cb2:	f7ff ffe2 	bl	8003c7a <log_msg_str_get>
 8003cb6:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
 8003cb8:	4640      	mov	r0, r8
 8003cba:	f7ff ffa9 	bl	8003c10 <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
 8003cbe:	0083      	lsls	r3, r0, #2
 8003cc0:	3307      	adds	r3, #7
 8003cc2:	f023 0307 	bic.w	r3, r3, #7
 8003cc6:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
 8003cca:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
 8003ccc:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
 8003cce:	f04f 0900 	mov.w	r9, #0
 8003cd2:	45d1      	cmp	r9, sl
 8003cd4:	d116      	bne.n	8003d04 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
 8003cd6:	4640      	mov	r0, r8
 8003cd8:	f7ff ff9a 	bl	8003c10 <log_msg_nargs_get>
 8003cdc:	280f      	cmp	r0, #15
 8003cde:	d81e      	bhi.n	8003d1e <std_print+0x78>
 8003ce0:	e8df f010 	tbh	[pc, r0, lsl #1]
 8003ce4:	00200019 	.word	0x00200019
 8003ce8:	002d0026 	.word	0x002d0026
 8003cec:	00410036 	.word	0x00410036
 8003cf0:	005d004e 	.word	0x005d004e
 8003cf4:	0081006e 	.word	0x0081006e
 8003cf8:	00ad0096 	.word	0x00ad0096
 8003cfc:	00e100c6 	.word	0x00e100c6
 8003d00:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
 8003d04:	4649      	mov	r1, r9
 8003d06:	4640      	mov	r0, r8
 8003d08:	f7ff ff85 	bl	8003c16 <log_msg_arg_get>
 8003d0c:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
 8003d10:	f109 0901 	add.w	r9, r9, #1
 8003d14:	e7dd      	b.n	8003cd2 <std_print+0x2c>
		print_formatted(output, str);
 8003d16:	4631      	mov	r1, r6
 8003d18:	4628      	mov	r0, r5
 8003d1a:	f7fd fb4b 	bl	80013b4 <print_formatted>
}
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
 8003d24:	6822      	ldr	r2, [r4, #0]
 8003d26:	4631      	mov	r1, r6
 8003d28:	4628      	mov	r0, r5
 8003d2a:	f7fd fb43 	bl	80013b4 <print_formatted>
		break;
 8003d2e:	e7f6      	b.n	8003d1e <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
 8003d30:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003d34:	4631      	mov	r1, r6
 8003d36:	4628      	mov	r0, r5
 8003d38:	f7fd fb3c 	bl	80013b4 <print_formatted>
		break;
 8003d3c:	e7ef      	b.n	8003d1e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
 8003d3e:	68a3      	ldr	r3, [r4, #8]
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003d46:	4631      	mov	r1, r6
 8003d48:	4628      	mov	r0, r5
 8003d4a:	f7fd fb33 	bl	80013b4 <print_formatted>
		break;
 8003d4e:	e7e6      	b.n	8003d1e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8003d50:	68e3      	ldr	r3, [r4, #12]
 8003d52:	9301      	str	r3, [sp, #4]
 8003d54:	68a3      	ldr	r3, [r4, #8]
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003d5c:	4631      	mov	r1, r6
 8003d5e:	4628      	mov	r0, r5
 8003d60:	f7fd fb28 	bl	80013b4 <print_formatted>
		break;
 8003d64:	e7db      	b.n	8003d1e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8003d66:	6923      	ldr	r3, [r4, #16]
 8003d68:	9302      	str	r3, [sp, #8]
 8003d6a:	68e3      	ldr	r3, [r4, #12]
 8003d6c:	9301      	str	r3, [sp, #4]
 8003d6e:	68a3      	ldr	r3, [r4, #8]
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003d76:	4631      	mov	r1, r6
 8003d78:	4628      	mov	r0, r5
 8003d7a:	f7fd fb1b 	bl	80013b4 <print_formatted>
		break;
 8003d7e:	e7ce      	b.n	8003d1e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8003d80:	6963      	ldr	r3, [r4, #20]
 8003d82:	9303      	str	r3, [sp, #12]
 8003d84:	6923      	ldr	r3, [r4, #16]
 8003d86:	9302      	str	r3, [sp, #8]
 8003d88:	68e3      	ldr	r3, [r4, #12]
 8003d8a:	9301      	str	r3, [sp, #4]
 8003d8c:	68a3      	ldr	r3, [r4, #8]
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003d94:	4631      	mov	r1, r6
 8003d96:	4628      	mov	r0, r5
 8003d98:	f7fd fb0c 	bl	80013b4 <print_formatted>
		break;
 8003d9c:	e7bf      	b.n	8003d1e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8003d9e:	69a3      	ldr	r3, [r4, #24]
 8003da0:	9304      	str	r3, [sp, #16]
 8003da2:	6963      	ldr	r3, [r4, #20]
 8003da4:	9303      	str	r3, [sp, #12]
 8003da6:	6923      	ldr	r3, [r4, #16]
 8003da8:	9302      	str	r3, [sp, #8]
 8003daa:	68e3      	ldr	r3, [r4, #12]
 8003dac:	9301      	str	r3, [sp, #4]
 8003dae:	68a3      	ldr	r3, [r4, #8]
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003db6:	4631      	mov	r1, r6
 8003db8:	4628      	mov	r0, r5
 8003dba:	f7fd fafb 	bl	80013b4 <print_formatted>
		break;
 8003dbe:	e7ae      	b.n	8003d1e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8003dc0:	69e3      	ldr	r3, [r4, #28]
 8003dc2:	9305      	str	r3, [sp, #20]
 8003dc4:	69a3      	ldr	r3, [r4, #24]
 8003dc6:	9304      	str	r3, [sp, #16]
 8003dc8:	6963      	ldr	r3, [r4, #20]
 8003dca:	9303      	str	r3, [sp, #12]
 8003dcc:	6923      	ldr	r3, [r4, #16]
 8003dce:	9302      	str	r3, [sp, #8]
 8003dd0:	68e3      	ldr	r3, [r4, #12]
 8003dd2:	9301      	str	r3, [sp, #4]
 8003dd4:	68a3      	ldr	r3, [r4, #8]
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003ddc:	4631      	mov	r1, r6
 8003dde:	4628      	mov	r0, r5
 8003de0:	f7fd fae8 	bl	80013b4 <print_formatted>
		break;
 8003de4:	e79b      	b.n	8003d1e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8003de6:	6a23      	ldr	r3, [r4, #32]
 8003de8:	9306      	str	r3, [sp, #24]
 8003dea:	69e3      	ldr	r3, [r4, #28]
 8003dec:	9305      	str	r3, [sp, #20]
 8003dee:	69a3      	ldr	r3, [r4, #24]
 8003df0:	9304      	str	r3, [sp, #16]
 8003df2:	6963      	ldr	r3, [r4, #20]
 8003df4:	9303      	str	r3, [sp, #12]
 8003df6:	6923      	ldr	r3, [r4, #16]
 8003df8:	9302      	str	r3, [sp, #8]
 8003dfa:	68e3      	ldr	r3, [r4, #12]
 8003dfc:	9301      	str	r3, [sp, #4]
 8003dfe:	68a3      	ldr	r3, [r4, #8]
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003e06:	4631      	mov	r1, r6
 8003e08:	4628      	mov	r0, r5
 8003e0a:	f7fd fad3 	bl	80013b4 <print_formatted>
		break;
 8003e0e:	e786      	b.n	8003d1e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8003e10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e12:	9307      	str	r3, [sp, #28]
 8003e14:	6a23      	ldr	r3, [r4, #32]
 8003e16:	9306      	str	r3, [sp, #24]
 8003e18:	69e3      	ldr	r3, [r4, #28]
 8003e1a:	9305      	str	r3, [sp, #20]
 8003e1c:	69a3      	ldr	r3, [r4, #24]
 8003e1e:	9304      	str	r3, [sp, #16]
 8003e20:	6963      	ldr	r3, [r4, #20]
 8003e22:	9303      	str	r3, [sp, #12]
 8003e24:	6923      	ldr	r3, [r4, #16]
 8003e26:	9302      	str	r3, [sp, #8]
 8003e28:	68e3      	ldr	r3, [r4, #12]
 8003e2a:	9301      	str	r3, [sp, #4]
 8003e2c:	68a3      	ldr	r3, [r4, #8]
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003e34:	4631      	mov	r1, r6
 8003e36:	4628      	mov	r0, r5
 8003e38:	f7fd fabc 	bl	80013b4 <print_formatted>
		break;
 8003e3c:	e76f      	b.n	8003d1e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8003e3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003e40:	9308      	str	r3, [sp, #32]
 8003e42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e44:	9307      	str	r3, [sp, #28]
 8003e46:	6a23      	ldr	r3, [r4, #32]
 8003e48:	9306      	str	r3, [sp, #24]
 8003e4a:	69e3      	ldr	r3, [r4, #28]
 8003e4c:	9305      	str	r3, [sp, #20]
 8003e4e:	69a3      	ldr	r3, [r4, #24]
 8003e50:	9304      	str	r3, [sp, #16]
 8003e52:	6963      	ldr	r3, [r4, #20]
 8003e54:	9303      	str	r3, [sp, #12]
 8003e56:	6923      	ldr	r3, [r4, #16]
 8003e58:	9302      	str	r3, [sp, #8]
 8003e5a:	68e3      	ldr	r3, [r4, #12]
 8003e5c:	9301      	str	r3, [sp, #4]
 8003e5e:	68a3      	ldr	r3, [r4, #8]
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003e66:	4631      	mov	r1, r6
 8003e68:	4628      	mov	r0, r5
 8003e6a:	f7fd faa3 	bl	80013b4 <print_formatted>
		break;
 8003e6e:	e756      	b.n	8003d1e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8003e70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003e72:	9309      	str	r3, [sp, #36]	; 0x24
 8003e74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003e76:	9308      	str	r3, [sp, #32]
 8003e78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e7a:	9307      	str	r3, [sp, #28]
 8003e7c:	6a23      	ldr	r3, [r4, #32]
 8003e7e:	9306      	str	r3, [sp, #24]
 8003e80:	69e3      	ldr	r3, [r4, #28]
 8003e82:	9305      	str	r3, [sp, #20]
 8003e84:	69a3      	ldr	r3, [r4, #24]
 8003e86:	9304      	str	r3, [sp, #16]
 8003e88:	6963      	ldr	r3, [r4, #20]
 8003e8a:	9303      	str	r3, [sp, #12]
 8003e8c:	6923      	ldr	r3, [r4, #16]
 8003e8e:	9302      	str	r3, [sp, #8]
 8003e90:	68e3      	ldr	r3, [r4, #12]
 8003e92:	9301      	str	r3, [sp, #4]
 8003e94:	68a3      	ldr	r3, [r4, #8]
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003e9c:	4631      	mov	r1, r6
 8003e9e:	4628      	mov	r0, r5
 8003ea0:	f7fd fa88 	bl	80013b4 <print_formatted>
		break;
 8003ea4:	e73b      	b.n	8003d1e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8003ea6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003ea8:	930a      	str	r3, [sp, #40]	; 0x28
 8003eaa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003eac:	9309      	str	r3, [sp, #36]	; 0x24
 8003eae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003eb0:	9308      	str	r3, [sp, #32]
 8003eb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003eb4:	9307      	str	r3, [sp, #28]
 8003eb6:	6a23      	ldr	r3, [r4, #32]
 8003eb8:	9306      	str	r3, [sp, #24]
 8003eba:	69e3      	ldr	r3, [r4, #28]
 8003ebc:	9305      	str	r3, [sp, #20]
 8003ebe:	69a3      	ldr	r3, [r4, #24]
 8003ec0:	9304      	str	r3, [sp, #16]
 8003ec2:	6963      	ldr	r3, [r4, #20]
 8003ec4:	9303      	str	r3, [sp, #12]
 8003ec6:	6923      	ldr	r3, [r4, #16]
 8003ec8:	9302      	str	r3, [sp, #8]
 8003eca:	68e3      	ldr	r3, [r4, #12]
 8003ecc:	9301      	str	r3, [sp, #4]
 8003ece:	68a3      	ldr	r3, [r4, #8]
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003ed6:	4631      	mov	r1, r6
 8003ed8:	4628      	mov	r0, r5
 8003eda:	f7fd fa6b 	bl	80013b4 <print_formatted>
		break;
 8003ede:	e71e      	b.n	8003d1e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8003ee0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ee2:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ee4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003ee6:	930a      	str	r3, [sp, #40]	; 0x28
 8003ee8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003eea:	9309      	str	r3, [sp, #36]	; 0x24
 8003eec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003eee:	9308      	str	r3, [sp, #32]
 8003ef0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ef2:	9307      	str	r3, [sp, #28]
 8003ef4:	6a23      	ldr	r3, [r4, #32]
 8003ef6:	9306      	str	r3, [sp, #24]
 8003ef8:	69e3      	ldr	r3, [r4, #28]
 8003efa:	9305      	str	r3, [sp, #20]
 8003efc:	69a3      	ldr	r3, [r4, #24]
 8003efe:	9304      	str	r3, [sp, #16]
 8003f00:	6963      	ldr	r3, [r4, #20]
 8003f02:	9303      	str	r3, [sp, #12]
 8003f04:	6923      	ldr	r3, [r4, #16]
 8003f06:	9302      	str	r3, [sp, #8]
 8003f08:	68e3      	ldr	r3, [r4, #12]
 8003f0a:	9301      	str	r3, [sp, #4]
 8003f0c:	68a3      	ldr	r3, [r4, #8]
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003f14:	4631      	mov	r1, r6
 8003f16:	4628      	mov	r0, r5
 8003f18:	f7fd fa4c 	bl	80013b4 <print_formatted>
		break;
 8003f1c:	e6ff      	b.n	8003d1e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8003f1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f20:	930c      	str	r3, [sp, #48]	; 0x30
 8003f22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f24:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f26:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003f28:	930a      	str	r3, [sp, #40]	; 0x28
 8003f2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003f30:	9308      	str	r3, [sp, #32]
 8003f32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f34:	9307      	str	r3, [sp, #28]
 8003f36:	6a23      	ldr	r3, [r4, #32]
 8003f38:	9306      	str	r3, [sp, #24]
 8003f3a:	69e3      	ldr	r3, [r4, #28]
 8003f3c:	9305      	str	r3, [sp, #20]
 8003f3e:	69a3      	ldr	r3, [r4, #24]
 8003f40:	9304      	str	r3, [sp, #16]
 8003f42:	6963      	ldr	r3, [r4, #20]
 8003f44:	9303      	str	r3, [sp, #12]
 8003f46:	6923      	ldr	r3, [r4, #16]
 8003f48:	9302      	str	r3, [sp, #8]
 8003f4a:	68e3      	ldr	r3, [r4, #12]
 8003f4c:	9301      	str	r3, [sp, #4]
 8003f4e:	68a3      	ldr	r3, [r4, #8]
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003f56:	4631      	mov	r1, r6
 8003f58:	4628      	mov	r0, r5
 8003f5a:	f7fd fa2b 	bl	80013b4 <print_formatted>
}
 8003f5e:	e6de      	b.n	8003d1e <std_print+0x78>

08003f60 <log_output_flush>:
		     output->control_block->offset,
 8003f60:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
 8003f62:	6881      	ldr	r1, [r0, #8]
{
 8003f64:	b510      	push	{r4, lr}
 8003f66:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
 8003f68:	e9d2 2300 	ldrd	r2, r3, [r2]
 8003f6c:	6800      	ldr	r0, [r0, #0]
 8003f6e:	f7ff fe8d 	bl	8003c8c <buffer_write>
	output->control_block->offset = 0;
 8003f72:	6863      	ldr	r3, [r4, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]
}
 8003f78:	bd10      	pop	{r4, pc}

08003f7a <out_func>:
{
 8003f7a:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
 8003f7c:	684b      	ldr	r3, [r1, #4]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68cb      	ldr	r3, [r1, #12]
 8003f82:	429a      	cmp	r2, r3
{
 8003f84:	4605      	mov	r5, r0
 8003f86:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
 8003f88:	d102      	bne.n	8003f90 <out_func+0x16>
		log_output_flush(out_ctx);
 8003f8a:	4608      	mov	r0, r1
 8003f8c:	f7ff ffe8 	bl	8003f60 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8003f90:	6863      	ldr	r3, [r4, #4]
 8003f92:	f3bf 8f5b 	dmb	ish
 8003f96:	e853 2f00 	ldrex	r2, [r3]
 8003f9a:	1c51      	adds	r1, r2, #1
 8003f9c:	e843 1000 	strex	r0, r1, [r3]
 8003fa0:	2800      	cmp	r0, #0
 8003fa2:	d1f8      	bne.n	8003f96 <out_func+0x1c>
 8003fa4:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
 8003fa8:	68a3      	ldr	r3, [r4, #8]
 8003faa:	549d      	strb	r5, [r3, r2]
}
 8003fac:	2000      	movs	r0, #0
 8003fae:	bd38      	pop	{r3, r4, r5, pc}

08003fb0 <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32L5X) || \
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	(defined(CONFIG_SOC_SERIES_STM32WLX) && ! defined(CONFIG_CPU_CORTEX_M0PLUS))
	IRQ_CONNECT(EXTI0_IRQn,
 8003fb0:	2200      	movs	r2, #0
{
 8003fb2:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	2006      	movs	r0, #6
 8003fb8:	f7fd fefc 	bl	8001db4 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	4611      	mov	r1, r2
 8003fc0:	2007      	movs	r0, #7
 8003fc2:	f7fd fef7 	bl	8001db4 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	4611      	mov	r1, r2
 8003fca:	2008      	movs	r0, #8
 8003fcc:	f7fd fef2 	bl	8001db4 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	4611      	mov	r1, r2
 8003fd4:	2009      	movs	r0, #9
 8003fd6:	f7fd feed 	bl	8001db4 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 8003fda:	2200      	movs	r2, #0
 8003fdc:	4611      	mov	r1, r2
 8003fde:	200a      	movs	r0, #10
 8003fe0:	f7fd fee8 	bl	8001db4 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI4_IRQ_PRI,
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	4611      	mov	r1, r2
 8003fe8:	2016      	movs	r0, #22
 8003fea:	f7fd fee3 	bl	8001db4 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 8003fee:	2200      	movs	r2, #0
 8003ff0:	4611      	mov	r1, r2
 8003ff2:	2029      	movs	r0, #41	; 0x29
 8003ff4:	f7fd fede 	bl	8001db4 <z_arm_irq_priority_set>
}
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	bd08      	pop	{r3, pc}

08003ffc <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, arg);
 8003ffc:	6902      	ldr	r2, [r0, #16]
 8003ffe:	2110      	movs	r1, #16
 8004000:	200a      	movs	r0, #10
 8004002:	f7fd bc31 	b.w	8001868 <__stm32_exti_isr.isra.0>

08004006 <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, arg);
 8004006:	6902      	ldr	r2, [r0, #16]
 8004008:	210a      	movs	r1, #10
 800400a:	2005      	movs	r0, #5
 800400c:	f7fd bc2c 	b.w	8001868 <__stm32_exti_isr.isra.0>

08004010 <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, arg);
 8004010:	6902      	ldr	r2, [r0, #16]
 8004012:	2105      	movs	r1, #5
 8004014:	2004      	movs	r0, #4
 8004016:	f7fd bc27 	b.w	8001868 <__stm32_exti_isr.isra.0>

0800401a <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, arg);
 800401a:	6902      	ldr	r2, [r0, #16]
 800401c:	2104      	movs	r1, #4
 800401e:	2003      	movs	r0, #3
 8004020:	f7fd bc22 	b.w	8001868 <__stm32_exti_isr.isra.0>

08004024 <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, arg);
 8004024:	6902      	ldr	r2, [r0, #16]
 8004026:	2103      	movs	r1, #3
 8004028:	2002      	movs	r0, #2
 800402a:	f7fd bc1d 	b.w	8001868 <__stm32_exti_isr.isra.0>

0800402e <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, arg);
 800402e:	6902      	ldr	r2, [r0, #16]
 8004030:	2102      	movs	r1, #2
 8004032:	2001      	movs	r0, #1
 8004034:	f7fd bc18 	b.w	8001868 <__stm32_exti_isr.isra.0>

08004038 <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, arg);
 8004038:	6902      	ldr	r2, [r0, #16]
 800403a:	2101      	movs	r1, #1
 800403c:	2000      	movs	r0, #0
 800403e:	f7fd bc13 	b.w	8001868 <__stm32_exti_isr.isra.0>

08004042 <stm32_clock_control_on>:
	switch (pclken->bus) {
 8004042:	680b      	ldr	r3, [r1, #0]
{
 8004044:	b086      	sub	sp, #24
 8004046:	2b06      	cmp	r3, #6
 8004048:	d849      	bhi.n	80040de <stm32_clock_control_on+0x9c>
 800404a:	e8df f003 	tbb	[pc, r3]
 800404e:	1104      	.short	0x1104
 8004050:	48323d27 	.word	0x48323d27
 8004054:	1c          	.byte	0x1c
 8004055:	00          	.byte	0x00
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004056:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 800405a:	684b      	ldr	r3, [r1, #4]
 800405c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800405e:	4319      	orrs	r1, r3
 8004060:	6491      	str	r1, [r2, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004062:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004064:	4013      	ands	r3, r2
 8004066:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8004068:	9b00      	ldr	r3, [sp, #0]
	return 0;
 800406a:	2000      	movs	r0, #0
}
 800406c:	b006      	add	sp, #24
 800406e:	4770      	bx	lr
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004070:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 8004074:	684b      	ldr	r3, [r1, #4]
 8004076:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8004078:	4319      	orrs	r1, r3
 800407a:	64d1      	str	r1, [r2, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800407c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800407e:	4013      	ands	r3, r2
 8004080:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8004082:	9b01      	ldr	r3, [sp, #4]
 8004084:	e7f1      	b.n	800406a <stm32_clock_control_on+0x28>
  */
#endif /* DUAL_CORE */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8004086:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 800408a:	684b      	ldr	r3, [r1, #4]
 800408c:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800408e:	4319      	orrs	r1, r3
 8004090:	6511      	str	r1, [r2, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8004092:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004094:	4013      	ands	r3, r2
 8004096:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8004098:	9b02      	ldr	r3, [sp, #8]
 800409a:	e7e6      	b.n	800406a <stm32_clock_control_on+0x28>
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800409c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_APB1_GRP1_EnableClock(pclken->enr);
 80040a0:	684b      	ldr	r3, [r1, #4]
 80040a2:	6d91      	ldr	r1, [r2, #88]	; 0x58
 80040a4:	4319      	orrs	r1, r3
 80040a6:	6591      	str	r1, [r2, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80040a8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80040aa:	4013      	ands	r3, r2
 80040ac:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 80040ae:	9b03      	ldr	r3, [sp, #12]
 80040b0:	e7db      	b.n	800406a <stm32_clock_control_on+0x28>
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80040b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_APB1_GRP2_EnableClock(pclken->enr);
 80040b6:	684b      	ldr	r3, [r1, #4]
 80040b8:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 80040ba:	4319      	orrs	r1, r3
 80040bc:	65d1      	str	r1, [r2, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80040be:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80040c0:	4013      	ands	r3, r2
 80040c2:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 80040c4:	9b04      	ldr	r3, [sp, #16]
 80040c6:	e7d0      	b.n	800406a <stm32_clock_control_on+0x28>
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80040c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_APB2_GRP1_EnableClock(pclken->enr);
 80040cc:	684b      	ldr	r3, [r1, #4]
 80040ce:	6e11      	ldr	r1, [r2, #96]	; 0x60
 80040d0:	4319      	orrs	r1, r3
 80040d2:	6611      	str	r1, [r2, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80040d4:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80040d6:	4013      	ands	r3, r2
 80040d8:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 80040da:	9b05      	ldr	r3, [sp, #20]
 80040dc:	e7c5      	b.n	800406a <stm32_clock_control_on+0x28>
	switch (pclken->bus) {
 80040de:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80040e2:	e7c3      	b.n	800406c <stm32_clock_control_on+0x2a>

080040e4 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 80040e4:	b510      	push	{r4, lr}
 80040e6:	b088      	sub	sp, #32
	clk_init->CPU1CLKDivider = ahb_prescaler(STM32_CPU1_PRESCALER);
 80040e8:	2300      	movs	r3, #0
	clk_init->CPU2CLKDivider = ahb_prescaler(STM32_CPU2_PRESCALER);
 80040ea:	e9cd 3303 	strd	r3, r3, [sp, #12]
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 80040ee:	e9cd 3305 	strd	r3, r3, [sp, #20]
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 80040f2:	9307      	str	r3, [sp, #28]
#else
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
#endif /* CONFIG_SOC_SERIES_STM32WBX */

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 80040f4:	f000 f881 	bl	80041fa <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 80040f8:	4668      	mov	r0, sp
 80040fa:	f000 f876 	bl	80041ea <config_pll_init>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80040fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	0551      	lsls	r1, r2, #21
 8004106:	d406      	bmi.n	8004116 <stm32_clock_control_init+0x32>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800410e:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	0552      	lsls	r2, r2, #21
 8004114:	d5fc      	bpl.n	8004110 <stm32_clock_control_init+0x2c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004116:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800411a:	68a3      	ldr	r3, [r4, #8]
 800411c:	f023 0303 	bic.w	r3, r3, #3
 8004120:	f043 0301 	orr.w	r3, r3, #1
 8004124:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004126:	68a3      	ldr	r3, [r4, #8]
 8004128:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800412c:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800412e:	68a3      	ldr	r3, [r4, #8]
 8004130:	f003 030c 	and.w	r3, r3, #12
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8004134:	2b04      	cmp	r3, #4
 8004136:	d1fa      	bne.n	800412e <stm32_clock_control_init+0x4a>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004138:	6823      	ldr	r3, [r4, #0]
 800413a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800413e:	6023      	str	r3, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004140:	6823      	ldr	r3, [r4, #0]
 8004142:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004146:	6023      	str	r3, [r4, #0]

	/* Switch to PLL with HSE as clock source */
#ifdef CONFIG_SOC_SERIES_STM32WLX
	LL_RCC_HSE_EnableTcxo();
#endif
	LL_PLL_ConfigSystemClock_HSE(
 8004148:	a903      	add	r1, sp, #12
 800414a:	4668      	mov	r0, sp
 800414c:	f7fe fd3c 	bl	8002bc8 <LL_PLL_ConfigSystemClock_HSE>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004150:	6823      	ldr	r3, [r4, #0]
 8004152:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004156:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004158:	6823      	ldr	r3, [r4, #0]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 800415a:	2000      	movs	r0, #0
 800415c:	f023 0301 	bic.w	r3, r3, #1
 8004160:	6023      	str	r3, [r4, #0]
 8004162:	b008      	add	sp, #32
 8004164:	bd10      	pop	{r4, pc}

08004166 <stm32_clock_control_off>:
	switch (pclken->bus) {
 8004166:	680b      	ldr	r3, [r1, #0]
{
 8004168:	b082      	sub	sp, #8
 800416a:	2b06      	cmp	r3, #6
 800416c:	d83a      	bhi.n	80041e4 <stm32_clock_control_off+0x7e>
 800416e:	e8df f003 	tbb	[pc, r3]
 8004172:	0e04      	.short	0x0e04
 8004174:	39293121 	.word	0x39293121
 8004178:	16          	.byte	0x16
 8004179:	00          	.byte	0x00
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 800417a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800417e:	6849      	ldr	r1, [r1, #4]
 8004180:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8004182:	ea23 0301 	bic.w	r3, r3, r1
 8004186:	6493      	str	r3, [r2, #72]	; 0x48
	return 0;
 8004188:	2000      	movs	r0, #0
}
 800418a:	b002      	add	sp, #8
 800418c:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 800418e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004192:	6849      	ldr	r1, [r1, #4]
 8004194:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004196:	ea23 0301 	bic.w	r3, r3, r1
 800419a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800419c:	e7f4      	b.n	8004188 <stm32_clock_control_off+0x22>
  SET_BIT(RCC->AHB3ENR, Periphs);
 800419e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 80041a2:	684b      	ldr	r3, [r1, #4]
 80041a4:	6d11      	ldr	r1, [r2, #80]	; 0x50
 80041a6:	4319      	orrs	r1, r3
 80041a8:	6511      	str	r1, [r2, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80041aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041ac:	4013      	ands	r3, r2
 80041ae:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80041b0:	9b01      	ldr	r3, [sp, #4]
 80041b2:	e7e9      	b.n	8004188 <stm32_clock_control_off+0x22>
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80041b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041b8:	6849      	ldr	r1, [r1, #4]
 80041ba:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80041bc:	ea23 0301 	bic.w	r3, r3, r1
 80041c0:	6593      	str	r3, [r2, #88]	; 0x58
 80041c2:	e7e1      	b.n	8004188 <stm32_clock_control_off+0x22>
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 80041c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041c8:	6849      	ldr	r1, [r1, #4]
 80041ca:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80041cc:	ea23 0301 	bic.w	r3, r3, r1
 80041d0:	65d3      	str	r3, [r2, #92]	; 0x5c
 80041d2:	e7d9      	b.n	8004188 <stm32_clock_control_off+0x22>
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80041d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041d8:	6849      	ldr	r1, [r1, #4]
 80041da:	6e13      	ldr	r3, [r2, #96]	; 0x60
 80041dc:	ea23 0301 	bic.w	r3, r3, r1
 80041e0:	6613      	str	r3, [r2, #96]	; 0x60
 80041e2:	e7d1      	b.n	8004188 <stm32_clock_control_off+0x22>
	switch (pclken->bus) {
 80041e4:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80041e8:	e7cf      	b.n	800418a <stm32_clock_control_off+0x24>

080041ea <config_pll_init>:
 * @brief fill in pll configuration structure
 */
void config_pll_init(LL_UTILS_PLLInitTypeDef *pllinit)
{
	pllinit->PLLM = pllm(STM32_PLL_M_DIVISOR);
	pllinit->PLLN = STM32_PLL_N_MULTIPLIER;
 80041ea:	2306      	movs	r3, #6
 80041ec:	2210      	movs	r2, #16
 80041ee:	e9c0 2300 	strd	r2, r3, [r0]
	pllinit->PLLR = pllr(STM32_PLL_R_DIVISOR);
 80041f2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80041f6:	6083      	str	r3, [r0, #8]
	/* set power boost mode for sys clock greater than 80MHz */
	if (sys_clock_hw_cycles_per_sec() >= MHZ(80)) {
		LL_PWR_EnableRange1BoostMode();
	}
#endif /* PWR_CR5_R1MODE */
}
 80041f8:	4770      	bx	lr

080041fa <config_enable_default_clocks>:
	LL_PWR_DisableBkUpAccess();

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

#endif
}
 80041fa:	4770      	bx	lr

080041fc <stm32_ipcc_mailbox_rx_isr>:
static void stm32_ipcc_mailbox_rx_isr(const struct device *dev) {
 80041fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const struct stm32_ipcc_mailbox_config *cfg = DEV_CFG(dev);
 8004200:	f8d0 9004 	ldr.w	r9, [r0, #4]
  struct stm32_ipcc_mbx_data *data = DEV_DATA(dev);
 8004204:	f8d0 8010 	ldr.w	r8, [r0, #16]
  mask = (~IPCC_ReadReg(cfg->ipcc, MR)) & IPCC_ALL_MR_RXO_CH_MASK;
 8004208:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800420c:	685a      	ldr	r2, [r3, #4]
  mask &= IPCC_ReadOtherInstReg_SR(cfg->ipcc) & IPCC_ALL_SR_CH_MASK;
 800420e:	69dd      	ldr	r5, [r3, #28]
  unsigned int value = 0;
 8004210:	2400      	movs	r4, #0
  mask &= IPCC_ReadOtherInstReg_SR(cfg->ipcc) & IPCC_ALL_SR_CH_MASK;
 8004212:	ea25 0502 	bic.w	r5, r5, r2
static void stm32_ipcc_mailbox_rx_isr(const struct device *dev) {
 8004216:	4606      	mov	r6, r0
  unsigned int value = 0;
 8004218:	9401      	str	r4, [sp, #4]
  mask &= IPCC_ReadOtherInstReg_SR(cfg->ipcc) & IPCC_ALL_SR_CH_MASK;
 800421a:	b2ad      	uxth	r5, r5
    if (!((1 << i) & mask)) {
 800421c:	f04f 0a01 	mov.w	sl, #1
  for (i = 0; i < data->num_ch; i++) {
 8004220:	f8d8 3000 	ldr.w	r3, [r8]
 8004224:	429c      	cmp	r4, r3
 8004226:	d302      	bcc.n	800422e <stm32_ipcc_mailbox_rx_isr+0x32>
}
 8004228:	b003      	add	sp, #12
 800422a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!((1 << i) & mask)) {
 800422e:	fa0a f704 	lsl.w	r7, sl, r4
 8004232:	422f      	tst	r7, r5
 8004234:	d016      	beq.n	8004264 <stm32_ipcc_mailbox_rx_isr+0x68>
    IPCC_DisableReceiveChannel(cfg->ipcc, i);
 8004236:	f8d9 2004 	ldr.w	r2, [r9, #4]
    if (data->callback) {
 800423a:	f8d8 b004 	ldr.w	fp, [r8, #4]
  SET_BIT(IPCCx->C2MR, Channel);
 800423e:	6953      	ldr	r3, [r2, #20]
 8004240:	433b      	orrs	r3, r7
 8004242:	6153      	str	r3, [r2, #20]
 8004244:	f1bb 0f00 	cmp.w	fp, #0
 8004248:	d005      	beq.n	8004256 <stm32_ipcc_mailbox_rx_isr+0x5a>
      data->callback(dev, data->user_data, i, &value);
 800424a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800424e:	ab01      	add	r3, sp, #4
 8004250:	4622      	mov	r2, r4
 8004252:	4630      	mov	r0, r6
 8004254:	47d8      	blx	fp
    IPCC_ClearFlag_CHx(cfg->ipcc, i);
 8004256:	f8d9 3004 	ldr.w	r3, [r9, #4]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800425a:	609f      	str	r7, [r3, #8]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	ea22 0707 	bic.w	r7, r2, r7
 8004262:	605f      	str	r7, [r3, #4]
  for (i = 0; i < data->num_ch; i++) {
 8004264:	3401      	adds	r4, #1
 8004266:	e7db      	b.n	8004220 <stm32_ipcc_mailbox_rx_isr+0x24>

08004268 <stm32_ipcc_mailbox_tx_isr>:
  mask = (~IPCC_ReadReg(cfg->ipcc, MR)) & IPCC_ALL_MR_TXF_CH_MASK;
 8004268:	6843      	ldr	r3, [r0, #4]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	6853      	ldr	r3, [r2, #4]
  mask &= IPCC_ReadReg_SR(cfg->ipcc) & IPCC_ALL_SR_CH_MASK;
 800426e:	68d1      	ldr	r1, [r2, #12]
  mask = (~IPCC_ReadReg(cfg->ipcc, MR)) & IPCC_ALL_MR_TXF_CH_MASK;
 8004270:	43db      	mvns	r3, r3
 8004272:	ea01 4113 	and.w	r1, r1, r3, lsr #16
  for (i = 0; i < data->num_ch; i++) {
 8004276:	6903      	ldr	r3, [r0, #16]
static void stm32_ipcc_mailbox_tx_isr(const struct device *dev) {
 8004278:	b570      	push	{r4, r5, r6, lr}
  for (i = 0; i < data->num_ch; i++) {
 800427a:	681d      	ldr	r5, [r3, #0]
    if (!((1 << i) & mask)) {
 800427c:	2601      	movs	r6, #1
  for (i = 0; i < data->num_ch; i++) {
 800427e:	2300      	movs	r3, #0
 8004280:	42ab      	cmp	r3, r5
 8004282:	d100      	bne.n	8004286 <stm32_ipcc_mailbox_tx_isr+0x1e>
}
 8004284:	bd70      	pop	{r4, r5, r6, pc}
    if (!((1 << i) & mask)) {
 8004286:	fa06 f403 	lsl.w	r4, r6, r3
 800428a:	420c      	tst	r4, r1
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800428c:	bf1e      	ittt	ne
 800428e:	6850      	ldrne	r0, [r2, #4]
 8004290:	ea40 4004 	orrne.w	r0, r0, r4, lsl #16
 8004294:	6050      	strne	r0, [r2, #4]
  for (i = 0; i < data->num_ch; i++) {
 8004296:	3301      	adds	r3, #1
 8004298:	e7f2      	b.n	8004280 <stm32_ipcc_mailbox_tx_isr+0x18>

0800429a <stm32_ipcc_mailbox_ipm_max_data_size_get>:
  return DEV_CFG(dev)->buff_size;
 800429a:	6843      	ldr	r3, [r0, #4]
}
 800429c:	6958      	ldr	r0, [r3, #20]
 800429e:	4770      	bx	lr

080042a0 <stm32_ipcc_mailbox_ipm_max_id_val_get>:
  return data->num_ch - 1;
 80042a0:	6903      	ldr	r3, [r0, #16]
 80042a2:	6818      	ldr	r0, [r3, #0]
}
 80042a4:	3801      	subs	r0, #1
 80042a6:	4770      	bx	lr

080042a8 <stm32_ipcc_mailbox_ipm_register_callback>:
  struct stm32_ipcc_mbx_data *data = DEV_DATA(d);
 80042a8:	6903      	ldr	r3, [r0, #16]
  data->user_data = user_data;
 80042aa:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
 80042ae:	4770      	bx	lr

080042b0 <stm32_ipcc_mailbox_ipm_set_enabled>:
    IPCC_EnableIT_TXF(cfg->ipcc);
 80042b0:	6843      	ldr	r3, [r0, #4]
    for (i = 0; i < data->num_ch; i++) {
 80042b2:	6902      	ldr	r2, [r0, #16]
    IPCC_EnableIT_TXF(cfg->ipcc);
 80042b4:	685b      	ldr	r3, [r3, #4]
    for (i = 0; i < data->num_ch; i++) {
 80042b6:	6810      	ldr	r0, [r2, #0]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80042b8:	681a      	ldr	r2, [r3, #0]
                                              int enable) {
 80042ba:	b530      	push	{r4, r5, lr}
  if (enable) {
 80042bc:	b1a1      	cbz	r1, 80042e8 <stm32_ipcc_mailbox_ipm_set_enabled+0x38>
 80042be:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80042c2:	601a      	str	r2, [r3, #0]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	f042 0201 	orr.w	r2, r2, #1
 80042ca:	601a      	str	r2, [r3, #0]
      IPCC_EnableReceiveChannel(cfg->ipcc, i);
 80042cc:	2401      	movs	r4, #1
    for (i = 0; i < data->num_ch; i++) {
 80042ce:	2200      	movs	r2, #0
 80042d0:	4282      	cmp	r2, r0
 80042d2:	d101      	bne.n	80042d8 <stm32_ipcc_mailbox_ipm_set_enabled+0x28>
}
 80042d4:	2000      	movs	r0, #0
 80042d6:	bd30      	pop	{r4, r5, pc}
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80042d8:	6859      	ldr	r1, [r3, #4]
      IPCC_EnableReceiveChannel(cfg->ipcc, i);
 80042da:	fa04 f502 	lsl.w	r5, r4, r2
 80042de:	ea21 0105 	bic.w	r1, r1, r5
 80042e2:	6059      	str	r1, [r3, #4]
    for (i = 0; i < data->num_ch; i++) {
 80042e4:	3201      	adds	r2, #1
 80042e6:	e7f3      	b.n	80042d0 <stm32_ipcc_mailbox_ipm_set_enabled+0x20>
  CLEAR_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80042e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80042ec:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	f022 0201 	bic.w	r2, r2, #1
 80042f4:	601a      	str	r2, [r3, #0]
      IPCC_DisableReceiveChannel(cfg->ipcc, i);
 80042f6:	2401      	movs	r4, #1
    for (i = 0; i < data->num_ch; i++) {
 80042f8:	4281      	cmp	r1, r0
 80042fa:	d0eb      	beq.n	80042d4 <stm32_ipcc_mailbox_ipm_set_enabled+0x24>
  SET_BIT(IPCCx->C2MR, Channel);
 80042fc:	695d      	ldr	r5, [r3, #20]
      IPCC_DisableReceiveChannel(cfg->ipcc, i);
 80042fe:	fa04 f201 	lsl.w	r2, r4, r1
 8004302:	432a      	orrs	r2, r5
 8004304:	615a      	str	r2, [r3, #20]
    for (i = 0; i < data->num_ch; i++) {
 8004306:	3101      	adds	r1, #1
 8004308:	e7f6      	b.n	80042f8 <stm32_ipcc_mailbox_ipm_set_enabled+0x48>

0800430a <stm32_ipcc_mailbox_config_func>:
DEVICE_DT_INST_DEFINE(0, &stm32_ipcc_mailbox_init, NULL, &stm32_IPCC_data,
                      &stm32_ipcc_mailbox_0_config, POST_KERNEL,
                      CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
                      &stm32_ipcc_mailbox_driver_api);

static void stm32_ipcc_mailbox_config_func(const struct device *dev) {
 800430a:	b508      	push	{r3, lr}
#if (CONFIG_IPM_STM32_IPCC2_PROCID == 1)
  IRQ_CONNECT(DT_INST_IRQ_BY_NAME(0, rxo, irq),
 800430c:	2200      	movs	r2, #0
 800430e:	4611      	mov	r1, r2
 8004310:	202d      	movs	r0, #45	; 0x2d
 8004312:	f7fd fd4f 	bl	8001db4 <z_arm_irq_priority_set>
              DT_INST_IRQ_BY_NAME(0, rxo, priority), stm32_ipcc_mailbox_rx_isr,
              DEVICE_DT_INST_GET(0), 0);

  IRQ_CONNECT(DT_INST_IRQ_BY_NAME(0, txf, irq),
 8004316:	2200      	movs	r2, #0
 8004318:	4611      	mov	r1, r2
 800431a:	202e      	movs	r0, #46	; 0x2e
 800431c:	f7fd fd4a 	bl	8001db4 <z_arm_irq_priority_set>
              DT_INST_IRQ_BY_NAME(0, txf, priority), stm32_ipcc_mailbox_tx_isr,
              DEVICE_DT_INST_GET(0), 0);

  irq_enable(DT_INST_IRQ_BY_NAME(0, rxo, irq));
 8004320:	202d      	movs	r0, #45	; 0x2d
 8004322:	f7fd fd37 	bl	8001d94 <arch_irq_enable>
#else
  IRQ_CONNECT(DT_INST_IRQ_BY_NAME(0, rxo_txf, irq),
              DT_INST_IRQ_BY_NAME(0, rxo_txf, priority),
              stm32_ipcc_mailbox_rx_tx_isr, DEVICE_DT_INST_GET(0), 0);
#endif
}
 8004326:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  irq_enable(DT_INST_IRQ_BY_NAME(0, txf, irq));
 800432a:	202e      	movs	r0, #46	; 0x2e
 800432c:	f7fd bd32 	b.w	8001d94 <arch_irq_enable>

08004330 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8004330:	2100      	movs	r1, #0
 8004332:	2001      	movs	r0, #1
 8004334:	f7fd bdb2 	b.w	8001e9c <z_arm_fatal_error>

08004338 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 8004338:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 800433a:	6800      	ldr	r0, [r0, #0]
 800433c:	f7fd bdae 	b.w	8001e9c <z_arm_fatal_error>

08004340 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 8004340:	b508      	push	{r3, lr}
	handler();
 8004342:	f7fd fde3 	bl	8001f0c <z_SysNmiOnReset>
	z_arm_int_exit();
}
 8004346:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 800434a:	f7fe b85d 	b.w	8002408 <z_arm_exc_exit>

0800434e <_stdout_hook_default>:
}
 800434e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004352:	4770      	bx	lr

08004354 <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004354:	6843      	ldr	r3, [r0, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8004358:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 800435a:	600b      	str	r3, [r1, #0]
}
 800435c:	2000      	movs	r0, #0
 800435e:	4770      	bx	lr

08004360 <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004360:	6843      	ldr	r3, [r0, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8004364:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8004366:	4042      	eors	r2, r0
 8004368:	400a      	ands	r2, r1
 800436a:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 800436c:	615a      	str	r2, [r3, #20]
}
 800436e:	2000      	movs	r0, #0
 8004370:	4770      	bx	lr

08004372 <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004372:	6843      	ldr	r3, [r0, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
}
 8004376:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 8004378:	6199      	str	r1, [r3, #24]
}
 800437a:	4770      	bx	lr

0800437c <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800437c:	6843      	ldr	r3, [r0, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
}
 8004380:	2000      	movs	r0, #0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8004382:	6299      	str	r1, [r3, #40]	; 0x28
 8004384:	4770      	bx	lr

08004386 <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004386:	6843      	ldr	r3, [r0, #4]
 8004388:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 800438a:	6953      	ldr	r3, [r2, #20]
 800438c:	404b      	eors	r3, r1
 800438e:	6153      	str	r3, [r2, #20]
}
 8004390:	2000      	movs	r0, #0
 8004392:	4770      	bx	lr

08004394 <gpio_stm32_manage_callback>:

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
	struct gpio_stm32_data *data = dev->data;
 8004394:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 8004396:	6898      	ldr	r0, [r3, #8]
{
 8004398:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 800439a:	b158      	cbz	r0, 80043b4 <gpio_stm32_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800439c:	2400      	movs	r4, #0
 800439e:	4281      	cmp	r1, r0
 80043a0:	d112      	bne.n	80043c8 <gpio_stm32_manage_callback+0x34>
	return node->next;
 80043a2:	6808      	ldr	r0, [r1, #0]
	return list->tail;
 80043a4:	68dd      	ldr	r5, [r3, #12]
Z_GENLIST_REMOVE(slist, snode)
 80043a6:	b954      	cbnz	r4, 80043be <gpio_stm32_manage_callback+0x2a>
 80043a8:	428d      	cmp	r5, r1
	list->head = node;
 80043aa:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 80043ac:	d100      	bne.n	80043b0 <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 80043ae:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 80043b0:	2000      	movs	r0, #0
 80043b2:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
 80043b4:	b96a      	cbnz	r2, 80043d2 <gpio_stm32_manage_callback+0x3e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 80043b6:	2000      	movs	r0, #0

	return gpio_manage_callback(&data->cb, callback, set);
}
 80043b8:	bd30      	pop	{r4, r5, pc}
 80043ba:	4628      	mov	r0, r5
 80043bc:	e7ef      	b.n	800439e <gpio_stm32_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
 80043be:	428d      	cmp	r5, r1
	parent->next = child;
 80043c0:	6020      	str	r0, [r4, #0]
	list->tail = node;
 80043c2:	bf08      	it	eq
 80043c4:	60dc      	streq	r4, [r3, #12]
}
 80043c6:	e7f3      	b.n	80043b0 <gpio_stm32_manage_callback+0x1c>
	return node->next;
 80043c8:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80043ca:	4604      	mov	r4, r0
 80043cc:	2d00      	cmp	r5, #0
 80043ce:	d1f4      	bne.n	80043ba <gpio_stm32_manage_callback+0x26>
			if (!set) {
 80043d0:	b13a      	cbz	r2, 80043e2 <gpio_stm32_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
 80043d2:	68d8      	ldr	r0, [r3, #12]
	parent->next = child;
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	600a      	str	r2, [r1, #0]
	list->head = node;
 80043d8:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 80043da:	2800      	cmp	r0, #0
 80043dc:	d1eb      	bne.n	80043b6 <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 80043de:	60d9      	str	r1, [r3, #12]
}
 80043e0:	e7ea      	b.n	80043b8 <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 80043e2:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 80043e6:	e7e7      	b.n	80043b8 <gpio_stm32_manage_callback+0x24>

080043e8 <gpio_stm32_isr>:
{
 80043e8:	460b      	mov	r3, r1
 80043ea:	6889      	ldr	r1, [r1, #8]
 80043ec:	b570      	push	{r4, r5, r6, lr}
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 80043ee:	b169      	cbz	r1, 800440c <gpio_stm32_isr+0x24>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 80043f0:	2501      	movs	r5, #1
 80043f2:	685e      	ldr	r6, [r3, #4]
	return node->next;
 80043f4:	680c      	ldr	r4, [r1, #0]
 80043f6:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
 80043f8:	688a      	ldr	r2, [r1, #8]
 80043fa:	402a      	ands	r2, r5
 80043fc:	d002      	beq.n	8004404 <gpio_stm32_isr+0x1c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 80043fe:	684b      	ldr	r3, [r1, #4]
 8004400:	4630      	mov	r0, r6
 8004402:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8004404:	b114      	cbz	r4, 800440c <gpio_stm32_isr+0x24>
 8004406:	4621      	mov	r1, r4
 8004408:	6824      	ldr	r4, [r4, #0]
 800440a:	e7f5      	b.n	80043f8 <gpio_stm32_isr+0x10>
}
 800440c:	bd70      	pop	{r4, r5, r6, pc}

0800440e <gpio_stm32_configure>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800440e:	6840      	ldr	r0, [r0, #4]
{
 8004410:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004412:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 8004414:	2001      	movs	r0, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004416:	6867      	ldr	r7, [r4, #4]
 8004418:	4088      	lsls	r0, r1
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 800441a:	f3c2 1680 	ubfx	r6, r2, #6, #1
 800441e:	ea27 0700 	bic.w	r7, r7, r0
 8004422:	408e      	lsls	r6, r1
 8004424:	433e      	orrs	r6, r7
 8004426:	6066      	str	r6, [r4, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004428:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 800442c:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8004430:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8004434:	f04f 0e03 	mov.w	lr, #3
 8004438:	007f      	lsls	r7, r7, #1
 800443a:	fa0e f707 	lsl.w	r7, lr, r7
 800443e:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004442:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8004446:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 800444a:	f3c2 16c1 	ubfx	r6, r2, #7, #2
 800444e:	007f      	lsls	r7, r7, #1
 8004450:	40be      	lsls	r6, r7
 8004452:	ea46 060c 	orr.w	r6, r6, ip
 8004456:	60a6      	str	r6, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004458:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 800445c:	fab6 f686 	clz	r6, r6
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004460:	68e7      	ldr	r7, [r4, #12]
 8004462:	0076      	lsls	r6, r6, #1
 8004464:	fa0e f606 	lsl.w	r6, lr, r6
 8004468:	ea27 0706 	bic.w	r7, r7, r6
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446c:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 8004470:	fab6 f686 	clz	r6, r6
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8004474:	f002 0530 	and.w	r5, r2, #48	; 0x30
 8004478:	0076      	lsls	r6, r6, #1
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 800447a:	f3c2 2241 	ubfx	r2, r2, #9, #2
 800447e:	40b2      	lsls	r2, r6
 8004480:	433a      	orrs	r2, r7
	if (mode == STM32_MODER_ALT_MODE) {
 8004482:	2d20      	cmp	r5, #32
 8004484:	60e2      	str	r2, [r4, #12]
 8004486:	d115      	bne.n	80044b4 <gpio_stm32_configure+0xa6>
		if (pin < 8) {
 8004488:	2907      	cmp	r1, #7
 800448a:	dc2c      	bgt.n	80044e6 <gpio_stm32_configure+0xd8>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448c:	fa90 f2a0 	rbit	r2, r0
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004490:	6a21      	ldr	r1, [r4, #32]
  if (value == 0U)
 8004492:	b332      	cbz	r2, 80044e2 <gpio_stm32_configure+0xd4>
  return __builtin_clz(value);
 8004494:	fab2 f282 	clz	r2, r2
 8004498:	0092      	lsls	r2, r2, #2
 800449a:	260f      	movs	r6, #15
 800449c:	fa06 f202 	lsl.w	r2, r6, r2
 80044a0:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a4:	fa90 f2a0 	rbit	r2, r0
  return __builtin_clz(value);
 80044a8:	fab2 f282 	clz	r2, r2
 80044ac:	0092      	lsls	r2, r2, #2
 80044ae:	4093      	lsls	r3, r2
 80044b0:	430b      	orrs	r3, r1
 80044b2:	6223      	str	r3, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b4:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 80044b8:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80044bc:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044be:	fa90 f0a0 	rbit	r0, r0
 80044c2:	2103      	movs	r1, #3
 80044c4:	005b      	lsls	r3, r3, #1
  return __builtin_clz(value);
 80044c6:	fab0 f080 	clz	r0, r0
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 80044ca:	092d      	lsrs	r5, r5, #4
 80044cc:	fa01 f303 	lsl.w	r3, r1, r3
 80044d0:	0040      	lsls	r0, r0, #1
 80044d2:	ea22 0303 	bic.w	r3, r2, r3
 80044d6:	fa05 f000 	lsl.w	r0, r5, r0
 80044da:	4318      	orrs	r0, r3
 80044dc:	6020      	str	r0, [r4, #0]
}
 80044de:	2000      	movs	r0, #0
 80044e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 80044e2:	462a      	mov	r2, r5
 80044e4:	e7d8      	b.n	8004498 <gpio_stm32_configure+0x8a>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80044e6:	0a02      	lsrs	r2, r0, #8
 80044e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ea:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 80044ee:	b181      	cbz	r1, 8004512 <gpio_stm32_configure+0x104>
  return __builtin_clz(value);
 80044f0:	fab1 f181 	clz	r1, r1
 80044f4:	0089      	lsls	r1, r1, #2
 80044f6:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f8:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 80044fc:	fab2 f282 	clz	r2, r2
 8004500:	fa07 f101 	lsl.w	r1, r7, r1
 8004504:	0092      	lsls	r2, r2, #2
 8004506:	ea26 0101 	bic.w	r1, r6, r1
 800450a:	4093      	lsls	r3, r2
 800450c:	430b      	orrs	r3, r1
 800450e:	6263      	str	r3, [r4, #36]	; 0x24
}
 8004510:	e7d0      	b.n	80044b4 <gpio_stm32_configure+0xa6>
    return 32U;
 8004512:	4629      	mov	r1, r5
 8004514:	e7ee      	b.n	80044f4 <gpio_stm32_configure+0xe6>

08004516 <gpio_stm32_config>:
{
 8004516:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 8004518:	059a      	lsls	r2, r3, #22
{
 800451a:	b510      	push	{r4, lr}
	if ((flags & GPIO_OUTPUT) != 0) {
 800451c:	d519      	bpl.n	8004552 <gpio_stm32_config+0x3c>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 800451e:	079c      	lsls	r4, r3, #30
 8004520:	d510      	bpl.n	8004544 <gpio_stm32_config+0x2e>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 8004522:	075a      	lsls	r2, r3, #29
 8004524:	d52e      	bpl.n	8004584 <gpio_stm32_config+0x6e>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 8004526:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 8004528:	06dc      	lsls	r4, r3, #27
 800452a:	d50d      	bpl.n	8004548 <gpio_stm32_config+0x32>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800452c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8004530:	051c      	lsls	r4, r3, #20
 8004532:	d41c      	bmi.n	800456e <gpio_stm32_config+0x58>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8004534:	055b      	lsls	r3, r3, #21
 8004536:	d515      	bpl.n	8004564 <gpio_stm32_config+0x4e>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004538:	6844      	ldr	r4, [r0, #4]
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 800453a:	2301      	movs	r3, #1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800453c:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 800453e:	408b      	lsls	r3, r1
  WRITE_REG(GPIOx->BRR, PinMask);
 8004540:	62a3      	str	r3, [r4, #40]	; 0x28
	return 0;
 8004542:	e00f      	b.n	8004564 <gpio_stm32_config+0x4e>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8004544:	2210      	movs	r2, #16
 8004546:	e7ef      	b.n	8004528 <gpio_stm32_config+0x12>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8004548:	069c      	lsls	r4, r3, #26
 800454a:	d5f1      	bpl.n	8004530 <gpio_stm32_config+0x1a>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800454c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 8004550:	e7ee      	b.n	8004530 <gpio_stm32_config+0x1a>
	} else if  ((flags & GPIO_INPUT) != 0) {
 8004552:	05dc      	lsls	r4, r3, #23
 8004554:	d511      	bpl.n	800457a <gpio_stm32_config+0x64>
		if ((flags & GPIO_PULL_UP) != 0) {
 8004556:	06da      	lsls	r2, r3, #27
 8004558:	d411      	bmi.n	800457e <gpio_stm32_config+0x68>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800455a:	f013 0220 	ands.w	r2, r3, #32
 800455e:	bf18      	it	ne
 8004560:	f44f 6280 	movne.w	r2, #1024	; 0x400
	gpio_stm32_configure(dev, pin, pincfg, 0);
 8004564:	2300      	movs	r3, #0
 8004566:	f7ff ff52 	bl	800440e <gpio_stm32_configure>
 800456a:	2000      	movs	r0, #0
}
 800456c:	bd10      	pop	{r4, pc}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800456e:	6844      	ldr	r4, [r0, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8004570:	2301      	movs	r3, #1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004572:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8004574:	408b      	lsls	r3, r1
	WRITE_REG(gpio->BSRR, pins);
 8004576:	61a3      	str	r3, [r4, #24]
	return 0;
 8004578:	e7f4      	b.n	8004564 <gpio_stm32_config+0x4e>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 800457a:	2230      	movs	r2, #48	; 0x30
 800457c:	e7f2      	b.n	8004564 <gpio_stm32_config+0x4e>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800457e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004582:	e7ef      	b.n	8004564 <gpio_stm32_config+0x4e>
				return -ENOTSUP;
 8004584:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return err;
 8004588:	e7f0      	b.n	800456c <gpio_stm32_config+0x56>

0800458a <gpio_stm32_init>:
 */
static int gpio_stm32_init(const struct device *dev)
{
	struct gpio_stm32_data *data = dev->data;

	data->dev = dev;
 800458a:	6902      	ldr	r2, [r0, #16]

	return gpio_stm32_clock_request(dev, true);
 800458c:	2101      	movs	r1, #1
	data->dev = dev;
 800458e:	6050      	str	r0, [r2, #4]
	return gpio_stm32_clock_request(dev, true);
 8004590:	f7fe b8c8 	b.w	8002724 <gpio_stm32_clock_request>

08004594 <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004594:	6843      	ldr	r3, [r0, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8004598:	69da      	ldr	r2, [r3, #28]
 800459a:	0612      	lsls	r2, r2, #24
 800459c:	d5fc      	bpl.n	8004598 <uart_stm32_poll_out+0x4>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800459e:	2240      	movs	r2, #64	; 0x40
 80045a0:	621a      	str	r2, [r3, #32]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 80045a2:	6299      	str	r1, [r3, #40]	; 0x28
}
 80045a4:	4770      	bx	lr

080045a6 <uart_stm32_err_check>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80045a6:	6843      	ldr	r3, [r0, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80045aa:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 80045ac:	69da      	ldr	r2, [r3, #28]
	if (LL_USART_IsActiveFlag_PE(UartInstance)) {
 80045ae:	07d2      	lsls	r2, r2, #31
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80045b0:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80045b2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
		err |= UART_ERROR_PARITY;
 80045b6:	bf48      	it	mi
 80045b8:	f040 0002 	orrmi.w	r0, r0, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80045bc:	0791      	lsls	r1, r2, #30
		err |= UART_ERROR_FRAMING;
 80045be:	bf48      	it	mi
 80045c0:	f040 0004 	orrmi.w	r0, r0, #4
	if (err & UART_ERROR_OVERRUN) {
 80045c4:	07c2      	lsls	r2, r0, #31
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80045c6:	bf44      	itt	mi
 80045c8:	2208      	movmi	r2, #8
 80045ca:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 80045cc:	0781      	lsls	r1, r0, #30
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 80045ce:	bf44      	itt	mi
 80045d0:	2201      	movmi	r2, #1
 80045d2:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 80045d4:	0742      	lsls	r2, r0, #29
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 80045d6:	bf44      	itt	mi
 80045d8:	2202      	movmi	r2, #2
 80045da:	621a      	strmi	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 80045dc:	2204      	movs	r2, #4
 80045de:	621a      	str	r2, [r3, #32]
}
 80045e0:	4770      	bx	lr

080045e2 <uart_stm32_poll_in>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80045e2:	6843      	ldr	r3, [r0, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80045e6:	69da      	ldr	r2, [r3, #28]
 80045e8:	0710      	lsls	r0, r2, #28
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80045ea:	bf44      	itt	mi
 80045ec:	2208      	movmi	r2, #8
 80045ee:	621a      	strmi	r2, [r3, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 80045f0:	69da      	ldr	r2, [r3, #28]
 80045f2:	0692      	lsls	r2, r2, #26
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80045f4:	bf43      	ittte	mi
 80045f6:	6a5b      	ldrmi	r3, [r3, #36]	; 0x24
 80045f8:	700b      	strbmi	r3, [r1, #0]
	return 0;
 80045fa:	2000      	movmi	r0, #0
		return -1;
 80045fc:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 8004600:	4770      	bx	lr

08004602 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 8004602:	6903      	ldr	r3, [r0, #16]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004608:	6843      	ldr	r3, [r0, #4]
 800460a:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800460c:	6813      	ldr	r3, [r2, #0]
 800460e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8004612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004616:	d02d      	beq.n	8004674 <uart_stm32_config_get+0x72>
		return UART_CFG_PARITY_NONE;
 8004618:	f5a3 60c0 	sub.w	r0, r3, #1536	; 0x600
 800461c:	4243      	negs	r3, r0
 800461e:	4143      	adcs	r3, r0
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8004620:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8004622:	6853      	ldr	r3, [r2, #4]
 8004624:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8004628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800462c:	d024      	beq.n	8004678 <uart_stm32_config_get+0x76>
 800462e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004632:	d023      	beq.n	800467c <uart_stm32_config_get+0x7a>
 8004634:	2b00      	cmp	r3, #0
 8004636:	bf14      	ite	ne
 8004638:	2303      	movne	r3, #3
 800463a:	2301      	moveq	r3, #1
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 800463c:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800463e:	6810      	ldr	r0, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8004640:	6813      	ldr	r3, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8004642:	f000 2010 	and.w	r0, r0, #268439552	; 0x10001000
	switch (db) {
 8004646:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800464a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800464e:	d017      	beq.n	8004680 <uart_stm32_config_get+0x7e>
 8004650:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8004654:	d119      	bne.n	800468a <uart_stm32_config_get+0x88>
			return UART_CFG_DATA_BITS_6;
 8004656:	2b00      	cmp	r3, #0
 8004658:	bf0c      	ite	eq
 800465a:	2302      	moveq	r3, #2
 800465c:	2301      	movne	r3, #1
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 800465e:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8004660:	6893      	ldr	r3, [r2, #8]
 8004662:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 8004666:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 800466a:	4253      	negs	r3, r2
 800466c:	4153      	adcs	r3, r2
 800466e:	71cb      	strb	r3, [r1, #7]
}
 8004670:	2000      	movs	r0, #0
 8004672:	4770      	bx	lr
	switch (parity) {
 8004674:	2302      	movs	r3, #2
 8004676:	e7d3      	b.n	8004620 <uart_stm32_config_get+0x1e>
		return UART_CFG_STOP_BITS_0_5;
 8004678:	2300      	movs	r3, #0
 800467a:	e7df      	b.n	800463c <uart_stm32_config_get+0x3a>
		return UART_CFG_STOP_BITS_1_5;
 800467c:	2302      	movs	r3, #2
 800467e:	e7dd      	b.n	800463c <uart_stm32_config_get+0x3a>
			return UART_CFG_DATA_BITS_9;
 8004680:	2b00      	cmp	r3, #0
 8004682:	bf14      	ite	ne
 8004684:	2303      	movne	r3, #3
 8004686:	2304      	moveq	r3, #4
 8004688:	e7e9      	b.n	800465e <uart_stm32_config_get+0x5c>
			return UART_CFG_DATA_BITS_8;
 800468a:	2b00      	cmp	r3, #0
 800468c:	bf14      	ite	ne
 800468e:	2302      	movne	r3, #2
 8004690:	2303      	moveq	r3, #3
 8004692:	e7e4      	b.n	800465e <uart_stm32_config_get+0x5c>

08004694 <UTILS_GetPLLOutputFrequency>:
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004694:	680a      	ldr	r2, [r1, #0]
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8004696:	684b      	ldr	r3, [r1, #4]
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004698:	0912      	lsrs	r2, r2, #4
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 800469a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800469e:	3201      	adds	r2, #1
 80046a0:	fbb0 f0f2 	udiv	r0, r0, r2
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 80046a4:	4358      	muls	r0, r3
  pllfreq = pllfreq / ((UTILS_PLLInitStruct->PLLR >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80046a6:	688b      	ldr	r3, [r1, #8]
 80046a8:	0f5b      	lsrs	r3, r3, #29
 80046aa:	3301      	adds	r3, #1
}
 80046ac:	fbb0 f0f3 	udiv	r0, r0, r3
 80046b0:	4770      	bx	lr

080046b2 <UTILS_PLL_IsBusy>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80046b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046b6:	6818      	ldr	r0, [r3, #0]
 80046b8:	f080 7000 	eor.w	r0, r0, #33554432	; 0x2000000
}
 80046bc:	f3c0 6040 	ubfx	r0, r0, #25, #1
 80046c0:	4770      	bx	lr

080046c2 <z_device_state_init>:
}
 80046c2:	4770      	bx	lr

080046c4 <z_device_ready>:
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
	return dev->state->initialized && (dev->state->init_res == 0U);
 80046c4:	68c3      	ldr	r3, [r0, #12]
 80046c6:	8818      	ldrh	r0, [r3, #0]
 80046c8:	f3c0 0008 	ubfx	r0, r0, #0, #9
}
 80046cc:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 80046d0:	4258      	negs	r0, r3
 80046d2:	4158      	adcs	r0, r3
 80046d4:	4770      	bx	lr

080046d6 <arch_system_halt>:
	__asm__ volatile(
 80046d6:	f04f 0210 	mov.w	r2, #16
 80046da:	f3ef 8311 	mrs	r3, BASEPRI
 80046de:	f382 8811 	msr	BASEPRI, r2
 80046e2:	f3bf 8f6f 	isb	sy
	for (;;) {
 80046e6:	e7fe      	b.n	80046e6 <arch_system_halt+0x10>

080046e8 <k_mem_slab_init>:
{
 80046e8:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
 80046ea:	2400      	movs	r4, #0
 80046ec:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 80046ee:	ea41 0402 	orr.w	r4, r1, r2
 80046f2:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
 80046f6:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
 80046fa:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 80046fc:	d10c      	bne.n	8004718 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
 80046fe:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
 8004700:	42a3      	cmp	r3, r4
 8004702:	d103      	bne.n	800470c <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
 8004704:	e9c0 0000 	strd	r0, r0, [r0]
}
 8004708:	2000      	movs	r0, #0
}
 800470a:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
 800470c:	6945      	ldr	r5, [r0, #20]
 800470e:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
 8004710:	3401      	adds	r4, #1
		slab->free_list = p;
 8004712:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
 8004714:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
 8004716:	e7f3      	b.n	8004700 <k_mem_slab_init+0x18>
		return -EINVAL;
 8004718:	f06f 0015 	mvn.w	r0, #21
	return rc;
 800471c:	e7f5      	b.n	800470a <k_mem_slab_init+0x22>

0800471e <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
 800471e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004720:	4604      	mov	r4, r0
 8004722:	460d      	mov	r5, r1
 8004724:	f04f 0310 	mov.w	r3, #16
 8004728:	f3ef 8611 	mrs	r6, BASEPRI
 800472c:	f383 8811 	msr	BASEPRI, r3
 8004730:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
 8004734:	6947      	ldr	r7, [r0, #20]
 8004736:	b977      	cbnz	r7, 8004756 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
 8004738:	f000 f8da 	bl	80048f0 <z_unpend_first_thread>

		if (pending_thread != NULL) {
 800473c:	b158      	cbz	r0, 8004756 <k_mem_slab_free+0x38>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
 800473e:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 8004740:	6142      	str	r2, [r0, #20]
 8004742:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
 8004744:	f000 f88d 	bl	8004862 <z_ready_thread>
			z_reschedule(&slab->lock, key);
 8004748:	4631      	mov	r1, r6
 800474a:	f104 0008 	add.w	r0, r4, #8
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&slab->lock, key);
}
 800474e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
 8004752:	f7fe bd29 	b.w	80031a8 <z_reschedule>
	**(char ***) mem = slab->free_list;
 8004756:	682b      	ldr	r3, [r5, #0]
 8004758:	6962      	ldr	r2, [r4, #20]
 800475a:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
 800475c:	682b      	ldr	r3, [r5, #0]
 800475e:	6163      	str	r3, [r4, #20]
	slab->num_used--;
 8004760:	69a3      	ldr	r3, [r4, #24]
 8004762:	3b01      	subs	r3, #1
 8004764:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
 8004766:	f386 8811 	msr	BASEPRI, r6
 800476a:	f3bf 8f6f 	isb	sy
}
 800476e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004770 <z_impl_k_thread_name_set>:
}
 8004770:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8004774:	4770      	bx	lr

08004776 <k_thread_name_get>:
}
 8004776:	2000      	movs	r0, #0
 8004778:	4770      	bx	lr

0800477a <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 800477a:	b508      	push	{r3, lr}
	__asm__ volatile(
 800477c:	f04f 0210 	mov.w	r2, #16
 8004780:	f3ef 8311 	mrs	r3, BASEPRI
 8004784:	f382 8811 	msr	BASEPRI, r2
 8004788:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 800478c:	f7fd fb78 	bl	8001e80 <arch_cpu_idle>
 8004790:	e7f4      	b.n	800477c <idle+0x2>

08004792 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 8004792:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 8004796:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8004798:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800479a:	2300      	movs	r3, #0
	node->prev = NULL;
 800479c:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
 80047a0:	4770      	bx	lr

080047a2 <unpend_thread_no_timeout>:
{
 80047a2:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 80047a4:	f7ff fff5 	bl	8004792 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 80047a8:	7b43      	ldrb	r3, [r0, #13]
 80047aa:	f023 0302 	bic.w	r3, r3, #2
 80047ae:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 80047b0:	2300      	movs	r3, #0
 80047b2:	6083      	str	r3, [r0, #8]
}
 80047b4:	bd08      	pop	{r3, pc}

080047b6 <z_unpend_thread_no_timeout>:
{
 80047b6:	b508      	push	{r3, lr}
 80047b8:	f04f 0310 	mov.w	r3, #16
 80047bc:	f3ef 8111 	mrs	r1, BASEPRI
 80047c0:	f383 8811 	msr	BASEPRI, r3
 80047c4:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
 80047c8:	f7ff ffeb 	bl	80047a2 <unpend_thread_no_timeout>
	__asm__ volatile(
 80047cc:	f381 8811 	msr	BASEPRI, r1
 80047d0:	f3bf 8f6f 	isb	sy
}
 80047d4:	bd08      	pop	{r3, pc}

080047d6 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 80047d6:	4603      	mov	r3, r0
 80047d8:	b920      	cbnz	r0, 80047e4 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047da:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
 80047de:	b90a      	cbnz	r2, 80047e4 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 80047e0:	f7fd ba84 	b.w	8001cec <arch_swap>
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
}
 80047ec:	4770      	bx	lr

080047ee <z_reschedule_unlocked>:
	__asm__ volatile(
 80047ee:	f04f 0310 	mov.w	r3, #16
 80047f2:	f3ef 8011 	mrs	r0, BASEPRI
 80047f6:	f383 8811 	msr	BASEPRI, r3
 80047fa:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 80047fe:	f7ff bfea 	b.w	80047d6 <z_reschedule_irqlock>

08004802 <z_priq_dumb_best>:
{
 8004802:	4603      	mov	r3, r0
	return list->head == list;
 8004804:	6800      	ldr	r0, [r0, #0]
}
 8004806:	4283      	cmp	r3, r0
 8004808:	bf08      	it	eq
 800480a:	2000      	moveq	r0, #0
 800480c:	4770      	bx	lr

0800480e <add_to_waitq_locked>:
{
 800480e:	b538      	push	{r3, r4, r5, lr}
 8004810:	4604      	mov	r4, r0
 8004812:	460d      	mov	r5, r1
	unready_thread(thread);
 8004814:	f7fe fd08 	bl	8003228 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 8004818:	7b63      	ldrb	r3, [r4, #13]
 800481a:	f043 0302 	orr.w	r3, r3, #2
 800481e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 8004820:	b195      	cbz	r5, 8004848 <add_to_waitq_locked+0x3a>
 8004822:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
 8004824:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004826:	429d      	cmp	r5, r3
 8004828:	d015      	beq.n	8004856 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800482a:	b1a3      	cbz	r3, 8004856 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
 800482c:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 8004830:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 8004834:	4291      	cmp	r1, r2
 8004836:	d008      	beq.n	800484a <add_to_waitq_locked+0x3c>
		return b2 - b1;
 8004838:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
 800483a:	2a00      	cmp	r2, #0
 800483c:	dd05      	ble.n	800484a <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
 800483e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8004840:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8004844:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8004846:	605c      	str	r4, [r3, #4]
}
 8004848:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
 800484a:	686a      	ldr	r2, [r5, #4]
 800484c:	4293      	cmp	r3, r2
 800484e:	d002      	beq.n	8004856 <add_to_waitq_locked+0x48>
 8004850:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1ec      	bne.n	8004830 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
 8004856:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 8004858:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 800485c:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800485e:	606c      	str	r4, [r5, #4]
}
 8004860:	e7f2      	b.n	8004848 <add_to_waitq_locked+0x3a>

08004862 <z_ready_thread>:
{
 8004862:	b510      	push	{r4, lr}
 8004864:	f04f 0310 	mov.w	r3, #16
 8004868:	f3ef 8411 	mrs	r4, BASEPRI
 800486c:	f383 8811 	msr	BASEPRI, r3
 8004870:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 8004874:	f7fe fd74 	bl	8003360 <ready_thread>
	__asm__ volatile(
 8004878:	f384 8811 	msr	BASEPRI, r4
 800487c:	f3bf 8f6f 	isb	sy
}
 8004880:	bd10      	pop	{r4, pc}

08004882 <z_thread_timeout>:
{
 8004882:	b510      	push	{r4, lr}
 8004884:	4601      	mov	r1, r0
	__asm__ volatile(
 8004886:	f04f 0310 	mov.w	r3, #16
 800488a:	f3ef 8411 	mrs	r4, BASEPRI
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
		if (!killed) {
 8004896:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
 800489a:	f013 0f28 	tst.w	r3, #40	; 0x28
 800489e:	d10d      	bne.n	80048bc <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
 80048a0:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 80048a4:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
 80048a6:	b10b      	cbz	r3, 80048ac <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
 80048a8:	f7ff ff7b 	bl	80047a2 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 80048ac:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
 80048b0:	f023 0314 	bic.w	r3, r3, #20
 80048b4:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
 80048b8:	f7fe fd52 	bl	8003360 <ready_thread>
	__asm__ volatile(
 80048bc:	f384 8811 	msr	BASEPRI, r4
 80048c0:	f3bf 8f6f 	isb	sy
}
 80048c4:	bd10      	pop	{r4, pc}

080048c6 <z_unpend1_no_timeout>:
{
 80048c6:	b510      	push	{r4, lr}
	__asm__ volatile(
 80048c8:	f04f 0310 	mov.w	r3, #16
 80048cc:	f3ef 8411 	mrs	r4, BASEPRI
 80048d0:	f383 8811 	msr	BASEPRI, r3
 80048d4:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 80048d8:	f7ff ff93 	bl	8004802 <z_priq_dumb_best>
		if (thread != NULL) {
 80048dc:	4601      	mov	r1, r0
 80048de:	b108      	cbz	r0, 80048e4 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
 80048e0:	f7ff ff5f 	bl	80047a2 <unpend_thread_no_timeout>
	__asm__ volatile(
 80048e4:	f384 8811 	msr	BASEPRI, r4
 80048e8:	f3bf 8f6f 	isb	sy
}
 80048ec:	4608      	mov	r0, r1
 80048ee:	bd10      	pop	{r4, pc}

080048f0 <z_unpend_first_thread>:
{
 80048f0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 80048f2:	f04f 0310 	mov.w	r3, #16
 80048f6:	f3ef 8511 	mrs	r5, BASEPRI
 80048fa:	f383 8811 	msr	BASEPRI, r3
 80048fe:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 8004902:	f7ff ff7e 	bl	8004802 <z_priq_dumb_best>
		if (thread != NULL) {
 8004906:	4604      	mov	r4, r0
 8004908:	b120      	cbz	r0, 8004914 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
 800490a:	f7ff ff4a 	bl	80047a2 <unpend_thread_no_timeout>
 800490e:	3018      	adds	r0, #24
 8004910:	f000 f806 	bl	8004920 <z_abort_timeout>
	__asm__ volatile(
 8004914:	f385 8811 	msr	BASEPRI, r5
 8004918:	f3bf 8f6f 	isb	sy
}
 800491c:	4620      	mov	r0, r4
 800491e:	bd38      	pop	{r3, r4, r5, pc}

08004920 <z_abort_timeout>:
{
 8004920:	b510      	push	{r4, lr}
	__asm__ volatile(
 8004922:	f04f 0210 	mov.w	r2, #16
 8004926:	f3ef 8411 	mrs	r4, BASEPRI
 800492a:	f382 8811 	msr	BASEPRI, r2
 800492e:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 8004932:	6803      	ldr	r3, [r0, #0]
 8004934:	b13b      	cbz	r3, 8004946 <z_abort_timeout+0x26>
			remove_timeout(to);
 8004936:	f7fe feab 	bl	8003690 <remove_timeout>
			ret = 0;
 800493a:	2000      	movs	r0, #0
	__asm__ volatile(
 800493c:	f384 8811 	msr	BASEPRI, r4
 8004940:	f3bf 8f6f 	isb	sy
}
 8004944:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 8004946:	f06f 0015 	mvn.w	r0, #21
 800494a:	e7f7      	b.n	800493c <z_abort_timeout+0x1c>

0800494c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
 800494c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
 800494e:	f7fe ff8f 	bl	8003870 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
 8004952:	bd08      	pop	{r3, pc}

08004954 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
 8004954:	f7fe bf8c 	b.w	8003870 <sys_clock_tick_get>

08004958 <k_timer_init>:
	timer->status = 0U;
 8004958:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
 800495a:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
 800495e:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
 8004962:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
 8004966:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
 800496a:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
 800496c:	6343      	str	r3, [r0, #52]	; 0x34
}
 800496e:	4770      	bx	lr

08004970 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 8004970:	b510      	push	{r4, lr}
 8004972:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
 8004974:	f7ff ffd4 	bl	8004920 <z_abort_timeout>

	if (inactive) {
 8004978:	b9b0      	cbnz	r0, 80049a8 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
 800497a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800497c:	b10b      	cbz	r3, 8004982 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 800497e:	4620      	mov	r0, r4
 8004980:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 8004982:	f104 0018 	add.w	r0, r4, #24
 8004986:	f7ff ff9e 	bl	80048c6 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 800498a:	b168      	cbz	r0, 80049a8 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
 800498c:	f7ff ff69 	bl	8004862 <z_ready_thread>
	__asm__ volatile(
 8004990:	f04f 0310 	mov.w	r3, #16
 8004994:	f3ef 8011 	mrs	r0, BASEPRI
 8004998:	f383 8811 	msr	BASEPRI, r3
 800499c:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
 80049a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
 80049a4:	f7ff bf17 	b.w	80047d6 <z_reschedule_irqlock>
 80049a8:	bd10      	pop	{r4, pc}

080049aa <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 80049aa:	4770      	bx	lr

080049ac <memcpy>:
 80049ac:	440a      	add	r2, r1
 80049ae:	4291      	cmp	r1, r2
 80049b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80049b4:	d100      	bne.n	80049b8 <memcpy+0xc>
 80049b6:	4770      	bx	lr
 80049b8:	b510      	push	{r4, lr}
 80049ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049c2:	4291      	cmp	r1, r2
 80049c4:	d1f9      	bne.n	80049ba <memcpy+0xe>
 80049c6:	bd10      	pop	{r4, pc}

080049c8 <memset>:
 80049c8:	4402      	add	r2, r0
 80049ca:	4603      	mov	r3, r0
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d100      	bne.n	80049d2 <memset+0xa>
 80049d0:	4770      	bx	lr
 80049d2:	f803 1b01 	strb.w	r1, [r3], #1
 80049d6:	e7f9      	b.n	80049cc <memset+0x4>

080049d8 <strncpy>:
 80049d8:	b510      	push	{r4, lr}
 80049da:	3901      	subs	r1, #1
 80049dc:	4603      	mov	r3, r0
 80049de:	b132      	cbz	r2, 80049ee <strncpy+0x16>
 80049e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80049e4:	f803 4b01 	strb.w	r4, [r3], #1
 80049e8:	3a01      	subs	r2, #1
 80049ea:	2c00      	cmp	r4, #0
 80049ec:	d1f7      	bne.n	80049de <strncpy+0x6>
 80049ee:	441a      	add	r2, r3
 80049f0:	2100      	movs	r1, #0
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d100      	bne.n	80049f8 <strncpy+0x20>
 80049f6:	bd10      	pop	{r4, pc}
 80049f8:	f803 1b01 	strb.w	r1, [r3], #1
 80049fc:	e7f9      	b.n	80049f2 <strncpy+0x1a>

080049fe <strnlen>:
 80049fe:	b510      	push	{r4, lr}
 8004a00:	4602      	mov	r2, r0
 8004a02:	4401      	add	r1, r0
 8004a04:	428a      	cmp	r2, r1
 8004a06:	4613      	mov	r3, r2
 8004a08:	d003      	beq.n	8004a12 <strnlen+0x14>
 8004a0a:	781c      	ldrb	r4, [r3, #0]
 8004a0c:	3201      	adds	r2, #1
 8004a0e:	2c00      	cmp	r4, #0
 8004a10:	d1f8      	bne.n	8004a04 <strnlen+0x6>
 8004a12:	1a18      	subs	r0, r3, r0
 8004a14:	bd10      	pop	{r4, pc}

/dts-v1/;
/ {
 #address-cells = <1>;
 #size-cells = <1>;
 chosen { };
 aliases { };
};
/ {
 soc {
  #address-cells = <1>;
  #size-cells = <1>;
  compatible = "simple-bus";
  interrupt-parent = <&nvic>;
  ranges;
  nvic: interrupt-controller@e000e100 {
   compatible = "arm,v6m-nvic";
   reg = <0xe000e100 0xc00>;
   interrupt-controller;
   #interrupt-cells = <2>;
  };
  systick: timer@e000e010 {
   compatible = "arm,armv6m-systick";
   reg = <0xe000e010 0x10>;
  };
 };
};
/ {
 chosen {
  zephyr,flash-controller = &flash;
 };
 cpus {
  #address-cells = <1>;
  #size-cells = <0>;
  cpu@0 {
   device_type = "cpu";
   compatible = "arm,cortex-m0+";
   reg = <0>;
  };
 };
 sram0: memory@20000000 {
  compatible = "mmio-sram";
 };
 clocks {
  clk_hse: clk-hse {
   #clock-cells = <0>;
   compatible = "st,stm32-hse-clock";
   clock-frequency = <((32) * 1000 * 1000)>;
   status = "disabled";
  };
  clk_hsi: clk-hsi {
   #clock-cells = <0>;
   compatible = "fixed-clock";
   clock-frequency = <((16) * 1000 * 1000)>;
   status = "disabled";
  };
  clk_msi: clk-msi {
   #clock-cells = <0>;
   compatible = "st,stm32-msi-clock";
   msi-range = <6>;
   status = "disabled";
  };
  clk_lse: clk-lse {
   #clock-cells = <0>;
   compatible = "fixed-clock";
   clock-frequency = <32768>;
   status = "disabled";
  };
  clk_lsi: clk-lsi {
   #clock-cells = <0>;
   compatible = "fixed-clock";
   clock-frequency = <((32) * 1000)>;
   status = "disabled";
  };
  pll: pll {
   #clock-cells = <0>;
   compatible = "st,stm32wb-pll-clock";
   status = "disabled";
  };
 };
 soc {
  flash: flash-controller@58004000 {
   compatible = "st,stm32-flash-controller", "st,stm32wl-flash-controller";
   label = "FLASH_CTRL";
   reg = <0x58004000 0x400>;
   interrupts = <3 0>;
   #address-cells = <1>;
   #size-cells = <1>;
   flash0: flash@8000000 {
    compatible = "soc-nv-flash";
    label = "FLASH_STM32";
    write-block-size = <8>;
    erase-block-size = <2048>;
   };
  };
  ipcc: ipcc@58000C10 {
                        compatible = "st,stm32-ipcc-mailbox";
                        #address-cells = <1>;
   #size-cells = <0>;
                        reg = <0x58000C10 0x10>;
                        clocks = <&rcc 6 0x00100000>;
                        interrupts = <18 0>;
                        interrupt-names = "rxo_txf";
   status = "disabled";
                        label = "IPCC";
                };
  rcc: rcc@58000000 {
   compatible = "st,stm32wl-rcc";
   #clock-cells = <2>;
   reg = <0x58000000 0x400>;
   label = "STM32_CLK_RCC";
  };
  rtc: rtc@40002800 {
                        compatible = "st,stm32-rtc";
                        reg = <0x40002800 0x400>;
                        interrupts = <2 0>;
                        clocks = <&rcc 2 0x10000000>;
                        prescaler = <32768>;
                        status = "disabled";
                        label = "RTC_0";
                };
  lptim1: timers@40007c00 {
                        compatible = "st,stm32-lptim";
                        clocks = <&rcc 2 0x48000000>;
                        #address-cells = <1>;
                        #size-cells = <0>;
                        reg = <0x40007c00 0x400>;
                        interrupts = <11 0>;
                        interrupt-names = "wakeup";
                        status = "disabled";
                        label = "LPTIM_1";
                };
  exti: interrupt-controller@58000800 {
   compatible = "st,stm32-exti";
   interrupt-controller;
   #interrupt-cells = <1>;
   reg = <0x58000800 0x400>;
  };
  pinctrl: pin-controller@48000000 {
   compatible = "st,stm32-pinctrl";
   #address-cells = <1>;
   #size-cells = <1>;
   reg = <0x48000000 0x2000>;
   gpioa: gpio@48000000 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x48000000 0x400>;
    clocks = <&rcc 1 0x00000001>;
    label = "GPIOA";
   };
   gpiob: gpio@48000400 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x48000400 0x400>;
    clocks = <&rcc 1 0x00000002>;
    label = "GPIOB";
   };
   gpioc: gpio@48000800 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x48000800 0x400>;
    clocks = <&rcc 1 0x00000004>;
    label = "GPIOC";
   };
   gpioh: gpio@48001c00 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x48001c00 0x400>;
    clocks = <&rcc 1 0x00000080>;
    label = "GPIOH";
   };
  };
  lpuart1: serial@40008000 {
   compatible = "st,stm32-lpuart", "st,stm32-uart";
   reg = <0x40008000 0x400>;
   clocks = <&rcc 4 0x00000001>;
   interrupts = <29 0>;
   status = "disabled";
   label = "LPUART_1";
  };
  i2c1: i2c@40005400 {
   compatible = "st,stm32-i2c-v2";
   clock-frequency = <100000>;
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40005400 0x400>;
   clocks = <&rcc 2 0x00200000>;
   interrupts = <22 0>;
   interrupt-names = "event";
   status = "disabled";
   label= "I2C_1";
  };
  i2c2: i2c@40005800 {
   compatible = "st,stm32-i2c-v2";
   clock-frequency = <100000>;
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40005800 0x400>;
   clocks = <&rcc 2 0x00400000>;
   interrupts = <23 0>;
   interrupt-names = "event";
   status = "disabled";
   label= "I2C_2";
  };
  i2c3: i2c@40005c00 {
   compatible = "st,stm32-i2c-v2";
   clock-frequency = <100000>;
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40005c00 0x400>;
   clocks = <&rcc 2 0x00800000>;
   interrupts = <24 0>;
   interrupt-names = "event";
   status = "disabled";
   label= "I2C_3";
  };
  spi1: spi@40013000 {
   compatible = "st,stm32-spi-fifo", "st,stm32-spi";
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40013000 0x400>;
   interrupts = <25 5>;
   clocks = <&rcc 3 0x00001000>;
   status = "disabled";
   label = "SPI_1";
  };
  spi2: spi@40003800 {
   compatible = "st,stm32-spi-fifo", "st,stm32-spi";
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40003800 0x400>;
   interrupts = <26 5>;
   clocks = <&rcc 2 0x00004000>;
   status = "disabled";
   label = "SPI_2";
  };
 };
};
&nvic {
 arm,num-irq-priority-bits = <2>;
};
/ {
 sram0: memory@20000000 {
  reg = <0x20008000 ((32) * 1024)>;
 };
 soc {
  flash-controller@58004000 {
   flash0: flash@8000000 {
    reg = <0x08020000 ((128) * 1024)>;
   };
  };
 };
};
/ {
 soc {
  pinctrl: pin-controller@48000000 {
   adc_in6_pa10: adc_in6_pa10 {
    pinmux = <(((((('A') - 'A') * 0x10 + (10))) << 8) | (0x10))>;
   };
   adc_in7_pa11: adc_in7_pa11 {
    pinmux = <(((((('A') - 'A') * 0x10 + (11))) << 8) | (0x10))>;
   };
   adc_in8_pa12: adc_in8_pa12 {
    pinmux = <(((((('A') - 'A') * 0x10 + (12))) << 8) | (0x10))>;
   };
   adc_in9_pa13: adc_in9_pa13 {
    pinmux = <(((((('A') - 'A') * 0x10 + (13))) << 8) | (0x10))>;
   };
   adc_in10_pa14: adc_in10_pa14 {
    pinmux = <(((((('A') - 'A') * 0x10 + (14))) << 8) | (0x10))>;
   };
   adc_in11_pa15: adc_in11_pa15 {
    pinmux = <(((((('A') - 'A') * 0x10 + (15))) << 8) | (0x10))>;
   };
   adc_in5_pb1: adc_in5_pb1 {
    pinmux = <(((((('B') - 'A') * 0x10 + (1))) << 8) | (0x10))>;
   };
   adc_in4_pb2: adc_in4_pb2 {
    pinmux = <(((((('B') - 'A') * 0x10 + (2))) << 8) | (0x10))>;
   };
   adc_in2_pb3: adc_in2_pb3 {
    pinmux = <(((((('B') - 'A') * 0x10 + (3))) << 8) | (0x10))>;
   };
   adc_in3_pb4: adc_in3_pb4 {
    pinmux = <(((((('B') - 'A') * 0x10 + (4))) << 8) | (0x10))>;
   };
   adc_in0_pb13: adc_in0_pb13 {
    pinmux = <(((((('B') - 'A') * 0x10 + (13))) << 8) | (0x10))>;
   };
   adc_in1_pb14: adc_in1_pb14 {
    pinmux = <(((((('B') - 'A') * 0x10 + (14))) << 8) | (0x10))>;
   };
   dac_out1_pa10: dac_out1_pa10 {
    pinmux = <(((((('A') - 'A') * 0x10 + (10))) << 8) | (0x10))>;
   };
   i2c1_scl_pa9: i2c1_scl_pa9 {
    pinmux = <(((((('A') - 'A') * 0x10 + (9))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c1_scl_pb6: i2c1_scl_pb6 {
    pinmux = <(((((('B') - 'A') * 0x10 + (6))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c1_scl_pb8: i2c1_scl_pb8 {
    pinmux = <(((((('B') - 'A') * 0x10 + (8))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c2_scl_pa12: i2c2_scl_pa12 {
    pinmux = <(((((('A') - 'A') * 0x10 + (12))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c2_scl_pb15: i2c2_scl_pb15 {
    pinmux = <(((((('B') - 'A') * 0x10 + (15))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c3_scl_pa7: i2c3_scl_pa7 {
    pinmux = <(((((('A') - 'A') * 0x10 + (7))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c3_scl_pb10: i2c3_scl_pb10 {
    pinmux = <(((((('B') - 'A') * 0x10 + (10))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c3_scl_pb13: i2c3_scl_pb13 {
    pinmux = <(((((('B') - 'A') * 0x10 + (13))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c3_scl_pc0: i2c3_scl_pc0 {
    pinmux = <(((((('C') - 'A') * 0x10 + (0))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c1_sda_pa10: i2c1_sda_pa10 {
    pinmux = <(((((('A') - 'A') * 0x10 + (10))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c1_sda_pb7: i2c1_sda_pb7 {
    pinmux = <(((((('B') - 'A') * 0x10 + (7))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c1_sda_pb9: i2c1_sda_pb9 {
    pinmux = <(((((('B') - 'A') * 0x10 + (9))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c2_sda_pa11: i2c2_sda_pa11 {
    pinmux = <(((((('A') - 'A') * 0x10 + (11))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c2_sda_pa15: i2c2_sda_pa15 {
    pinmux = <(((((('A') - 'A') * 0x10 + (15))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c3_sda_pb4: i2c3_sda_pb4 {
    pinmux = <(((((('B') - 'A') * 0x10 + (4))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c3_sda_pb11: i2c3_sda_pb11 {
    pinmux = <(((((('B') - 'A') * 0x10 + (11))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c3_sda_pb14: i2c3_sda_pb14 {
    pinmux = <(((((('B') - 'A') * 0x10 + (14))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c3_sda_pc1: i2c3_sda_pc1 {
    pinmux = <(((((('C') - 'A') * 0x10 + (1))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2s2_ck_pa8: i2s2_ck_pa8 {
    pinmux = <(((((('A') - 'A') * 0x10 + (8))) << 8) | (0x5))>;
    slew-rate = "very-high-speed";
   };
   i2s2_ck_pa9: i2s2_ck_pa9 {
    pinmux = <(((((('A') - 'A') * 0x10 + (9))) << 8) | (0x5))>;
    slew-rate = "very-high-speed";
   };
   i2s2_ck_pb10: i2s2_ck_pb10 {
    pinmux = <(((((('B') - 'A') * 0x10 + (10))) << 8) | (0x5))>;
    slew-rate = "very-high-speed";
   };
   i2s2_ck_pb13: i2s2_ck_pb13 {
    pinmux = <(((((('B') - 'A') * 0x10 + (13))) << 8) | (0x5))>;
    slew-rate = "very-high-speed";
   };
   i2s2_sd_pa10: i2s2_sd_pa10 {
    pinmux = <(((((('A') - 'A') * 0x10 + (10))) << 8) | (0x5))>;
   };
   i2s2_sd_pb15: i2s2_sd_pb15 {
    pinmux = <(((((('B') - 'A') * 0x10 + (15))) << 8) | (0x5))>;
   };
   i2s2_sd_pc1: i2s2_sd_pc1 {
    pinmux = <(((((('C') - 'A') * 0x10 + (1))) << 8) | (0x3))>;
   };
   i2s2_sd_pc3: i2s2_sd_pc3 {
    pinmux = <(((((('C') - 'A') * 0x10 + (3))) << 8) | (0x5))>;
   };
   i2s2_ws_pa9: i2s2_ws_pa9 {
    pinmux = <(((((('A') - 'A') * 0x10 + (9))) << 8) | (0x3))>;
   };
   i2s2_ws_pb9: i2s2_ws_pb9 {
    pinmux = <(((((('B') - 'A') * 0x10 + (9))) << 8) | (0x5))>;
   };
   i2s2_ws_pb12: i2s2_ws_pb12 {
    pinmux = <(((((('B') - 'A') * 0x10 + (12))) << 8) | (0x5))>;
   };
   spi1_miso_pa6: spi1_miso_pa6 {
    pinmux = <(((((('A') - 'A') * 0x10 + (6))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi1_miso_pa11: spi1_miso_pa11 {
    pinmux = <(((((('A') - 'A') * 0x10 + (11))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi1_miso_pb4: spi1_miso_pb4 {
    pinmux = <(((((('B') - 'A') * 0x10 + (4))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi2_miso_pa5: spi2_miso_pa5 {
    pinmux = <(((((('A') - 'A') * 0x10 + (5))) << 8) | (0x3))>;
    bias-pull-down;
   };
   spi2_miso_pb14: spi2_miso_pb14 {
    pinmux = <(((((('B') - 'A') * 0x10 + (14))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi2_miso_pc2: spi2_miso_pc2 {
    pinmux = <(((((('C') - 'A') * 0x10 + (2))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi1_mosi_pa7: spi1_mosi_pa7 {
    pinmux = <(((((('A') - 'A') * 0x10 + (7))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi1_mosi_pa12: spi1_mosi_pa12 {
    pinmux = <(((((('A') - 'A') * 0x10 + (12))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi1_mosi_pb5: spi1_mosi_pb5 {
    pinmux = <(((((('B') - 'A') * 0x10 + (5))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi2_mosi_pa10: spi2_mosi_pa10 {
    pinmux = <(((((('A') - 'A') * 0x10 + (10))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi2_mosi_pb15: spi2_mosi_pb15 {
    pinmux = <(((((('B') - 'A') * 0x10 + (15))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi2_mosi_pc1: spi2_mosi_pc1 {
    pinmux = <(((((('C') - 'A') * 0x10 + (1))) << 8) | (0x3))>;
    bias-pull-down;
   };
   spi2_mosi_pc3: spi2_mosi_pc3 {
    pinmux = <(((((('C') - 'A') * 0x10 + (3))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi1_nss_pa4: spi1_nss_pa4 {
    pinmux = <(((((('A') - 'A') * 0x10 + (4))) << 8) | (0x5))>;
    bias-pull-up;
   };
   spi1_nss_pa15: spi1_nss_pa15 {
    pinmux = <(((((('A') - 'A') * 0x10 + (15))) << 8) | (0x5))>;
    bias-pull-up;
   };
   spi1_nss_pb2: spi1_nss_pb2 {
    pinmux = <(((((('B') - 'A') * 0x10 + (2))) << 8) | (0x5))>;
    bias-pull-up;
   };
   spi2_nss_pa9: spi2_nss_pa9 {
    pinmux = <(((((('A') - 'A') * 0x10 + (9))) << 8) | (0x3))>;
    bias-pull-up;
   };
   spi2_nss_pb9: spi2_nss_pb9 {
    pinmux = <(((((('B') - 'A') * 0x10 + (9))) << 8) | (0x5))>;
    bias-pull-up;
   };
   spi2_nss_pb12: spi2_nss_pb12 {
    pinmux = <(((((('B') - 'A') * 0x10 + (12))) << 8) | (0x5))>;
    bias-pull-up;
   };
   spi1_sck_pa1: spi1_sck_pa1 {
    pinmux = <(((((('A') - 'A') * 0x10 + (1))) << 8) | (0x5))>;
    slew-rate = "very-high-speed";
   };
   spi1_sck_pa5: spi1_sck_pa5 {
    pinmux = <(((((('A') - 'A') * 0x10 + (5))) << 8) | (0x5))>;
    slew-rate = "very-high-speed";
   };
   spi1_sck_pb3: spi1_sck_pb3 {
    pinmux = <(((((('B') - 'A') * 0x10 + (3))) << 8) | (0x5))>;
    slew-rate = "very-high-speed";
   };
   spi2_sck_pa8: spi2_sck_pa8 {
    pinmux = <(((((('A') - 'A') * 0x10 + (8))) << 8) | (0x5))>;
    slew-rate = "very-high-speed";
   };
   spi2_sck_pa9: spi2_sck_pa9 {
    pinmux = <(((((('A') - 'A') * 0x10 + (9))) << 8) | (0x5))>;
    slew-rate = "very-high-speed";
   };
   spi2_sck_pb10: spi2_sck_pb10 {
    pinmux = <(((((('B') - 'A') * 0x10 + (10))) << 8) | (0x5))>;
    slew-rate = "very-high-speed";
   };
   spi2_sck_pb13: spi2_sck_pb13 {
    pinmux = <(((((('B') - 'A') * 0x10 + (13))) << 8) | (0x5))>;
    slew-rate = "very-high-speed";
   };
   tim1_ch1n_pa7: tim1_ch1n_pa7 {
    pinmux = <(((((('A') - 'A') * 0x10 + (7))) << 8) | (0x1))>;
   };
   tim1_ch1_pa8: tim1_ch1_pa8 {
    pinmux = <(((((('A') - 'A') * 0x10 + (8))) << 8) | (0x1))>;
   };
   tim1_ch2_pa9: tim1_ch2_pa9 {
    pinmux = <(((((('A') - 'A') * 0x10 + (9))) << 8) | (0x1))>;
   };
   tim1_ch3_pa10: tim1_ch3_pa10 {
    pinmux = <(((((('A') - 'A') * 0x10 + (10))) << 8) | (0x1))>;
   };
   tim1_ch4_pa11: tim1_ch4_pa11 {
    pinmux = <(((((('A') - 'A') * 0x10 + (11))) << 8) | (0x1))>;
   };
   tim1_ch2n_pb8: tim1_ch2n_pb8 {
    pinmux = <(((((('B') - 'A') * 0x10 + (8))) << 8) | (0x1))>;
   };
   tim1_ch3n_pb9: tim1_ch3n_pb9 {
    pinmux = <(((((('B') - 'A') * 0x10 + (9))) << 8) | (0x1))>;
   };
   tim1_ch1n_pb13: tim1_ch1n_pb13 {
    pinmux = <(((((('B') - 'A') * 0x10 + (13))) << 8) | (0x1))>;
   };
   tim1_ch2n_pb14: tim1_ch2n_pb14 {
    pinmux = <(((((('B') - 'A') * 0x10 + (14))) << 8) | (0x1))>;
   };
   tim1_ch3n_pb15: tim1_ch3n_pb15 {
    pinmux = <(((((('B') - 'A') * 0x10 + (15))) << 8) | (0x1))>;
   };
   tim2_ch1_pa0: tim2_ch1_pa0 {
    pinmux = <(((((('A') - 'A') * 0x10 + (0))) << 8) | (0x1))>;
   };
   tim2_ch2_pa1: tim2_ch2_pa1 {
    pinmux = <(((((('A') - 'A') * 0x10 + (1))) << 8) | (0x1))>;
   };
   tim2_ch3_pa2: tim2_ch3_pa2 {
    pinmux = <(((((('A') - 'A') * 0x10 + (2))) << 8) | (0x1))>;
   };
   tim2_ch4_pa3: tim2_ch4_pa3 {
    pinmux = <(((((('A') - 'A') * 0x10 + (3))) << 8) | (0x1))>;
   };
   tim2_ch1_pa5: tim2_ch1_pa5 {
    pinmux = <(((((('A') - 'A') * 0x10 + (5))) << 8) | (0x1))>;
   };
   tim2_ch1_pa15: tim2_ch1_pa15 {
    pinmux = <(((((('A') - 'A') * 0x10 + (15))) << 8) | (0x1))>;
   };
   tim2_ch2_pb3: tim2_ch2_pb3 {
    pinmux = <(((((('B') - 'A') * 0x10 + (3))) << 8) | (0x1))>;
   };
   tim2_ch3_pb10: tim2_ch3_pb10 {
    pinmux = <(((((('B') - 'A') * 0x10 + (10))) << 8) | (0x1))>;
   };
   tim2_ch4_pb11: tim2_ch4_pb11 {
    pinmux = <(((((('B') - 'A') * 0x10 + (11))) << 8) | (0x1))>;
   };
   tim16_ch1_pa6: tim16_ch1_pa6 {
    pinmux = <(((((('A') - 'A') * 0x10 + (6))) << 8) | (0xe))>;
   };
   tim16_ch1n_pb6: tim16_ch1n_pb6 {
    pinmux = <(((((('B') - 'A') * 0x10 + (6))) << 8) | (0xe))>;
   };
   tim16_ch1_pb8: tim16_ch1_pb8 {
    pinmux = <(((((('B') - 'A') * 0x10 + (8))) << 8) | (0xe))>;
   };
   tim17_ch1_pa7: tim17_ch1_pa7 {
    pinmux = <(((((('A') - 'A') * 0x10 + (7))) << 8) | (0xe))>;
   };
   tim17_ch1n_pb7: tim17_ch1n_pb7 {
    pinmux = <(((((('B') - 'A') * 0x10 + (7))) << 8) | (0xe))>;
   };
   tim17_ch1_pb9: tim17_ch1_pb9 {
    pinmux = <(((((('B') - 'A') * 0x10 + (9))) << 8) | (0xe))>;
   };
   lpuart1_cts_pa6: lpuart1_cts_pa6 {
    pinmux = <(((((('A') - 'A') * 0x10 + (6))) << 8) | (0x8))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart1_cts_pa11: usart1_cts_pa11 {
    pinmux = <(((((('A') - 'A') * 0x10 + (11))) << 8) | (0x7))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart1_cts_pb4: usart1_cts_pb4 {
    pinmux = <(((((('B') - 'A') * 0x10 + (4))) << 8) | (0x7))>;
    bias-pull-up;
    drive-open-drain;
   };
   lpuart1_cts_pb13: lpuart1_cts_pb13 {
    pinmux = <(((((('B') - 'A') * 0x10 + (13))) << 8) | (0x8))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart2_cts_pa0: usart2_cts_pa0 {
    pinmux = <(((((('A') - 'A') * 0x10 + (0))) << 8) | (0x7))>;
    bias-pull-up;
    drive-open-drain;
   };
   lpuart1_rts_pa1: lpuart1_rts_pa1 {
    pinmux = <(((((('A') - 'A') * 0x10 + (1))) << 8) | (0x8))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart1_rts_pa12: usart1_rts_pa12 {
    pinmux = <(((((('A') - 'A') * 0x10 + (12))) << 8) | (0x7))>;
    bias-pull-up;
    drive-open-drain;
   };
   lpuart1_rts_pb1: lpuart1_rts_pb1 {
    pinmux = <(((((('B') - 'A') * 0x10 + (1))) << 8) | (0x8))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart1_rts_pb3: usart1_rts_pb3 {
    pinmux = <(((((('B') - 'A') * 0x10 + (3))) << 8) | (0x7))>;
    bias-pull-up;
    drive-open-drain;
   };
   lpuart1_rts_pb12: lpuart1_rts_pb12 {
    pinmux = <(((((('B') - 'A') * 0x10 + (12))) << 8) | (0x8))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart2_rts_pa1: usart2_rts_pa1 {
    pinmux = <(((((('A') - 'A') * 0x10 + (1))) << 8) | (0x7))>;
    bias-pull-up;
    drive-open-drain;
   };
   lpuart1_rx_pa3: lpuart1_rx_pa3 {
    pinmux = <(((((('A') - 'A') * 0x10 + (3))) << 8) | (0x8))>;
   };
   usart1_rx_pa10: usart1_rx_pa10 {
    pinmux = <(((((('A') - 'A') * 0x10 + (10))) << 8) | (0x7))>;
   };
   usart1_rx_pb7: usart1_rx_pb7 {
    pinmux = <(((((('B') - 'A') * 0x10 + (7))) << 8) | (0x7))>;
   };
   lpuart1_rx_pb10: lpuart1_rx_pb10 {
    pinmux = <(((((('B') - 'A') * 0x10 + (10))) << 8) | (0x8))>;
   };
   lpuart1_rx_pc0: lpuart1_rx_pc0 {
    pinmux = <(((((('C') - 'A') * 0x10 + (0))) << 8) | (0x8))>;
   };
   usart2_rx_pa3: usart2_rx_pa3 {
    pinmux = <(((((('A') - 'A') * 0x10 + (3))) << 8) | (0x7))>;
   };
   lpuart1_tx_pa2: lpuart1_tx_pa2 {
    pinmux = <(((((('A') - 'A') * 0x10 + (2))) << 8) | (0x8))>;
    bias-pull-up;
   };
   usart1_tx_pa9: usart1_tx_pa9 {
    pinmux = <(((((('A') - 'A') * 0x10 + (9))) << 8) | (0x7))>;
    bias-pull-up;
   };
   usart1_tx_pb6: usart1_tx_pb6 {
    pinmux = <(((((('B') - 'A') * 0x10 + (6))) << 8) | (0x7))>;
    bias-pull-up;
   };
   lpuart1_tx_pb11: lpuart1_tx_pb11 {
    pinmux = <(((((('B') - 'A') * 0x10 + (11))) << 8) | (0x8))>;
    bias-pull-up;
   };
   lpuart1_tx_pc1: lpuart1_tx_pc1 {
    pinmux = <(((((('C') - 'A') * 0x10 + (1))) << 8) | (0x8))>;
    bias-pull-up;
   };
   usart2_tx_pa2: usart2_tx_pa2 {
    pinmux = <(((((('A') - 'A') * 0x10 + (2))) << 8) | (0x7))>;
    bias-pull-up;
   };
  };
 };
};
/ {
 model = "STMicroelectronics STM32WL55JC2-NUCLEO board";
 compatible = "st,stm32wl55jc2-nucleo";
 chosen {
  zephyr,console = &lpuart1;
  zephyr,shell-uart = &lpuart1;
  zephyr,sram = &sram0;
  zephyr,flash = &flash0;
  zephyr,code-partition = &flash0;
 };
 leds {
  compatible = "gpio-leds";
  blue_led_1: led_0 {
   gpios = <&gpiob 15 (0 << 0)>;
   label = "LED_0";
  };
  green_led_2: led_1 {
   gpios = <&gpiob 9 (0 << 0)>;
   label = "LED_1";
  };
  green_led_3: led_2 {
   gpios = <&gpiob 11 (0 << 0)>;
   label = "LED_2";
  };
 };
 gpio_keys {
  compatible = "gpio-keys";
  btn0: btn_0 {
   label = "BTN_0";
   gpios = <&gpioa 0 ((1 << 0) | (1 << 4))>;
  };
  btn1: btn_1 {
   label = "BTN_1";
   gpios = <&gpioa 1 ((1 << 0) | (1 << 4))>;
  };
  btn2: btn_2 {
   label = "BTN_2";
   gpios = <&gpioc 6 ((1 << 0) | (1 << 4))>;
  };
 };
 subghz {
  compatible = "gpio-subghz";
  rf_sw_ctrl1: pin_0 {
   gpios = <&gpioc 4 (1 << 0)>;
   label = "RF_SW_CTRL1";
  };
  rf_sw_ctrl2: pin_1 {
   gpios = <&gpioc 5 (1 << 0)>;
   label = "RF_SW_CTRL2";
  };
  rf_sw_ctrl3: pin_2 {
   gpios = <&gpioc 3 (1 << 0)>;
   label = "RF_SW_CTRL3";
  };
  rf_tcxo_vcc: pin_3 {
   gpios = <&gpiob 0 (1 << 0)>;
   label = "RF_TXCO_VCC";
  };
  db_radio_rx: pin_4 {
   gpios = <&gpiob 12 (1 << 0)>;
   label = "DB_RADIO_RX";
  };
  db_radio_tx: pin_5 {
   gpios = <&gpiob 13 (1 << 0)>;
   label = "DB_RADIO_TX";
  };
 };
 aliases {
  led0 = &green_led_2;
  sw0 = &btn0;
  sw1 = &btn1;
  sw2 = &btn2;
  rfswctrl1 = &rf_sw_ctrl1;
  rfswctrl2 = &rf_sw_ctrl2;
  rfswctrl3 = &rf_sw_ctrl3;
  rftcxovcc = &rf_tcxo_vcc;
  dbradiorx = &db_radio_rx;
  dbradiotx = &db_radio_tx;
 };
};
&ipcc {
 buffer = <0x20000000 255>;
 status = "okay";
};
&lpuart1 {
 pinctrl-0 = <&lpuart1_tx_pa2 &lpuart1_rx_pa3>;
 current-speed = <115200>;
 status = "okay";
};
&i2c2 {
 pinctrl-0 = <&i2c2_scl_pa12 &i2c2_sda_pa11>;
 clock-frequency = <400000>;
 status = "disabled";
};
&spi1 {
 pinctrl-0 = <&spi1_nss_pa4 &spi1_sck_pa5
       &spi1_miso_pa6 &spi1_mosi_pa7>;
 status = "disabled";
};
&sram0 {
 partitions {
  compatible = "fixed-partitions";
  #address-cells = <1>;
  #size-cells = <1>;
  send_partition: partition@2000fe00 {
   label = "send_storage";
   reg = <0x2000fe00 0x100>;
  };
  recv_partition: partition@2000ff00 {
   label = "recv_storage";
   reg = <0x2000ff00 0x100>;
  };
 };
};
&lptim1 {
 status = "okay";
};
&rtc {
 status = "disabled";
};
&clk_hse {
 status = "okay";
};
&pll {
 div-m = <2>;
 mul-n = <6>;
 div-r = <2>;
 clocks = <&clk_hse>;
 status = "okay";
};
&rcc {
 clocks = <&pll>;
 clock-frequency = <((48) * 1000 * 1000)>;
 cpu1-prescaler = <1>;
 cpu2-prescaler = <1>;
 ahb3-prescaler = <1>;
 apb1-prescaler = <1>;
 apb2-prescaler = <1>;
};


zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08020000 <_vector_table>:
 8020000:	28 ae 00 20 75 bc 02 08 8d 03 03 08 9d bc 02 08     (.. u...........
	...
 802002c:	a1 ba 02 08 00 00 00 00 00 00 00 00 41 ba 02 08     ............A...
 802003c:	05 ef 02 08                                         ....

08020040 <_irq_vector_table>:
 8020040:	35 bc 02 08 35 bc 02 08 35 bc 02 08 35 bc 02 08     5...5...5...5...
 8020050:	35 bc 02 08 35 bc 02 08 35 bc 02 08 35 bc 02 08     5...5...5...5...
 8020060:	35 bc 02 08 35 bc 02 08 35 bc 02 08 35 bc 02 08     5...5...5...5...
 8020070:	35 bc 02 08 35 bc 02 08 35 bc 02 08 35 bc 02 08     5...5...5...5...
 8020080:	35 bc 02 08 35 bc 02 08 35 bc 02 08 35 bc 02 08     5...5...5...5...
 8020090:	35 bc 02 08 35 bc 02 08 35 bc 02 08 35 bc 02 08     5...5...5...5...
 80200a0:	35 bc 02 08 35 bc 02 08 35 bc 02 08 35 bc 02 08     5...5...5...5...
 80200b0:	35 bc 02 08 35 bc 02 08 35 bc 02 08 35 bc 02 08     5...5...5...5...

Disassembly of section text:

080200c0 <__gnu_thumb1_case_sqi>:
 80200c0:	b402      	push	{r1}
 80200c2:	4671      	mov	r1, lr
 80200c4:	0849      	lsrs	r1, r1, #1
 80200c6:	0049      	lsls	r1, r1, #1
 80200c8:	5609      	ldrsb	r1, [r1, r0]
 80200ca:	0049      	lsls	r1, r1, #1
 80200cc:	448e      	add	lr, r1
 80200ce:	bc02      	pop	{r1}
 80200d0:	4770      	bx	lr
 80200d2:	46c0      	nop			; (mov r8, r8)

080200d4 <__gnu_thumb1_case_uqi>:
 80200d4:	b402      	push	{r1}
 80200d6:	4671      	mov	r1, lr
 80200d8:	0849      	lsrs	r1, r1, #1
 80200da:	0049      	lsls	r1, r1, #1
 80200dc:	5c09      	ldrb	r1, [r1, r0]
 80200de:	0049      	lsls	r1, r1, #1
 80200e0:	448e      	add	lr, r1
 80200e2:	bc02      	pop	{r1}
 80200e4:	4770      	bx	lr
 80200e6:	46c0      	nop			; (mov r8, r8)

080200e8 <__gnu_thumb1_case_shi>:
 80200e8:	b403      	push	{r0, r1}
 80200ea:	4671      	mov	r1, lr
 80200ec:	0849      	lsrs	r1, r1, #1
 80200ee:	0040      	lsls	r0, r0, #1
 80200f0:	0049      	lsls	r1, r1, #1
 80200f2:	5e09      	ldrsh	r1, [r1, r0]
 80200f4:	0049      	lsls	r1, r1, #1
 80200f6:	448e      	add	lr, r1
 80200f8:	bc03      	pop	{r0, r1}
 80200fa:	4770      	bx	lr

080200fc <__gnu_thumb1_case_uhi>:
 80200fc:	b403      	push	{r0, r1}
 80200fe:	4671      	mov	r1, lr
 8020100:	0849      	lsrs	r1, r1, #1
 8020102:	0040      	lsls	r0, r0, #1
 8020104:	0049      	lsls	r1, r1, #1
 8020106:	5a09      	ldrh	r1, [r1, r0]
 8020108:	0049      	lsls	r1, r1, #1
 802010a:	448e      	add	lr, r1
 802010c:	bc03      	pop	{r0, r1}
 802010e:	4770      	bx	lr

08020110 <__udivsi3>:
 8020110:	2200      	movs	r2, #0
 8020112:	0843      	lsrs	r3, r0, #1
 8020114:	428b      	cmp	r3, r1
 8020116:	d374      	bcc.n	8020202 <__udivsi3+0xf2>
 8020118:	0903      	lsrs	r3, r0, #4
 802011a:	428b      	cmp	r3, r1
 802011c:	d35f      	bcc.n	80201de <__udivsi3+0xce>
 802011e:	0a03      	lsrs	r3, r0, #8
 8020120:	428b      	cmp	r3, r1
 8020122:	d344      	bcc.n	80201ae <__udivsi3+0x9e>
 8020124:	0b03      	lsrs	r3, r0, #12
 8020126:	428b      	cmp	r3, r1
 8020128:	d328      	bcc.n	802017c <__udivsi3+0x6c>
 802012a:	0c03      	lsrs	r3, r0, #16
 802012c:	428b      	cmp	r3, r1
 802012e:	d30d      	bcc.n	802014c <__udivsi3+0x3c>
 8020130:	22ff      	movs	r2, #255	; 0xff
 8020132:	0209      	lsls	r1, r1, #8
 8020134:	ba12      	rev	r2, r2
 8020136:	0c03      	lsrs	r3, r0, #16
 8020138:	428b      	cmp	r3, r1
 802013a:	d302      	bcc.n	8020142 <__udivsi3+0x32>
 802013c:	1212      	asrs	r2, r2, #8
 802013e:	0209      	lsls	r1, r1, #8
 8020140:	d065      	beq.n	802020e <__udivsi3+0xfe>
 8020142:	0b03      	lsrs	r3, r0, #12
 8020144:	428b      	cmp	r3, r1
 8020146:	d319      	bcc.n	802017c <__udivsi3+0x6c>
 8020148:	e000      	b.n	802014c <__udivsi3+0x3c>
 802014a:	0a09      	lsrs	r1, r1, #8
 802014c:	0bc3      	lsrs	r3, r0, #15
 802014e:	428b      	cmp	r3, r1
 8020150:	d301      	bcc.n	8020156 <__udivsi3+0x46>
 8020152:	03cb      	lsls	r3, r1, #15
 8020154:	1ac0      	subs	r0, r0, r3
 8020156:	4152      	adcs	r2, r2
 8020158:	0b83      	lsrs	r3, r0, #14
 802015a:	428b      	cmp	r3, r1
 802015c:	d301      	bcc.n	8020162 <__udivsi3+0x52>
 802015e:	038b      	lsls	r3, r1, #14
 8020160:	1ac0      	subs	r0, r0, r3
 8020162:	4152      	adcs	r2, r2
 8020164:	0b43      	lsrs	r3, r0, #13
 8020166:	428b      	cmp	r3, r1
 8020168:	d301      	bcc.n	802016e <__udivsi3+0x5e>
 802016a:	034b      	lsls	r3, r1, #13
 802016c:	1ac0      	subs	r0, r0, r3
 802016e:	4152      	adcs	r2, r2
 8020170:	0b03      	lsrs	r3, r0, #12
 8020172:	428b      	cmp	r3, r1
 8020174:	d301      	bcc.n	802017a <__udivsi3+0x6a>
 8020176:	030b      	lsls	r3, r1, #12
 8020178:	1ac0      	subs	r0, r0, r3
 802017a:	4152      	adcs	r2, r2
 802017c:	0ac3      	lsrs	r3, r0, #11
 802017e:	428b      	cmp	r3, r1
 8020180:	d301      	bcc.n	8020186 <__udivsi3+0x76>
 8020182:	02cb      	lsls	r3, r1, #11
 8020184:	1ac0      	subs	r0, r0, r3
 8020186:	4152      	adcs	r2, r2
 8020188:	0a83      	lsrs	r3, r0, #10
 802018a:	428b      	cmp	r3, r1
 802018c:	d301      	bcc.n	8020192 <__udivsi3+0x82>
 802018e:	028b      	lsls	r3, r1, #10
 8020190:	1ac0      	subs	r0, r0, r3
 8020192:	4152      	adcs	r2, r2
 8020194:	0a43      	lsrs	r3, r0, #9
 8020196:	428b      	cmp	r3, r1
 8020198:	d301      	bcc.n	802019e <__udivsi3+0x8e>
 802019a:	024b      	lsls	r3, r1, #9
 802019c:	1ac0      	subs	r0, r0, r3
 802019e:	4152      	adcs	r2, r2
 80201a0:	0a03      	lsrs	r3, r0, #8
 80201a2:	428b      	cmp	r3, r1
 80201a4:	d301      	bcc.n	80201aa <__udivsi3+0x9a>
 80201a6:	020b      	lsls	r3, r1, #8
 80201a8:	1ac0      	subs	r0, r0, r3
 80201aa:	4152      	adcs	r2, r2
 80201ac:	d2cd      	bcs.n	802014a <__udivsi3+0x3a>
 80201ae:	09c3      	lsrs	r3, r0, #7
 80201b0:	428b      	cmp	r3, r1
 80201b2:	d301      	bcc.n	80201b8 <__udivsi3+0xa8>
 80201b4:	01cb      	lsls	r3, r1, #7
 80201b6:	1ac0      	subs	r0, r0, r3
 80201b8:	4152      	adcs	r2, r2
 80201ba:	0983      	lsrs	r3, r0, #6
 80201bc:	428b      	cmp	r3, r1
 80201be:	d301      	bcc.n	80201c4 <__udivsi3+0xb4>
 80201c0:	018b      	lsls	r3, r1, #6
 80201c2:	1ac0      	subs	r0, r0, r3
 80201c4:	4152      	adcs	r2, r2
 80201c6:	0943      	lsrs	r3, r0, #5
 80201c8:	428b      	cmp	r3, r1
 80201ca:	d301      	bcc.n	80201d0 <__udivsi3+0xc0>
 80201cc:	014b      	lsls	r3, r1, #5
 80201ce:	1ac0      	subs	r0, r0, r3
 80201d0:	4152      	adcs	r2, r2
 80201d2:	0903      	lsrs	r3, r0, #4
 80201d4:	428b      	cmp	r3, r1
 80201d6:	d301      	bcc.n	80201dc <__udivsi3+0xcc>
 80201d8:	010b      	lsls	r3, r1, #4
 80201da:	1ac0      	subs	r0, r0, r3
 80201dc:	4152      	adcs	r2, r2
 80201de:	08c3      	lsrs	r3, r0, #3
 80201e0:	428b      	cmp	r3, r1
 80201e2:	d301      	bcc.n	80201e8 <__udivsi3+0xd8>
 80201e4:	00cb      	lsls	r3, r1, #3
 80201e6:	1ac0      	subs	r0, r0, r3
 80201e8:	4152      	adcs	r2, r2
 80201ea:	0883      	lsrs	r3, r0, #2
 80201ec:	428b      	cmp	r3, r1
 80201ee:	d301      	bcc.n	80201f4 <__udivsi3+0xe4>
 80201f0:	008b      	lsls	r3, r1, #2
 80201f2:	1ac0      	subs	r0, r0, r3
 80201f4:	4152      	adcs	r2, r2
 80201f6:	0843      	lsrs	r3, r0, #1
 80201f8:	428b      	cmp	r3, r1
 80201fa:	d301      	bcc.n	8020200 <__udivsi3+0xf0>
 80201fc:	004b      	lsls	r3, r1, #1
 80201fe:	1ac0      	subs	r0, r0, r3
 8020200:	4152      	adcs	r2, r2
 8020202:	1a41      	subs	r1, r0, r1
 8020204:	d200      	bcs.n	8020208 <__udivsi3+0xf8>
 8020206:	4601      	mov	r1, r0
 8020208:	4152      	adcs	r2, r2
 802020a:	4610      	mov	r0, r2
 802020c:	4770      	bx	lr
 802020e:	e7ff      	b.n	8020210 <__udivsi3+0x100>
 8020210:	b501      	push	{r0, lr}
 8020212:	2000      	movs	r0, #0
 8020214:	f000 f8f0 	bl	80203f8 <__aeabi_idiv0>
 8020218:	bd02      	pop	{r1, pc}
 802021a:	46c0      	nop			; (mov r8, r8)

0802021c <__aeabi_uidivmod>:
 802021c:	2900      	cmp	r1, #0
 802021e:	d0f7      	beq.n	8020210 <__udivsi3+0x100>
 8020220:	e776      	b.n	8020110 <__udivsi3>
 8020222:	4770      	bx	lr

08020224 <__divsi3>:
 8020224:	4603      	mov	r3, r0
 8020226:	430b      	orrs	r3, r1
 8020228:	d47f      	bmi.n	802032a <__divsi3+0x106>
 802022a:	2200      	movs	r2, #0
 802022c:	0843      	lsrs	r3, r0, #1
 802022e:	428b      	cmp	r3, r1
 8020230:	d374      	bcc.n	802031c <__divsi3+0xf8>
 8020232:	0903      	lsrs	r3, r0, #4
 8020234:	428b      	cmp	r3, r1
 8020236:	d35f      	bcc.n	80202f8 <__divsi3+0xd4>
 8020238:	0a03      	lsrs	r3, r0, #8
 802023a:	428b      	cmp	r3, r1
 802023c:	d344      	bcc.n	80202c8 <__divsi3+0xa4>
 802023e:	0b03      	lsrs	r3, r0, #12
 8020240:	428b      	cmp	r3, r1
 8020242:	d328      	bcc.n	8020296 <__divsi3+0x72>
 8020244:	0c03      	lsrs	r3, r0, #16
 8020246:	428b      	cmp	r3, r1
 8020248:	d30d      	bcc.n	8020266 <__divsi3+0x42>
 802024a:	22ff      	movs	r2, #255	; 0xff
 802024c:	0209      	lsls	r1, r1, #8
 802024e:	ba12      	rev	r2, r2
 8020250:	0c03      	lsrs	r3, r0, #16
 8020252:	428b      	cmp	r3, r1
 8020254:	d302      	bcc.n	802025c <__divsi3+0x38>
 8020256:	1212      	asrs	r2, r2, #8
 8020258:	0209      	lsls	r1, r1, #8
 802025a:	d065      	beq.n	8020328 <__divsi3+0x104>
 802025c:	0b03      	lsrs	r3, r0, #12
 802025e:	428b      	cmp	r3, r1
 8020260:	d319      	bcc.n	8020296 <__divsi3+0x72>
 8020262:	e000      	b.n	8020266 <__divsi3+0x42>
 8020264:	0a09      	lsrs	r1, r1, #8
 8020266:	0bc3      	lsrs	r3, r0, #15
 8020268:	428b      	cmp	r3, r1
 802026a:	d301      	bcc.n	8020270 <__divsi3+0x4c>
 802026c:	03cb      	lsls	r3, r1, #15
 802026e:	1ac0      	subs	r0, r0, r3
 8020270:	4152      	adcs	r2, r2
 8020272:	0b83      	lsrs	r3, r0, #14
 8020274:	428b      	cmp	r3, r1
 8020276:	d301      	bcc.n	802027c <__divsi3+0x58>
 8020278:	038b      	lsls	r3, r1, #14
 802027a:	1ac0      	subs	r0, r0, r3
 802027c:	4152      	adcs	r2, r2
 802027e:	0b43      	lsrs	r3, r0, #13
 8020280:	428b      	cmp	r3, r1
 8020282:	d301      	bcc.n	8020288 <__divsi3+0x64>
 8020284:	034b      	lsls	r3, r1, #13
 8020286:	1ac0      	subs	r0, r0, r3
 8020288:	4152      	adcs	r2, r2
 802028a:	0b03      	lsrs	r3, r0, #12
 802028c:	428b      	cmp	r3, r1
 802028e:	d301      	bcc.n	8020294 <__divsi3+0x70>
 8020290:	030b      	lsls	r3, r1, #12
 8020292:	1ac0      	subs	r0, r0, r3
 8020294:	4152      	adcs	r2, r2
 8020296:	0ac3      	lsrs	r3, r0, #11
 8020298:	428b      	cmp	r3, r1
 802029a:	d301      	bcc.n	80202a0 <__divsi3+0x7c>
 802029c:	02cb      	lsls	r3, r1, #11
 802029e:	1ac0      	subs	r0, r0, r3
 80202a0:	4152      	adcs	r2, r2
 80202a2:	0a83      	lsrs	r3, r0, #10
 80202a4:	428b      	cmp	r3, r1
 80202a6:	d301      	bcc.n	80202ac <__divsi3+0x88>
 80202a8:	028b      	lsls	r3, r1, #10
 80202aa:	1ac0      	subs	r0, r0, r3
 80202ac:	4152      	adcs	r2, r2
 80202ae:	0a43      	lsrs	r3, r0, #9
 80202b0:	428b      	cmp	r3, r1
 80202b2:	d301      	bcc.n	80202b8 <__divsi3+0x94>
 80202b4:	024b      	lsls	r3, r1, #9
 80202b6:	1ac0      	subs	r0, r0, r3
 80202b8:	4152      	adcs	r2, r2
 80202ba:	0a03      	lsrs	r3, r0, #8
 80202bc:	428b      	cmp	r3, r1
 80202be:	d301      	bcc.n	80202c4 <__divsi3+0xa0>
 80202c0:	020b      	lsls	r3, r1, #8
 80202c2:	1ac0      	subs	r0, r0, r3
 80202c4:	4152      	adcs	r2, r2
 80202c6:	d2cd      	bcs.n	8020264 <__divsi3+0x40>
 80202c8:	09c3      	lsrs	r3, r0, #7
 80202ca:	428b      	cmp	r3, r1
 80202cc:	d301      	bcc.n	80202d2 <__divsi3+0xae>
 80202ce:	01cb      	lsls	r3, r1, #7
 80202d0:	1ac0      	subs	r0, r0, r3
 80202d2:	4152      	adcs	r2, r2
 80202d4:	0983      	lsrs	r3, r0, #6
 80202d6:	428b      	cmp	r3, r1
 80202d8:	d301      	bcc.n	80202de <__divsi3+0xba>
 80202da:	018b      	lsls	r3, r1, #6
 80202dc:	1ac0      	subs	r0, r0, r3
 80202de:	4152      	adcs	r2, r2
 80202e0:	0943      	lsrs	r3, r0, #5
 80202e2:	428b      	cmp	r3, r1
 80202e4:	d301      	bcc.n	80202ea <__divsi3+0xc6>
 80202e6:	014b      	lsls	r3, r1, #5
 80202e8:	1ac0      	subs	r0, r0, r3
 80202ea:	4152      	adcs	r2, r2
 80202ec:	0903      	lsrs	r3, r0, #4
 80202ee:	428b      	cmp	r3, r1
 80202f0:	d301      	bcc.n	80202f6 <__divsi3+0xd2>
 80202f2:	010b      	lsls	r3, r1, #4
 80202f4:	1ac0      	subs	r0, r0, r3
 80202f6:	4152      	adcs	r2, r2
 80202f8:	08c3      	lsrs	r3, r0, #3
 80202fa:	428b      	cmp	r3, r1
 80202fc:	d301      	bcc.n	8020302 <__divsi3+0xde>
 80202fe:	00cb      	lsls	r3, r1, #3
 8020300:	1ac0      	subs	r0, r0, r3
 8020302:	4152      	adcs	r2, r2
 8020304:	0883      	lsrs	r3, r0, #2
 8020306:	428b      	cmp	r3, r1
 8020308:	d301      	bcc.n	802030e <__divsi3+0xea>
 802030a:	008b      	lsls	r3, r1, #2
 802030c:	1ac0      	subs	r0, r0, r3
 802030e:	4152      	adcs	r2, r2
 8020310:	0843      	lsrs	r3, r0, #1
 8020312:	428b      	cmp	r3, r1
 8020314:	d301      	bcc.n	802031a <__divsi3+0xf6>
 8020316:	004b      	lsls	r3, r1, #1
 8020318:	1ac0      	subs	r0, r0, r3
 802031a:	4152      	adcs	r2, r2
 802031c:	1a41      	subs	r1, r0, r1
 802031e:	d200      	bcs.n	8020322 <__divsi3+0xfe>
 8020320:	4601      	mov	r1, r0
 8020322:	4152      	adcs	r2, r2
 8020324:	4610      	mov	r0, r2
 8020326:	4770      	bx	lr
 8020328:	e05d      	b.n	80203e6 <__divsi3+0x1c2>
 802032a:	0fca      	lsrs	r2, r1, #31
 802032c:	d000      	beq.n	8020330 <__divsi3+0x10c>
 802032e:	4249      	negs	r1, r1
 8020330:	1003      	asrs	r3, r0, #32
 8020332:	d300      	bcc.n	8020336 <__divsi3+0x112>
 8020334:	4240      	negs	r0, r0
 8020336:	4053      	eors	r3, r2
 8020338:	2200      	movs	r2, #0
 802033a:	469c      	mov	ip, r3
 802033c:	0903      	lsrs	r3, r0, #4
 802033e:	428b      	cmp	r3, r1
 8020340:	d32d      	bcc.n	802039e <__divsi3+0x17a>
 8020342:	0a03      	lsrs	r3, r0, #8
 8020344:	428b      	cmp	r3, r1
 8020346:	d312      	bcc.n	802036e <__divsi3+0x14a>
 8020348:	22fc      	movs	r2, #252	; 0xfc
 802034a:	0189      	lsls	r1, r1, #6
 802034c:	ba12      	rev	r2, r2
 802034e:	0a03      	lsrs	r3, r0, #8
 8020350:	428b      	cmp	r3, r1
 8020352:	d30c      	bcc.n	802036e <__divsi3+0x14a>
 8020354:	0189      	lsls	r1, r1, #6
 8020356:	1192      	asrs	r2, r2, #6
 8020358:	428b      	cmp	r3, r1
 802035a:	d308      	bcc.n	802036e <__divsi3+0x14a>
 802035c:	0189      	lsls	r1, r1, #6
 802035e:	1192      	asrs	r2, r2, #6
 8020360:	428b      	cmp	r3, r1
 8020362:	d304      	bcc.n	802036e <__divsi3+0x14a>
 8020364:	0189      	lsls	r1, r1, #6
 8020366:	d03a      	beq.n	80203de <__divsi3+0x1ba>
 8020368:	1192      	asrs	r2, r2, #6
 802036a:	e000      	b.n	802036e <__divsi3+0x14a>
 802036c:	0989      	lsrs	r1, r1, #6
 802036e:	09c3      	lsrs	r3, r0, #7
 8020370:	428b      	cmp	r3, r1
 8020372:	d301      	bcc.n	8020378 <__divsi3+0x154>
 8020374:	01cb      	lsls	r3, r1, #7
 8020376:	1ac0      	subs	r0, r0, r3
 8020378:	4152      	adcs	r2, r2
 802037a:	0983      	lsrs	r3, r0, #6
 802037c:	428b      	cmp	r3, r1
 802037e:	d301      	bcc.n	8020384 <__divsi3+0x160>
 8020380:	018b      	lsls	r3, r1, #6
 8020382:	1ac0      	subs	r0, r0, r3
 8020384:	4152      	adcs	r2, r2
 8020386:	0943      	lsrs	r3, r0, #5
 8020388:	428b      	cmp	r3, r1
 802038a:	d301      	bcc.n	8020390 <__divsi3+0x16c>
 802038c:	014b      	lsls	r3, r1, #5
 802038e:	1ac0      	subs	r0, r0, r3
 8020390:	4152      	adcs	r2, r2
 8020392:	0903      	lsrs	r3, r0, #4
 8020394:	428b      	cmp	r3, r1
 8020396:	d301      	bcc.n	802039c <__divsi3+0x178>
 8020398:	010b      	lsls	r3, r1, #4
 802039a:	1ac0      	subs	r0, r0, r3
 802039c:	4152      	adcs	r2, r2
 802039e:	08c3      	lsrs	r3, r0, #3
 80203a0:	428b      	cmp	r3, r1
 80203a2:	d301      	bcc.n	80203a8 <__divsi3+0x184>
 80203a4:	00cb      	lsls	r3, r1, #3
 80203a6:	1ac0      	subs	r0, r0, r3
 80203a8:	4152      	adcs	r2, r2
 80203aa:	0883      	lsrs	r3, r0, #2
 80203ac:	428b      	cmp	r3, r1
 80203ae:	d301      	bcc.n	80203b4 <__divsi3+0x190>
 80203b0:	008b      	lsls	r3, r1, #2
 80203b2:	1ac0      	subs	r0, r0, r3
 80203b4:	4152      	adcs	r2, r2
 80203b6:	d2d9      	bcs.n	802036c <__divsi3+0x148>
 80203b8:	0843      	lsrs	r3, r0, #1
 80203ba:	428b      	cmp	r3, r1
 80203bc:	d301      	bcc.n	80203c2 <__divsi3+0x19e>
 80203be:	004b      	lsls	r3, r1, #1
 80203c0:	1ac0      	subs	r0, r0, r3
 80203c2:	4152      	adcs	r2, r2
 80203c4:	1a41      	subs	r1, r0, r1
 80203c6:	d200      	bcs.n	80203ca <__divsi3+0x1a6>
 80203c8:	4601      	mov	r1, r0
 80203ca:	4663      	mov	r3, ip
 80203cc:	4152      	adcs	r2, r2
 80203ce:	105b      	asrs	r3, r3, #1
 80203d0:	4610      	mov	r0, r2
 80203d2:	d301      	bcc.n	80203d8 <__divsi3+0x1b4>
 80203d4:	4240      	negs	r0, r0
 80203d6:	2b00      	cmp	r3, #0
 80203d8:	d500      	bpl.n	80203dc <__divsi3+0x1b8>
 80203da:	4249      	negs	r1, r1
 80203dc:	4770      	bx	lr
 80203de:	4663      	mov	r3, ip
 80203e0:	105b      	asrs	r3, r3, #1
 80203e2:	d300      	bcc.n	80203e6 <__divsi3+0x1c2>
 80203e4:	4240      	negs	r0, r0
 80203e6:	b501      	push	{r0, lr}
 80203e8:	2000      	movs	r0, #0
 80203ea:	f000 f805 	bl	80203f8 <__aeabi_idiv0>
 80203ee:	bd02      	pop	{r1, pc}

080203f0 <__aeabi_idivmod>:
 80203f0:	2900      	cmp	r1, #0
 80203f2:	d0f8      	beq.n	80203e6 <__divsi3+0x1c2>
 80203f4:	e716      	b.n	8020224 <__divsi3>
 80203f6:	4770      	bx	lr

080203f8 <__aeabi_idiv0>:
 80203f8:	4770      	bx	lr
 80203fa:	46c0      	nop			; (mov r8, r8)

080203fc <__aeabi_cfrcmple>:
 80203fc:	4684      	mov	ip, r0
 80203fe:	0008      	movs	r0, r1
 8020400:	4661      	mov	r1, ip
 8020402:	e7ff      	b.n	8020404 <__aeabi_cfcmpeq>

08020404 <__aeabi_cfcmpeq>:
 8020404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020406:	f000 fca5 	bl	8020d54 <__lesf2>
 802040a:	2800      	cmp	r0, #0
 802040c:	d401      	bmi.n	8020412 <__aeabi_cfcmpeq+0xe>
 802040e:	2100      	movs	r1, #0
 8020410:	42c8      	cmn	r0, r1
 8020412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08020414 <__aeabi_fcmpeq>:
 8020414:	b510      	push	{r4, lr}
 8020416:	f000 fc31 	bl	8020c7c <__eqsf2>
 802041a:	4240      	negs	r0, r0
 802041c:	3001      	adds	r0, #1
 802041e:	bd10      	pop	{r4, pc}

08020420 <__aeabi_fcmplt>:
 8020420:	b510      	push	{r4, lr}
 8020422:	f000 fc97 	bl	8020d54 <__lesf2>
 8020426:	2800      	cmp	r0, #0
 8020428:	db01      	blt.n	802042e <__aeabi_fcmplt+0xe>
 802042a:	2000      	movs	r0, #0
 802042c:	bd10      	pop	{r4, pc}
 802042e:	2001      	movs	r0, #1
 8020430:	bd10      	pop	{r4, pc}
 8020432:	46c0      	nop			; (mov r8, r8)

08020434 <__aeabi_fcmple>:
 8020434:	b510      	push	{r4, lr}
 8020436:	f000 fc8d 	bl	8020d54 <__lesf2>
 802043a:	2800      	cmp	r0, #0
 802043c:	dd01      	ble.n	8020442 <__aeabi_fcmple+0xe>
 802043e:	2000      	movs	r0, #0
 8020440:	bd10      	pop	{r4, pc}
 8020442:	2001      	movs	r0, #1
 8020444:	bd10      	pop	{r4, pc}
 8020446:	46c0      	nop			; (mov r8, r8)

08020448 <__aeabi_fcmpgt>:
 8020448:	b510      	push	{r4, lr}
 802044a:	f000 fc3d 	bl	8020cc8 <__gesf2>
 802044e:	2800      	cmp	r0, #0
 8020450:	dc01      	bgt.n	8020456 <__aeabi_fcmpgt+0xe>
 8020452:	2000      	movs	r0, #0
 8020454:	bd10      	pop	{r4, pc}
 8020456:	2001      	movs	r0, #1
 8020458:	bd10      	pop	{r4, pc}
 802045a:	46c0      	nop			; (mov r8, r8)

0802045c <__aeabi_fcmpge>:
 802045c:	b510      	push	{r4, lr}
 802045e:	f000 fc33 	bl	8020cc8 <__gesf2>
 8020462:	2800      	cmp	r0, #0
 8020464:	da01      	bge.n	802046a <__aeabi_fcmpge+0xe>
 8020466:	2000      	movs	r0, #0
 8020468:	bd10      	pop	{r4, pc}
 802046a:	2001      	movs	r0, #1
 802046c:	bd10      	pop	{r4, pc}
 802046e:	46c0      	nop			; (mov r8, r8)

08020470 <__clzsi2>:
 8020470:	211c      	movs	r1, #28
 8020472:	2301      	movs	r3, #1
 8020474:	041b      	lsls	r3, r3, #16
 8020476:	4298      	cmp	r0, r3
 8020478:	d301      	bcc.n	802047e <__clzsi2+0xe>
 802047a:	0c00      	lsrs	r0, r0, #16
 802047c:	3910      	subs	r1, #16
 802047e:	0a1b      	lsrs	r3, r3, #8
 8020480:	4298      	cmp	r0, r3
 8020482:	d301      	bcc.n	8020488 <__clzsi2+0x18>
 8020484:	0a00      	lsrs	r0, r0, #8
 8020486:	3908      	subs	r1, #8
 8020488:	091b      	lsrs	r3, r3, #4
 802048a:	4298      	cmp	r0, r3
 802048c:	d301      	bcc.n	8020492 <__clzsi2+0x22>
 802048e:	0900      	lsrs	r0, r0, #4
 8020490:	3904      	subs	r1, #4
 8020492:	a202      	add	r2, pc, #8	; (adr r2, 802049c <__clzsi2+0x2c>)
 8020494:	5c10      	ldrb	r0, [r2, r0]
 8020496:	1840      	adds	r0, r0, r1
 8020498:	4770      	bx	lr
 802049a:	46c0      	nop			; (mov r8, r8)
 802049c:	02020304 	.word	0x02020304
 80204a0:	01010101 	.word	0x01010101
	...

080204ac <__aeabi_uldivmod>:
 80204ac:	2b00      	cmp	r3, #0
 80204ae:	d111      	bne.n	80204d4 <__aeabi_uldivmod+0x28>
 80204b0:	2a00      	cmp	r2, #0
 80204b2:	d10f      	bne.n	80204d4 <__aeabi_uldivmod+0x28>
 80204b4:	2900      	cmp	r1, #0
 80204b6:	d100      	bne.n	80204ba <__aeabi_uldivmod+0xe>
 80204b8:	2800      	cmp	r0, #0
 80204ba:	d002      	beq.n	80204c2 <__aeabi_uldivmod+0x16>
 80204bc:	2100      	movs	r1, #0
 80204be:	43c9      	mvns	r1, r1
 80204c0:	0008      	movs	r0, r1
 80204c2:	b407      	push	{r0, r1, r2}
 80204c4:	4802      	ldr	r0, [pc, #8]	; (80204d0 <__aeabi_uldivmod+0x24>)
 80204c6:	a102      	add	r1, pc, #8	; (adr r1, 80204d0 <__aeabi_uldivmod+0x24>)
 80204c8:	1840      	adds	r0, r0, r1
 80204ca:	9002      	str	r0, [sp, #8]
 80204cc:	bd03      	pop	{r0, r1, pc}
 80204ce:	46c0      	nop			; (mov r8, r8)
 80204d0:	ffffff29 	.word	0xffffff29
 80204d4:	b403      	push	{r0, r1}
 80204d6:	4668      	mov	r0, sp
 80204d8:	b501      	push	{r0, lr}
 80204da:	9802      	ldr	r0, [sp, #8]
 80204dc:	f000 f84c 	bl	8020578 <__udivmoddi4>
 80204e0:	9b01      	ldr	r3, [sp, #4]
 80204e2:	469e      	mov	lr, r3
 80204e4:	b002      	add	sp, #8
 80204e6:	bc0c      	pop	{r2, r3}
 80204e8:	4770      	bx	lr
 80204ea:	46c0      	nop			; (mov r8, r8)

080204ec <__aeabi_lmul>:
 80204ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80204ee:	46ce      	mov	lr, r9
 80204f0:	4647      	mov	r7, r8
 80204f2:	b580      	push	{r7, lr}
 80204f4:	0007      	movs	r7, r0
 80204f6:	4699      	mov	r9, r3
 80204f8:	0c3b      	lsrs	r3, r7, #16
 80204fa:	469c      	mov	ip, r3
 80204fc:	0413      	lsls	r3, r2, #16
 80204fe:	0c1b      	lsrs	r3, r3, #16
 8020500:	001d      	movs	r5, r3
 8020502:	000e      	movs	r6, r1
 8020504:	4661      	mov	r1, ip
 8020506:	0400      	lsls	r0, r0, #16
 8020508:	0c14      	lsrs	r4, r2, #16
 802050a:	0c00      	lsrs	r0, r0, #16
 802050c:	4345      	muls	r5, r0
 802050e:	434b      	muls	r3, r1
 8020510:	4360      	muls	r0, r4
 8020512:	4361      	muls	r1, r4
 8020514:	18c0      	adds	r0, r0, r3
 8020516:	0c2c      	lsrs	r4, r5, #16
 8020518:	1820      	adds	r0, r4, r0
 802051a:	468c      	mov	ip, r1
 802051c:	4283      	cmp	r3, r0
 802051e:	d903      	bls.n	8020528 <__aeabi_lmul+0x3c>
 8020520:	2380      	movs	r3, #128	; 0x80
 8020522:	025b      	lsls	r3, r3, #9
 8020524:	4698      	mov	r8, r3
 8020526:	44c4      	add	ip, r8
 8020528:	4649      	mov	r1, r9
 802052a:	4379      	muls	r1, r7
 802052c:	4372      	muls	r2, r6
 802052e:	0c03      	lsrs	r3, r0, #16
 8020530:	4463      	add	r3, ip
 8020532:	042d      	lsls	r5, r5, #16
 8020534:	0c2d      	lsrs	r5, r5, #16
 8020536:	18c9      	adds	r1, r1, r3
 8020538:	0400      	lsls	r0, r0, #16
 802053a:	1940      	adds	r0, r0, r5
 802053c:	1889      	adds	r1, r1, r2
 802053e:	bcc0      	pop	{r6, r7}
 8020540:	46b9      	mov	r9, r7
 8020542:	46b0      	mov	r8, r6
 8020544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020546:	46c0      	nop			; (mov r8, r8)

08020548 <__aeabi_f2uiz>:
 8020548:	219e      	movs	r1, #158	; 0x9e
 802054a:	b510      	push	{r4, lr}
 802054c:	05c9      	lsls	r1, r1, #23
 802054e:	1c04      	adds	r4, r0, #0
 8020550:	f7ff ff84 	bl	802045c <__aeabi_fcmpge>
 8020554:	2800      	cmp	r0, #0
 8020556:	d103      	bne.n	8020560 <__aeabi_f2uiz+0x18>
 8020558:	1c20      	adds	r0, r4, #0
 802055a:	f000 ff13 	bl	8021384 <__aeabi_f2iz>
 802055e:	bd10      	pop	{r4, pc}
 8020560:	219e      	movs	r1, #158	; 0x9e
 8020562:	1c20      	adds	r0, r4, #0
 8020564:	05c9      	lsls	r1, r1, #23
 8020566:	f000 fd5f 	bl	8021028 <__aeabi_fsub>
 802056a:	f000 ff0b 	bl	8021384 <__aeabi_f2iz>
 802056e:	2380      	movs	r3, #128	; 0x80
 8020570:	061b      	lsls	r3, r3, #24
 8020572:	469c      	mov	ip, r3
 8020574:	4460      	add	r0, ip
 8020576:	e7f2      	b.n	802055e <__aeabi_f2uiz+0x16>

08020578 <__udivmoddi4>:
 8020578:	b5f0      	push	{r4, r5, r6, r7, lr}
 802057a:	4657      	mov	r7, sl
 802057c:	464e      	mov	r6, r9
 802057e:	4645      	mov	r5, r8
 8020580:	46de      	mov	lr, fp
 8020582:	b5e0      	push	{r5, r6, r7, lr}
 8020584:	0004      	movs	r4, r0
 8020586:	000d      	movs	r5, r1
 8020588:	4692      	mov	sl, r2
 802058a:	4699      	mov	r9, r3
 802058c:	b083      	sub	sp, #12
 802058e:	428b      	cmp	r3, r1
 8020590:	d830      	bhi.n	80205f4 <__udivmoddi4+0x7c>
 8020592:	d02d      	beq.n	80205f0 <__udivmoddi4+0x78>
 8020594:	4649      	mov	r1, r9
 8020596:	4650      	mov	r0, sl
 8020598:	f001 fbd6 	bl	8021d48 <__clzdi2>
 802059c:	0029      	movs	r1, r5
 802059e:	0006      	movs	r6, r0
 80205a0:	0020      	movs	r0, r4
 80205a2:	f001 fbd1 	bl	8021d48 <__clzdi2>
 80205a6:	1a33      	subs	r3, r6, r0
 80205a8:	4698      	mov	r8, r3
 80205aa:	3b20      	subs	r3, #32
 80205ac:	469b      	mov	fp, r3
 80205ae:	d433      	bmi.n	8020618 <__udivmoddi4+0xa0>
 80205b0:	465a      	mov	r2, fp
 80205b2:	4653      	mov	r3, sl
 80205b4:	4093      	lsls	r3, r2
 80205b6:	4642      	mov	r2, r8
 80205b8:	001f      	movs	r7, r3
 80205ba:	4653      	mov	r3, sl
 80205bc:	4093      	lsls	r3, r2
 80205be:	001e      	movs	r6, r3
 80205c0:	42af      	cmp	r7, r5
 80205c2:	d83a      	bhi.n	802063a <__udivmoddi4+0xc2>
 80205c4:	42af      	cmp	r7, r5
 80205c6:	d100      	bne.n	80205ca <__udivmoddi4+0x52>
 80205c8:	e078      	b.n	80206bc <__udivmoddi4+0x144>
 80205ca:	465b      	mov	r3, fp
 80205cc:	1ba4      	subs	r4, r4, r6
 80205ce:	41bd      	sbcs	r5, r7
 80205d0:	2b00      	cmp	r3, #0
 80205d2:	da00      	bge.n	80205d6 <__udivmoddi4+0x5e>
 80205d4:	e075      	b.n	80206c2 <__udivmoddi4+0x14a>
 80205d6:	2200      	movs	r2, #0
 80205d8:	2300      	movs	r3, #0
 80205da:	9200      	str	r2, [sp, #0]
 80205dc:	9301      	str	r3, [sp, #4]
 80205de:	2301      	movs	r3, #1
 80205e0:	465a      	mov	r2, fp
 80205e2:	4093      	lsls	r3, r2
 80205e4:	9301      	str	r3, [sp, #4]
 80205e6:	2301      	movs	r3, #1
 80205e8:	4642      	mov	r2, r8
 80205ea:	4093      	lsls	r3, r2
 80205ec:	9300      	str	r3, [sp, #0]
 80205ee:	e028      	b.n	8020642 <__udivmoddi4+0xca>
 80205f0:	4282      	cmp	r2, r0
 80205f2:	d9cf      	bls.n	8020594 <__udivmoddi4+0x1c>
 80205f4:	2200      	movs	r2, #0
 80205f6:	2300      	movs	r3, #0
 80205f8:	9200      	str	r2, [sp, #0]
 80205fa:	9301      	str	r3, [sp, #4]
 80205fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80205fe:	2b00      	cmp	r3, #0
 8020600:	d001      	beq.n	8020606 <__udivmoddi4+0x8e>
 8020602:	601c      	str	r4, [r3, #0]
 8020604:	605d      	str	r5, [r3, #4]
 8020606:	9800      	ldr	r0, [sp, #0]
 8020608:	9901      	ldr	r1, [sp, #4]
 802060a:	b003      	add	sp, #12
 802060c:	bcf0      	pop	{r4, r5, r6, r7}
 802060e:	46bb      	mov	fp, r7
 8020610:	46b2      	mov	sl, r6
 8020612:	46a9      	mov	r9, r5
 8020614:	46a0      	mov	r8, r4
 8020616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020618:	4642      	mov	r2, r8
 802061a:	2320      	movs	r3, #32
 802061c:	1a9b      	subs	r3, r3, r2
 802061e:	4652      	mov	r2, sl
 8020620:	40da      	lsrs	r2, r3
 8020622:	4641      	mov	r1, r8
 8020624:	0013      	movs	r3, r2
 8020626:	464a      	mov	r2, r9
 8020628:	408a      	lsls	r2, r1
 802062a:	0017      	movs	r7, r2
 802062c:	4642      	mov	r2, r8
 802062e:	431f      	orrs	r7, r3
 8020630:	4653      	mov	r3, sl
 8020632:	4093      	lsls	r3, r2
 8020634:	001e      	movs	r6, r3
 8020636:	42af      	cmp	r7, r5
 8020638:	d9c4      	bls.n	80205c4 <__udivmoddi4+0x4c>
 802063a:	2200      	movs	r2, #0
 802063c:	2300      	movs	r3, #0
 802063e:	9200      	str	r2, [sp, #0]
 8020640:	9301      	str	r3, [sp, #4]
 8020642:	4643      	mov	r3, r8
 8020644:	2b00      	cmp	r3, #0
 8020646:	d0d9      	beq.n	80205fc <__udivmoddi4+0x84>
 8020648:	07fb      	lsls	r3, r7, #31
 802064a:	0872      	lsrs	r2, r6, #1
 802064c:	431a      	orrs	r2, r3
 802064e:	4646      	mov	r6, r8
 8020650:	087b      	lsrs	r3, r7, #1
 8020652:	e00e      	b.n	8020672 <__udivmoddi4+0xfa>
 8020654:	42ab      	cmp	r3, r5
 8020656:	d101      	bne.n	802065c <__udivmoddi4+0xe4>
 8020658:	42a2      	cmp	r2, r4
 802065a:	d80c      	bhi.n	8020676 <__udivmoddi4+0xfe>
 802065c:	1aa4      	subs	r4, r4, r2
 802065e:	419d      	sbcs	r5, r3
 8020660:	2001      	movs	r0, #1
 8020662:	1924      	adds	r4, r4, r4
 8020664:	416d      	adcs	r5, r5
 8020666:	2100      	movs	r1, #0
 8020668:	3e01      	subs	r6, #1
 802066a:	1824      	adds	r4, r4, r0
 802066c:	414d      	adcs	r5, r1
 802066e:	2e00      	cmp	r6, #0
 8020670:	d006      	beq.n	8020680 <__udivmoddi4+0x108>
 8020672:	42ab      	cmp	r3, r5
 8020674:	d9ee      	bls.n	8020654 <__udivmoddi4+0xdc>
 8020676:	3e01      	subs	r6, #1
 8020678:	1924      	adds	r4, r4, r4
 802067a:	416d      	adcs	r5, r5
 802067c:	2e00      	cmp	r6, #0
 802067e:	d1f8      	bne.n	8020672 <__udivmoddi4+0xfa>
 8020680:	9800      	ldr	r0, [sp, #0]
 8020682:	9901      	ldr	r1, [sp, #4]
 8020684:	465b      	mov	r3, fp
 8020686:	1900      	adds	r0, r0, r4
 8020688:	4169      	adcs	r1, r5
 802068a:	2b00      	cmp	r3, #0
 802068c:	db24      	blt.n	80206d8 <__udivmoddi4+0x160>
 802068e:	002b      	movs	r3, r5
 8020690:	465a      	mov	r2, fp
 8020692:	4644      	mov	r4, r8
 8020694:	40d3      	lsrs	r3, r2
 8020696:	002a      	movs	r2, r5
 8020698:	40e2      	lsrs	r2, r4
 802069a:	001c      	movs	r4, r3
 802069c:	465b      	mov	r3, fp
 802069e:	0015      	movs	r5, r2
 80206a0:	2b00      	cmp	r3, #0
 80206a2:	db2a      	blt.n	80206fa <__udivmoddi4+0x182>
 80206a4:	0026      	movs	r6, r4
 80206a6:	409e      	lsls	r6, r3
 80206a8:	0033      	movs	r3, r6
 80206aa:	0026      	movs	r6, r4
 80206ac:	4647      	mov	r7, r8
 80206ae:	40be      	lsls	r6, r7
 80206b0:	0032      	movs	r2, r6
 80206b2:	1a80      	subs	r0, r0, r2
 80206b4:	4199      	sbcs	r1, r3
 80206b6:	9000      	str	r0, [sp, #0]
 80206b8:	9101      	str	r1, [sp, #4]
 80206ba:	e79f      	b.n	80205fc <__udivmoddi4+0x84>
 80206bc:	42a3      	cmp	r3, r4
 80206be:	d8bc      	bhi.n	802063a <__udivmoddi4+0xc2>
 80206c0:	e783      	b.n	80205ca <__udivmoddi4+0x52>
 80206c2:	4642      	mov	r2, r8
 80206c4:	2320      	movs	r3, #32
 80206c6:	2100      	movs	r1, #0
 80206c8:	1a9b      	subs	r3, r3, r2
 80206ca:	2200      	movs	r2, #0
 80206cc:	9100      	str	r1, [sp, #0]
 80206ce:	9201      	str	r2, [sp, #4]
 80206d0:	2201      	movs	r2, #1
 80206d2:	40da      	lsrs	r2, r3
 80206d4:	9201      	str	r2, [sp, #4]
 80206d6:	e786      	b.n	80205e6 <__udivmoddi4+0x6e>
 80206d8:	4642      	mov	r2, r8
 80206da:	2320      	movs	r3, #32
 80206dc:	1a9b      	subs	r3, r3, r2
 80206de:	002a      	movs	r2, r5
 80206e0:	4646      	mov	r6, r8
 80206e2:	409a      	lsls	r2, r3
 80206e4:	0023      	movs	r3, r4
 80206e6:	40f3      	lsrs	r3, r6
 80206e8:	4644      	mov	r4, r8
 80206ea:	4313      	orrs	r3, r2
 80206ec:	002a      	movs	r2, r5
 80206ee:	40e2      	lsrs	r2, r4
 80206f0:	001c      	movs	r4, r3
 80206f2:	465b      	mov	r3, fp
 80206f4:	0015      	movs	r5, r2
 80206f6:	2b00      	cmp	r3, #0
 80206f8:	dad4      	bge.n	80206a4 <__udivmoddi4+0x12c>
 80206fa:	4642      	mov	r2, r8
 80206fc:	002f      	movs	r7, r5
 80206fe:	2320      	movs	r3, #32
 8020700:	0026      	movs	r6, r4
 8020702:	4097      	lsls	r7, r2
 8020704:	1a9b      	subs	r3, r3, r2
 8020706:	40de      	lsrs	r6, r3
 8020708:	003b      	movs	r3, r7
 802070a:	4333      	orrs	r3, r6
 802070c:	e7cd      	b.n	80206aa <__udivmoddi4+0x132>
 802070e:	46c0      	nop			; (mov r8, r8)

08020710 <__aeabi_fadd>:
 8020710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020712:	46c6      	mov	lr, r8
 8020714:	0243      	lsls	r3, r0, #9
 8020716:	0a5b      	lsrs	r3, r3, #9
 8020718:	024e      	lsls	r6, r1, #9
 802071a:	0045      	lsls	r5, r0, #1
 802071c:	004f      	lsls	r7, r1, #1
 802071e:	00da      	lsls	r2, r3, #3
 8020720:	0fc4      	lsrs	r4, r0, #31
 8020722:	469c      	mov	ip, r3
 8020724:	0a70      	lsrs	r0, r6, #9
 8020726:	4690      	mov	r8, r2
 8020728:	b500      	push	{lr}
 802072a:	0e2d      	lsrs	r5, r5, #24
 802072c:	0e3f      	lsrs	r7, r7, #24
 802072e:	0fc9      	lsrs	r1, r1, #31
 8020730:	09b6      	lsrs	r6, r6, #6
 8020732:	428c      	cmp	r4, r1
 8020734:	d04b      	beq.n	80207ce <__aeabi_fadd+0xbe>
 8020736:	1bea      	subs	r2, r5, r7
 8020738:	2a00      	cmp	r2, #0
 802073a:	dd36      	ble.n	80207aa <__aeabi_fadd+0x9a>
 802073c:	2f00      	cmp	r7, #0
 802073e:	d061      	beq.n	8020804 <__aeabi_fadd+0xf4>
 8020740:	2dff      	cmp	r5, #255	; 0xff
 8020742:	d100      	bne.n	8020746 <__aeabi_fadd+0x36>
 8020744:	e0ad      	b.n	80208a2 <__aeabi_fadd+0x192>
 8020746:	2380      	movs	r3, #128	; 0x80
 8020748:	04db      	lsls	r3, r3, #19
 802074a:	431e      	orrs	r6, r3
 802074c:	2a1b      	cmp	r2, #27
 802074e:	dc00      	bgt.n	8020752 <__aeabi_fadd+0x42>
 8020750:	e0d3      	b.n	80208fa <__aeabi_fadd+0x1ea>
 8020752:	2001      	movs	r0, #1
 8020754:	4643      	mov	r3, r8
 8020756:	1a18      	subs	r0, r3, r0
 8020758:	0143      	lsls	r3, r0, #5
 802075a:	d400      	bmi.n	802075e <__aeabi_fadd+0x4e>
 802075c:	e08c      	b.n	8020878 <__aeabi_fadd+0x168>
 802075e:	0180      	lsls	r0, r0, #6
 8020760:	0987      	lsrs	r7, r0, #6
 8020762:	0038      	movs	r0, r7
 8020764:	f7ff fe84 	bl	8020470 <__clzsi2>
 8020768:	3805      	subs	r0, #5
 802076a:	4087      	lsls	r7, r0
 802076c:	4285      	cmp	r5, r0
 802076e:	dc00      	bgt.n	8020772 <__aeabi_fadd+0x62>
 8020770:	e0b6      	b.n	80208e0 <__aeabi_fadd+0x1d0>
 8020772:	1a2d      	subs	r5, r5, r0
 8020774:	48b3      	ldr	r0, [pc, #716]	; (8020a44 <__aeabi_fadd+0x334>)
 8020776:	4038      	ands	r0, r7
 8020778:	0743      	lsls	r3, r0, #29
 802077a:	d004      	beq.n	8020786 <__aeabi_fadd+0x76>
 802077c:	230f      	movs	r3, #15
 802077e:	4003      	ands	r3, r0
 8020780:	2b04      	cmp	r3, #4
 8020782:	d000      	beq.n	8020786 <__aeabi_fadd+0x76>
 8020784:	3004      	adds	r0, #4
 8020786:	0143      	lsls	r3, r0, #5
 8020788:	d400      	bmi.n	802078c <__aeabi_fadd+0x7c>
 802078a:	e078      	b.n	802087e <__aeabi_fadd+0x16e>
 802078c:	1c6a      	adds	r2, r5, #1
 802078e:	2dfe      	cmp	r5, #254	; 0xfe
 8020790:	d065      	beq.n	802085e <__aeabi_fadd+0x14e>
 8020792:	0180      	lsls	r0, r0, #6
 8020794:	0a43      	lsrs	r3, r0, #9
 8020796:	469c      	mov	ip, r3
 8020798:	b2d2      	uxtb	r2, r2
 802079a:	4663      	mov	r3, ip
 802079c:	05d0      	lsls	r0, r2, #23
 802079e:	4318      	orrs	r0, r3
 80207a0:	07e4      	lsls	r4, r4, #31
 80207a2:	4320      	orrs	r0, r4
 80207a4:	bc80      	pop	{r7}
 80207a6:	46b8      	mov	r8, r7
 80207a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80207aa:	2a00      	cmp	r2, #0
 80207ac:	d035      	beq.n	802081a <__aeabi_fadd+0x10a>
 80207ae:	1b7a      	subs	r2, r7, r5
 80207b0:	2d00      	cmp	r5, #0
 80207b2:	d000      	beq.n	80207b6 <__aeabi_fadd+0xa6>
 80207b4:	e0af      	b.n	8020916 <__aeabi_fadd+0x206>
 80207b6:	4643      	mov	r3, r8
 80207b8:	2b00      	cmp	r3, #0
 80207ba:	d100      	bne.n	80207be <__aeabi_fadd+0xae>
 80207bc:	e0a7      	b.n	802090e <__aeabi_fadd+0x1fe>
 80207be:	1e53      	subs	r3, r2, #1
 80207c0:	2a01      	cmp	r2, #1
 80207c2:	d100      	bne.n	80207c6 <__aeabi_fadd+0xb6>
 80207c4:	e12f      	b.n	8020a26 <__aeabi_fadd+0x316>
 80207c6:	2aff      	cmp	r2, #255	; 0xff
 80207c8:	d069      	beq.n	802089e <__aeabi_fadd+0x18e>
 80207ca:	001a      	movs	r2, r3
 80207cc:	e0aa      	b.n	8020924 <__aeabi_fadd+0x214>
 80207ce:	1be9      	subs	r1, r5, r7
 80207d0:	2900      	cmp	r1, #0
 80207d2:	dd70      	ble.n	80208b6 <__aeabi_fadd+0x1a6>
 80207d4:	2f00      	cmp	r7, #0
 80207d6:	d037      	beq.n	8020848 <__aeabi_fadd+0x138>
 80207d8:	2dff      	cmp	r5, #255	; 0xff
 80207da:	d062      	beq.n	80208a2 <__aeabi_fadd+0x192>
 80207dc:	2380      	movs	r3, #128	; 0x80
 80207de:	04db      	lsls	r3, r3, #19
 80207e0:	431e      	orrs	r6, r3
 80207e2:	291b      	cmp	r1, #27
 80207e4:	dc00      	bgt.n	80207e8 <__aeabi_fadd+0xd8>
 80207e6:	e0b0      	b.n	802094a <__aeabi_fadd+0x23a>
 80207e8:	2001      	movs	r0, #1
 80207ea:	4440      	add	r0, r8
 80207ec:	0143      	lsls	r3, r0, #5
 80207ee:	d543      	bpl.n	8020878 <__aeabi_fadd+0x168>
 80207f0:	3501      	adds	r5, #1
 80207f2:	2dff      	cmp	r5, #255	; 0xff
 80207f4:	d033      	beq.n	802085e <__aeabi_fadd+0x14e>
 80207f6:	2301      	movs	r3, #1
 80207f8:	4a93      	ldr	r2, [pc, #588]	; (8020a48 <__aeabi_fadd+0x338>)
 80207fa:	4003      	ands	r3, r0
 80207fc:	0840      	lsrs	r0, r0, #1
 80207fe:	4010      	ands	r0, r2
 8020800:	4318      	orrs	r0, r3
 8020802:	e7b9      	b.n	8020778 <__aeabi_fadd+0x68>
 8020804:	2e00      	cmp	r6, #0
 8020806:	d100      	bne.n	802080a <__aeabi_fadd+0xfa>
 8020808:	e083      	b.n	8020912 <__aeabi_fadd+0x202>
 802080a:	1e51      	subs	r1, r2, #1
 802080c:	2a01      	cmp	r2, #1
 802080e:	d100      	bne.n	8020812 <__aeabi_fadd+0x102>
 8020810:	e0d8      	b.n	80209c4 <__aeabi_fadd+0x2b4>
 8020812:	2aff      	cmp	r2, #255	; 0xff
 8020814:	d045      	beq.n	80208a2 <__aeabi_fadd+0x192>
 8020816:	000a      	movs	r2, r1
 8020818:	e798      	b.n	802074c <__aeabi_fadd+0x3c>
 802081a:	27fe      	movs	r7, #254	; 0xfe
 802081c:	1c6a      	adds	r2, r5, #1
 802081e:	4217      	tst	r7, r2
 8020820:	d000      	beq.n	8020824 <__aeabi_fadd+0x114>
 8020822:	e086      	b.n	8020932 <__aeabi_fadd+0x222>
 8020824:	2d00      	cmp	r5, #0
 8020826:	d000      	beq.n	802082a <__aeabi_fadd+0x11a>
 8020828:	e0b7      	b.n	802099a <__aeabi_fadd+0x28a>
 802082a:	4643      	mov	r3, r8
 802082c:	2b00      	cmp	r3, #0
 802082e:	d100      	bne.n	8020832 <__aeabi_fadd+0x122>
 8020830:	e0f3      	b.n	8020a1a <__aeabi_fadd+0x30a>
 8020832:	2200      	movs	r2, #0
 8020834:	2e00      	cmp	r6, #0
 8020836:	d0b0      	beq.n	802079a <__aeabi_fadd+0x8a>
 8020838:	1b98      	subs	r0, r3, r6
 802083a:	0143      	lsls	r3, r0, #5
 802083c:	d400      	bmi.n	8020840 <__aeabi_fadd+0x130>
 802083e:	e0fa      	b.n	8020a36 <__aeabi_fadd+0x326>
 8020840:	4643      	mov	r3, r8
 8020842:	000c      	movs	r4, r1
 8020844:	1af0      	subs	r0, r6, r3
 8020846:	e797      	b.n	8020778 <__aeabi_fadd+0x68>
 8020848:	2e00      	cmp	r6, #0
 802084a:	d100      	bne.n	802084e <__aeabi_fadd+0x13e>
 802084c:	e0c8      	b.n	80209e0 <__aeabi_fadd+0x2d0>
 802084e:	1e4a      	subs	r2, r1, #1
 8020850:	2901      	cmp	r1, #1
 8020852:	d100      	bne.n	8020856 <__aeabi_fadd+0x146>
 8020854:	e0ae      	b.n	80209b4 <__aeabi_fadd+0x2a4>
 8020856:	29ff      	cmp	r1, #255	; 0xff
 8020858:	d023      	beq.n	80208a2 <__aeabi_fadd+0x192>
 802085a:	0011      	movs	r1, r2
 802085c:	e7c1      	b.n	80207e2 <__aeabi_fadd+0xd2>
 802085e:	2300      	movs	r3, #0
 8020860:	22ff      	movs	r2, #255	; 0xff
 8020862:	469c      	mov	ip, r3
 8020864:	e799      	b.n	802079a <__aeabi_fadd+0x8a>
 8020866:	21fe      	movs	r1, #254	; 0xfe
 8020868:	1c6a      	adds	r2, r5, #1
 802086a:	4211      	tst	r1, r2
 802086c:	d077      	beq.n	802095e <__aeabi_fadd+0x24e>
 802086e:	2aff      	cmp	r2, #255	; 0xff
 8020870:	d0f5      	beq.n	802085e <__aeabi_fadd+0x14e>
 8020872:	0015      	movs	r5, r2
 8020874:	4446      	add	r6, r8
 8020876:	0870      	lsrs	r0, r6, #1
 8020878:	0743      	lsls	r3, r0, #29
 802087a:	d000      	beq.n	802087e <__aeabi_fadd+0x16e>
 802087c:	e77e      	b.n	802077c <__aeabi_fadd+0x6c>
 802087e:	08c3      	lsrs	r3, r0, #3
 8020880:	2dff      	cmp	r5, #255	; 0xff
 8020882:	d00e      	beq.n	80208a2 <__aeabi_fadd+0x192>
 8020884:	025b      	lsls	r3, r3, #9
 8020886:	0a5b      	lsrs	r3, r3, #9
 8020888:	469c      	mov	ip, r3
 802088a:	b2ea      	uxtb	r2, r5
 802088c:	e785      	b.n	802079a <__aeabi_fadd+0x8a>
 802088e:	2e00      	cmp	r6, #0
 8020890:	d007      	beq.n	80208a2 <__aeabi_fadd+0x192>
 8020892:	2280      	movs	r2, #128	; 0x80
 8020894:	03d2      	lsls	r2, r2, #15
 8020896:	4213      	tst	r3, r2
 8020898:	d003      	beq.n	80208a2 <__aeabi_fadd+0x192>
 802089a:	4210      	tst	r0, r2
 802089c:	d101      	bne.n	80208a2 <__aeabi_fadd+0x192>
 802089e:	000c      	movs	r4, r1
 80208a0:	0003      	movs	r3, r0
 80208a2:	2b00      	cmp	r3, #0
 80208a4:	d0db      	beq.n	802085e <__aeabi_fadd+0x14e>
 80208a6:	2080      	movs	r0, #128	; 0x80
 80208a8:	03c0      	lsls	r0, r0, #15
 80208aa:	4318      	orrs	r0, r3
 80208ac:	0240      	lsls	r0, r0, #9
 80208ae:	0a43      	lsrs	r3, r0, #9
 80208b0:	469c      	mov	ip, r3
 80208b2:	22ff      	movs	r2, #255	; 0xff
 80208b4:	e771      	b.n	802079a <__aeabi_fadd+0x8a>
 80208b6:	2900      	cmp	r1, #0
 80208b8:	d0d5      	beq.n	8020866 <__aeabi_fadd+0x156>
 80208ba:	1b7a      	subs	r2, r7, r5
 80208bc:	2d00      	cmp	r5, #0
 80208be:	d160      	bne.n	8020982 <__aeabi_fadd+0x272>
 80208c0:	4643      	mov	r3, r8
 80208c2:	2b00      	cmp	r3, #0
 80208c4:	d024      	beq.n	8020910 <__aeabi_fadd+0x200>
 80208c6:	1e53      	subs	r3, r2, #1
 80208c8:	2a01      	cmp	r2, #1
 80208ca:	d073      	beq.n	80209b4 <__aeabi_fadd+0x2a4>
 80208cc:	2aff      	cmp	r2, #255	; 0xff
 80208ce:	d0e7      	beq.n	80208a0 <__aeabi_fadd+0x190>
 80208d0:	001a      	movs	r2, r3
 80208d2:	2a1b      	cmp	r2, #27
 80208d4:	dc00      	bgt.n	80208d8 <__aeabi_fadd+0x1c8>
 80208d6:	e085      	b.n	80209e4 <__aeabi_fadd+0x2d4>
 80208d8:	2001      	movs	r0, #1
 80208da:	003d      	movs	r5, r7
 80208dc:	1980      	adds	r0, r0, r6
 80208de:	e785      	b.n	80207ec <__aeabi_fadd+0xdc>
 80208e0:	2320      	movs	r3, #32
 80208e2:	003a      	movs	r2, r7
 80208e4:	1b45      	subs	r5, r0, r5
 80208e6:	0038      	movs	r0, r7
 80208e8:	3501      	adds	r5, #1
 80208ea:	40ea      	lsrs	r2, r5
 80208ec:	1b5d      	subs	r5, r3, r5
 80208ee:	40a8      	lsls	r0, r5
 80208f0:	1e43      	subs	r3, r0, #1
 80208f2:	4198      	sbcs	r0, r3
 80208f4:	2500      	movs	r5, #0
 80208f6:	4310      	orrs	r0, r2
 80208f8:	e73e      	b.n	8020778 <__aeabi_fadd+0x68>
 80208fa:	2320      	movs	r3, #32
 80208fc:	0030      	movs	r0, r6
 80208fe:	1a9b      	subs	r3, r3, r2
 8020900:	0031      	movs	r1, r6
 8020902:	4098      	lsls	r0, r3
 8020904:	40d1      	lsrs	r1, r2
 8020906:	1e43      	subs	r3, r0, #1
 8020908:	4198      	sbcs	r0, r3
 802090a:	4308      	orrs	r0, r1
 802090c:	e722      	b.n	8020754 <__aeabi_fadd+0x44>
 802090e:	000c      	movs	r4, r1
 8020910:	0003      	movs	r3, r0
 8020912:	0015      	movs	r5, r2
 8020914:	e7b4      	b.n	8020880 <__aeabi_fadd+0x170>
 8020916:	2fff      	cmp	r7, #255	; 0xff
 8020918:	d0c1      	beq.n	802089e <__aeabi_fadd+0x18e>
 802091a:	2380      	movs	r3, #128	; 0x80
 802091c:	4640      	mov	r0, r8
 802091e:	04db      	lsls	r3, r3, #19
 8020920:	4318      	orrs	r0, r3
 8020922:	4680      	mov	r8, r0
 8020924:	2a1b      	cmp	r2, #27
 8020926:	dd51      	ble.n	80209cc <__aeabi_fadd+0x2bc>
 8020928:	2001      	movs	r0, #1
 802092a:	000c      	movs	r4, r1
 802092c:	003d      	movs	r5, r7
 802092e:	1a30      	subs	r0, r6, r0
 8020930:	e712      	b.n	8020758 <__aeabi_fadd+0x48>
 8020932:	4643      	mov	r3, r8
 8020934:	1b9f      	subs	r7, r3, r6
 8020936:	017b      	lsls	r3, r7, #5
 8020938:	d42b      	bmi.n	8020992 <__aeabi_fadd+0x282>
 802093a:	2f00      	cmp	r7, #0
 802093c:	d000      	beq.n	8020940 <__aeabi_fadd+0x230>
 802093e:	e710      	b.n	8020762 <__aeabi_fadd+0x52>
 8020940:	2300      	movs	r3, #0
 8020942:	2400      	movs	r4, #0
 8020944:	2200      	movs	r2, #0
 8020946:	469c      	mov	ip, r3
 8020948:	e727      	b.n	802079a <__aeabi_fadd+0x8a>
 802094a:	2320      	movs	r3, #32
 802094c:	0032      	movs	r2, r6
 802094e:	0030      	movs	r0, r6
 8020950:	40ca      	lsrs	r2, r1
 8020952:	1a59      	subs	r1, r3, r1
 8020954:	4088      	lsls	r0, r1
 8020956:	1e43      	subs	r3, r0, #1
 8020958:	4198      	sbcs	r0, r3
 802095a:	4310      	orrs	r0, r2
 802095c:	e745      	b.n	80207ea <__aeabi_fadd+0xda>
 802095e:	2d00      	cmp	r5, #0
 8020960:	d14a      	bne.n	80209f8 <__aeabi_fadd+0x2e8>
 8020962:	4643      	mov	r3, r8
 8020964:	2b00      	cmp	r3, #0
 8020966:	d063      	beq.n	8020a30 <__aeabi_fadd+0x320>
 8020968:	2200      	movs	r2, #0
 802096a:	2e00      	cmp	r6, #0
 802096c:	d100      	bne.n	8020970 <__aeabi_fadd+0x260>
 802096e:	e714      	b.n	802079a <__aeabi_fadd+0x8a>
 8020970:	0030      	movs	r0, r6
 8020972:	4440      	add	r0, r8
 8020974:	0143      	lsls	r3, r0, #5
 8020976:	d400      	bmi.n	802097a <__aeabi_fadd+0x26a>
 8020978:	e77e      	b.n	8020878 <__aeabi_fadd+0x168>
 802097a:	4b32      	ldr	r3, [pc, #200]	; (8020a44 <__aeabi_fadd+0x334>)
 802097c:	3501      	adds	r5, #1
 802097e:	4018      	ands	r0, r3
 8020980:	e77a      	b.n	8020878 <__aeabi_fadd+0x168>
 8020982:	2fff      	cmp	r7, #255	; 0xff
 8020984:	d08c      	beq.n	80208a0 <__aeabi_fadd+0x190>
 8020986:	2380      	movs	r3, #128	; 0x80
 8020988:	4641      	mov	r1, r8
 802098a:	04db      	lsls	r3, r3, #19
 802098c:	4319      	orrs	r1, r3
 802098e:	4688      	mov	r8, r1
 8020990:	e79f      	b.n	80208d2 <__aeabi_fadd+0x1c2>
 8020992:	4643      	mov	r3, r8
 8020994:	000c      	movs	r4, r1
 8020996:	1af7      	subs	r7, r6, r3
 8020998:	e6e3      	b.n	8020762 <__aeabi_fadd+0x52>
 802099a:	4642      	mov	r2, r8
 802099c:	2a00      	cmp	r2, #0
 802099e:	d000      	beq.n	80209a2 <__aeabi_fadd+0x292>
 80209a0:	e775      	b.n	802088e <__aeabi_fadd+0x17e>
 80209a2:	2e00      	cmp	r6, #0
 80209a4:	d000      	beq.n	80209a8 <__aeabi_fadd+0x298>
 80209a6:	e77a      	b.n	802089e <__aeabi_fadd+0x18e>
 80209a8:	2380      	movs	r3, #128	; 0x80
 80209aa:	03db      	lsls	r3, r3, #15
 80209ac:	2400      	movs	r4, #0
 80209ae:	469c      	mov	ip, r3
 80209b0:	22ff      	movs	r2, #255	; 0xff
 80209b2:	e6f2      	b.n	802079a <__aeabi_fadd+0x8a>
 80209b4:	0030      	movs	r0, r6
 80209b6:	4440      	add	r0, r8
 80209b8:	2501      	movs	r5, #1
 80209ba:	0143      	lsls	r3, r0, #5
 80209bc:	d400      	bmi.n	80209c0 <__aeabi_fadd+0x2b0>
 80209be:	e75b      	b.n	8020878 <__aeabi_fadd+0x168>
 80209c0:	2502      	movs	r5, #2
 80209c2:	e718      	b.n	80207f6 <__aeabi_fadd+0xe6>
 80209c4:	4643      	mov	r3, r8
 80209c6:	2501      	movs	r5, #1
 80209c8:	1b98      	subs	r0, r3, r6
 80209ca:	e6c5      	b.n	8020758 <__aeabi_fadd+0x48>
 80209cc:	2320      	movs	r3, #32
 80209ce:	4644      	mov	r4, r8
 80209d0:	4640      	mov	r0, r8
 80209d2:	40d4      	lsrs	r4, r2
 80209d4:	1a9a      	subs	r2, r3, r2
 80209d6:	4090      	lsls	r0, r2
 80209d8:	1e43      	subs	r3, r0, #1
 80209da:	4198      	sbcs	r0, r3
 80209dc:	4320      	orrs	r0, r4
 80209de:	e7a4      	b.n	802092a <__aeabi_fadd+0x21a>
 80209e0:	000d      	movs	r5, r1
 80209e2:	e74d      	b.n	8020880 <__aeabi_fadd+0x170>
 80209e4:	2320      	movs	r3, #32
 80209e6:	4641      	mov	r1, r8
 80209e8:	4640      	mov	r0, r8
 80209ea:	40d1      	lsrs	r1, r2
 80209ec:	1a9a      	subs	r2, r3, r2
 80209ee:	4090      	lsls	r0, r2
 80209f0:	1e43      	subs	r3, r0, #1
 80209f2:	4198      	sbcs	r0, r3
 80209f4:	4308      	orrs	r0, r1
 80209f6:	e770      	b.n	80208da <__aeabi_fadd+0x1ca>
 80209f8:	4642      	mov	r2, r8
 80209fa:	2a00      	cmp	r2, #0
 80209fc:	d100      	bne.n	8020a00 <__aeabi_fadd+0x2f0>
 80209fe:	e74f      	b.n	80208a0 <__aeabi_fadd+0x190>
 8020a00:	2e00      	cmp	r6, #0
 8020a02:	d100      	bne.n	8020a06 <__aeabi_fadd+0x2f6>
 8020a04:	e74d      	b.n	80208a2 <__aeabi_fadd+0x192>
 8020a06:	2280      	movs	r2, #128	; 0x80
 8020a08:	03d2      	lsls	r2, r2, #15
 8020a0a:	4213      	tst	r3, r2
 8020a0c:	d100      	bne.n	8020a10 <__aeabi_fadd+0x300>
 8020a0e:	e748      	b.n	80208a2 <__aeabi_fadd+0x192>
 8020a10:	4210      	tst	r0, r2
 8020a12:	d000      	beq.n	8020a16 <__aeabi_fadd+0x306>
 8020a14:	e745      	b.n	80208a2 <__aeabi_fadd+0x192>
 8020a16:	0003      	movs	r3, r0
 8020a18:	e743      	b.n	80208a2 <__aeabi_fadd+0x192>
 8020a1a:	2e00      	cmp	r6, #0
 8020a1c:	d090      	beq.n	8020940 <__aeabi_fadd+0x230>
 8020a1e:	000c      	movs	r4, r1
 8020a20:	4684      	mov	ip, r0
 8020a22:	2200      	movs	r2, #0
 8020a24:	e6b9      	b.n	802079a <__aeabi_fadd+0x8a>
 8020a26:	4643      	mov	r3, r8
 8020a28:	000c      	movs	r4, r1
 8020a2a:	1af0      	subs	r0, r6, r3
 8020a2c:	3501      	adds	r5, #1
 8020a2e:	e693      	b.n	8020758 <__aeabi_fadd+0x48>
 8020a30:	4684      	mov	ip, r0
 8020a32:	2200      	movs	r2, #0
 8020a34:	e6b1      	b.n	802079a <__aeabi_fadd+0x8a>
 8020a36:	2800      	cmp	r0, #0
 8020a38:	d000      	beq.n	8020a3c <__aeabi_fadd+0x32c>
 8020a3a:	e71d      	b.n	8020878 <__aeabi_fadd+0x168>
 8020a3c:	2300      	movs	r3, #0
 8020a3e:	2400      	movs	r4, #0
 8020a40:	469c      	mov	ip, r3
 8020a42:	e6aa      	b.n	802079a <__aeabi_fadd+0x8a>
 8020a44:	fbffffff 	.word	0xfbffffff
 8020a48:	7dffffff 	.word	0x7dffffff

08020a4c <__aeabi_fdiv>:
 8020a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020a4e:	464f      	mov	r7, r9
 8020a50:	4646      	mov	r6, r8
 8020a52:	46d6      	mov	lr, sl
 8020a54:	0245      	lsls	r5, r0, #9
 8020a56:	b5c0      	push	{r6, r7, lr}
 8020a58:	0047      	lsls	r7, r0, #1
 8020a5a:	1c0c      	adds	r4, r1, #0
 8020a5c:	0a6d      	lsrs	r5, r5, #9
 8020a5e:	0e3f      	lsrs	r7, r7, #24
 8020a60:	0fc6      	lsrs	r6, r0, #31
 8020a62:	2f00      	cmp	r7, #0
 8020a64:	d100      	bne.n	8020a68 <__aeabi_fdiv+0x1c>
 8020a66:	e070      	b.n	8020b4a <__aeabi_fdiv+0xfe>
 8020a68:	2fff      	cmp	r7, #255	; 0xff
 8020a6a:	d100      	bne.n	8020a6e <__aeabi_fdiv+0x22>
 8020a6c:	e075      	b.n	8020b5a <__aeabi_fdiv+0x10e>
 8020a6e:	00eb      	lsls	r3, r5, #3
 8020a70:	2580      	movs	r5, #128	; 0x80
 8020a72:	04ed      	lsls	r5, r5, #19
 8020a74:	431d      	orrs	r5, r3
 8020a76:	2300      	movs	r3, #0
 8020a78:	4699      	mov	r9, r3
 8020a7a:	469a      	mov	sl, r3
 8020a7c:	3f7f      	subs	r7, #127	; 0x7f
 8020a7e:	0260      	lsls	r0, r4, #9
 8020a80:	0a43      	lsrs	r3, r0, #9
 8020a82:	4698      	mov	r8, r3
 8020a84:	0063      	lsls	r3, r4, #1
 8020a86:	0e1b      	lsrs	r3, r3, #24
 8020a88:	0fe4      	lsrs	r4, r4, #31
 8020a8a:	2b00      	cmp	r3, #0
 8020a8c:	d04e      	beq.n	8020b2c <__aeabi_fdiv+0xe0>
 8020a8e:	2bff      	cmp	r3, #255	; 0xff
 8020a90:	d046      	beq.n	8020b20 <__aeabi_fdiv+0xd4>
 8020a92:	4642      	mov	r2, r8
 8020a94:	00d0      	lsls	r0, r2, #3
 8020a96:	2280      	movs	r2, #128	; 0x80
 8020a98:	04d2      	lsls	r2, r2, #19
 8020a9a:	4302      	orrs	r2, r0
 8020a9c:	4690      	mov	r8, r2
 8020a9e:	2200      	movs	r2, #0
 8020aa0:	3b7f      	subs	r3, #127	; 0x7f
 8020aa2:	0031      	movs	r1, r6
 8020aa4:	1aff      	subs	r7, r7, r3
 8020aa6:	464b      	mov	r3, r9
 8020aa8:	4061      	eors	r1, r4
 8020aaa:	b2c9      	uxtb	r1, r1
 8020aac:	4313      	orrs	r3, r2
 8020aae:	2b0f      	cmp	r3, #15
 8020ab0:	d900      	bls.n	8020ab4 <__aeabi_fdiv+0x68>
 8020ab2:	e0b5      	b.n	8020c20 <__aeabi_fdiv+0x1d4>
 8020ab4:	486e      	ldr	r0, [pc, #440]	; (8020c70 <__aeabi_fdiv+0x224>)
 8020ab6:	009b      	lsls	r3, r3, #2
 8020ab8:	58c3      	ldr	r3, [r0, r3]
 8020aba:	469f      	mov	pc, r3
 8020abc:	2300      	movs	r3, #0
 8020abe:	4698      	mov	r8, r3
 8020ac0:	0026      	movs	r6, r4
 8020ac2:	4645      	mov	r5, r8
 8020ac4:	4692      	mov	sl, r2
 8020ac6:	4653      	mov	r3, sl
 8020ac8:	2b02      	cmp	r3, #2
 8020aca:	d100      	bne.n	8020ace <__aeabi_fdiv+0x82>
 8020acc:	e089      	b.n	8020be2 <__aeabi_fdiv+0x196>
 8020ace:	2b03      	cmp	r3, #3
 8020ad0:	d100      	bne.n	8020ad4 <__aeabi_fdiv+0x88>
 8020ad2:	e09e      	b.n	8020c12 <__aeabi_fdiv+0x1c6>
 8020ad4:	2b01      	cmp	r3, #1
 8020ad6:	d018      	beq.n	8020b0a <__aeabi_fdiv+0xbe>
 8020ad8:	003b      	movs	r3, r7
 8020ada:	337f      	adds	r3, #127	; 0x7f
 8020adc:	2b00      	cmp	r3, #0
 8020ade:	dd69      	ble.n	8020bb4 <__aeabi_fdiv+0x168>
 8020ae0:	076a      	lsls	r2, r5, #29
 8020ae2:	d004      	beq.n	8020aee <__aeabi_fdiv+0xa2>
 8020ae4:	220f      	movs	r2, #15
 8020ae6:	402a      	ands	r2, r5
 8020ae8:	2a04      	cmp	r2, #4
 8020aea:	d000      	beq.n	8020aee <__aeabi_fdiv+0xa2>
 8020aec:	3504      	adds	r5, #4
 8020aee:	012a      	lsls	r2, r5, #4
 8020af0:	d503      	bpl.n	8020afa <__aeabi_fdiv+0xae>
 8020af2:	4b60      	ldr	r3, [pc, #384]	; (8020c74 <__aeabi_fdiv+0x228>)
 8020af4:	401d      	ands	r5, r3
 8020af6:	003b      	movs	r3, r7
 8020af8:	3380      	adds	r3, #128	; 0x80
 8020afa:	2bfe      	cmp	r3, #254	; 0xfe
 8020afc:	dd00      	ble.n	8020b00 <__aeabi_fdiv+0xb4>
 8020afe:	e070      	b.n	8020be2 <__aeabi_fdiv+0x196>
 8020b00:	01ad      	lsls	r5, r5, #6
 8020b02:	0a6d      	lsrs	r5, r5, #9
 8020b04:	b2d8      	uxtb	r0, r3
 8020b06:	e002      	b.n	8020b0e <__aeabi_fdiv+0xc2>
 8020b08:	000e      	movs	r6, r1
 8020b0a:	2000      	movs	r0, #0
 8020b0c:	2500      	movs	r5, #0
 8020b0e:	05c0      	lsls	r0, r0, #23
 8020b10:	4328      	orrs	r0, r5
 8020b12:	07f6      	lsls	r6, r6, #31
 8020b14:	4330      	orrs	r0, r6
 8020b16:	bce0      	pop	{r5, r6, r7}
 8020b18:	46ba      	mov	sl, r7
 8020b1a:	46b1      	mov	r9, r6
 8020b1c:	46a8      	mov	r8, r5
 8020b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020b20:	4643      	mov	r3, r8
 8020b22:	2b00      	cmp	r3, #0
 8020b24:	d13f      	bne.n	8020ba6 <__aeabi_fdiv+0x15a>
 8020b26:	2202      	movs	r2, #2
 8020b28:	3fff      	subs	r7, #255	; 0xff
 8020b2a:	e003      	b.n	8020b34 <__aeabi_fdiv+0xe8>
 8020b2c:	4643      	mov	r3, r8
 8020b2e:	2b00      	cmp	r3, #0
 8020b30:	d12d      	bne.n	8020b8e <__aeabi_fdiv+0x142>
 8020b32:	2201      	movs	r2, #1
 8020b34:	0031      	movs	r1, r6
 8020b36:	464b      	mov	r3, r9
 8020b38:	4061      	eors	r1, r4
 8020b3a:	b2c9      	uxtb	r1, r1
 8020b3c:	4313      	orrs	r3, r2
 8020b3e:	2b0f      	cmp	r3, #15
 8020b40:	d834      	bhi.n	8020bac <__aeabi_fdiv+0x160>
 8020b42:	484d      	ldr	r0, [pc, #308]	; (8020c78 <__aeabi_fdiv+0x22c>)
 8020b44:	009b      	lsls	r3, r3, #2
 8020b46:	58c3      	ldr	r3, [r0, r3]
 8020b48:	469f      	mov	pc, r3
 8020b4a:	2d00      	cmp	r5, #0
 8020b4c:	d113      	bne.n	8020b76 <__aeabi_fdiv+0x12a>
 8020b4e:	2304      	movs	r3, #4
 8020b50:	4699      	mov	r9, r3
 8020b52:	3b03      	subs	r3, #3
 8020b54:	2700      	movs	r7, #0
 8020b56:	469a      	mov	sl, r3
 8020b58:	e791      	b.n	8020a7e <__aeabi_fdiv+0x32>
 8020b5a:	2d00      	cmp	r5, #0
 8020b5c:	d105      	bne.n	8020b6a <__aeabi_fdiv+0x11e>
 8020b5e:	2308      	movs	r3, #8
 8020b60:	4699      	mov	r9, r3
 8020b62:	3b06      	subs	r3, #6
 8020b64:	27ff      	movs	r7, #255	; 0xff
 8020b66:	469a      	mov	sl, r3
 8020b68:	e789      	b.n	8020a7e <__aeabi_fdiv+0x32>
 8020b6a:	230c      	movs	r3, #12
 8020b6c:	4699      	mov	r9, r3
 8020b6e:	3b09      	subs	r3, #9
 8020b70:	27ff      	movs	r7, #255	; 0xff
 8020b72:	469a      	mov	sl, r3
 8020b74:	e783      	b.n	8020a7e <__aeabi_fdiv+0x32>
 8020b76:	0028      	movs	r0, r5
 8020b78:	f7ff fc7a 	bl	8020470 <__clzsi2>
 8020b7c:	2776      	movs	r7, #118	; 0x76
 8020b7e:	1f43      	subs	r3, r0, #5
 8020b80:	409d      	lsls	r5, r3
 8020b82:	2300      	movs	r3, #0
 8020b84:	427f      	negs	r7, r7
 8020b86:	4699      	mov	r9, r3
 8020b88:	469a      	mov	sl, r3
 8020b8a:	1a3f      	subs	r7, r7, r0
 8020b8c:	e777      	b.n	8020a7e <__aeabi_fdiv+0x32>
 8020b8e:	4640      	mov	r0, r8
 8020b90:	f7ff fc6e 	bl	8020470 <__clzsi2>
 8020b94:	4642      	mov	r2, r8
 8020b96:	1f43      	subs	r3, r0, #5
 8020b98:	409a      	lsls	r2, r3
 8020b9a:	2376      	movs	r3, #118	; 0x76
 8020b9c:	425b      	negs	r3, r3
 8020b9e:	4690      	mov	r8, r2
 8020ba0:	1a1b      	subs	r3, r3, r0
 8020ba2:	2200      	movs	r2, #0
 8020ba4:	e77d      	b.n	8020aa2 <__aeabi_fdiv+0x56>
 8020ba6:	23ff      	movs	r3, #255	; 0xff
 8020ba8:	2203      	movs	r2, #3
 8020baa:	e77a      	b.n	8020aa2 <__aeabi_fdiv+0x56>
 8020bac:	000e      	movs	r6, r1
 8020bae:	20ff      	movs	r0, #255	; 0xff
 8020bb0:	2500      	movs	r5, #0
 8020bb2:	e7ac      	b.n	8020b0e <__aeabi_fdiv+0xc2>
 8020bb4:	2001      	movs	r0, #1
 8020bb6:	1ac0      	subs	r0, r0, r3
 8020bb8:	281b      	cmp	r0, #27
 8020bba:	dca6      	bgt.n	8020b0a <__aeabi_fdiv+0xbe>
 8020bbc:	379e      	adds	r7, #158	; 0x9e
 8020bbe:	002a      	movs	r2, r5
 8020bc0:	40bd      	lsls	r5, r7
 8020bc2:	40c2      	lsrs	r2, r0
 8020bc4:	1e6b      	subs	r3, r5, #1
 8020bc6:	419d      	sbcs	r5, r3
 8020bc8:	4315      	orrs	r5, r2
 8020bca:	076b      	lsls	r3, r5, #29
 8020bcc:	d004      	beq.n	8020bd8 <__aeabi_fdiv+0x18c>
 8020bce:	230f      	movs	r3, #15
 8020bd0:	402b      	ands	r3, r5
 8020bd2:	2b04      	cmp	r3, #4
 8020bd4:	d000      	beq.n	8020bd8 <__aeabi_fdiv+0x18c>
 8020bd6:	3504      	adds	r5, #4
 8020bd8:	016b      	lsls	r3, r5, #5
 8020bda:	d544      	bpl.n	8020c66 <__aeabi_fdiv+0x21a>
 8020bdc:	2001      	movs	r0, #1
 8020bde:	2500      	movs	r5, #0
 8020be0:	e795      	b.n	8020b0e <__aeabi_fdiv+0xc2>
 8020be2:	20ff      	movs	r0, #255	; 0xff
 8020be4:	2500      	movs	r5, #0
 8020be6:	e792      	b.n	8020b0e <__aeabi_fdiv+0xc2>
 8020be8:	2580      	movs	r5, #128	; 0x80
 8020bea:	2600      	movs	r6, #0
 8020bec:	20ff      	movs	r0, #255	; 0xff
 8020bee:	03ed      	lsls	r5, r5, #15
 8020bf0:	e78d      	b.n	8020b0e <__aeabi_fdiv+0xc2>
 8020bf2:	2300      	movs	r3, #0
 8020bf4:	4698      	mov	r8, r3
 8020bf6:	2080      	movs	r0, #128	; 0x80
 8020bf8:	03c0      	lsls	r0, r0, #15
 8020bfa:	4205      	tst	r5, r0
 8020bfc:	d009      	beq.n	8020c12 <__aeabi_fdiv+0x1c6>
 8020bfe:	4643      	mov	r3, r8
 8020c00:	4203      	tst	r3, r0
 8020c02:	d106      	bne.n	8020c12 <__aeabi_fdiv+0x1c6>
 8020c04:	4645      	mov	r5, r8
 8020c06:	4305      	orrs	r5, r0
 8020c08:	026d      	lsls	r5, r5, #9
 8020c0a:	0026      	movs	r6, r4
 8020c0c:	20ff      	movs	r0, #255	; 0xff
 8020c0e:	0a6d      	lsrs	r5, r5, #9
 8020c10:	e77d      	b.n	8020b0e <__aeabi_fdiv+0xc2>
 8020c12:	2080      	movs	r0, #128	; 0x80
 8020c14:	03c0      	lsls	r0, r0, #15
 8020c16:	4305      	orrs	r5, r0
 8020c18:	026d      	lsls	r5, r5, #9
 8020c1a:	20ff      	movs	r0, #255	; 0xff
 8020c1c:	0a6d      	lsrs	r5, r5, #9
 8020c1e:	e776      	b.n	8020b0e <__aeabi_fdiv+0xc2>
 8020c20:	4642      	mov	r2, r8
 8020c22:	016b      	lsls	r3, r5, #5
 8020c24:	0150      	lsls	r0, r2, #5
 8020c26:	4283      	cmp	r3, r0
 8020c28:	d219      	bcs.n	8020c5e <__aeabi_fdiv+0x212>
 8020c2a:	221b      	movs	r2, #27
 8020c2c:	2500      	movs	r5, #0
 8020c2e:	3f01      	subs	r7, #1
 8020c30:	2601      	movs	r6, #1
 8020c32:	001c      	movs	r4, r3
 8020c34:	006d      	lsls	r5, r5, #1
 8020c36:	005b      	lsls	r3, r3, #1
 8020c38:	2c00      	cmp	r4, #0
 8020c3a:	db01      	blt.n	8020c40 <__aeabi_fdiv+0x1f4>
 8020c3c:	4298      	cmp	r0, r3
 8020c3e:	d801      	bhi.n	8020c44 <__aeabi_fdiv+0x1f8>
 8020c40:	1a1b      	subs	r3, r3, r0
 8020c42:	4335      	orrs	r5, r6
 8020c44:	3a01      	subs	r2, #1
 8020c46:	2a00      	cmp	r2, #0
 8020c48:	d1f3      	bne.n	8020c32 <__aeabi_fdiv+0x1e6>
 8020c4a:	1e5a      	subs	r2, r3, #1
 8020c4c:	4193      	sbcs	r3, r2
 8020c4e:	431d      	orrs	r5, r3
 8020c50:	003b      	movs	r3, r7
 8020c52:	337f      	adds	r3, #127	; 0x7f
 8020c54:	000e      	movs	r6, r1
 8020c56:	2b00      	cmp	r3, #0
 8020c58:	dd00      	ble.n	8020c5c <__aeabi_fdiv+0x210>
 8020c5a:	e741      	b.n	8020ae0 <__aeabi_fdiv+0x94>
 8020c5c:	e7aa      	b.n	8020bb4 <__aeabi_fdiv+0x168>
 8020c5e:	221a      	movs	r2, #26
 8020c60:	2501      	movs	r5, #1
 8020c62:	1a1b      	subs	r3, r3, r0
 8020c64:	e7e4      	b.n	8020c30 <__aeabi_fdiv+0x1e4>
 8020c66:	01ad      	lsls	r5, r5, #6
 8020c68:	2000      	movs	r0, #0
 8020c6a:	0a6d      	lsrs	r5, r5, #9
 8020c6c:	e74f      	b.n	8020b0e <__aeabi_fdiv+0xc2>
 8020c6e:	46c0      	nop			; (mov r8, r8)
 8020c70:	08031214 	.word	0x08031214
 8020c74:	f7ffffff 	.word	0xf7ffffff
 8020c78:	08031254 	.word	0x08031254

08020c7c <__eqsf2>:
 8020c7c:	b570      	push	{r4, r5, r6, lr}
 8020c7e:	0042      	lsls	r2, r0, #1
 8020c80:	0245      	lsls	r5, r0, #9
 8020c82:	024e      	lsls	r6, r1, #9
 8020c84:	004c      	lsls	r4, r1, #1
 8020c86:	0fc3      	lsrs	r3, r0, #31
 8020c88:	0a6d      	lsrs	r5, r5, #9
 8020c8a:	2001      	movs	r0, #1
 8020c8c:	0e12      	lsrs	r2, r2, #24
 8020c8e:	0a76      	lsrs	r6, r6, #9
 8020c90:	0e24      	lsrs	r4, r4, #24
 8020c92:	0fc9      	lsrs	r1, r1, #31
 8020c94:	2aff      	cmp	r2, #255	; 0xff
 8020c96:	d006      	beq.n	8020ca6 <__eqsf2+0x2a>
 8020c98:	2cff      	cmp	r4, #255	; 0xff
 8020c9a:	d003      	beq.n	8020ca4 <__eqsf2+0x28>
 8020c9c:	42a2      	cmp	r2, r4
 8020c9e:	d101      	bne.n	8020ca4 <__eqsf2+0x28>
 8020ca0:	42b5      	cmp	r5, r6
 8020ca2:	d006      	beq.n	8020cb2 <__eqsf2+0x36>
 8020ca4:	bd70      	pop	{r4, r5, r6, pc}
 8020ca6:	2d00      	cmp	r5, #0
 8020ca8:	d1fc      	bne.n	8020ca4 <__eqsf2+0x28>
 8020caa:	2cff      	cmp	r4, #255	; 0xff
 8020cac:	d1fa      	bne.n	8020ca4 <__eqsf2+0x28>
 8020cae:	2e00      	cmp	r6, #0
 8020cb0:	d1f8      	bne.n	8020ca4 <__eqsf2+0x28>
 8020cb2:	428b      	cmp	r3, r1
 8020cb4:	d006      	beq.n	8020cc4 <__eqsf2+0x48>
 8020cb6:	2001      	movs	r0, #1
 8020cb8:	2a00      	cmp	r2, #0
 8020cba:	d1f3      	bne.n	8020ca4 <__eqsf2+0x28>
 8020cbc:	0028      	movs	r0, r5
 8020cbe:	1e43      	subs	r3, r0, #1
 8020cc0:	4198      	sbcs	r0, r3
 8020cc2:	e7ef      	b.n	8020ca4 <__eqsf2+0x28>
 8020cc4:	2000      	movs	r0, #0
 8020cc6:	e7ed      	b.n	8020ca4 <__eqsf2+0x28>

08020cc8 <__gesf2>:
 8020cc8:	b570      	push	{r4, r5, r6, lr}
 8020cca:	0042      	lsls	r2, r0, #1
 8020ccc:	0245      	lsls	r5, r0, #9
 8020cce:	024e      	lsls	r6, r1, #9
 8020cd0:	004c      	lsls	r4, r1, #1
 8020cd2:	0fc3      	lsrs	r3, r0, #31
 8020cd4:	0a6d      	lsrs	r5, r5, #9
 8020cd6:	0e12      	lsrs	r2, r2, #24
 8020cd8:	0a76      	lsrs	r6, r6, #9
 8020cda:	0e24      	lsrs	r4, r4, #24
 8020cdc:	0fc8      	lsrs	r0, r1, #31
 8020cde:	2aff      	cmp	r2, #255	; 0xff
 8020ce0:	d01b      	beq.n	8020d1a <__gesf2+0x52>
 8020ce2:	2cff      	cmp	r4, #255	; 0xff
 8020ce4:	d00e      	beq.n	8020d04 <__gesf2+0x3c>
 8020ce6:	2a00      	cmp	r2, #0
 8020ce8:	d11b      	bne.n	8020d22 <__gesf2+0x5a>
 8020cea:	2c00      	cmp	r4, #0
 8020cec:	d101      	bne.n	8020cf2 <__gesf2+0x2a>
 8020cee:	2e00      	cmp	r6, #0
 8020cf0:	d01c      	beq.n	8020d2c <__gesf2+0x64>
 8020cf2:	2d00      	cmp	r5, #0
 8020cf4:	d00c      	beq.n	8020d10 <__gesf2+0x48>
 8020cf6:	4283      	cmp	r3, r0
 8020cf8:	d01c      	beq.n	8020d34 <__gesf2+0x6c>
 8020cfa:	2102      	movs	r1, #2
 8020cfc:	1e58      	subs	r0, r3, #1
 8020cfe:	4008      	ands	r0, r1
 8020d00:	3801      	subs	r0, #1
 8020d02:	bd70      	pop	{r4, r5, r6, pc}
 8020d04:	2e00      	cmp	r6, #0
 8020d06:	d122      	bne.n	8020d4e <__gesf2+0x86>
 8020d08:	2a00      	cmp	r2, #0
 8020d0a:	d1f4      	bne.n	8020cf6 <__gesf2+0x2e>
 8020d0c:	2d00      	cmp	r5, #0
 8020d0e:	d1f2      	bne.n	8020cf6 <__gesf2+0x2e>
 8020d10:	2800      	cmp	r0, #0
 8020d12:	d1f6      	bne.n	8020d02 <__gesf2+0x3a>
 8020d14:	2001      	movs	r0, #1
 8020d16:	4240      	negs	r0, r0
 8020d18:	e7f3      	b.n	8020d02 <__gesf2+0x3a>
 8020d1a:	2d00      	cmp	r5, #0
 8020d1c:	d117      	bne.n	8020d4e <__gesf2+0x86>
 8020d1e:	2cff      	cmp	r4, #255	; 0xff
 8020d20:	d0f0      	beq.n	8020d04 <__gesf2+0x3c>
 8020d22:	2c00      	cmp	r4, #0
 8020d24:	d1e7      	bne.n	8020cf6 <__gesf2+0x2e>
 8020d26:	2e00      	cmp	r6, #0
 8020d28:	d1e5      	bne.n	8020cf6 <__gesf2+0x2e>
 8020d2a:	e7e6      	b.n	8020cfa <__gesf2+0x32>
 8020d2c:	2000      	movs	r0, #0
 8020d2e:	2d00      	cmp	r5, #0
 8020d30:	d0e7      	beq.n	8020d02 <__gesf2+0x3a>
 8020d32:	e7e2      	b.n	8020cfa <__gesf2+0x32>
 8020d34:	42a2      	cmp	r2, r4
 8020d36:	dc05      	bgt.n	8020d44 <__gesf2+0x7c>
 8020d38:	dbea      	blt.n	8020d10 <__gesf2+0x48>
 8020d3a:	42b5      	cmp	r5, r6
 8020d3c:	d802      	bhi.n	8020d44 <__gesf2+0x7c>
 8020d3e:	d3e7      	bcc.n	8020d10 <__gesf2+0x48>
 8020d40:	2000      	movs	r0, #0
 8020d42:	e7de      	b.n	8020d02 <__gesf2+0x3a>
 8020d44:	4243      	negs	r3, r0
 8020d46:	4158      	adcs	r0, r3
 8020d48:	0040      	lsls	r0, r0, #1
 8020d4a:	3801      	subs	r0, #1
 8020d4c:	e7d9      	b.n	8020d02 <__gesf2+0x3a>
 8020d4e:	2002      	movs	r0, #2
 8020d50:	4240      	negs	r0, r0
 8020d52:	e7d6      	b.n	8020d02 <__gesf2+0x3a>

08020d54 <__lesf2>:
 8020d54:	b570      	push	{r4, r5, r6, lr}
 8020d56:	0042      	lsls	r2, r0, #1
 8020d58:	0245      	lsls	r5, r0, #9
 8020d5a:	024e      	lsls	r6, r1, #9
 8020d5c:	004c      	lsls	r4, r1, #1
 8020d5e:	0fc3      	lsrs	r3, r0, #31
 8020d60:	0a6d      	lsrs	r5, r5, #9
 8020d62:	0e12      	lsrs	r2, r2, #24
 8020d64:	0a76      	lsrs	r6, r6, #9
 8020d66:	0e24      	lsrs	r4, r4, #24
 8020d68:	0fc8      	lsrs	r0, r1, #31
 8020d6a:	2aff      	cmp	r2, #255	; 0xff
 8020d6c:	d00b      	beq.n	8020d86 <__lesf2+0x32>
 8020d6e:	2cff      	cmp	r4, #255	; 0xff
 8020d70:	d00d      	beq.n	8020d8e <__lesf2+0x3a>
 8020d72:	2a00      	cmp	r2, #0
 8020d74:	d11f      	bne.n	8020db6 <__lesf2+0x62>
 8020d76:	2c00      	cmp	r4, #0
 8020d78:	d116      	bne.n	8020da8 <__lesf2+0x54>
 8020d7a:	2e00      	cmp	r6, #0
 8020d7c:	d114      	bne.n	8020da8 <__lesf2+0x54>
 8020d7e:	2000      	movs	r0, #0
 8020d80:	2d00      	cmp	r5, #0
 8020d82:	d010      	beq.n	8020da6 <__lesf2+0x52>
 8020d84:	e009      	b.n	8020d9a <__lesf2+0x46>
 8020d86:	2d00      	cmp	r5, #0
 8020d88:	d10c      	bne.n	8020da4 <__lesf2+0x50>
 8020d8a:	2cff      	cmp	r4, #255	; 0xff
 8020d8c:	d113      	bne.n	8020db6 <__lesf2+0x62>
 8020d8e:	2e00      	cmp	r6, #0
 8020d90:	d108      	bne.n	8020da4 <__lesf2+0x50>
 8020d92:	2a00      	cmp	r2, #0
 8020d94:	d008      	beq.n	8020da8 <__lesf2+0x54>
 8020d96:	4283      	cmp	r3, r0
 8020d98:	d012      	beq.n	8020dc0 <__lesf2+0x6c>
 8020d9a:	2102      	movs	r1, #2
 8020d9c:	1e58      	subs	r0, r3, #1
 8020d9e:	4008      	ands	r0, r1
 8020da0:	3801      	subs	r0, #1
 8020da2:	e000      	b.n	8020da6 <__lesf2+0x52>
 8020da4:	2002      	movs	r0, #2
 8020da6:	bd70      	pop	{r4, r5, r6, pc}
 8020da8:	2d00      	cmp	r5, #0
 8020daa:	d1f4      	bne.n	8020d96 <__lesf2+0x42>
 8020dac:	2800      	cmp	r0, #0
 8020dae:	d1fa      	bne.n	8020da6 <__lesf2+0x52>
 8020db0:	2001      	movs	r0, #1
 8020db2:	4240      	negs	r0, r0
 8020db4:	e7f7      	b.n	8020da6 <__lesf2+0x52>
 8020db6:	2c00      	cmp	r4, #0
 8020db8:	d1ed      	bne.n	8020d96 <__lesf2+0x42>
 8020dba:	2e00      	cmp	r6, #0
 8020dbc:	d1eb      	bne.n	8020d96 <__lesf2+0x42>
 8020dbe:	e7ec      	b.n	8020d9a <__lesf2+0x46>
 8020dc0:	42a2      	cmp	r2, r4
 8020dc2:	dc05      	bgt.n	8020dd0 <__lesf2+0x7c>
 8020dc4:	dbf2      	blt.n	8020dac <__lesf2+0x58>
 8020dc6:	42b5      	cmp	r5, r6
 8020dc8:	d802      	bhi.n	8020dd0 <__lesf2+0x7c>
 8020dca:	d3ef      	bcc.n	8020dac <__lesf2+0x58>
 8020dcc:	2000      	movs	r0, #0
 8020dce:	e7ea      	b.n	8020da6 <__lesf2+0x52>
 8020dd0:	4243      	negs	r3, r0
 8020dd2:	4158      	adcs	r0, r3
 8020dd4:	0040      	lsls	r0, r0, #1
 8020dd6:	3801      	subs	r0, #1
 8020dd8:	e7e5      	b.n	8020da6 <__lesf2+0x52>
 8020dda:	46c0      	nop			; (mov r8, r8)

08020ddc <__aeabi_fmul>:
 8020ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020dde:	464f      	mov	r7, r9
 8020de0:	4646      	mov	r6, r8
 8020de2:	46d6      	mov	lr, sl
 8020de4:	0244      	lsls	r4, r0, #9
 8020de6:	0045      	lsls	r5, r0, #1
 8020de8:	b5c0      	push	{r6, r7, lr}
 8020dea:	0a64      	lsrs	r4, r4, #9
 8020dec:	1c0f      	adds	r7, r1, #0
 8020dee:	0e2d      	lsrs	r5, r5, #24
 8020df0:	0fc6      	lsrs	r6, r0, #31
 8020df2:	2d00      	cmp	r5, #0
 8020df4:	d100      	bne.n	8020df8 <__aeabi_fmul+0x1c>
 8020df6:	e08d      	b.n	8020f14 <__aeabi_fmul+0x138>
 8020df8:	2dff      	cmp	r5, #255	; 0xff
 8020dfa:	d100      	bne.n	8020dfe <__aeabi_fmul+0x22>
 8020dfc:	e092      	b.n	8020f24 <__aeabi_fmul+0x148>
 8020dfe:	2300      	movs	r3, #0
 8020e00:	2080      	movs	r0, #128	; 0x80
 8020e02:	4699      	mov	r9, r3
 8020e04:	469a      	mov	sl, r3
 8020e06:	00e4      	lsls	r4, r4, #3
 8020e08:	04c0      	lsls	r0, r0, #19
 8020e0a:	4304      	orrs	r4, r0
 8020e0c:	3d7f      	subs	r5, #127	; 0x7f
 8020e0e:	0278      	lsls	r0, r7, #9
 8020e10:	0a43      	lsrs	r3, r0, #9
 8020e12:	4698      	mov	r8, r3
 8020e14:	007b      	lsls	r3, r7, #1
 8020e16:	0e1b      	lsrs	r3, r3, #24
 8020e18:	0fff      	lsrs	r7, r7, #31
 8020e1a:	2b00      	cmp	r3, #0
 8020e1c:	d100      	bne.n	8020e20 <__aeabi_fmul+0x44>
 8020e1e:	e070      	b.n	8020f02 <__aeabi_fmul+0x126>
 8020e20:	2bff      	cmp	r3, #255	; 0xff
 8020e22:	d100      	bne.n	8020e26 <__aeabi_fmul+0x4a>
 8020e24:	e086      	b.n	8020f34 <__aeabi_fmul+0x158>
 8020e26:	4642      	mov	r2, r8
 8020e28:	00d0      	lsls	r0, r2, #3
 8020e2a:	2280      	movs	r2, #128	; 0x80
 8020e2c:	3b7f      	subs	r3, #127	; 0x7f
 8020e2e:	18ed      	adds	r5, r5, r3
 8020e30:	2300      	movs	r3, #0
 8020e32:	04d2      	lsls	r2, r2, #19
 8020e34:	4302      	orrs	r2, r0
 8020e36:	4690      	mov	r8, r2
 8020e38:	469c      	mov	ip, r3
 8020e3a:	0031      	movs	r1, r6
 8020e3c:	464b      	mov	r3, r9
 8020e3e:	4079      	eors	r1, r7
 8020e40:	1c68      	adds	r0, r5, #1
 8020e42:	2b0f      	cmp	r3, #15
 8020e44:	d81c      	bhi.n	8020e80 <__aeabi_fmul+0xa4>
 8020e46:	4a76      	ldr	r2, [pc, #472]	; (8021020 <__aeabi_fmul+0x244>)
 8020e48:	009b      	lsls	r3, r3, #2
 8020e4a:	58d3      	ldr	r3, [r2, r3]
 8020e4c:	469f      	mov	pc, r3
 8020e4e:	0039      	movs	r1, r7
 8020e50:	4644      	mov	r4, r8
 8020e52:	46e2      	mov	sl, ip
 8020e54:	4653      	mov	r3, sl
 8020e56:	2b02      	cmp	r3, #2
 8020e58:	d00f      	beq.n	8020e7a <__aeabi_fmul+0x9e>
 8020e5a:	2b03      	cmp	r3, #3
 8020e5c:	d100      	bne.n	8020e60 <__aeabi_fmul+0x84>
 8020e5e:	e0d7      	b.n	8021010 <__aeabi_fmul+0x234>
 8020e60:	2b01      	cmp	r3, #1
 8020e62:	d137      	bne.n	8020ed4 <__aeabi_fmul+0xf8>
 8020e64:	2000      	movs	r0, #0
 8020e66:	2400      	movs	r4, #0
 8020e68:	05c0      	lsls	r0, r0, #23
 8020e6a:	4320      	orrs	r0, r4
 8020e6c:	07c9      	lsls	r1, r1, #31
 8020e6e:	4308      	orrs	r0, r1
 8020e70:	bce0      	pop	{r5, r6, r7}
 8020e72:	46ba      	mov	sl, r7
 8020e74:	46b1      	mov	r9, r6
 8020e76:	46a8      	mov	r8, r5
 8020e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020e7a:	20ff      	movs	r0, #255	; 0xff
 8020e7c:	2400      	movs	r4, #0
 8020e7e:	e7f3      	b.n	8020e68 <__aeabi_fmul+0x8c>
 8020e80:	0c26      	lsrs	r6, r4, #16
 8020e82:	0424      	lsls	r4, r4, #16
 8020e84:	0c22      	lsrs	r2, r4, #16
 8020e86:	4644      	mov	r4, r8
 8020e88:	0424      	lsls	r4, r4, #16
 8020e8a:	0c24      	lsrs	r4, r4, #16
 8020e8c:	4643      	mov	r3, r8
 8020e8e:	0027      	movs	r7, r4
 8020e90:	0c1b      	lsrs	r3, r3, #16
 8020e92:	4357      	muls	r7, r2
 8020e94:	4374      	muls	r4, r6
 8020e96:	435a      	muls	r2, r3
 8020e98:	435e      	muls	r6, r3
 8020e9a:	1912      	adds	r2, r2, r4
 8020e9c:	0c3b      	lsrs	r3, r7, #16
 8020e9e:	189b      	adds	r3, r3, r2
 8020ea0:	429c      	cmp	r4, r3
 8020ea2:	d903      	bls.n	8020eac <__aeabi_fmul+0xd0>
 8020ea4:	2280      	movs	r2, #128	; 0x80
 8020ea6:	0252      	lsls	r2, r2, #9
 8020ea8:	4694      	mov	ip, r2
 8020eaa:	4466      	add	r6, ip
 8020eac:	043f      	lsls	r7, r7, #16
 8020eae:	041a      	lsls	r2, r3, #16
 8020eb0:	0c3f      	lsrs	r7, r7, #16
 8020eb2:	19d2      	adds	r2, r2, r7
 8020eb4:	0194      	lsls	r4, r2, #6
 8020eb6:	1e67      	subs	r7, r4, #1
 8020eb8:	41bc      	sbcs	r4, r7
 8020eba:	0c1b      	lsrs	r3, r3, #16
 8020ebc:	0e92      	lsrs	r2, r2, #26
 8020ebe:	199b      	adds	r3, r3, r6
 8020ec0:	4314      	orrs	r4, r2
 8020ec2:	019b      	lsls	r3, r3, #6
 8020ec4:	431c      	orrs	r4, r3
 8020ec6:	011b      	lsls	r3, r3, #4
 8020ec8:	d400      	bmi.n	8020ecc <__aeabi_fmul+0xf0>
 8020eca:	e09b      	b.n	8021004 <__aeabi_fmul+0x228>
 8020ecc:	2301      	movs	r3, #1
 8020ece:	0862      	lsrs	r2, r4, #1
 8020ed0:	401c      	ands	r4, r3
 8020ed2:	4314      	orrs	r4, r2
 8020ed4:	0002      	movs	r2, r0
 8020ed6:	327f      	adds	r2, #127	; 0x7f
 8020ed8:	2a00      	cmp	r2, #0
 8020eda:	dd64      	ble.n	8020fa6 <__aeabi_fmul+0x1ca>
 8020edc:	0763      	lsls	r3, r4, #29
 8020ede:	d004      	beq.n	8020eea <__aeabi_fmul+0x10e>
 8020ee0:	230f      	movs	r3, #15
 8020ee2:	4023      	ands	r3, r4
 8020ee4:	2b04      	cmp	r3, #4
 8020ee6:	d000      	beq.n	8020eea <__aeabi_fmul+0x10e>
 8020ee8:	3404      	adds	r4, #4
 8020eea:	0123      	lsls	r3, r4, #4
 8020eec:	d503      	bpl.n	8020ef6 <__aeabi_fmul+0x11a>
 8020eee:	0002      	movs	r2, r0
 8020ef0:	4b4c      	ldr	r3, [pc, #304]	; (8021024 <__aeabi_fmul+0x248>)
 8020ef2:	3280      	adds	r2, #128	; 0x80
 8020ef4:	401c      	ands	r4, r3
 8020ef6:	2afe      	cmp	r2, #254	; 0xfe
 8020ef8:	dcbf      	bgt.n	8020e7a <__aeabi_fmul+0x9e>
 8020efa:	01a4      	lsls	r4, r4, #6
 8020efc:	0a64      	lsrs	r4, r4, #9
 8020efe:	b2d0      	uxtb	r0, r2
 8020f00:	e7b2      	b.n	8020e68 <__aeabi_fmul+0x8c>
 8020f02:	4643      	mov	r3, r8
 8020f04:	2b00      	cmp	r3, #0
 8020f06:	d13d      	bne.n	8020f84 <__aeabi_fmul+0x1a8>
 8020f08:	464a      	mov	r2, r9
 8020f0a:	3301      	adds	r3, #1
 8020f0c:	431a      	orrs	r2, r3
 8020f0e:	4691      	mov	r9, r2
 8020f10:	469c      	mov	ip, r3
 8020f12:	e792      	b.n	8020e3a <__aeabi_fmul+0x5e>
 8020f14:	2c00      	cmp	r4, #0
 8020f16:	d129      	bne.n	8020f6c <__aeabi_fmul+0x190>
 8020f18:	2304      	movs	r3, #4
 8020f1a:	4699      	mov	r9, r3
 8020f1c:	3b03      	subs	r3, #3
 8020f1e:	2500      	movs	r5, #0
 8020f20:	469a      	mov	sl, r3
 8020f22:	e774      	b.n	8020e0e <__aeabi_fmul+0x32>
 8020f24:	2c00      	cmp	r4, #0
 8020f26:	d11b      	bne.n	8020f60 <__aeabi_fmul+0x184>
 8020f28:	2308      	movs	r3, #8
 8020f2a:	4699      	mov	r9, r3
 8020f2c:	3b06      	subs	r3, #6
 8020f2e:	25ff      	movs	r5, #255	; 0xff
 8020f30:	469a      	mov	sl, r3
 8020f32:	e76c      	b.n	8020e0e <__aeabi_fmul+0x32>
 8020f34:	4643      	mov	r3, r8
 8020f36:	35ff      	adds	r5, #255	; 0xff
 8020f38:	2b00      	cmp	r3, #0
 8020f3a:	d10b      	bne.n	8020f54 <__aeabi_fmul+0x178>
 8020f3c:	2302      	movs	r3, #2
 8020f3e:	464a      	mov	r2, r9
 8020f40:	431a      	orrs	r2, r3
 8020f42:	4691      	mov	r9, r2
 8020f44:	469c      	mov	ip, r3
 8020f46:	e778      	b.n	8020e3a <__aeabi_fmul+0x5e>
 8020f48:	4653      	mov	r3, sl
 8020f4a:	0031      	movs	r1, r6
 8020f4c:	2b02      	cmp	r3, #2
 8020f4e:	d000      	beq.n	8020f52 <__aeabi_fmul+0x176>
 8020f50:	e783      	b.n	8020e5a <__aeabi_fmul+0x7e>
 8020f52:	e792      	b.n	8020e7a <__aeabi_fmul+0x9e>
 8020f54:	2303      	movs	r3, #3
 8020f56:	464a      	mov	r2, r9
 8020f58:	431a      	orrs	r2, r3
 8020f5a:	4691      	mov	r9, r2
 8020f5c:	469c      	mov	ip, r3
 8020f5e:	e76c      	b.n	8020e3a <__aeabi_fmul+0x5e>
 8020f60:	230c      	movs	r3, #12
 8020f62:	4699      	mov	r9, r3
 8020f64:	3b09      	subs	r3, #9
 8020f66:	25ff      	movs	r5, #255	; 0xff
 8020f68:	469a      	mov	sl, r3
 8020f6a:	e750      	b.n	8020e0e <__aeabi_fmul+0x32>
 8020f6c:	0020      	movs	r0, r4
 8020f6e:	f7ff fa7f 	bl	8020470 <__clzsi2>
 8020f72:	2576      	movs	r5, #118	; 0x76
 8020f74:	1f43      	subs	r3, r0, #5
 8020f76:	409c      	lsls	r4, r3
 8020f78:	2300      	movs	r3, #0
 8020f7a:	426d      	negs	r5, r5
 8020f7c:	4699      	mov	r9, r3
 8020f7e:	469a      	mov	sl, r3
 8020f80:	1a2d      	subs	r5, r5, r0
 8020f82:	e744      	b.n	8020e0e <__aeabi_fmul+0x32>
 8020f84:	4640      	mov	r0, r8
 8020f86:	f7ff fa73 	bl	8020470 <__clzsi2>
 8020f8a:	4642      	mov	r2, r8
 8020f8c:	1f43      	subs	r3, r0, #5
 8020f8e:	409a      	lsls	r2, r3
 8020f90:	2300      	movs	r3, #0
 8020f92:	1a2d      	subs	r5, r5, r0
 8020f94:	4690      	mov	r8, r2
 8020f96:	469c      	mov	ip, r3
 8020f98:	3d76      	subs	r5, #118	; 0x76
 8020f9a:	e74e      	b.n	8020e3a <__aeabi_fmul+0x5e>
 8020f9c:	2480      	movs	r4, #128	; 0x80
 8020f9e:	2100      	movs	r1, #0
 8020fa0:	20ff      	movs	r0, #255	; 0xff
 8020fa2:	03e4      	lsls	r4, r4, #15
 8020fa4:	e760      	b.n	8020e68 <__aeabi_fmul+0x8c>
 8020fa6:	2301      	movs	r3, #1
 8020fa8:	1a9b      	subs	r3, r3, r2
 8020faa:	2b1b      	cmp	r3, #27
 8020fac:	dd00      	ble.n	8020fb0 <__aeabi_fmul+0x1d4>
 8020fae:	e759      	b.n	8020e64 <__aeabi_fmul+0x88>
 8020fb0:	0022      	movs	r2, r4
 8020fb2:	309e      	adds	r0, #158	; 0x9e
 8020fb4:	40da      	lsrs	r2, r3
 8020fb6:	4084      	lsls	r4, r0
 8020fb8:	0013      	movs	r3, r2
 8020fba:	1e62      	subs	r2, r4, #1
 8020fbc:	4194      	sbcs	r4, r2
 8020fbe:	431c      	orrs	r4, r3
 8020fc0:	0763      	lsls	r3, r4, #29
 8020fc2:	d004      	beq.n	8020fce <__aeabi_fmul+0x1f2>
 8020fc4:	230f      	movs	r3, #15
 8020fc6:	4023      	ands	r3, r4
 8020fc8:	2b04      	cmp	r3, #4
 8020fca:	d000      	beq.n	8020fce <__aeabi_fmul+0x1f2>
 8020fcc:	3404      	adds	r4, #4
 8020fce:	0163      	lsls	r3, r4, #5
 8020fd0:	d51a      	bpl.n	8021008 <__aeabi_fmul+0x22c>
 8020fd2:	2001      	movs	r0, #1
 8020fd4:	2400      	movs	r4, #0
 8020fd6:	e747      	b.n	8020e68 <__aeabi_fmul+0x8c>
 8020fd8:	2080      	movs	r0, #128	; 0x80
 8020fda:	03c0      	lsls	r0, r0, #15
 8020fdc:	4204      	tst	r4, r0
 8020fde:	d009      	beq.n	8020ff4 <__aeabi_fmul+0x218>
 8020fe0:	4643      	mov	r3, r8
 8020fe2:	4203      	tst	r3, r0
 8020fe4:	d106      	bne.n	8020ff4 <__aeabi_fmul+0x218>
 8020fe6:	4644      	mov	r4, r8
 8020fe8:	4304      	orrs	r4, r0
 8020fea:	0264      	lsls	r4, r4, #9
 8020fec:	0039      	movs	r1, r7
 8020fee:	20ff      	movs	r0, #255	; 0xff
 8020ff0:	0a64      	lsrs	r4, r4, #9
 8020ff2:	e739      	b.n	8020e68 <__aeabi_fmul+0x8c>
 8020ff4:	2080      	movs	r0, #128	; 0x80
 8020ff6:	03c0      	lsls	r0, r0, #15
 8020ff8:	4304      	orrs	r4, r0
 8020ffa:	0264      	lsls	r4, r4, #9
 8020ffc:	0031      	movs	r1, r6
 8020ffe:	20ff      	movs	r0, #255	; 0xff
 8021000:	0a64      	lsrs	r4, r4, #9
 8021002:	e731      	b.n	8020e68 <__aeabi_fmul+0x8c>
 8021004:	0028      	movs	r0, r5
 8021006:	e765      	b.n	8020ed4 <__aeabi_fmul+0xf8>
 8021008:	01a4      	lsls	r4, r4, #6
 802100a:	2000      	movs	r0, #0
 802100c:	0a64      	lsrs	r4, r4, #9
 802100e:	e72b      	b.n	8020e68 <__aeabi_fmul+0x8c>
 8021010:	2080      	movs	r0, #128	; 0x80
 8021012:	03c0      	lsls	r0, r0, #15
 8021014:	4304      	orrs	r4, r0
 8021016:	0264      	lsls	r4, r4, #9
 8021018:	20ff      	movs	r0, #255	; 0xff
 802101a:	0a64      	lsrs	r4, r4, #9
 802101c:	e724      	b.n	8020e68 <__aeabi_fmul+0x8c>
 802101e:	46c0      	nop			; (mov r8, r8)
 8021020:	08031294 	.word	0x08031294
 8021024:	f7ffffff 	.word	0xf7ffffff

08021028 <__aeabi_fsub>:
 8021028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802102a:	46ce      	mov	lr, r9
 802102c:	4647      	mov	r7, r8
 802102e:	0243      	lsls	r3, r0, #9
 8021030:	0a5b      	lsrs	r3, r3, #9
 8021032:	024e      	lsls	r6, r1, #9
 8021034:	00da      	lsls	r2, r3, #3
 8021036:	4694      	mov	ip, r2
 8021038:	0a72      	lsrs	r2, r6, #9
 802103a:	4691      	mov	r9, r2
 802103c:	0045      	lsls	r5, r0, #1
 802103e:	004a      	lsls	r2, r1, #1
 8021040:	b580      	push	{r7, lr}
 8021042:	0e2d      	lsrs	r5, r5, #24
 8021044:	001f      	movs	r7, r3
 8021046:	0fc4      	lsrs	r4, r0, #31
 8021048:	0e12      	lsrs	r2, r2, #24
 802104a:	0fc9      	lsrs	r1, r1, #31
 802104c:	09b6      	lsrs	r6, r6, #6
 802104e:	2aff      	cmp	r2, #255	; 0xff
 8021050:	d05b      	beq.n	802110a <__aeabi_fsub+0xe2>
 8021052:	2001      	movs	r0, #1
 8021054:	4041      	eors	r1, r0
 8021056:	428c      	cmp	r4, r1
 8021058:	d039      	beq.n	80210ce <__aeabi_fsub+0xa6>
 802105a:	1aa8      	subs	r0, r5, r2
 802105c:	2800      	cmp	r0, #0
 802105e:	dd5a      	ble.n	8021116 <__aeabi_fsub+0xee>
 8021060:	2a00      	cmp	r2, #0
 8021062:	d06a      	beq.n	802113a <__aeabi_fsub+0x112>
 8021064:	2dff      	cmp	r5, #255	; 0xff
 8021066:	d100      	bne.n	802106a <__aeabi_fsub+0x42>
 8021068:	e0d9      	b.n	802121e <__aeabi_fsub+0x1f6>
 802106a:	2280      	movs	r2, #128	; 0x80
 802106c:	04d2      	lsls	r2, r2, #19
 802106e:	4316      	orrs	r6, r2
 8021070:	281b      	cmp	r0, #27
 8021072:	dc00      	bgt.n	8021076 <__aeabi_fsub+0x4e>
 8021074:	e0e9      	b.n	802124a <__aeabi_fsub+0x222>
 8021076:	2001      	movs	r0, #1
 8021078:	4663      	mov	r3, ip
 802107a:	1a18      	subs	r0, r3, r0
 802107c:	0143      	lsls	r3, r0, #5
 802107e:	d400      	bmi.n	8021082 <__aeabi_fsub+0x5a>
 8021080:	e0b4      	b.n	80211ec <__aeabi_fsub+0x1c4>
 8021082:	0180      	lsls	r0, r0, #6
 8021084:	0987      	lsrs	r7, r0, #6
 8021086:	0038      	movs	r0, r7
 8021088:	f7ff f9f2 	bl	8020470 <__clzsi2>
 802108c:	3805      	subs	r0, #5
 802108e:	4087      	lsls	r7, r0
 8021090:	4285      	cmp	r5, r0
 8021092:	dc00      	bgt.n	8021096 <__aeabi_fsub+0x6e>
 8021094:	e0cc      	b.n	8021230 <__aeabi_fsub+0x208>
 8021096:	1a2d      	subs	r5, r5, r0
 8021098:	48b5      	ldr	r0, [pc, #724]	; (8021370 <__aeabi_fsub+0x348>)
 802109a:	4038      	ands	r0, r7
 802109c:	0743      	lsls	r3, r0, #29
 802109e:	d004      	beq.n	80210aa <__aeabi_fsub+0x82>
 80210a0:	230f      	movs	r3, #15
 80210a2:	4003      	ands	r3, r0
 80210a4:	2b04      	cmp	r3, #4
 80210a6:	d000      	beq.n	80210aa <__aeabi_fsub+0x82>
 80210a8:	3004      	adds	r0, #4
 80210aa:	0143      	lsls	r3, r0, #5
 80210ac:	d400      	bmi.n	80210b0 <__aeabi_fsub+0x88>
 80210ae:	e0a0      	b.n	80211f2 <__aeabi_fsub+0x1ca>
 80210b0:	1c6a      	adds	r2, r5, #1
 80210b2:	2dfe      	cmp	r5, #254	; 0xfe
 80210b4:	d100      	bne.n	80210b8 <__aeabi_fsub+0x90>
 80210b6:	e08d      	b.n	80211d4 <__aeabi_fsub+0x1ac>
 80210b8:	0180      	lsls	r0, r0, #6
 80210ba:	0a47      	lsrs	r7, r0, #9
 80210bc:	b2d2      	uxtb	r2, r2
 80210be:	05d0      	lsls	r0, r2, #23
 80210c0:	4338      	orrs	r0, r7
 80210c2:	07e4      	lsls	r4, r4, #31
 80210c4:	4320      	orrs	r0, r4
 80210c6:	bcc0      	pop	{r6, r7}
 80210c8:	46b9      	mov	r9, r7
 80210ca:	46b0      	mov	r8, r6
 80210cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80210ce:	1aa8      	subs	r0, r5, r2
 80210d0:	4680      	mov	r8, r0
 80210d2:	2800      	cmp	r0, #0
 80210d4:	dd45      	ble.n	8021162 <__aeabi_fsub+0x13a>
 80210d6:	2a00      	cmp	r2, #0
 80210d8:	d070      	beq.n	80211bc <__aeabi_fsub+0x194>
 80210da:	2dff      	cmp	r5, #255	; 0xff
 80210dc:	d100      	bne.n	80210e0 <__aeabi_fsub+0xb8>
 80210de:	e09e      	b.n	802121e <__aeabi_fsub+0x1f6>
 80210e0:	2380      	movs	r3, #128	; 0x80
 80210e2:	04db      	lsls	r3, r3, #19
 80210e4:	431e      	orrs	r6, r3
 80210e6:	4643      	mov	r3, r8
 80210e8:	2b1b      	cmp	r3, #27
 80210ea:	dc00      	bgt.n	80210ee <__aeabi_fsub+0xc6>
 80210ec:	e0d2      	b.n	8021294 <__aeabi_fsub+0x26c>
 80210ee:	2001      	movs	r0, #1
 80210f0:	4460      	add	r0, ip
 80210f2:	0143      	lsls	r3, r0, #5
 80210f4:	d57a      	bpl.n	80211ec <__aeabi_fsub+0x1c4>
 80210f6:	3501      	adds	r5, #1
 80210f8:	2dff      	cmp	r5, #255	; 0xff
 80210fa:	d06b      	beq.n	80211d4 <__aeabi_fsub+0x1ac>
 80210fc:	2301      	movs	r3, #1
 80210fe:	4a9d      	ldr	r2, [pc, #628]	; (8021374 <__aeabi_fsub+0x34c>)
 8021100:	4003      	ands	r3, r0
 8021102:	0840      	lsrs	r0, r0, #1
 8021104:	4010      	ands	r0, r2
 8021106:	4318      	orrs	r0, r3
 8021108:	e7c8      	b.n	802109c <__aeabi_fsub+0x74>
 802110a:	2e00      	cmp	r6, #0
 802110c:	d020      	beq.n	8021150 <__aeabi_fsub+0x128>
 802110e:	428c      	cmp	r4, r1
 8021110:	d023      	beq.n	802115a <__aeabi_fsub+0x132>
 8021112:	0028      	movs	r0, r5
 8021114:	38ff      	subs	r0, #255	; 0xff
 8021116:	2800      	cmp	r0, #0
 8021118:	d039      	beq.n	802118e <__aeabi_fsub+0x166>
 802111a:	1b57      	subs	r7, r2, r5
 802111c:	2d00      	cmp	r5, #0
 802111e:	d000      	beq.n	8021122 <__aeabi_fsub+0xfa>
 8021120:	e09d      	b.n	802125e <__aeabi_fsub+0x236>
 8021122:	4663      	mov	r3, ip
 8021124:	2b00      	cmp	r3, #0
 8021126:	d100      	bne.n	802112a <__aeabi_fsub+0x102>
 8021128:	e0db      	b.n	80212e2 <__aeabi_fsub+0x2ba>
 802112a:	1e7b      	subs	r3, r7, #1
 802112c:	2f01      	cmp	r7, #1
 802112e:	d100      	bne.n	8021132 <__aeabi_fsub+0x10a>
 8021130:	e10d      	b.n	802134e <__aeabi_fsub+0x326>
 8021132:	2fff      	cmp	r7, #255	; 0xff
 8021134:	d071      	beq.n	802121a <__aeabi_fsub+0x1f2>
 8021136:	001f      	movs	r7, r3
 8021138:	e098      	b.n	802126c <__aeabi_fsub+0x244>
 802113a:	2e00      	cmp	r6, #0
 802113c:	d100      	bne.n	8021140 <__aeabi_fsub+0x118>
 802113e:	e0a7      	b.n	8021290 <__aeabi_fsub+0x268>
 8021140:	1e42      	subs	r2, r0, #1
 8021142:	2801      	cmp	r0, #1
 8021144:	d100      	bne.n	8021148 <__aeabi_fsub+0x120>
 8021146:	e0e6      	b.n	8021316 <__aeabi_fsub+0x2ee>
 8021148:	28ff      	cmp	r0, #255	; 0xff
 802114a:	d068      	beq.n	802121e <__aeabi_fsub+0x1f6>
 802114c:	0010      	movs	r0, r2
 802114e:	e78f      	b.n	8021070 <__aeabi_fsub+0x48>
 8021150:	2001      	movs	r0, #1
 8021152:	4041      	eors	r1, r0
 8021154:	42a1      	cmp	r1, r4
 8021156:	d000      	beq.n	802115a <__aeabi_fsub+0x132>
 8021158:	e77f      	b.n	802105a <__aeabi_fsub+0x32>
 802115a:	20ff      	movs	r0, #255	; 0xff
 802115c:	4240      	negs	r0, r0
 802115e:	4680      	mov	r8, r0
 8021160:	44a8      	add	r8, r5
 8021162:	4640      	mov	r0, r8
 8021164:	2800      	cmp	r0, #0
 8021166:	d038      	beq.n	80211da <__aeabi_fsub+0x1b2>
 8021168:	1b51      	subs	r1, r2, r5
 802116a:	2d00      	cmp	r5, #0
 802116c:	d100      	bne.n	8021170 <__aeabi_fsub+0x148>
 802116e:	e0ae      	b.n	80212ce <__aeabi_fsub+0x2a6>
 8021170:	2aff      	cmp	r2, #255	; 0xff
 8021172:	d100      	bne.n	8021176 <__aeabi_fsub+0x14e>
 8021174:	e0df      	b.n	8021336 <__aeabi_fsub+0x30e>
 8021176:	2380      	movs	r3, #128	; 0x80
 8021178:	4660      	mov	r0, ip
 802117a:	04db      	lsls	r3, r3, #19
 802117c:	4318      	orrs	r0, r3
 802117e:	4684      	mov	ip, r0
 8021180:	291b      	cmp	r1, #27
 8021182:	dc00      	bgt.n	8021186 <__aeabi_fsub+0x15e>
 8021184:	e0d9      	b.n	802133a <__aeabi_fsub+0x312>
 8021186:	2001      	movs	r0, #1
 8021188:	0015      	movs	r5, r2
 802118a:	1980      	adds	r0, r0, r6
 802118c:	e7b1      	b.n	80210f2 <__aeabi_fsub+0xca>
 802118e:	20fe      	movs	r0, #254	; 0xfe
 8021190:	1c6a      	adds	r2, r5, #1
 8021192:	4210      	tst	r0, r2
 8021194:	d171      	bne.n	802127a <__aeabi_fsub+0x252>
 8021196:	2d00      	cmp	r5, #0
 8021198:	d000      	beq.n	802119c <__aeabi_fsub+0x174>
 802119a:	e0a6      	b.n	80212ea <__aeabi_fsub+0x2c2>
 802119c:	4663      	mov	r3, ip
 802119e:	2b00      	cmp	r3, #0
 80211a0:	d100      	bne.n	80211a4 <__aeabi_fsub+0x17c>
 80211a2:	e0d9      	b.n	8021358 <__aeabi_fsub+0x330>
 80211a4:	2200      	movs	r2, #0
 80211a6:	2e00      	cmp	r6, #0
 80211a8:	d100      	bne.n	80211ac <__aeabi_fsub+0x184>
 80211aa:	e788      	b.n	80210be <__aeabi_fsub+0x96>
 80211ac:	1b98      	subs	r0, r3, r6
 80211ae:	0143      	lsls	r3, r0, #5
 80211b0:	d400      	bmi.n	80211b4 <__aeabi_fsub+0x18c>
 80211b2:	e0e1      	b.n	8021378 <__aeabi_fsub+0x350>
 80211b4:	4663      	mov	r3, ip
 80211b6:	000c      	movs	r4, r1
 80211b8:	1af0      	subs	r0, r6, r3
 80211ba:	e76f      	b.n	802109c <__aeabi_fsub+0x74>
 80211bc:	2e00      	cmp	r6, #0
 80211be:	d100      	bne.n	80211c2 <__aeabi_fsub+0x19a>
 80211c0:	e0b7      	b.n	8021332 <__aeabi_fsub+0x30a>
 80211c2:	0002      	movs	r2, r0
 80211c4:	3a01      	subs	r2, #1
 80211c6:	2801      	cmp	r0, #1
 80211c8:	d100      	bne.n	80211cc <__aeabi_fsub+0x1a4>
 80211ca:	e09c      	b.n	8021306 <__aeabi_fsub+0x2de>
 80211cc:	28ff      	cmp	r0, #255	; 0xff
 80211ce:	d026      	beq.n	802121e <__aeabi_fsub+0x1f6>
 80211d0:	4690      	mov	r8, r2
 80211d2:	e788      	b.n	80210e6 <__aeabi_fsub+0xbe>
 80211d4:	22ff      	movs	r2, #255	; 0xff
 80211d6:	2700      	movs	r7, #0
 80211d8:	e771      	b.n	80210be <__aeabi_fsub+0x96>
 80211da:	20fe      	movs	r0, #254	; 0xfe
 80211dc:	1c6a      	adds	r2, r5, #1
 80211de:	4210      	tst	r0, r2
 80211e0:	d064      	beq.n	80212ac <__aeabi_fsub+0x284>
 80211e2:	2aff      	cmp	r2, #255	; 0xff
 80211e4:	d0f6      	beq.n	80211d4 <__aeabi_fsub+0x1ac>
 80211e6:	0015      	movs	r5, r2
 80211e8:	4466      	add	r6, ip
 80211ea:	0870      	lsrs	r0, r6, #1
 80211ec:	0743      	lsls	r3, r0, #29
 80211ee:	d000      	beq.n	80211f2 <__aeabi_fsub+0x1ca>
 80211f0:	e756      	b.n	80210a0 <__aeabi_fsub+0x78>
 80211f2:	08c3      	lsrs	r3, r0, #3
 80211f4:	2dff      	cmp	r5, #255	; 0xff
 80211f6:	d012      	beq.n	802121e <__aeabi_fsub+0x1f6>
 80211f8:	025b      	lsls	r3, r3, #9
 80211fa:	0a5f      	lsrs	r7, r3, #9
 80211fc:	b2ea      	uxtb	r2, r5
 80211fe:	e75e      	b.n	80210be <__aeabi_fsub+0x96>
 8021200:	4662      	mov	r2, ip
 8021202:	2a00      	cmp	r2, #0
 8021204:	d100      	bne.n	8021208 <__aeabi_fsub+0x1e0>
 8021206:	e096      	b.n	8021336 <__aeabi_fsub+0x30e>
 8021208:	2e00      	cmp	r6, #0
 802120a:	d008      	beq.n	802121e <__aeabi_fsub+0x1f6>
 802120c:	2280      	movs	r2, #128	; 0x80
 802120e:	03d2      	lsls	r2, r2, #15
 8021210:	4213      	tst	r3, r2
 8021212:	d004      	beq.n	802121e <__aeabi_fsub+0x1f6>
 8021214:	4648      	mov	r0, r9
 8021216:	4210      	tst	r0, r2
 8021218:	d101      	bne.n	802121e <__aeabi_fsub+0x1f6>
 802121a:	000c      	movs	r4, r1
 802121c:	464b      	mov	r3, r9
 802121e:	2b00      	cmp	r3, #0
 8021220:	d0d8      	beq.n	80211d4 <__aeabi_fsub+0x1ac>
 8021222:	2780      	movs	r7, #128	; 0x80
 8021224:	03ff      	lsls	r7, r7, #15
 8021226:	431f      	orrs	r7, r3
 8021228:	027f      	lsls	r7, r7, #9
 802122a:	22ff      	movs	r2, #255	; 0xff
 802122c:	0a7f      	lsrs	r7, r7, #9
 802122e:	e746      	b.n	80210be <__aeabi_fsub+0x96>
 8021230:	2320      	movs	r3, #32
 8021232:	003a      	movs	r2, r7
 8021234:	1b45      	subs	r5, r0, r5
 8021236:	0038      	movs	r0, r7
 8021238:	3501      	adds	r5, #1
 802123a:	40ea      	lsrs	r2, r5
 802123c:	1b5d      	subs	r5, r3, r5
 802123e:	40a8      	lsls	r0, r5
 8021240:	1e43      	subs	r3, r0, #1
 8021242:	4198      	sbcs	r0, r3
 8021244:	2500      	movs	r5, #0
 8021246:	4310      	orrs	r0, r2
 8021248:	e728      	b.n	802109c <__aeabi_fsub+0x74>
 802124a:	2320      	movs	r3, #32
 802124c:	1a1b      	subs	r3, r3, r0
 802124e:	0032      	movs	r2, r6
 8021250:	409e      	lsls	r6, r3
 8021252:	40c2      	lsrs	r2, r0
 8021254:	0030      	movs	r0, r6
 8021256:	1e43      	subs	r3, r0, #1
 8021258:	4198      	sbcs	r0, r3
 802125a:	4310      	orrs	r0, r2
 802125c:	e70c      	b.n	8021078 <__aeabi_fsub+0x50>
 802125e:	2aff      	cmp	r2, #255	; 0xff
 8021260:	d0db      	beq.n	802121a <__aeabi_fsub+0x1f2>
 8021262:	2380      	movs	r3, #128	; 0x80
 8021264:	4660      	mov	r0, ip
 8021266:	04db      	lsls	r3, r3, #19
 8021268:	4318      	orrs	r0, r3
 802126a:	4684      	mov	ip, r0
 802126c:	2f1b      	cmp	r7, #27
 802126e:	dd56      	ble.n	802131e <__aeabi_fsub+0x2f6>
 8021270:	2001      	movs	r0, #1
 8021272:	000c      	movs	r4, r1
 8021274:	0015      	movs	r5, r2
 8021276:	1a30      	subs	r0, r6, r0
 8021278:	e700      	b.n	802107c <__aeabi_fsub+0x54>
 802127a:	4663      	mov	r3, ip
 802127c:	1b9f      	subs	r7, r3, r6
 802127e:	017b      	lsls	r3, r7, #5
 8021280:	d43d      	bmi.n	80212fe <__aeabi_fsub+0x2d6>
 8021282:	2f00      	cmp	r7, #0
 8021284:	d000      	beq.n	8021288 <__aeabi_fsub+0x260>
 8021286:	e6fe      	b.n	8021086 <__aeabi_fsub+0x5e>
 8021288:	2400      	movs	r4, #0
 802128a:	2200      	movs	r2, #0
 802128c:	2700      	movs	r7, #0
 802128e:	e716      	b.n	80210be <__aeabi_fsub+0x96>
 8021290:	0005      	movs	r5, r0
 8021292:	e7af      	b.n	80211f4 <__aeabi_fsub+0x1cc>
 8021294:	0032      	movs	r2, r6
 8021296:	4643      	mov	r3, r8
 8021298:	4641      	mov	r1, r8
 802129a:	40da      	lsrs	r2, r3
 802129c:	2320      	movs	r3, #32
 802129e:	1a5b      	subs	r3, r3, r1
 80212a0:	409e      	lsls	r6, r3
 80212a2:	0030      	movs	r0, r6
 80212a4:	1e43      	subs	r3, r0, #1
 80212a6:	4198      	sbcs	r0, r3
 80212a8:	4310      	orrs	r0, r2
 80212aa:	e721      	b.n	80210f0 <__aeabi_fsub+0xc8>
 80212ac:	2d00      	cmp	r5, #0
 80212ae:	d1a7      	bne.n	8021200 <__aeabi_fsub+0x1d8>
 80212b0:	4663      	mov	r3, ip
 80212b2:	2b00      	cmp	r3, #0
 80212b4:	d059      	beq.n	802136a <__aeabi_fsub+0x342>
 80212b6:	2200      	movs	r2, #0
 80212b8:	2e00      	cmp	r6, #0
 80212ba:	d100      	bne.n	80212be <__aeabi_fsub+0x296>
 80212bc:	e6ff      	b.n	80210be <__aeabi_fsub+0x96>
 80212be:	0030      	movs	r0, r6
 80212c0:	4460      	add	r0, ip
 80212c2:	0143      	lsls	r3, r0, #5
 80212c4:	d592      	bpl.n	80211ec <__aeabi_fsub+0x1c4>
 80212c6:	4b2a      	ldr	r3, [pc, #168]	; (8021370 <__aeabi_fsub+0x348>)
 80212c8:	3501      	adds	r5, #1
 80212ca:	4018      	ands	r0, r3
 80212cc:	e78e      	b.n	80211ec <__aeabi_fsub+0x1c4>
 80212ce:	4663      	mov	r3, ip
 80212d0:	2b00      	cmp	r3, #0
 80212d2:	d047      	beq.n	8021364 <__aeabi_fsub+0x33c>
 80212d4:	1e4b      	subs	r3, r1, #1
 80212d6:	2901      	cmp	r1, #1
 80212d8:	d015      	beq.n	8021306 <__aeabi_fsub+0x2de>
 80212da:	29ff      	cmp	r1, #255	; 0xff
 80212dc:	d02b      	beq.n	8021336 <__aeabi_fsub+0x30e>
 80212de:	0019      	movs	r1, r3
 80212e0:	e74e      	b.n	8021180 <__aeabi_fsub+0x158>
 80212e2:	000c      	movs	r4, r1
 80212e4:	464b      	mov	r3, r9
 80212e6:	003d      	movs	r5, r7
 80212e8:	e784      	b.n	80211f4 <__aeabi_fsub+0x1cc>
 80212ea:	4662      	mov	r2, ip
 80212ec:	2a00      	cmp	r2, #0
 80212ee:	d18b      	bne.n	8021208 <__aeabi_fsub+0x1e0>
 80212f0:	2e00      	cmp	r6, #0
 80212f2:	d192      	bne.n	802121a <__aeabi_fsub+0x1f2>
 80212f4:	2780      	movs	r7, #128	; 0x80
 80212f6:	2400      	movs	r4, #0
 80212f8:	22ff      	movs	r2, #255	; 0xff
 80212fa:	03ff      	lsls	r7, r7, #15
 80212fc:	e6df      	b.n	80210be <__aeabi_fsub+0x96>
 80212fe:	4663      	mov	r3, ip
 8021300:	000c      	movs	r4, r1
 8021302:	1af7      	subs	r7, r6, r3
 8021304:	e6bf      	b.n	8021086 <__aeabi_fsub+0x5e>
 8021306:	0030      	movs	r0, r6
 8021308:	4460      	add	r0, ip
 802130a:	2501      	movs	r5, #1
 802130c:	0143      	lsls	r3, r0, #5
 802130e:	d400      	bmi.n	8021312 <__aeabi_fsub+0x2ea>
 8021310:	e76c      	b.n	80211ec <__aeabi_fsub+0x1c4>
 8021312:	2502      	movs	r5, #2
 8021314:	e6f2      	b.n	80210fc <__aeabi_fsub+0xd4>
 8021316:	4663      	mov	r3, ip
 8021318:	2501      	movs	r5, #1
 802131a:	1b98      	subs	r0, r3, r6
 802131c:	e6ae      	b.n	802107c <__aeabi_fsub+0x54>
 802131e:	2320      	movs	r3, #32
 8021320:	4664      	mov	r4, ip
 8021322:	4660      	mov	r0, ip
 8021324:	40fc      	lsrs	r4, r7
 8021326:	1bdf      	subs	r7, r3, r7
 8021328:	40b8      	lsls	r0, r7
 802132a:	1e43      	subs	r3, r0, #1
 802132c:	4198      	sbcs	r0, r3
 802132e:	4320      	orrs	r0, r4
 8021330:	e79f      	b.n	8021272 <__aeabi_fsub+0x24a>
 8021332:	0005      	movs	r5, r0
 8021334:	e75e      	b.n	80211f4 <__aeabi_fsub+0x1cc>
 8021336:	464b      	mov	r3, r9
 8021338:	e771      	b.n	802121e <__aeabi_fsub+0x1f6>
 802133a:	2320      	movs	r3, #32
 802133c:	4665      	mov	r5, ip
 802133e:	4660      	mov	r0, ip
 8021340:	40cd      	lsrs	r5, r1
 8021342:	1a59      	subs	r1, r3, r1
 8021344:	4088      	lsls	r0, r1
 8021346:	1e43      	subs	r3, r0, #1
 8021348:	4198      	sbcs	r0, r3
 802134a:	4328      	orrs	r0, r5
 802134c:	e71c      	b.n	8021188 <__aeabi_fsub+0x160>
 802134e:	4663      	mov	r3, ip
 8021350:	000c      	movs	r4, r1
 8021352:	2501      	movs	r5, #1
 8021354:	1af0      	subs	r0, r6, r3
 8021356:	e691      	b.n	802107c <__aeabi_fsub+0x54>
 8021358:	2e00      	cmp	r6, #0
 802135a:	d095      	beq.n	8021288 <__aeabi_fsub+0x260>
 802135c:	000c      	movs	r4, r1
 802135e:	464f      	mov	r7, r9
 8021360:	2200      	movs	r2, #0
 8021362:	e6ac      	b.n	80210be <__aeabi_fsub+0x96>
 8021364:	464b      	mov	r3, r9
 8021366:	000d      	movs	r5, r1
 8021368:	e744      	b.n	80211f4 <__aeabi_fsub+0x1cc>
 802136a:	464f      	mov	r7, r9
 802136c:	2200      	movs	r2, #0
 802136e:	e6a6      	b.n	80210be <__aeabi_fsub+0x96>
 8021370:	fbffffff 	.word	0xfbffffff
 8021374:	7dffffff 	.word	0x7dffffff
 8021378:	2800      	cmp	r0, #0
 802137a:	d000      	beq.n	802137e <__aeabi_fsub+0x356>
 802137c:	e736      	b.n	80211ec <__aeabi_fsub+0x1c4>
 802137e:	2400      	movs	r4, #0
 8021380:	2700      	movs	r7, #0
 8021382:	e69c      	b.n	80210be <__aeabi_fsub+0x96>

08021384 <__aeabi_f2iz>:
 8021384:	0241      	lsls	r1, r0, #9
 8021386:	0042      	lsls	r2, r0, #1
 8021388:	0fc3      	lsrs	r3, r0, #31
 802138a:	0a49      	lsrs	r1, r1, #9
 802138c:	2000      	movs	r0, #0
 802138e:	0e12      	lsrs	r2, r2, #24
 8021390:	2a7e      	cmp	r2, #126	; 0x7e
 8021392:	dd03      	ble.n	802139c <__aeabi_f2iz+0x18>
 8021394:	2a9d      	cmp	r2, #157	; 0x9d
 8021396:	dd02      	ble.n	802139e <__aeabi_f2iz+0x1a>
 8021398:	4a09      	ldr	r2, [pc, #36]	; (80213c0 <__aeabi_f2iz+0x3c>)
 802139a:	1898      	adds	r0, r3, r2
 802139c:	4770      	bx	lr
 802139e:	2080      	movs	r0, #128	; 0x80
 80213a0:	0400      	lsls	r0, r0, #16
 80213a2:	4301      	orrs	r1, r0
 80213a4:	2a95      	cmp	r2, #149	; 0x95
 80213a6:	dc07      	bgt.n	80213b8 <__aeabi_f2iz+0x34>
 80213a8:	2096      	movs	r0, #150	; 0x96
 80213aa:	1a82      	subs	r2, r0, r2
 80213ac:	40d1      	lsrs	r1, r2
 80213ae:	4248      	negs	r0, r1
 80213b0:	2b00      	cmp	r3, #0
 80213b2:	d1f3      	bne.n	802139c <__aeabi_f2iz+0x18>
 80213b4:	0008      	movs	r0, r1
 80213b6:	e7f1      	b.n	802139c <__aeabi_f2iz+0x18>
 80213b8:	3a96      	subs	r2, #150	; 0x96
 80213ba:	4091      	lsls	r1, r2
 80213bc:	e7f7      	b.n	80213ae <__aeabi_f2iz+0x2a>
 80213be:	46c0      	nop			; (mov r8, r8)
 80213c0:	7fffffff 	.word	0x7fffffff

080213c4 <__aeabi_ui2f>:
 80213c4:	b570      	push	{r4, r5, r6, lr}
 80213c6:	1e05      	subs	r5, r0, #0
 80213c8:	d00e      	beq.n	80213e8 <__aeabi_ui2f+0x24>
 80213ca:	f7ff f851 	bl	8020470 <__clzsi2>
 80213ce:	239e      	movs	r3, #158	; 0x9e
 80213d0:	0004      	movs	r4, r0
 80213d2:	1a1b      	subs	r3, r3, r0
 80213d4:	2b96      	cmp	r3, #150	; 0x96
 80213d6:	dc0c      	bgt.n	80213f2 <__aeabi_ui2f+0x2e>
 80213d8:	2808      	cmp	r0, #8
 80213da:	dd01      	ble.n	80213e0 <__aeabi_ui2f+0x1c>
 80213dc:	3c08      	subs	r4, #8
 80213de:	40a5      	lsls	r5, r4
 80213e0:	026d      	lsls	r5, r5, #9
 80213e2:	0a6d      	lsrs	r5, r5, #9
 80213e4:	b2d8      	uxtb	r0, r3
 80213e6:	e001      	b.n	80213ec <__aeabi_ui2f+0x28>
 80213e8:	2000      	movs	r0, #0
 80213ea:	2500      	movs	r5, #0
 80213ec:	05c0      	lsls	r0, r0, #23
 80213ee:	4328      	orrs	r0, r5
 80213f0:	bd70      	pop	{r4, r5, r6, pc}
 80213f2:	2b99      	cmp	r3, #153	; 0x99
 80213f4:	dd09      	ble.n	802140a <__aeabi_ui2f+0x46>
 80213f6:	0002      	movs	r2, r0
 80213f8:	0029      	movs	r1, r5
 80213fa:	321b      	adds	r2, #27
 80213fc:	4091      	lsls	r1, r2
 80213fe:	1e4a      	subs	r2, r1, #1
 8021400:	4191      	sbcs	r1, r2
 8021402:	2205      	movs	r2, #5
 8021404:	1a12      	subs	r2, r2, r0
 8021406:	40d5      	lsrs	r5, r2
 8021408:	430d      	orrs	r5, r1
 802140a:	2c05      	cmp	r4, #5
 802140c:	dc12      	bgt.n	8021434 <__aeabi_ui2f+0x70>
 802140e:	0029      	movs	r1, r5
 8021410:	4e0c      	ldr	r6, [pc, #48]	; (8021444 <__aeabi_ui2f+0x80>)
 8021412:	4031      	ands	r1, r6
 8021414:	076a      	lsls	r2, r5, #29
 8021416:	d009      	beq.n	802142c <__aeabi_ui2f+0x68>
 8021418:	200f      	movs	r0, #15
 802141a:	4028      	ands	r0, r5
 802141c:	2804      	cmp	r0, #4
 802141e:	d005      	beq.n	802142c <__aeabi_ui2f+0x68>
 8021420:	3104      	adds	r1, #4
 8021422:	014a      	lsls	r2, r1, #5
 8021424:	d502      	bpl.n	802142c <__aeabi_ui2f+0x68>
 8021426:	239f      	movs	r3, #159	; 0x9f
 8021428:	4031      	ands	r1, r6
 802142a:	1b1b      	subs	r3, r3, r4
 802142c:	0189      	lsls	r1, r1, #6
 802142e:	0a4d      	lsrs	r5, r1, #9
 8021430:	b2d8      	uxtb	r0, r3
 8021432:	e7db      	b.n	80213ec <__aeabi_ui2f+0x28>
 8021434:	1f62      	subs	r2, r4, #5
 8021436:	4095      	lsls	r5, r2
 8021438:	0029      	movs	r1, r5
 802143a:	4e02      	ldr	r6, [pc, #8]	; (8021444 <__aeabi_ui2f+0x80>)
 802143c:	4031      	ands	r1, r6
 802143e:	076a      	lsls	r2, r5, #29
 8021440:	d0f4      	beq.n	802142c <__aeabi_ui2f+0x68>
 8021442:	e7e9      	b.n	8021418 <__aeabi_ui2f+0x54>
 8021444:	fbffffff 	.word	0xfbffffff

08021448 <__aeabi_dadd>:
 8021448:	b5f0      	push	{r4, r5, r6, r7, lr}
 802144a:	464f      	mov	r7, r9
 802144c:	4646      	mov	r6, r8
 802144e:	46d6      	mov	lr, sl
 8021450:	000d      	movs	r5, r1
 8021452:	0004      	movs	r4, r0
 8021454:	b5c0      	push	{r6, r7, lr}
 8021456:	001f      	movs	r7, r3
 8021458:	0011      	movs	r1, r2
 802145a:	0328      	lsls	r0, r5, #12
 802145c:	0f62      	lsrs	r2, r4, #29
 802145e:	0a40      	lsrs	r0, r0, #9
 8021460:	4310      	orrs	r0, r2
 8021462:	007a      	lsls	r2, r7, #1
 8021464:	0d52      	lsrs	r2, r2, #21
 8021466:	00e3      	lsls	r3, r4, #3
 8021468:	033c      	lsls	r4, r7, #12
 802146a:	4691      	mov	r9, r2
 802146c:	0a64      	lsrs	r4, r4, #9
 802146e:	0ffa      	lsrs	r2, r7, #31
 8021470:	0f4f      	lsrs	r7, r1, #29
 8021472:	006e      	lsls	r6, r5, #1
 8021474:	4327      	orrs	r7, r4
 8021476:	4692      	mov	sl, r2
 8021478:	46b8      	mov	r8, r7
 802147a:	0d76      	lsrs	r6, r6, #21
 802147c:	0fed      	lsrs	r5, r5, #31
 802147e:	00c9      	lsls	r1, r1, #3
 8021480:	4295      	cmp	r5, r2
 8021482:	d100      	bne.n	8021486 <__aeabi_dadd+0x3e>
 8021484:	e099      	b.n	80215ba <__aeabi_dadd+0x172>
 8021486:	464c      	mov	r4, r9
 8021488:	1b34      	subs	r4, r6, r4
 802148a:	46a4      	mov	ip, r4
 802148c:	2c00      	cmp	r4, #0
 802148e:	dc00      	bgt.n	8021492 <__aeabi_dadd+0x4a>
 8021490:	e07c      	b.n	802158c <__aeabi_dadd+0x144>
 8021492:	464a      	mov	r2, r9
 8021494:	2a00      	cmp	r2, #0
 8021496:	d100      	bne.n	802149a <__aeabi_dadd+0x52>
 8021498:	e0b8      	b.n	802160c <__aeabi_dadd+0x1c4>
 802149a:	4ac5      	ldr	r2, [pc, #788]	; (80217b0 <__aeabi_dadd+0x368>)
 802149c:	4296      	cmp	r6, r2
 802149e:	d100      	bne.n	80214a2 <__aeabi_dadd+0x5a>
 80214a0:	e11c      	b.n	80216dc <__aeabi_dadd+0x294>
 80214a2:	2280      	movs	r2, #128	; 0x80
 80214a4:	003c      	movs	r4, r7
 80214a6:	0412      	lsls	r2, r2, #16
 80214a8:	4314      	orrs	r4, r2
 80214aa:	46a0      	mov	r8, r4
 80214ac:	4662      	mov	r2, ip
 80214ae:	2a38      	cmp	r2, #56	; 0x38
 80214b0:	dd00      	ble.n	80214b4 <__aeabi_dadd+0x6c>
 80214b2:	e161      	b.n	8021778 <__aeabi_dadd+0x330>
 80214b4:	2a1f      	cmp	r2, #31
 80214b6:	dd00      	ble.n	80214ba <__aeabi_dadd+0x72>
 80214b8:	e1cc      	b.n	8021854 <__aeabi_dadd+0x40c>
 80214ba:	4664      	mov	r4, ip
 80214bc:	2220      	movs	r2, #32
 80214be:	1b12      	subs	r2, r2, r4
 80214c0:	4644      	mov	r4, r8
 80214c2:	4094      	lsls	r4, r2
 80214c4:	000f      	movs	r7, r1
 80214c6:	46a1      	mov	r9, r4
 80214c8:	4664      	mov	r4, ip
 80214ca:	4091      	lsls	r1, r2
 80214cc:	40e7      	lsrs	r7, r4
 80214ce:	464c      	mov	r4, r9
 80214d0:	1e4a      	subs	r2, r1, #1
 80214d2:	4191      	sbcs	r1, r2
 80214d4:	433c      	orrs	r4, r7
 80214d6:	4642      	mov	r2, r8
 80214d8:	4321      	orrs	r1, r4
 80214da:	4664      	mov	r4, ip
 80214dc:	40e2      	lsrs	r2, r4
 80214de:	1a80      	subs	r0, r0, r2
 80214e0:	1a5c      	subs	r4, r3, r1
 80214e2:	42a3      	cmp	r3, r4
 80214e4:	419b      	sbcs	r3, r3
 80214e6:	425f      	negs	r7, r3
 80214e8:	1bc7      	subs	r7, r0, r7
 80214ea:	023b      	lsls	r3, r7, #8
 80214ec:	d400      	bmi.n	80214f0 <__aeabi_dadd+0xa8>
 80214ee:	e0d0      	b.n	8021692 <__aeabi_dadd+0x24a>
 80214f0:	027f      	lsls	r7, r7, #9
 80214f2:	0a7f      	lsrs	r7, r7, #9
 80214f4:	2f00      	cmp	r7, #0
 80214f6:	d100      	bne.n	80214fa <__aeabi_dadd+0xb2>
 80214f8:	e0ff      	b.n	80216fa <__aeabi_dadd+0x2b2>
 80214fa:	0038      	movs	r0, r7
 80214fc:	f7fe ffb8 	bl	8020470 <__clzsi2>
 8021500:	0001      	movs	r1, r0
 8021502:	3908      	subs	r1, #8
 8021504:	2320      	movs	r3, #32
 8021506:	0022      	movs	r2, r4
 8021508:	1a5b      	subs	r3, r3, r1
 802150a:	408f      	lsls	r7, r1
 802150c:	40da      	lsrs	r2, r3
 802150e:	408c      	lsls	r4, r1
 8021510:	4317      	orrs	r7, r2
 8021512:	42b1      	cmp	r1, r6
 8021514:	da00      	bge.n	8021518 <__aeabi_dadd+0xd0>
 8021516:	e0ff      	b.n	8021718 <__aeabi_dadd+0x2d0>
 8021518:	1b89      	subs	r1, r1, r6
 802151a:	1c4b      	adds	r3, r1, #1
 802151c:	2b1f      	cmp	r3, #31
 802151e:	dd00      	ble.n	8021522 <__aeabi_dadd+0xda>
 8021520:	e0a8      	b.n	8021674 <__aeabi_dadd+0x22c>
 8021522:	2220      	movs	r2, #32
 8021524:	0039      	movs	r1, r7
 8021526:	1ad2      	subs	r2, r2, r3
 8021528:	0020      	movs	r0, r4
 802152a:	4094      	lsls	r4, r2
 802152c:	4091      	lsls	r1, r2
 802152e:	40d8      	lsrs	r0, r3
 8021530:	1e62      	subs	r2, r4, #1
 8021532:	4194      	sbcs	r4, r2
 8021534:	40df      	lsrs	r7, r3
 8021536:	2600      	movs	r6, #0
 8021538:	4301      	orrs	r1, r0
 802153a:	430c      	orrs	r4, r1
 802153c:	0763      	lsls	r3, r4, #29
 802153e:	d009      	beq.n	8021554 <__aeabi_dadd+0x10c>
 8021540:	230f      	movs	r3, #15
 8021542:	4023      	ands	r3, r4
 8021544:	2b04      	cmp	r3, #4
 8021546:	d005      	beq.n	8021554 <__aeabi_dadd+0x10c>
 8021548:	1d23      	adds	r3, r4, #4
 802154a:	42a3      	cmp	r3, r4
 802154c:	41a4      	sbcs	r4, r4
 802154e:	4264      	negs	r4, r4
 8021550:	193f      	adds	r7, r7, r4
 8021552:	001c      	movs	r4, r3
 8021554:	023b      	lsls	r3, r7, #8
 8021556:	d400      	bmi.n	802155a <__aeabi_dadd+0x112>
 8021558:	e09e      	b.n	8021698 <__aeabi_dadd+0x250>
 802155a:	4b95      	ldr	r3, [pc, #596]	; (80217b0 <__aeabi_dadd+0x368>)
 802155c:	3601      	adds	r6, #1
 802155e:	429e      	cmp	r6, r3
 8021560:	d100      	bne.n	8021564 <__aeabi_dadd+0x11c>
 8021562:	e0b7      	b.n	80216d4 <__aeabi_dadd+0x28c>
 8021564:	4a93      	ldr	r2, [pc, #588]	; (80217b4 <__aeabi_dadd+0x36c>)
 8021566:	08e4      	lsrs	r4, r4, #3
 8021568:	4017      	ands	r7, r2
 802156a:	077b      	lsls	r3, r7, #29
 802156c:	0571      	lsls	r1, r6, #21
 802156e:	027f      	lsls	r7, r7, #9
 8021570:	4323      	orrs	r3, r4
 8021572:	0b3f      	lsrs	r7, r7, #12
 8021574:	0d4a      	lsrs	r2, r1, #21
 8021576:	0512      	lsls	r2, r2, #20
 8021578:	433a      	orrs	r2, r7
 802157a:	07ed      	lsls	r5, r5, #31
 802157c:	432a      	orrs	r2, r5
 802157e:	0018      	movs	r0, r3
 8021580:	0011      	movs	r1, r2
 8021582:	bce0      	pop	{r5, r6, r7}
 8021584:	46ba      	mov	sl, r7
 8021586:	46b1      	mov	r9, r6
 8021588:	46a8      	mov	r8, r5
 802158a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802158c:	2c00      	cmp	r4, #0
 802158e:	d04b      	beq.n	8021628 <__aeabi_dadd+0x1e0>
 8021590:	464c      	mov	r4, r9
 8021592:	1ba4      	subs	r4, r4, r6
 8021594:	46a4      	mov	ip, r4
 8021596:	2e00      	cmp	r6, #0
 8021598:	d000      	beq.n	802159c <__aeabi_dadd+0x154>
 802159a:	e123      	b.n	80217e4 <__aeabi_dadd+0x39c>
 802159c:	0004      	movs	r4, r0
 802159e:	431c      	orrs	r4, r3
 80215a0:	d100      	bne.n	80215a4 <__aeabi_dadd+0x15c>
 80215a2:	e1af      	b.n	8021904 <__aeabi_dadd+0x4bc>
 80215a4:	4662      	mov	r2, ip
 80215a6:	1e54      	subs	r4, r2, #1
 80215a8:	2a01      	cmp	r2, #1
 80215aa:	d100      	bne.n	80215ae <__aeabi_dadd+0x166>
 80215ac:	e215      	b.n	80219da <__aeabi_dadd+0x592>
 80215ae:	4d80      	ldr	r5, [pc, #512]	; (80217b0 <__aeabi_dadd+0x368>)
 80215b0:	45ac      	cmp	ip, r5
 80215b2:	d100      	bne.n	80215b6 <__aeabi_dadd+0x16e>
 80215b4:	e1c8      	b.n	8021948 <__aeabi_dadd+0x500>
 80215b6:	46a4      	mov	ip, r4
 80215b8:	e11b      	b.n	80217f2 <__aeabi_dadd+0x3aa>
 80215ba:	464a      	mov	r2, r9
 80215bc:	1ab2      	subs	r2, r6, r2
 80215be:	4694      	mov	ip, r2
 80215c0:	2a00      	cmp	r2, #0
 80215c2:	dc00      	bgt.n	80215c6 <__aeabi_dadd+0x17e>
 80215c4:	e0ac      	b.n	8021720 <__aeabi_dadd+0x2d8>
 80215c6:	464a      	mov	r2, r9
 80215c8:	2a00      	cmp	r2, #0
 80215ca:	d043      	beq.n	8021654 <__aeabi_dadd+0x20c>
 80215cc:	4a78      	ldr	r2, [pc, #480]	; (80217b0 <__aeabi_dadd+0x368>)
 80215ce:	4296      	cmp	r6, r2
 80215d0:	d100      	bne.n	80215d4 <__aeabi_dadd+0x18c>
 80215d2:	e1af      	b.n	8021934 <__aeabi_dadd+0x4ec>
 80215d4:	2280      	movs	r2, #128	; 0x80
 80215d6:	003c      	movs	r4, r7
 80215d8:	0412      	lsls	r2, r2, #16
 80215da:	4314      	orrs	r4, r2
 80215dc:	46a0      	mov	r8, r4
 80215de:	4662      	mov	r2, ip
 80215e0:	2a38      	cmp	r2, #56	; 0x38
 80215e2:	dc67      	bgt.n	80216b4 <__aeabi_dadd+0x26c>
 80215e4:	2a1f      	cmp	r2, #31
 80215e6:	dc00      	bgt.n	80215ea <__aeabi_dadd+0x1a2>
 80215e8:	e15f      	b.n	80218aa <__aeabi_dadd+0x462>
 80215ea:	4647      	mov	r7, r8
 80215ec:	3a20      	subs	r2, #32
 80215ee:	40d7      	lsrs	r7, r2
 80215f0:	4662      	mov	r2, ip
 80215f2:	2a20      	cmp	r2, #32
 80215f4:	d005      	beq.n	8021602 <__aeabi_dadd+0x1ba>
 80215f6:	4664      	mov	r4, ip
 80215f8:	2240      	movs	r2, #64	; 0x40
 80215fa:	1b12      	subs	r2, r2, r4
 80215fc:	4644      	mov	r4, r8
 80215fe:	4094      	lsls	r4, r2
 8021600:	4321      	orrs	r1, r4
 8021602:	1e4a      	subs	r2, r1, #1
 8021604:	4191      	sbcs	r1, r2
 8021606:	000c      	movs	r4, r1
 8021608:	433c      	orrs	r4, r7
 802160a:	e057      	b.n	80216bc <__aeabi_dadd+0x274>
 802160c:	003a      	movs	r2, r7
 802160e:	430a      	orrs	r2, r1
 8021610:	d100      	bne.n	8021614 <__aeabi_dadd+0x1cc>
 8021612:	e105      	b.n	8021820 <__aeabi_dadd+0x3d8>
 8021614:	0022      	movs	r2, r4
 8021616:	3a01      	subs	r2, #1
 8021618:	2c01      	cmp	r4, #1
 802161a:	d100      	bne.n	802161e <__aeabi_dadd+0x1d6>
 802161c:	e182      	b.n	8021924 <__aeabi_dadd+0x4dc>
 802161e:	4c64      	ldr	r4, [pc, #400]	; (80217b0 <__aeabi_dadd+0x368>)
 8021620:	45a4      	cmp	ip, r4
 8021622:	d05b      	beq.n	80216dc <__aeabi_dadd+0x294>
 8021624:	4694      	mov	ip, r2
 8021626:	e741      	b.n	80214ac <__aeabi_dadd+0x64>
 8021628:	4c63      	ldr	r4, [pc, #396]	; (80217b8 <__aeabi_dadd+0x370>)
 802162a:	1c77      	adds	r7, r6, #1
 802162c:	4227      	tst	r7, r4
 802162e:	d000      	beq.n	8021632 <__aeabi_dadd+0x1ea>
 8021630:	e0c4      	b.n	80217bc <__aeabi_dadd+0x374>
 8021632:	0004      	movs	r4, r0
 8021634:	431c      	orrs	r4, r3
 8021636:	2e00      	cmp	r6, #0
 8021638:	d000      	beq.n	802163c <__aeabi_dadd+0x1f4>
 802163a:	e169      	b.n	8021910 <__aeabi_dadd+0x4c8>
 802163c:	2c00      	cmp	r4, #0
 802163e:	d100      	bne.n	8021642 <__aeabi_dadd+0x1fa>
 8021640:	e1bf      	b.n	80219c2 <__aeabi_dadd+0x57a>
 8021642:	4644      	mov	r4, r8
 8021644:	430c      	orrs	r4, r1
 8021646:	d000      	beq.n	802164a <__aeabi_dadd+0x202>
 8021648:	e1d0      	b.n	80219ec <__aeabi_dadd+0x5a4>
 802164a:	0742      	lsls	r2, r0, #29
 802164c:	08db      	lsrs	r3, r3, #3
 802164e:	4313      	orrs	r3, r2
 8021650:	08c0      	lsrs	r0, r0, #3
 8021652:	e029      	b.n	80216a8 <__aeabi_dadd+0x260>
 8021654:	003a      	movs	r2, r7
 8021656:	430a      	orrs	r2, r1
 8021658:	d100      	bne.n	802165c <__aeabi_dadd+0x214>
 802165a:	e170      	b.n	802193e <__aeabi_dadd+0x4f6>
 802165c:	4662      	mov	r2, ip
 802165e:	4664      	mov	r4, ip
 8021660:	3a01      	subs	r2, #1
 8021662:	2c01      	cmp	r4, #1
 8021664:	d100      	bne.n	8021668 <__aeabi_dadd+0x220>
 8021666:	e0e0      	b.n	802182a <__aeabi_dadd+0x3e2>
 8021668:	4c51      	ldr	r4, [pc, #324]	; (80217b0 <__aeabi_dadd+0x368>)
 802166a:	45a4      	cmp	ip, r4
 802166c:	d100      	bne.n	8021670 <__aeabi_dadd+0x228>
 802166e:	e161      	b.n	8021934 <__aeabi_dadd+0x4ec>
 8021670:	4694      	mov	ip, r2
 8021672:	e7b4      	b.n	80215de <__aeabi_dadd+0x196>
 8021674:	003a      	movs	r2, r7
 8021676:	391f      	subs	r1, #31
 8021678:	40ca      	lsrs	r2, r1
 802167a:	0011      	movs	r1, r2
 802167c:	2b20      	cmp	r3, #32
 802167e:	d003      	beq.n	8021688 <__aeabi_dadd+0x240>
 8021680:	2240      	movs	r2, #64	; 0x40
 8021682:	1ad3      	subs	r3, r2, r3
 8021684:	409f      	lsls	r7, r3
 8021686:	433c      	orrs	r4, r7
 8021688:	1e63      	subs	r3, r4, #1
 802168a:	419c      	sbcs	r4, r3
 802168c:	2700      	movs	r7, #0
 802168e:	2600      	movs	r6, #0
 8021690:	430c      	orrs	r4, r1
 8021692:	0763      	lsls	r3, r4, #29
 8021694:	d000      	beq.n	8021698 <__aeabi_dadd+0x250>
 8021696:	e753      	b.n	8021540 <__aeabi_dadd+0xf8>
 8021698:	46b4      	mov	ip, r6
 802169a:	08e4      	lsrs	r4, r4, #3
 802169c:	077b      	lsls	r3, r7, #29
 802169e:	4323      	orrs	r3, r4
 80216a0:	08f8      	lsrs	r0, r7, #3
 80216a2:	4a43      	ldr	r2, [pc, #268]	; (80217b0 <__aeabi_dadd+0x368>)
 80216a4:	4594      	cmp	ip, r2
 80216a6:	d01d      	beq.n	80216e4 <__aeabi_dadd+0x29c>
 80216a8:	4662      	mov	r2, ip
 80216aa:	0307      	lsls	r7, r0, #12
 80216ac:	0552      	lsls	r2, r2, #21
 80216ae:	0b3f      	lsrs	r7, r7, #12
 80216b0:	0d52      	lsrs	r2, r2, #21
 80216b2:	e760      	b.n	8021576 <__aeabi_dadd+0x12e>
 80216b4:	4644      	mov	r4, r8
 80216b6:	430c      	orrs	r4, r1
 80216b8:	1e62      	subs	r2, r4, #1
 80216ba:	4194      	sbcs	r4, r2
 80216bc:	18e4      	adds	r4, r4, r3
 80216be:	429c      	cmp	r4, r3
 80216c0:	419b      	sbcs	r3, r3
 80216c2:	425f      	negs	r7, r3
 80216c4:	183f      	adds	r7, r7, r0
 80216c6:	023b      	lsls	r3, r7, #8
 80216c8:	d5e3      	bpl.n	8021692 <__aeabi_dadd+0x24a>
 80216ca:	4b39      	ldr	r3, [pc, #228]	; (80217b0 <__aeabi_dadd+0x368>)
 80216cc:	3601      	adds	r6, #1
 80216ce:	429e      	cmp	r6, r3
 80216d0:	d000      	beq.n	80216d4 <__aeabi_dadd+0x28c>
 80216d2:	e0b5      	b.n	8021840 <__aeabi_dadd+0x3f8>
 80216d4:	0032      	movs	r2, r6
 80216d6:	2700      	movs	r7, #0
 80216d8:	2300      	movs	r3, #0
 80216da:	e74c      	b.n	8021576 <__aeabi_dadd+0x12e>
 80216dc:	0742      	lsls	r2, r0, #29
 80216de:	08db      	lsrs	r3, r3, #3
 80216e0:	4313      	orrs	r3, r2
 80216e2:	08c0      	lsrs	r0, r0, #3
 80216e4:	001a      	movs	r2, r3
 80216e6:	4302      	orrs	r2, r0
 80216e8:	d100      	bne.n	80216ec <__aeabi_dadd+0x2a4>
 80216ea:	e1e1      	b.n	8021ab0 <__aeabi_dadd+0x668>
 80216ec:	2780      	movs	r7, #128	; 0x80
 80216ee:	033f      	lsls	r7, r7, #12
 80216f0:	4307      	orrs	r7, r0
 80216f2:	033f      	lsls	r7, r7, #12
 80216f4:	4a2e      	ldr	r2, [pc, #184]	; (80217b0 <__aeabi_dadd+0x368>)
 80216f6:	0b3f      	lsrs	r7, r7, #12
 80216f8:	e73d      	b.n	8021576 <__aeabi_dadd+0x12e>
 80216fa:	0020      	movs	r0, r4
 80216fc:	f7fe feb8 	bl	8020470 <__clzsi2>
 8021700:	0001      	movs	r1, r0
 8021702:	3118      	adds	r1, #24
 8021704:	291f      	cmp	r1, #31
 8021706:	dc00      	bgt.n	802170a <__aeabi_dadd+0x2c2>
 8021708:	e6fc      	b.n	8021504 <__aeabi_dadd+0xbc>
 802170a:	3808      	subs	r0, #8
 802170c:	4084      	lsls	r4, r0
 802170e:	0027      	movs	r7, r4
 8021710:	2400      	movs	r4, #0
 8021712:	42b1      	cmp	r1, r6
 8021714:	db00      	blt.n	8021718 <__aeabi_dadd+0x2d0>
 8021716:	e6ff      	b.n	8021518 <__aeabi_dadd+0xd0>
 8021718:	4a26      	ldr	r2, [pc, #152]	; (80217b4 <__aeabi_dadd+0x36c>)
 802171a:	1a76      	subs	r6, r6, r1
 802171c:	4017      	ands	r7, r2
 802171e:	e70d      	b.n	802153c <__aeabi_dadd+0xf4>
 8021720:	2a00      	cmp	r2, #0
 8021722:	d02f      	beq.n	8021784 <__aeabi_dadd+0x33c>
 8021724:	464a      	mov	r2, r9
 8021726:	1b92      	subs	r2, r2, r6
 8021728:	4694      	mov	ip, r2
 802172a:	2e00      	cmp	r6, #0
 802172c:	d100      	bne.n	8021730 <__aeabi_dadd+0x2e8>
 802172e:	e0ad      	b.n	802188c <__aeabi_dadd+0x444>
 8021730:	4a1f      	ldr	r2, [pc, #124]	; (80217b0 <__aeabi_dadd+0x368>)
 8021732:	4591      	cmp	r9, r2
 8021734:	d100      	bne.n	8021738 <__aeabi_dadd+0x2f0>
 8021736:	e10f      	b.n	8021958 <__aeabi_dadd+0x510>
 8021738:	2280      	movs	r2, #128	; 0x80
 802173a:	0412      	lsls	r2, r2, #16
 802173c:	4310      	orrs	r0, r2
 802173e:	4662      	mov	r2, ip
 8021740:	2a38      	cmp	r2, #56	; 0x38
 8021742:	dd00      	ble.n	8021746 <__aeabi_dadd+0x2fe>
 8021744:	e10f      	b.n	8021966 <__aeabi_dadd+0x51e>
 8021746:	2a1f      	cmp	r2, #31
 8021748:	dd00      	ble.n	802174c <__aeabi_dadd+0x304>
 802174a:	e180      	b.n	8021a4e <__aeabi_dadd+0x606>
 802174c:	4664      	mov	r4, ip
 802174e:	2220      	movs	r2, #32
 8021750:	001e      	movs	r6, r3
 8021752:	1b12      	subs	r2, r2, r4
 8021754:	4667      	mov	r7, ip
 8021756:	0004      	movs	r4, r0
 8021758:	4093      	lsls	r3, r2
 802175a:	4094      	lsls	r4, r2
 802175c:	40fe      	lsrs	r6, r7
 802175e:	1e5a      	subs	r2, r3, #1
 8021760:	4193      	sbcs	r3, r2
 8021762:	40f8      	lsrs	r0, r7
 8021764:	4334      	orrs	r4, r6
 8021766:	431c      	orrs	r4, r3
 8021768:	4480      	add	r8, r0
 802176a:	1864      	adds	r4, r4, r1
 802176c:	428c      	cmp	r4, r1
 802176e:	41bf      	sbcs	r7, r7
 8021770:	427f      	negs	r7, r7
 8021772:	464e      	mov	r6, r9
 8021774:	4447      	add	r7, r8
 8021776:	e7a6      	b.n	80216c6 <__aeabi_dadd+0x27e>
 8021778:	4642      	mov	r2, r8
 802177a:	430a      	orrs	r2, r1
 802177c:	0011      	movs	r1, r2
 802177e:	1e4a      	subs	r2, r1, #1
 8021780:	4191      	sbcs	r1, r2
 8021782:	e6ad      	b.n	80214e0 <__aeabi_dadd+0x98>
 8021784:	4c0c      	ldr	r4, [pc, #48]	; (80217b8 <__aeabi_dadd+0x370>)
 8021786:	1c72      	adds	r2, r6, #1
 8021788:	4222      	tst	r2, r4
 802178a:	d000      	beq.n	802178e <__aeabi_dadd+0x346>
 802178c:	e0a1      	b.n	80218d2 <__aeabi_dadd+0x48a>
 802178e:	0002      	movs	r2, r0
 8021790:	431a      	orrs	r2, r3
 8021792:	2e00      	cmp	r6, #0
 8021794:	d000      	beq.n	8021798 <__aeabi_dadd+0x350>
 8021796:	e0fa      	b.n	802198e <__aeabi_dadd+0x546>
 8021798:	2a00      	cmp	r2, #0
 802179a:	d100      	bne.n	802179e <__aeabi_dadd+0x356>
 802179c:	e145      	b.n	8021a2a <__aeabi_dadd+0x5e2>
 802179e:	003a      	movs	r2, r7
 80217a0:	430a      	orrs	r2, r1
 80217a2:	d000      	beq.n	80217a6 <__aeabi_dadd+0x35e>
 80217a4:	e146      	b.n	8021a34 <__aeabi_dadd+0x5ec>
 80217a6:	0742      	lsls	r2, r0, #29
 80217a8:	08db      	lsrs	r3, r3, #3
 80217aa:	4313      	orrs	r3, r2
 80217ac:	08c0      	lsrs	r0, r0, #3
 80217ae:	e77b      	b.n	80216a8 <__aeabi_dadd+0x260>
 80217b0:	000007ff 	.word	0x000007ff
 80217b4:	ff7fffff 	.word	0xff7fffff
 80217b8:	000007fe 	.word	0x000007fe
 80217bc:	4647      	mov	r7, r8
 80217be:	1a5c      	subs	r4, r3, r1
 80217c0:	1bc2      	subs	r2, r0, r7
 80217c2:	42a3      	cmp	r3, r4
 80217c4:	41bf      	sbcs	r7, r7
 80217c6:	427f      	negs	r7, r7
 80217c8:	46b9      	mov	r9, r7
 80217ca:	0017      	movs	r7, r2
 80217cc:	464a      	mov	r2, r9
 80217ce:	1abf      	subs	r7, r7, r2
 80217d0:	023a      	lsls	r2, r7, #8
 80217d2:	d500      	bpl.n	80217d6 <__aeabi_dadd+0x38e>
 80217d4:	e08d      	b.n	80218f2 <__aeabi_dadd+0x4aa>
 80217d6:	0023      	movs	r3, r4
 80217d8:	433b      	orrs	r3, r7
 80217da:	d000      	beq.n	80217de <__aeabi_dadd+0x396>
 80217dc:	e68a      	b.n	80214f4 <__aeabi_dadd+0xac>
 80217de:	2000      	movs	r0, #0
 80217e0:	2500      	movs	r5, #0
 80217e2:	e761      	b.n	80216a8 <__aeabi_dadd+0x260>
 80217e4:	4cb4      	ldr	r4, [pc, #720]	; (8021ab8 <__aeabi_dadd+0x670>)
 80217e6:	45a1      	cmp	r9, r4
 80217e8:	d100      	bne.n	80217ec <__aeabi_dadd+0x3a4>
 80217ea:	e0ad      	b.n	8021948 <__aeabi_dadd+0x500>
 80217ec:	2480      	movs	r4, #128	; 0x80
 80217ee:	0424      	lsls	r4, r4, #16
 80217f0:	4320      	orrs	r0, r4
 80217f2:	4664      	mov	r4, ip
 80217f4:	2c38      	cmp	r4, #56	; 0x38
 80217f6:	dc3d      	bgt.n	8021874 <__aeabi_dadd+0x42c>
 80217f8:	4662      	mov	r2, ip
 80217fa:	2c1f      	cmp	r4, #31
 80217fc:	dd00      	ble.n	8021800 <__aeabi_dadd+0x3b8>
 80217fe:	e0b7      	b.n	8021970 <__aeabi_dadd+0x528>
 8021800:	2520      	movs	r5, #32
 8021802:	001e      	movs	r6, r3
 8021804:	1b2d      	subs	r5, r5, r4
 8021806:	0004      	movs	r4, r0
 8021808:	40ab      	lsls	r3, r5
 802180a:	40ac      	lsls	r4, r5
 802180c:	40d6      	lsrs	r6, r2
 802180e:	40d0      	lsrs	r0, r2
 8021810:	4642      	mov	r2, r8
 8021812:	1e5d      	subs	r5, r3, #1
 8021814:	41ab      	sbcs	r3, r5
 8021816:	4334      	orrs	r4, r6
 8021818:	1a12      	subs	r2, r2, r0
 802181a:	4690      	mov	r8, r2
 802181c:	4323      	orrs	r3, r4
 802181e:	e02c      	b.n	802187a <__aeabi_dadd+0x432>
 8021820:	0742      	lsls	r2, r0, #29
 8021822:	08db      	lsrs	r3, r3, #3
 8021824:	4313      	orrs	r3, r2
 8021826:	08c0      	lsrs	r0, r0, #3
 8021828:	e73b      	b.n	80216a2 <__aeabi_dadd+0x25a>
 802182a:	185c      	adds	r4, r3, r1
 802182c:	429c      	cmp	r4, r3
 802182e:	419b      	sbcs	r3, r3
 8021830:	4440      	add	r0, r8
 8021832:	425b      	negs	r3, r3
 8021834:	18c7      	adds	r7, r0, r3
 8021836:	2601      	movs	r6, #1
 8021838:	023b      	lsls	r3, r7, #8
 802183a:	d400      	bmi.n	802183e <__aeabi_dadd+0x3f6>
 802183c:	e729      	b.n	8021692 <__aeabi_dadd+0x24a>
 802183e:	2602      	movs	r6, #2
 8021840:	4a9e      	ldr	r2, [pc, #632]	; (8021abc <__aeabi_dadd+0x674>)
 8021842:	0863      	lsrs	r3, r4, #1
 8021844:	4017      	ands	r7, r2
 8021846:	2201      	movs	r2, #1
 8021848:	4014      	ands	r4, r2
 802184a:	431c      	orrs	r4, r3
 802184c:	07fb      	lsls	r3, r7, #31
 802184e:	431c      	orrs	r4, r3
 8021850:	087f      	lsrs	r7, r7, #1
 8021852:	e673      	b.n	802153c <__aeabi_dadd+0xf4>
 8021854:	4644      	mov	r4, r8
 8021856:	3a20      	subs	r2, #32
 8021858:	40d4      	lsrs	r4, r2
 802185a:	4662      	mov	r2, ip
 802185c:	2a20      	cmp	r2, #32
 802185e:	d005      	beq.n	802186c <__aeabi_dadd+0x424>
 8021860:	4667      	mov	r7, ip
 8021862:	2240      	movs	r2, #64	; 0x40
 8021864:	1bd2      	subs	r2, r2, r7
 8021866:	4647      	mov	r7, r8
 8021868:	4097      	lsls	r7, r2
 802186a:	4339      	orrs	r1, r7
 802186c:	1e4a      	subs	r2, r1, #1
 802186e:	4191      	sbcs	r1, r2
 8021870:	4321      	orrs	r1, r4
 8021872:	e635      	b.n	80214e0 <__aeabi_dadd+0x98>
 8021874:	4303      	orrs	r3, r0
 8021876:	1e58      	subs	r0, r3, #1
 8021878:	4183      	sbcs	r3, r0
 802187a:	1acc      	subs	r4, r1, r3
 802187c:	42a1      	cmp	r1, r4
 802187e:	41bf      	sbcs	r7, r7
 8021880:	4643      	mov	r3, r8
 8021882:	427f      	negs	r7, r7
 8021884:	4655      	mov	r5, sl
 8021886:	464e      	mov	r6, r9
 8021888:	1bdf      	subs	r7, r3, r7
 802188a:	e62e      	b.n	80214ea <__aeabi_dadd+0xa2>
 802188c:	0002      	movs	r2, r0
 802188e:	431a      	orrs	r2, r3
 8021890:	d100      	bne.n	8021894 <__aeabi_dadd+0x44c>
 8021892:	e0bd      	b.n	8021a10 <__aeabi_dadd+0x5c8>
 8021894:	4662      	mov	r2, ip
 8021896:	4664      	mov	r4, ip
 8021898:	3a01      	subs	r2, #1
 802189a:	2c01      	cmp	r4, #1
 802189c:	d100      	bne.n	80218a0 <__aeabi_dadd+0x458>
 802189e:	e0e5      	b.n	8021a6c <__aeabi_dadd+0x624>
 80218a0:	4c85      	ldr	r4, [pc, #532]	; (8021ab8 <__aeabi_dadd+0x670>)
 80218a2:	45a4      	cmp	ip, r4
 80218a4:	d058      	beq.n	8021958 <__aeabi_dadd+0x510>
 80218a6:	4694      	mov	ip, r2
 80218a8:	e749      	b.n	802173e <__aeabi_dadd+0x2f6>
 80218aa:	4664      	mov	r4, ip
 80218ac:	2220      	movs	r2, #32
 80218ae:	1b12      	subs	r2, r2, r4
 80218b0:	4644      	mov	r4, r8
 80218b2:	4094      	lsls	r4, r2
 80218b4:	000f      	movs	r7, r1
 80218b6:	46a1      	mov	r9, r4
 80218b8:	4664      	mov	r4, ip
 80218ba:	4091      	lsls	r1, r2
 80218bc:	40e7      	lsrs	r7, r4
 80218be:	464c      	mov	r4, r9
 80218c0:	1e4a      	subs	r2, r1, #1
 80218c2:	4191      	sbcs	r1, r2
 80218c4:	433c      	orrs	r4, r7
 80218c6:	4642      	mov	r2, r8
 80218c8:	430c      	orrs	r4, r1
 80218ca:	4661      	mov	r1, ip
 80218cc:	40ca      	lsrs	r2, r1
 80218ce:	1880      	adds	r0, r0, r2
 80218d0:	e6f4      	b.n	80216bc <__aeabi_dadd+0x274>
 80218d2:	4c79      	ldr	r4, [pc, #484]	; (8021ab8 <__aeabi_dadd+0x670>)
 80218d4:	42a2      	cmp	r2, r4
 80218d6:	d100      	bne.n	80218da <__aeabi_dadd+0x492>
 80218d8:	e6fd      	b.n	80216d6 <__aeabi_dadd+0x28e>
 80218da:	1859      	adds	r1, r3, r1
 80218dc:	4299      	cmp	r1, r3
 80218de:	419b      	sbcs	r3, r3
 80218e0:	4440      	add	r0, r8
 80218e2:	425f      	negs	r7, r3
 80218e4:	19c7      	adds	r7, r0, r7
 80218e6:	07fc      	lsls	r4, r7, #31
 80218e8:	0849      	lsrs	r1, r1, #1
 80218ea:	0016      	movs	r6, r2
 80218ec:	430c      	orrs	r4, r1
 80218ee:	087f      	lsrs	r7, r7, #1
 80218f0:	e6cf      	b.n	8021692 <__aeabi_dadd+0x24a>
 80218f2:	1acc      	subs	r4, r1, r3
 80218f4:	42a1      	cmp	r1, r4
 80218f6:	41bf      	sbcs	r7, r7
 80218f8:	4643      	mov	r3, r8
 80218fa:	427f      	negs	r7, r7
 80218fc:	1a18      	subs	r0, r3, r0
 80218fe:	4655      	mov	r5, sl
 8021900:	1bc7      	subs	r7, r0, r7
 8021902:	e5f7      	b.n	80214f4 <__aeabi_dadd+0xac>
 8021904:	08c9      	lsrs	r1, r1, #3
 8021906:	077b      	lsls	r3, r7, #29
 8021908:	4655      	mov	r5, sl
 802190a:	430b      	orrs	r3, r1
 802190c:	08f8      	lsrs	r0, r7, #3
 802190e:	e6c8      	b.n	80216a2 <__aeabi_dadd+0x25a>
 8021910:	2c00      	cmp	r4, #0
 8021912:	d000      	beq.n	8021916 <__aeabi_dadd+0x4ce>
 8021914:	e081      	b.n	8021a1a <__aeabi_dadd+0x5d2>
 8021916:	4643      	mov	r3, r8
 8021918:	430b      	orrs	r3, r1
 802191a:	d115      	bne.n	8021948 <__aeabi_dadd+0x500>
 802191c:	2080      	movs	r0, #128	; 0x80
 802191e:	2500      	movs	r5, #0
 8021920:	0300      	lsls	r0, r0, #12
 8021922:	e6e3      	b.n	80216ec <__aeabi_dadd+0x2a4>
 8021924:	1a5c      	subs	r4, r3, r1
 8021926:	42a3      	cmp	r3, r4
 8021928:	419b      	sbcs	r3, r3
 802192a:	1bc7      	subs	r7, r0, r7
 802192c:	425b      	negs	r3, r3
 802192e:	2601      	movs	r6, #1
 8021930:	1aff      	subs	r7, r7, r3
 8021932:	e5da      	b.n	80214ea <__aeabi_dadd+0xa2>
 8021934:	0742      	lsls	r2, r0, #29
 8021936:	08db      	lsrs	r3, r3, #3
 8021938:	4313      	orrs	r3, r2
 802193a:	08c0      	lsrs	r0, r0, #3
 802193c:	e6d2      	b.n	80216e4 <__aeabi_dadd+0x29c>
 802193e:	0742      	lsls	r2, r0, #29
 8021940:	08db      	lsrs	r3, r3, #3
 8021942:	4313      	orrs	r3, r2
 8021944:	08c0      	lsrs	r0, r0, #3
 8021946:	e6ac      	b.n	80216a2 <__aeabi_dadd+0x25a>
 8021948:	4643      	mov	r3, r8
 802194a:	4642      	mov	r2, r8
 802194c:	08c9      	lsrs	r1, r1, #3
 802194e:	075b      	lsls	r3, r3, #29
 8021950:	4655      	mov	r5, sl
 8021952:	430b      	orrs	r3, r1
 8021954:	08d0      	lsrs	r0, r2, #3
 8021956:	e6c5      	b.n	80216e4 <__aeabi_dadd+0x29c>
 8021958:	4643      	mov	r3, r8
 802195a:	4642      	mov	r2, r8
 802195c:	075b      	lsls	r3, r3, #29
 802195e:	08c9      	lsrs	r1, r1, #3
 8021960:	430b      	orrs	r3, r1
 8021962:	08d0      	lsrs	r0, r2, #3
 8021964:	e6be      	b.n	80216e4 <__aeabi_dadd+0x29c>
 8021966:	4303      	orrs	r3, r0
 8021968:	001c      	movs	r4, r3
 802196a:	1e63      	subs	r3, r4, #1
 802196c:	419c      	sbcs	r4, r3
 802196e:	e6fc      	b.n	802176a <__aeabi_dadd+0x322>
 8021970:	0002      	movs	r2, r0
 8021972:	3c20      	subs	r4, #32
 8021974:	40e2      	lsrs	r2, r4
 8021976:	0014      	movs	r4, r2
 8021978:	4662      	mov	r2, ip
 802197a:	2a20      	cmp	r2, #32
 802197c:	d003      	beq.n	8021986 <__aeabi_dadd+0x53e>
 802197e:	2540      	movs	r5, #64	; 0x40
 8021980:	1aad      	subs	r5, r5, r2
 8021982:	40a8      	lsls	r0, r5
 8021984:	4303      	orrs	r3, r0
 8021986:	1e58      	subs	r0, r3, #1
 8021988:	4183      	sbcs	r3, r0
 802198a:	4323      	orrs	r3, r4
 802198c:	e775      	b.n	802187a <__aeabi_dadd+0x432>
 802198e:	2a00      	cmp	r2, #0
 8021990:	d0e2      	beq.n	8021958 <__aeabi_dadd+0x510>
 8021992:	003a      	movs	r2, r7
 8021994:	430a      	orrs	r2, r1
 8021996:	d0cd      	beq.n	8021934 <__aeabi_dadd+0x4ec>
 8021998:	0742      	lsls	r2, r0, #29
 802199a:	08db      	lsrs	r3, r3, #3
 802199c:	4313      	orrs	r3, r2
 802199e:	2280      	movs	r2, #128	; 0x80
 80219a0:	08c0      	lsrs	r0, r0, #3
 80219a2:	0312      	lsls	r2, r2, #12
 80219a4:	4210      	tst	r0, r2
 80219a6:	d006      	beq.n	80219b6 <__aeabi_dadd+0x56e>
 80219a8:	08fc      	lsrs	r4, r7, #3
 80219aa:	4214      	tst	r4, r2
 80219ac:	d103      	bne.n	80219b6 <__aeabi_dadd+0x56e>
 80219ae:	0020      	movs	r0, r4
 80219b0:	08cb      	lsrs	r3, r1, #3
 80219b2:	077a      	lsls	r2, r7, #29
 80219b4:	4313      	orrs	r3, r2
 80219b6:	0f5a      	lsrs	r2, r3, #29
 80219b8:	00db      	lsls	r3, r3, #3
 80219ba:	0752      	lsls	r2, r2, #29
 80219bc:	08db      	lsrs	r3, r3, #3
 80219be:	4313      	orrs	r3, r2
 80219c0:	e690      	b.n	80216e4 <__aeabi_dadd+0x29c>
 80219c2:	4643      	mov	r3, r8
 80219c4:	430b      	orrs	r3, r1
 80219c6:	d100      	bne.n	80219ca <__aeabi_dadd+0x582>
 80219c8:	e709      	b.n	80217de <__aeabi_dadd+0x396>
 80219ca:	4643      	mov	r3, r8
 80219cc:	4642      	mov	r2, r8
 80219ce:	08c9      	lsrs	r1, r1, #3
 80219d0:	075b      	lsls	r3, r3, #29
 80219d2:	4655      	mov	r5, sl
 80219d4:	430b      	orrs	r3, r1
 80219d6:	08d0      	lsrs	r0, r2, #3
 80219d8:	e666      	b.n	80216a8 <__aeabi_dadd+0x260>
 80219da:	1acc      	subs	r4, r1, r3
 80219dc:	42a1      	cmp	r1, r4
 80219de:	4189      	sbcs	r1, r1
 80219e0:	1a3f      	subs	r7, r7, r0
 80219e2:	4249      	negs	r1, r1
 80219e4:	4655      	mov	r5, sl
 80219e6:	2601      	movs	r6, #1
 80219e8:	1a7f      	subs	r7, r7, r1
 80219ea:	e57e      	b.n	80214ea <__aeabi_dadd+0xa2>
 80219ec:	4642      	mov	r2, r8
 80219ee:	1a5c      	subs	r4, r3, r1
 80219f0:	1a87      	subs	r7, r0, r2
 80219f2:	42a3      	cmp	r3, r4
 80219f4:	4192      	sbcs	r2, r2
 80219f6:	4252      	negs	r2, r2
 80219f8:	1abf      	subs	r7, r7, r2
 80219fa:	023a      	lsls	r2, r7, #8
 80219fc:	d53d      	bpl.n	8021a7a <__aeabi_dadd+0x632>
 80219fe:	1acc      	subs	r4, r1, r3
 8021a00:	42a1      	cmp	r1, r4
 8021a02:	4189      	sbcs	r1, r1
 8021a04:	4643      	mov	r3, r8
 8021a06:	4249      	negs	r1, r1
 8021a08:	1a1f      	subs	r7, r3, r0
 8021a0a:	4655      	mov	r5, sl
 8021a0c:	1a7f      	subs	r7, r7, r1
 8021a0e:	e595      	b.n	802153c <__aeabi_dadd+0xf4>
 8021a10:	077b      	lsls	r3, r7, #29
 8021a12:	08c9      	lsrs	r1, r1, #3
 8021a14:	430b      	orrs	r3, r1
 8021a16:	08f8      	lsrs	r0, r7, #3
 8021a18:	e643      	b.n	80216a2 <__aeabi_dadd+0x25a>
 8021a1a:	4644      	mov	r4, r8
 8021a1c:	08db      	lsrs	r3, r3, #3
 8021a1e:	430c      	orrs	r4, r1
 8021a20:	d130      	bne.n	8021a84 <__aeabi_dadd+0x63c>
 8021a22:	0742      	lsls	r2, r0, #29
 8021a24:	4313      	orrs	r3, r2
 8021a26:	08c0      	lsrs	r0, r0, #3
 8021a28:	e65c      	b.n	80216e4 <__aeabi_dadd+0x29c>
 8021a2a:	077b      	lsls	r3, r7, #29
 8021a2c:	08c9      	lsrs	r1, r1, #3
 8021a2e:	430b      	orrs	r3, r1
 8021a30:	08f8      	lsrs	r0, r7, #3
 8021a32:	e639      	b.n	80216a8 <__aeabi_dadd+0x260>
 8021a34:	185c      	adds	r4, r3, r1
 8021a36:	429c      	cmp	r4, r3
 8021a38:	419b      	sbcs	r3, r3
 8021a3a:	4440      	add	r0, r8
 8021a3c:	425b      	negs	r3, r3
 8021a3e:	18c7      	adds	r7, r0, r3
 8021a40:	023b      	lsls	r3, r7, #8
 8021a42:	d400      	bmi.n	8021a46 <__aeabi_dadd+0x5fe>
 8021a44:	e625      	b.n	8021692 <__aeabi_dadd+0x24a>
 8021a46:	4b1d      	ldr	r3, [pc, #116]	; (8021abc <__aeabi_dadd+0x674>)
 8021a48:	2601      	movs	r6, #1
 8021a4a:	401f      	ands	r7, r3
 8021a4c:	e621      	b.n	8021692 <__aeabi_dadd+0x24a>
 8021a4e:	0004      	movs	r4, r0
 8021a50:	3a20      	subs	r2, #32
 8021a52:	40d4      	lsrs	r4, r2
 8021a54:	4662      	mov	r2, ip
 8021a56:	2a20      	cmp	r2, #32
 8021a58:	d004      	beq.n	8021a64 <__aeabi_dadd+0x61c>
 8021a5a:	2240      	movs	r2, #64	; 0x40
 8021a5c:	4666      	mov	r6, ip
 8021a5e:	1b92      	subs	r2, r2, r6
 8021a60:	4090      	lsls	r0, r2
 8021a62:	4303      	orrs	r3, r0
 8021a64:	1e5a      	subs	r2, r3, #1
 8021a66:	4193      	sbcs	r3, r2
 8021a68:	431c      	orrs	r4, r3
 8021a6a:	e67e      	b.n	802176a <__aeabi_dadd+0x322>
 8021a6c:	185c      	adds	r4, r3, r1
 8021a6e:	428c      	cmp	r4, r1
 8021a70:	4189      	sbcs	r1, r1
 8021a72:	4440      	add	r0, r8
 8021a74:	4249      	negs	r1, r1
 8021a76:	1847      	adds	r7, r0, r1
 8021a78:	e6dd      	b.n	8021836 <__aeabi_dadd+0x3ee>
 8021a7a:	0023      	movs	r3, r4
 8021a7c:	433b      	orrs	r3, r7
 8021a7e:	d100      	bne.n	8021a82 <__aeabi_dadd+0x63a>
 8021a80:	e6ad      	b.n	80217de <__aeabi_dadd+0x396>
 8021a82:	e606      	b.n	8021692 <__aeabi_dadd+0x24a>
 8021a84:	0744      	lsls	r4, r0, #29
 8021a86:	4323      	orrs	r3, r4
 8021a88:	2480      	movs	r4, #128	; 0x80
 8021a8a:	08c0      	lsrs	r0, r0, #3
 8021a8c:	0324      	lsls	r4, r4, #12
 8021a8e:	4220      	tst	r0, r4
 8021a90:	d008      	beq.n	8021aa4 <__aeabi_dadd+0x65c>
 8021a92:	4642      	mov	r2, r8
 8021a94:	08d6      	lsrs	r6, r2, #3
 8021a96:	4226      	tst	r6, r4
 8021a98:	d104      	bne.n	8021aa4 <__aeabi_dadd+0x65c>
 8021a9a:	4655      	mov	r5, sl
 8021a9c:	0030      	movs	r0, r6
 8021a9e:	08cb      	lsrs	r3, r1, #3
 8021aa0:	0751      	lsls	r1, r2, #29
 8021aa2:	430b      	orrs	r3, r1
 8021aa4:	0f5a      	lsrs	r2, r3, #29
 8021aa6:	00db      	lsls	r3, r3, #3
 8021aa8:	08db      	lsrs	r3, r3, #3
 8021aaa:	0752      	lsls	r2, r2, #29
 8021aac:	4313      	orrs	r3, r2
 8021aae:	e619      	b.n	80216e4 <__aeabi_dadd+0x29c>
 8021ab0:	2300      	movs	r3, #0
 8021ab2:	4a01      	ldr	r2, [pc, #4]	; (8021ab8 <__aeabi_dadd+0x670>)
 8021ab4:	001f      	movs	r7, r3
 8021ab6:	e55e      	b.n	8021576 <__aeabi_dadd+0x12e>
 8021ab8:	000007ff 	.word	0x000007ff
 8021abc:	ff7fffff 	.word	0xff7fffff

08021ac0 <__aeabi_d2iz>:
 8021ac0:	000a      	movs	r2, r1
 8021ac2:	b530      	push	{r4, r5, lr}
 8021ac4:	4c13      	ldr	r4, [pc, #76]	; (8021b14 <__aeabi_d2iz+0x54>)
 8021ac6:	0053      	lsls	r3, r2, #1
 8021ac8:	0309      	lsls	r1, r1, #12
 8021aca:	0005      	movs	r5, r0
 8021acc:	0b09      	lsrs	r1, r1, #12
 8021ace:	2000      	movs	r0, #0
 8021ad0:	0d5b      	lsrs	r3, r3, #21
 8021ad2:	0fd2      	lsrs	r2, r2, #31
 8021ad4:	42a3      	cmp	r3, r4
 8021ad6:	dd04      	ble.n	8021ae2 <__aeabi_d2iz+0x22>
 8021ad8:	480f      	ldr	r0, [pc, #60]	; (8021b18 <__aeabi_d2iz+0x58>)
 8021ada:	4283      	cmp	r3, r0
 8021adc:	dd02      	ble.n	8021ae4 <__aeabi_d2iz+0x24>
 8021ade:	4b0f      	ldr	r3, [pc, #60]	; (8021b1c <__aeabi_d2iz+0x5c>)
 8021ae0:	18d0      	adds	r0, r2, r3
 8021ae2:	bd30      	pop	{r4, r5, pc}
 8021ae4:	2080      	movs	r0, #128	; 0x80
 8021ae6:	0340      	lsls	r0, r0, #13
 8021ae8:	4301      	orrs	r1, r0
 8021aea:	480d      	ldr	r0, [pc, #52]	; (8021b20 <__aeabi_d2iz+0x60>)
 8021aec:	1ac0      	subs	r0, r0, r3
 8021aee:	281f      	cmp	r0, #31
 8021af0:	dd08      	ble.n	8021b04 <__aeabi_d2iz+0x44>
 8021af2:	480c      	ldr	r0, [pc, #48]	; (8021b24 <__aeabi_d2iz+0x64>)
 8021af4:	1ac3      	subs	r3, r0, r3
 8021af6:	40d9      	lsrs	r1, r3
 8021af8:	000b      	movs	r3, r1
 8021afa:	4258      	negs	r0, r3
 8021afc:	2a00      	cmp	r2, #0
 8021afe:	d1f0      	bne.n	8021ae2 <__aeabi_d2iz+0x22>
 8021b00:	0018      	movs	r0, r3
 8021b02:	e7ee      	b.n	8021ae2 <__aeabi_d2iz+0x22>
 8021b04:	4c08      	ldr	r4, [pc, #32]	; (8021b28 <__aeabi_d2iz+0x68>)
 8021b06:	40c5      	lsrs	r5, r0
 8021b08:	46a4      	mov	ip, r4
 8021b0a:	4463      	add	r3, ip
 8021b0c:	4099      	lsls	r1, r3
 8021b0e:	000b      	movs	r3, r1
 8021b10:	432b      	orrs	r3, r5
 8021b12:	e7f2      	b.n	8021afa <__aeabi_d2iz+0x3a>
 8021b14:	000003fe 	.word	0x000003fe
 8021b18:	0000041d 	.word	0x0000041d
 8021b1c:	7fffffff 	.word	0x7fffffff
 8021b20:	00000433 	.word	0x00000433
 8021b24:	00000413 	.word	0x00000413
 8021b28:	fffffbed 	.word	0xfffffbed

08021b2c <__aeabi_f2d>:
 8021b2c:	b570      	push	{r4, r5, r6, lr}
 8021b2e:	0043      	lsls	r3, r0, #1
 8021b30:	0246      	lsls	r6, r0, #9
 8021b32:	0fc4      	lsrs	r4, r0, #31
 8021b34:	20fe      	movs	r0, #254	; 0xfe
 8021b36:	0e1b      	lsrs	r3, r3, #24
 8021b38:	1c59      	adds	r1, r3, #1
 8021b3a:	0a75      	lsrs	r5, r6, #9
 8021b3c:	4208      	tst	r0, r1
 8021b3e:	d00c      	beq.n	8021b5a <__aeabi_f2d+0x2e>
 8021b40:	22e0      	movs	r2, #224	; 0xe0
 8021b42:	0092      	lsls	r2, r2, #2
 8021b44:	4694      	mov	ip, r2
 8021b46:	076d      	lsls	r5, r5, #29
 8021b48:	0b36      	lsrs	r6, r6, #12
 8021b4a:	4463      	add	r3, ip
 8021b4c:	051b      	lsls	r3, r3, #20
 8021b4e:	4333      	orrs	r3, r6
 8021b50:	07e4      	lsls	r4, r4, #31
 8021b52:	4323      	orrs	r3, r4
 8021b54:	0028      	movs	r0, r5
 8021b56:	0019      	movs	r1, r3
 8021b58:	bd70      	pop	{r4, r5, r6, pc}
 8021b5a:	2b00      	cmp	r3, #0
 8021b5c:	d114      	bne.n	8021b88 <__aeabi_f2d+0x5c>
 8021b5e:	2d00      	cmp	r5, #0
 8021b60:	d01b      	beq.n	8021b9a <__aeabi_f2d+0x6e>
 8021b62:	0028      	movs	r0, r5
 8021b64:	f7fe fc84 	bl	8020470 <__clzsi2>
 8021b68:	280a      	cmp	r0, #10
 8021b6a:	dc1c      	bgt.n	8021ba6 <__aeabi_f2d+0x7a>
 8021b6c:	230b      	movs	r3, #11
 8021b6e:	002e      	movs	r6, r5
 8021b70:	1a1b      	subs	r3, r3, r0
 8021b72:	40de      	lsrs	r6, r3
 8021b74:	0003      	movs	r3, r0
 8021b76:	3315      	adds	r3, #21
 8021b78:	409d      	lsls	r5, r3
 8021b7a:	4a0e      	ldr	r2, [pc, #56]	; (8021bb4 <__aeabi_f2d+0x88>)
 8021b7c:	0336      	lsls	r6, r6, #12
 8021b7e:	1a12      	subs	r2, r2, r0
 8021b80:	0552      	lsls	r2, r2, #21
 8021b82:	0b36      	lsrs	r6, r6, #12
 8021b84:	0d53      	lsrs	r3, r2, #21
 8021b86:	e7e1      	b.n	8021b4c <__aeabi_f2d+0x20>
 8021b88:	2d00      	cmp	r5, #0
 8021b8a:	d009      	beq.n	8021ba0 <__aeabi_f2d+0x74>
 8021b8c:	2280      	movs	r2, #128	; 0x80
 8021b8e:	0b36      	lsrs	r6, r6, #12
 8021b90:	0312      	lsls	r2, r2, #12
 8021b92:	4b09      	ldr	r3, [pc, #36]	; (8021bb8 <__aeabi_f2d+0x8c>)
 8021b94:	076d      	lsls	r5, r5, #29
 8021b96:	4316      	orrs	r6, r2
 8021b98:	e7d8      	b.n	8021b4c <__aeabi_f2d+0x20>
 8021b9a:	2300      	movs	r3, #0
 8021b9c:	2600      	movs	r6, #0
 8021b9e:	e7d5      	b.n	8021b4c <__aeabi_f2d+0x20>
 8021ba0:	2600      	movs	r6, #0
 8021ba2:	4b05      	ldr	r3, [pc, #20]	; (8021bb8 <__aeabi_f2d+0x8c>)
 8021ba4:	e7d2      	b.n	8021b4c <__aeabi_f2d+0x20>
 8021ba6:	0003      	movs	r3, r0
 8021ba8:	3b0b      	subs	r3, #11
 8021baa:	409d      	lsls	r5, r3
 8021bac:	002e      	movs	r6, r5
 8021bae:	2500      	movs	r5, #0
 8021bb0:	e7e3      	b.n	8021b7a <__aeabi_f2d+0x4e>
 8021bb2:	46c0      	nop			; (mov r8, r8)
 8021bb4:	00000389 	.word	0x00000389
 8021bb8:	000007ff 	.word	0x000007ff

08021bbc <__aeabi_d2f>:
 8021bbc:	0002      	movs	r2, r0
 8021bbe:	004b      	lsls	r3, r1, #1
 8021bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021bc2:	0d5b      	lsrs	r3, r3, #21
 8021bc4:	030c      	lsls	r4, r1, #12
 8021bc6:	4e3d      	ldr	r6, [pc, #244]	; (8021cbc <__aeabi_d2f+0x100>)
 8021bc8:	0a64      	lsrs	r4, r4, #9
 8021bca:	0f40      	lsrs	r0, r0, #29
 8021bcc:	1c5f      	adds	r7, r3, #1
 8021bce:	0fc9      	lsrs	r1, r1, #31
 8021bd0:	4304      	orrs	r4, r0
 8021bd2:	00d5      	lsls	r5, r2, #3
 8021bd4:	4237      	tst	r7, r6
 8021bd6:	d00a      	beq.n	8021bee <__aeabi_d2f+0x32>
 8021bd8:	4839      	ldr	r0, [pc, #228]	; (8021cc0 <__aeabi_d2f+0x104>)
 8021bda:	181e      	adds	r6, r3, r0
 8021bdc:	2efe      	cmp	r6, #254	; 0xfe
 8021bde:	dd16      	ble.n	8021c0e <__aeabi_d2f+0x52>
 8021be0:	20ff      	movs	r0, #255	; 0xff
 8021be2:	2400      	movs	r4, #0
 8021be4:	05c0      	lsls	r0, r0, #23
 8021be6:	4320      	orrs	r0, r4
 8021be8:	07c9      	lsls	r1, r1, #31
 8021bea:	4308      	orrs	r0, r1
 8021bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021bee:	2b00      	cmp	r3, #0
 8021bf0:	d106      	bne.n	8021c00 <__aeabi_d2f+0x44>
 8021bf2:	432c      	orrs	r4, r5
 8021bf4:	d026      	beq.n	8021c44 <__aeabi_d2f+0x88>
 8021bf6:	2205      	movs	r2, #5
 8021bf8:	0192      	lsls	r2, r2, #6
 8021bfa:	0a54      	lsrs	r4, r2, #9
 8021bfc:	b2d8      	uxtb	r0, r3
 8021bfe:	e7f1      	b.n	8021be4 <__aeabi_d2f+0x28>
 8021c00:	4325      	orrs	r5, r4
 8021c02:	d0ed      	beq.n	8021be0 <__aeabi_d2f+0x24>
 8021c04:	2080      	movs	r0, #128	; 0x80
 8021c06:	03c0      	lsls	r0, r0, #15
 8021c08:	4304      	orrs	r4, r0
 8021c0a:	20ff      	movs	r0, #255	; 0xff
 8021c0c:	e7ea      	b.n	8021be4 <__aeabi_d2f+0x28>
 8021c0e:	2e00      	cmp	r6, #0
 8021c10:	dd1b      	ble.n	8021c4a <__aeabi_d2f+0x8e>
 8021c12:	0192      	lsls	r2, r2, #6
 8021c14:	1e53      	subs	r3, r2, #1
 8021c16:	419a      	sbcs	r2, r3
 8021c18:	00e4      	lsls	r4, r4, #3
 8021c1a:	0f6d      	lsrs	r5, r5, #29
 8021c1c:	4322      	orrs	r2, r4
 8021c1e:	432a      	orrs	r2, r5
 8021c20:	0753      	lsls	r3, r2, #29
 8021c22:	d048      	beq.n	8021cb6 <__aeabi_d2f+0xfa>
 8021c24:	230f      	movs	r3, #15
 8021c26:	4013      	ands	r3, r2
 8021c28:	2b04      	cmp	r3, #4
 8021c2a:	d000      	beq.n	8021c2e <__aeabi_d2f+0x72>
 8021c2c:	3204      	adds	r2, #4
 8021c2e:	2380      	movs	r3, #128	; 0x80
 8021c30:	04db      	lsls	r3, r3, #19
 8021c32:	4013      	ands	r3, r2
 8021c34:	d03f      	beq.n	8021cb6 <__aeabi_d2f+0xfa>
 8021c36:	1c70      	adds	r0, r6, #1
 8021c38:	2efe      	cmp	r6, #254	; 0xfe
 8021c3a:	d0d1      	beq.n	8021be0 <__aeabi_d2f+0x24>
 8021c3c:	0192      	lsls	r2, r2, #6
 8021c3e:	0a54      	lsrs	r4, r2, #9
 8021c40:	b2c0      	uxtb	r0, r0
 8021c42:	e7cf      	b.n	8021be4 <__aeabi_d2f+0x28>
 8021c44:	2000      	movs	r0, #0
 8021c46:	2400      	movs	r4, #0
 8021c48:	e7cc      	b.n	8021be4 <__aeabi_d2f+0x28>
 8021c4a:	0032      	movs	r2, r6
 8021c4c:	3217      	adds	r2, #23
 8021c4e:	db22      	blt.n	8021c96 <__aeabi_d2f+0xda>
 8021c50:	2080      	movs	r0, #128	; 0x80
 8021c52:	0400      	lsls	r0, r0, #16
 8021c54:	4320      	orrs	r0, r4
 8021c56:	241e      	movs	r4, #30
 8021c58:	1ba4      	subs	r4, r4, r6
 8021c5a:	2c1f      	cmp	r4, #31
 8021c5c:	dd1d      	ble.n	8021c9a <__aeabi_d2f+0xde>
 8021c5e:	2202      	movs	r2, #2
 8021c60:	4252      	negs	r2, r2
 8021c62:	1b96      	subs	r6, r2, r6
 8021c64:	0002      	movs	r2, r0
 8021c66:	40f2      	lsrs	r2, r6
 8021c68:	0016      	movs	r6, r2
 8021c6a:	2c20      	cmp	r4, #32
 8021c6c:	d004      	beq.n	8021c78 <__aeabi_d2f+0xbc>
 8021c6e:	4a15      	ldr	r2, [pc, #84]	; (8021cc4 <__aeabi_d2f+0x108>)
 8021c70:	4694      	mov	ip, r2
 8021c72:	4463      	add	r3, ip
 8021c74:	4098      	lsls	r0, r3
 8021c76:	4305      	orrs	r5, r0
 8021c78:	002a      	movs	r2, r5
 8021c7a:	1e53      	subs	r3, r2, #1
 8021c7c:	419a      	sbcs	r2, r3
 8021c7e:	4332      	orrs	r2, r6
 8021c80:	2600      	movs	r6, #0
 8021c82:	0753      	lsls	r3, r2, #29
 8021c84:	d1ce      	bne.n	8021c24 <__aeabi_d2f+0x68>
 8021c86:	2480      	movs	r4, #128	; 0x80
 8021c88:	0013      	movs	r3, r2
 8021c8a:	04e4      	lsls	r4, r4, #19
 8021c8c:	2001      	movs	r0, #1
 8021c8e:	4023      	ands	r3, r4
 8021c90:	4222      	tst	r2, r4
 8021c92:	d1d3      	bne.n	8021c3c <__aeabi_d2f+0x80>
 8021c94:	e7b0      	b.n	8021bf8 <__aeabi_d2f+0x3c>
 8021c96:	2300      	movs	r3, #0
 8021c98:	e7ad      	b.n	8021bf6 <__aeabi_d2f+0x3a>
 8021c9a:	4a0b      	ldr	r2, [pc, #44]	; (8021cc8 <__aeabi_d2f+0x10c>)
 8021c9c:	4694      	mov	ip, r2
 8021c9e:	002a      	movs	r2, r5
 8021ca0:	40e2      	lsrs	r2, r4
 8021ca2:	0014      	movs	r4, r2
 8021ca4:	002a      	movs	r2, r5
 8021ca6:	4463      	add	r3, ip
 8021ca8:	409a      	lsls	r2, r3
 8021caa:	4098      	lsls	r0, r3
 8021cac:	1e55      	subs	r5, r2, #1
 8021cae:	41aa      	sbcs	r2, r5
 8021cb0:	4302      	orrs	r2, r0
 8021cb2:	4322      	orrs	r2, r4
 8021cb4:	e7e4      	b.n	8021c80 <__aeabi_d2f+0xc4>
 8021cb6:	0033      	movs	r3, r6
 8021cb8:	e79e      	b.n	8021bf8 <__aeabi_d2f+0x3c>
 8021cba:	46c0      	nop			; (mov r8, r8)
 8021cbc:	000007fe 	.word	0x000007fe
 8021cc0:	fffffc80 	.word	0xfffffc80
 8021cc4:	fffffca2 	.word	0xfffffca2
 8021cc8:	fffffc82 	.word	0xfffffc82

08021ccc <__aeabi_cdrcmple>:
 8021ccc:	4684      	mov	ip, r0
 8021cce:	0010      	movs	r0, r2
 8021cd0:	4662      	mov	r2, ip
 8021cd2:	468c      	mov	ip, r1
 8021cd4:	0019      	movs	r1, r3
 8021cd6:	4663      	mov	r3, ip
 8021cd8:	e000      	b.n	8021cdc <__aeabi_cdcmpeq>
 8021cda:	46c0      	nop			; (mov r8, r8)

08021cdc <__aeabi_cdcmpeq>:
 8021cdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021cde:	f000 f8e7 	bl	8021eb0 <__ledf2>
 8021ce2:	2800      	cmp	r0, #0
 8021ce4:	d401      	bmi.n	8021cea <__aeabi_cdcmpeq+0xe>
 8021ce6:	2100      	movs	r1, #0
 8021ce8:	42c8      	cmn	r0, r1
 8021cea:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08021cec <__aeabi_dcmpeq>:
 8021cec:	b510      	push	{r4, lr}
 8021cee:	f000 f837 	bl	8021d60 <__eqdf2>
 8021cf2:	4240      	negs	r0, r0
 8021cf4:	3001      	adds	r0, #1
 8021cf6:	bd10      	pop	{r4, pc}

08021cf8 <__aeabi_dcmplt>:
 8021cf8:	b510      	push	{r4, lr}
 8021cfa:	f000 f8d9 	bl	8021eb0 <__ledf2>
 8021cfe:	2800      	cmp	r0, #0
 8021d00:	db01      	blt.n	8021d06 <__aeabi_dcmplt+0xe>
 8021d02:	2000      	movs	r0, #0
 8021d04:	bd10      	pop	{r4, pc}
 8021d06:	2001      	movs	r0, #1
 8021d08:	bd10      	pop	{r4, pc}
 8021d0a:	46c0      	nop			; (mov r8, r8)

08021d0c <__aeabi_dcmple>:
 8021d0c:	b510      	push	{r4, lr}
 8021d0e:	f000 f8cf 	bl	8021eb0 <__ledf2>
 8021d12:	2800      	cmp	r0, #0
 8021d14:	dd01      	ble.n	8021d1a <__aeabi_dcmple+0xe>
 8021d16:	2000      	movs	r0, #0
 8021d18:	bd10      	pop	{r4, pc}
 8021d1a:	2001      	movs	r0, #1
 8021d1c:	bd10      	pop	{r4, pc}
 8021d1e:	46c0      	nop			; (mov r8, r8)

08021d20 <__aeabi_dcmpgt>:
 8021d20:	b510      	push	{r4, lr}
 8021d22:	f000 f85f 	bl	8021de4 <__gedf2>
 8021d26:	2800      	cmp	r0, #0
 8021d28:	dc01      	bgt.n	8021d2e <__aeabi_dcmpgt+0xe>
 8021d2a:	2000      	movs	r0, #0
 8021d2c:	bd10      	pop	{r4, pc}
 8021d2e:	2001      	movs	r0, #1
 8021d30:	bd10      	pop	{r4, pc}
 8021d32:	46c0      	nop			; (mov r8, r8)

08021d34 <__aeabi_dcmpge>:
 8021d34:	b510      	push	{r4, lr}
 8021d36:	f000 f855 	bl	8021de4 <__gedf2>
 8021d3a:	2800      	cmp	r0, #0
 8021d3c:	da01      	bge.n	8021d42 <__aeabi_dcmpge+0xe>
 8021d3e:	2000      	movs	r0, #0
 8021d40:	bd10      	pop	{r4, pc}
 8021d42:	2001      	movs	r0, #1
 8021d44:	bd10      	pop	{r4, pc}
 8021d46:	46c0      	nop			; (mov r8, r8)

08021d48 <__clzdi2>:
 8021d48:	b510      	push	{r4, lr}
 8021d4a:	2900      	cmp	r1, #0
 8021d4c:	d103      	bne.n	8021d56 <__clzdi2+0xe>
 8021d4e:	f7fe fb8f 	bl	8020470 <__clzsi2>
 8021d52:	3020      	adds	r0, #32
 8021d54:	e002      	b.n	8021d5c <__clzdi2+0x14>
 8021d56:	0008      	movs	r0, r1
 8021d58:	f7fe fb8a 	bl	8020470 <__clzsi2>
 8021d5c:	bd10      	pop	{r4, pc}
 8021d5e:	46c0      	nop			; (mov r8, r8)

08021d60 <__eqdf2>:
 8021d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021d62:	464e      	mov	r6, r9
 8021d64:	4645      	mov	r5, r8
 8021d66:	46de      	mov	lr, fp
 8021d68:	4657      	mov	r7, sl
 8021d6a:	4690      	mov	r8, r2
 8021d6c:	b5e0      	push	{r5, r6, r7, lr}
 8021d6e:	0017      	movs	r7, r2
 8021d70:	031a      	lsls	r2, r3, #12
 8021d72:	0b12      	lsrs	r2, r2, #12
 8021d74:	0005      	movs	r5, r0
 8021d76:	4684      	mov	ip, r0
 8021d78:	4819      	ldr	r0, [pc, #100]	; (8021de0 <__eqdf2+0x80>)
 8021d7a:	030e      	lsls	r6, r1, #12
 8021d7c:	004c      	lsls	r4, r1, #1
 8021d7e:	4691      	mov	r9, r2
 8021d80:	005a      	lsls	r2, r3, #1
 8021d82:	0fdb      	lsrs	r3, r3, #31
 8021d84:	469b      	mov	fp, r3
 8021d86:	0b36      	lsrs	r6, r6, #12
 8021d88:	0d64      	lsrs	r4, r4, #21
 8021d8a:	0fc9      	lsrs	r1, r1, #31
 8021d8c:	0d52      	lsrs	r2, r2, #21
 8021d8e:	4284      	cmp	r4, r0
 8021d90:	d019      	beq.n	8021dc6 <__eqdf2+0x66>
 8021d92:	4282      	cmp	r2, r0
 8021d94:	d010      	beq.n	8021db8 <__eqdf2+0x58>
 8021d96:	2001      	movs	r0, #1
 8021d98:	4294      	cmp	r4, r2
 8021d9a:	d10e      	bne.n	8021dba <__eqdf2+0x5a>
 8021d9c:	454e      	cmp	r6, r9
 8021d9e:	d10c      	bne.n	8021dba <__eqdf2+0x5a>
 8021da0:	2001      	movs	r0, #1
 8021da2:	45c4      	cmp	ip, r8
 8021da4:	d109      	bne.n	8021dba <__eqdf2+0x5a>
 8021da6:	4559      	cmp	r1, fp
 8021da8:	d017      	beq.n	8021dda <__eqdf2+0x7a>
 8021daa:	2c00      	cmp	r4, #0
 8021dac:	d105      	bne.n	8021dba <__eqdf2+0x5a>
 8021dae:	0030      	movs	r0, r6
 8021db0:	4328      	orrs	r0, r5
 8021db2:	1e43      	subs	r3, r0, #1
 8021db4:	4198      	sbcs	r0, r3
 8021db6:	e000      	b.n	8021dba <__eqdf2+0x5a>
 8021db8:	2001      	movs	r0, #1
 8021dba:	bcf0      	pop	{r4, r5, r6, r7}
 8021dbc:	46bb      	mov	fp, r7
 8021dbe:	46b2      	mov	sl, r6
 8021dc0:	46a9      	mov	r9, r5
 8021dc2:	46a0      	mov	r8, r4
 8021dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021dc6:	0033      	movs	r3, r6
 8021dc8:	2001      	movs	r0, #1
 8021dca:	432b      	orrs	r3, r5
 8021dcc:	d1f5      	bne.n	8021dba <__eqdf2+0x5a>
 8021dce:	42a2      	cmp	r2, r4
 8021dd0:	d1f3      	bne.n	8021dba <__eqdf2+0x5a>
 8021dd2:	464b      	mov	r3, r9
 8021dd4:	433b      	orrs	r3, r7
 8021dd6:	d1f0      	bne.n	8021dba <__eqdf2+0x5a>
 8021dd8:	e7e2      	b.n	8021da0 <__eqdf2+0x40>
 8021dda:	2000      	movs	r0, #0
 8021ddc:	e7ed      	b.n	8021dba <__eqdf2+0x5a>
 8021dde:	46c0      	nop			; (mov r8, r8)
 8021de0:	000007ff 	.word	0x000007ff

08021de4 <__gedf2>:
 8021de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021de6:	4647      	mov	r7, r8
 8021de8:	46ce      	mov	lr, r9
 8021dea:	0004      	movs	r4, r0
 8021dec:	0018      	movs	r0, r3
 8021dee:	0016      	movs	r6, r2
 8021df0:	031b      	lsls	r3, r3, #12
 8021df2:	0b1b      	lsrs	r3, r3, #12
 8021df4:	4d2d      	ldr	r5, [pc, #180]	; (8021eac <__gedf2+0xc8>)
 8021df6:	004a      	lsls	r2, r1, #1
 8021df8:	4699      	mov	r9, r3
 8021dfa:	b580      	push	{r7, lr}
 8021dfc:	0043      	lsls	r3, r0, #1
 8021dfe:	030f      	lsls	r7, r1, #12
 8021e00:	46a4      	mov	ip, r4
 8021e02:	46b0      	mov	r8, r6
 8021e04:	0b3f      	lsrs	r7, r7, #12
 8021e06:	0d52      	lsrs	r2, r2, #21
 8021e08:	0fc9      	lsrs	r1, r1, #31
 8021e0a:	0d5b      	lsrs	r3, r3, #21
 8021e0c:	0fc0      	lsrs	r0, r0, #31
 8021e0e:	42aa      	cmp	r2, r5
 8021e10:	d021      	beq.n	8021e56 <__gedf2+0x72>
 8021e12:	42ab      	cmp	r3, r5
 8021e14:	d013      	beq.n	8021e3e <__gedf2+0x5a>
 8021e16:	2a00      	cmp	r2, #0
 8021e18:	d122      	bne.n	8021e60 <__gedf2+0x7c>
 8021e1a:	433c      	orrs	r4, r7
 8021e1c:	2b00      	cmp	r3, #0
 8021e1e:	d102      	bne.n	8021e26 <__gedf2+0x42>
 8021e20:	464d      	mov	r5, r9
 8021e22:	432e      	orrs	r6, r5
 8021e24:	d022      	beq.n	8021e6c <__gedf2+0x88>
 8021e26:	2c00      	cmp	r4, #0
 8021e28:	d010      	beq.n	8021e4c <__gedf2+0x68>
 8021e2a:	4281      	cmp	r1, r0
 8021e2c:	d022      	beq.n	8021e74 <__gedf2+0x90>
 8021e2e:	2002      	movs	r0, #2
 8021e30:	3901      	subs	r1, #1
 8021e32:	4008      	ands	r0, r1
 8021e34:	3801      	subs	r0, #1
 8021e36:	bcc0      	pop	{r6, r7}
 8021e38:	46b9      	mov	r9, r7
 8021e3a:	46b0      	mov	r8, r6
 8021e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021e3e:	464d      	mov	r5, r9
 8021e40:	432e      	orrs	r6, r5
 8021e42:	d129      	bne.n	8021e98 <__gedf2+0xb4>
 8021e44:	2a00      	cmp	r2, #0
 8021e46:	d1f0      	bne.n	8021e2a <__gedf2+0x46>
 8021e48:	433c      	orrs	r4, r7
 8021e4a:	d1ee      	bne.n	8021e2a <__gedf2+0x46>
 8021e4c:	2800      	cmp	r0, #0
 8021e4e:	d1f2      	bne.n	8021e36 <__gedf2+0x52>
 8021e50:	2001      	movs	r0, #1
 8021e52:	4240      	negs	r0, r0
 8021e54:	e7ef      	b.n	8021e36 <__gedf2+0x52>
 8021e56:	003d      	movs	r5, r7
 8021e58:	4325      	orrs	r5, r4
 8021e5a:	d11d      	bne.n	8021e98 <__gedf2+0xb4>
 8021e5c:	4293      	cmp	r3, r2
 8021e5e:	d0ee      	beq.n	8021e3e <__gedf2+0x5a>
 8021e60:	2b00      	cmp	r3, #0
 8021e62:	d1e2      	bne.n	8021e2a <__gedf2+0x46>
 8021e64:	464c      	mov	r4, r9
 8021e66:	4326      	orrs	r6, r4
 8021e68:	d1df      	bne.n	8021e2a <__gedf2+0x46>
 8021e6a:	e7e0      	b.n	8021e2e <__gedf2+0x4a>
 8021e6c:	2000      	movs	r0, #0
 8021e6e:	2c00      	cmp	r4, #0
 8021e70:	d0e1      	beq.n	8021e36 <__gedf2+0x52>
 8021e72:	e7dc      	b.n	8021e2e <__gedf2+0x4a>
 8021e74:	429a      	cmp	r2, r3
 8021e76:	dc0a      	bgt.n	8021e8e <__gedf2+0xaa>
 8021e78:	dbe8      	blt.n	8021e4c <__gedf2+0x68>
 8021e7a:	454f      	cmp	r7, r9
 8021e7c:	d8d7      	bhi.n	8021e2e <__gedf2+0x4a>
 8021e7e:	d00e      	beq.n	8021e9e <__gedf2+0xba>
 8021e80:	2000      	movs	r0, #0
 8021e82:	454f      	cmp	r7, r9
 8021e84:	d2d7      	bcs.n	8021e36 <__gedf2+0x52>
 8021e86:	2900      	cmp	r1, #0
 8021e88:	d0e2      	beq.n	8021e50 <__gedf2+0x6c>
 8021e8a:	0008      	movs	r0, r1
 8021e8c:	e7d3      	b.n	8021e36 <__gedf2+0x52>
 8021e8e:	4243      	negs	r3, r0
 8021e90:	4158      	adcs	r0, r3
 8021e92:	0040      	lsls	r0, r0, #1
 8021e94:	3801      	subs	r0, #1
 8021e96:	e7ce      	b.n	8021e36 <__gedf2+0x52>
 8021e98:	2002      	movs	r0, #2
 8021e9a:	4240      	negs	r0, r0
 8021e9c:	e7cb      	b.n	8021e36 <__gedf2+0x52>
 8021e9e:	45c4      	cmp	ip, r8
 8021ea0:	d8c5      	bhi.n	8021e2e <__gedf2+0x4a>
 8021ea2:	2000      	movs	r0, #0
 8021ea4:	45c4      	cmp	ip, r8
 8021ea6:	d2c6      	bcs.n	8021e36 <__gedf2+0x52>
 8021ea8:	e7ed      	b.n	8021e86 <__gedf2+0xa2>
 8021eaa:	46c0      	nop			; (mov r8, r8)
 8021eac:	000007ff 	.word	0x000007ff

08021eb0 <__ledf2>:
 8021eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021eb2:	4647      	mov	r7, r8
 8021eb4:	46ce      	mov	lr, r9
 8021eb6:	0004      	movs	r4, r0
 8021eb8:	0018      	movs	r0, r3
 8021eba:	0016      	movs	r6, r2
 8021ebc:	031b      	lsls	r3, r3, #12
 8021ebe:	0b1b      	lsrs	r3, r3, #12
 8021ec0:	4d2c      	ldr	r5, [pc, #176]	; (8021f74 <__ledf2+0xc4>)
 8021ec2:	004a      	lsls	r2, r1, #1
 8021ec4:	4699      	mov	r9, r3
 8021ec6:	b580      	push	{r7, lr}
 8021ec8:	0043      	lsls	r3, r0, #1
 8021eca:	030f      	lsls	r7, r1, #12
 8021ecc:	46a4      	mov	ip, r4
 8021ece:	46b0      	mov	r8, r6
 8021ed0:	0b3f      	lsrs	r7, r7, #12
 8021ed2:	0d52      	lsrs	r2, r2, #21
 8021ed4:	0fc9      	lsrs	r1, r1, #31
 8021ed6:	0d5b      	lsrs	r3, r3, #21
 8021ed8:	0fc0      	lsrs	r0, r0, #31
 8021eda:	42aa      	cmp	r2, r5
 8021edc:	d00d      	beq.n	8021efa <__ledf2+0x4a>
 8021ede:	42ab      	cmp	r3, r5
 8021ee0:	d010      	beq.n	8021f04 <__ledf2+0x54>
 8021ee2:	2a00      	cmp	r2, #0
 8021ee4:	d127      	bne.n	8021f36 <__ledf2+0x86>
 8021ee6:	433c      	orrs	r4, r7
 8021ee8:	2b00      	cmp	r3, #0
 8021eea:	d111      	bne.n	8021f10 <__ledf2+0x60>
 8021eec:	464d      	mov	r5, r9
 8021eee:	432e      	orrs	r6, r5
 8021ef0:	d10e      	bne.n	8021f10 <__ledf2+0x60>
 8021ef2:	2000      	movs	r0, #0
 8021ef4:	2c00      	cmp	r4, #0
 8021ef6:	d015      	beq.n	8021f24 <__ledf2+0x74>
 8021ef8:	e00e      	b.n	8021f18 <__ledf2+0x68>
 8021efa:	003d      	movs	r5, r7
 8021efc:	4325      	orrs	r5, r4
 8021efe:	d110      	bne.n	8021f22 <__ledf2+0x72>
 8021f00:	4293      	cmp	r3, r2
 8021f02:	d118      	bne.n	8021f36 <__ledf2+0x86>
 8021f04:	464d      	mov	r5, r9
 8021f06:	432e      	orrs	r6, r5
 8021f08:	d10b      	bne.n	8021f22 <__ledf2+0x72>
 8021f0a:	2a00      	cmp	r2, #0
 8021f0c:	d102      	bne.n	8021f14 <__ledf2+0x64>
 8021f0e:	433c      	orrs	r4, r7
 8021f10:	2c00      	cmp	r4, #0
 8021f12:	d00b      	beq.n	8021f2c <__ledf2+0x7c>
 8021f14:	4281      	cmp	r1, r0
 8021f16:	d014      	beq.n	8021f42 <__ledf2+0x92>
 8021f18:	2002      	movs	r0, #2
 8021f1a:	3901      	subs	r1, #1
 8021f1c:	4008      	ands	r0, r1
 8021f1e:	3801      	subs	r0, #1
 8021f20:	e000      	b.n	8021f24 <__ledf2+0x74>
 8021f22:	2002      	movs	r0, #2
 8021f24:	bcc0      	pop	{r6, r7}
 8021f26:	46b9      	mov	r9, r7
 8021f28:	46b0      	mov	r8, r6
 8021f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021f2c:	2800      	cmp	r0, #0
 8021f2e:	d1f9      	bne.n	8021f24 <__ledf2+0x74>
 8021f30:	2001      	movs	r0, #1
 8021f32:	4240      	negs	r0, r0
 8021f34:	e7f6      	b.n	8021f24 <__ledf2+0x74>
 8021f36:	2b00      	cmp	r3, #0
 8021f38:	d1ec      	bne.n	8021f14 <__ledf2+0x64>
 8021f3a:	464c      	mov	r4, r9
 8021f3c:	4326      	orrs	r6, r4
 8021f3e:	d1e9      	bne.n	8021f14 <__ledf2+0x64>
 8021f40:	e7ea      	b.n	8021f18 <__ledf2+0x68>
 8021f42:	429a      	cmp	r2, r3
 8021f44:	dd04      	ble.n	8021f50 <__ledf2+0xa0>
 8021f46:	4243      	negs	r3, r0
 8021f48:	4158      	adcs	r0, r3
 8021f4a:	0040      	lsls	r0, r0, #1
 8021f4c:	3801      	subs	r0, #1
 8021f4e:	e7e9      	b.n	8021f24 <__ledf2+0x74>
 8021f50:	429a      	cmp	r2, r3
 8021f52:	dbeb      	blt.n	8021f2c <__ledf2+0x7c>
 8021f54:	454f      	cmp	r7, r9
 8021f56:	d8df      	bhi.n	8021f18 <__ledf2+0x68>
 8021f58:	d006      	beq.n	8021f68 <__ledf2+0xb8>
 8021f5a:	2000      	movs	r0, #0
 8021f5c:	454f      	cmp	r7, r9
 8021f5e:	d2e1      	bcs.n	8021f24 <__ledf2+0x74>
 8021f60:	2900      	cmp	r1, #0
 8021f62:	d0e5      	beq.n	8021f30 <__ledf2+0x80>
 8021f64:	0008      	movs	r0, r1
 8021f66:	e7dd      	b.n	8021f24 <__ledf2+0x74>
 8021f68:	45c4      	cmp	ip, r8
 8021f6a:	d8d5      	bhi.n	8021f18 <__ledf2+0x68>
 8021f6c:	2000      	movs	r0, #0
 8021f6e:	45c4      	cmp	ip, r8
 8021f70:	d2d8      	bcs.n	8021f24 <__ledf2+0x74>
 8021f72:	e7f5      	b.n	8021f60 <__ledf2+0xb0>
 8021f74:	000007ff 	.word	0x000007ff

08021f78 <strcmp>:
 8021f78:	7802      	ldrb	r2, [r0, #0]
 8021f7a:	780b      	ldrb	r3, [r1, #0]
 8021f7c:	2a00      	cmp	r2, #0
 8021f7e:	d003      	beq.n	8021f88 <strcmp+0x10>
 8021f80:	3001      	adds	r0, #1
 8021f82:	3101      	adds	r1, #1
 8021f84:	429a      	cmp	r2, r3
 8021f86:	d0f7      	beq.n	8021f78 <strcmp>
 8021f88:	1ad0      	subs	r0, r2, r3
 8021f8a:	4770      	bx	lr

08021f8c <strlen>:
 8021f8c:	2300      	movs	r3, #0
 8021f8e:	5cc2      	ldrb	r2, [r0, r3]
 8021f90:	3301      	adds	r3, #1
 8021f92:	2a00      	cmp	r2, #0
 8021f94:	d1fb      	bne.n	8021f8e <strlen+0x2>
 8021f96:	1e58      	subs	r0, r3, #1
 8021f98:	4770      	bx	lr
	...

08021f9c <beacon_status_changed_cb>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8021f9c:	4b06      	ldr	r3, [pc, #24]	; (8021fb8 <beacon_status_changed_cb+0x1c>)
 8021f9e:	4a07      	ldr	r2, [pc, #28]	; (8021fbc <beacon_status_changed_cb+0x20>)

static void class_changed_cb(DeviceClass_t deviceClass) {
  LOG_INF("Class has been changed to CLASS %c.", "ABC"[deviceClass]);
}

static void beacon_status_changed_cb(const LmHandlerBeaconParams_t *param) {
 8021fa0:	b510      	push	{r4, lr}
 8021fa2:	1ad2      	subs	r2, r2, r3
  LOG_INF("Beacon state has been changed to %d.", param->State);
 8021fa4:	2303      	movs	r3, #3
 8021fa6:	08d2      	lsrs	r2, r2, #3
 8021fa8:	0192      	lsls	r2, r2, #6
 8021faa:	7841      	ldrb	r1, [r0, #1]
 8021fac:	431a      	orrs	r2, r3
 8021fae:	4804      	ldr	r0, [pc, #16]	; (8021fc0 <beacon_status_changed_cb+0x24>)
 8021fb0:	f00c fbfb 	bl	802e7aa <log_1>
}
 8021fb4:	bd10      	pop	{r4, pc}
 8021fb6:	46c0      	nop			; (mov r8, r8)
 8021fb8:	08031164 	.word	0x08031164
 8021fbc:	0803117c 	.word	0x0803117c
 8021fc0:	080316d2 	.word	0x080316d2

08021fc4 <class_changed_cb>:
 8021fc4:	4b06      	ldr	r3, [pc, #24]	; (8021fe0 <class_changed_cb+0x1c>)
 8021fc6:	4a07      	ldr	r2, [pc, #28]	; (8021fe4 <class_changed_cb+0x20>)
static void class_changed_cb(DeviceClass_t deviceClass) {
 8021fc8:	b510      	push	{r4, lr}
 8021fca:	1ad2      	subs	r2, r2, r3
  LOG_INF("Class has been changed to CLASS %c.", "ABC"[deviceClass]);
 8021fcc:	2303      	movs	r3, #3
 8021fce:	08d2      	lsrs	r2, r2, #3
 8021fd0:	0192      	lsls	r2, r2, #6
 8021fd2:	431a      	orrs	r2, r3
 8021fd4:	4b04      	ldr	r3, [pc, #16]	; (8021fe8 <class_changed_cb+0x24>)
 8021fd6:	5c19      	ldrb	r1, [r3, r0]
 8021fd8:	4804      	ldr	r0, [pc, #16]	; (8021fec <class_changed_cb+0x28>)
 8021fda:	f00c fbe6 	bl	802e7aa <log_1>
}
 8021fde:	bd10      	pop	{r4, pc}
 8021fe0:	08031164 	.word	0x08031164
 8021fe4:	0803117c 	.word	0x0803117c
 8021fe8:	0803171b 	.word	0x0803171b
 8021fec:	080316f7 	.word	0x080316f7

08021ff0 <data_received_cb>:
                             LmHandlerRxParams_t *params) {
 8021ff0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8021ff2:	4a0d      	ldr	r2, [pc, #52]	; (8022028 <data_received_cb+0x38>)
 8021ff4:	4b0d      	ldr	r3, [pc, #52]	; (802202c <data_received_cb+0x3c>)
 8021ff6:	1a9b      	subs	r3, r3, r2
  LOG_INF(
 8021ff8:	2203      	movs	r2, #3
 8021ffa:	08db      	lsrs	r3, r3, #3
 8021ffc:	019b      	lsls	r3, r3, #6
 8021ffe:	4313      	orrs	r3, r2
 8022000:	7842      	ldrb	r2, [r0, #1]
 8022002:	480b      	ldr	r0, [pc, #44]	; (8022030 <data_received_cb+0x40>)
 8022004:	9201      	str	r2, [sp, #4]
 8022006:	784a      	ldrb	r2, [r1, #1]
 8022008:	9202      	str	r2, [sp, #8]
 802200a:	2202      	movs	r2, #2
 802200c:	568a      	ldrsb	r2, [r1, r2]
 802200e:	9203      	str	r2, [sp, #12]
 8022010:	2203      	movs	r2, #3
 8022012:	568a      	ldrsb	r2, [r1, r2]
 8022014:	9204      	str	r2, [sp, #16]
 8022016:	2204      	movs	r2, #4
 8022018:	568a      	ldrsb	r2, [r1, r2]
 802201a:	a901      	add	r1, sp, #4
 802201c:	9205      	str	r2, [sp, #20]
 802201e:	2205      	movs	r2, #5
 8022020:	f00c fc08 	bl	802e834 <log_n>
}
 8022024:	b007      	add	sp, #28
 8022026:	bd00      	pop	{pc}
 8022028:	08031164 	.word	0x08031164
 802202c:	0803117c 	.word	0x0803117c
 8022030:	0803171f 	.word	0x0803171f

08022034 <data_sent_cb>:
static void data_sent_cb(LmHandlerTxParams_t *params) {
 8022034:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8022036:	4a0d      	ldr	r2, [pc, #52]	; (802206c <data_sent_cb+0x38>)
 8022038:	4b0d      	ldr	r3, [pc, #52]	; (8022070 <data_sent_cb+0x3c>)
  LOG_INF(
 802203a:	a901      	add	r1, sp, #4
 802203c:	1a9b      	subs	r3, r3, r2
 802203e:	2203      	movs	r2, #3
 8022040:	08db      	lsrs	r3, r3, #3
 8022042:	019b      	lsls	r3, r3, #6
 8022044:	4313      	orrs	r3, r2
 8022046:	7b42      	ldrb	r2, [r0, #13]
 8022048:	9201      	str	r2, [sp, #4]
 802204a:	7842      	ldrb	r2, [r0, #1]
 802204c:	9202      	str	r2, [sp, #8]
 802204e:	2204      	movs	r2, #4
 8022050:	5682      	ldrsb	r2, [r0, r2]
 8022052:	9203      	str	r2, [sp, #12]
 8022054:	2214      	movs	r2, #20
 8022056:	5682      	ldrsb	r2, [r0, r2]
 8022058:	9204      	str	r2, [sp, #16]
 802205a:	7d42      	ldrb	r2, [r0, #21]
 802205c:	4805      	ldr	r0, [pc, #20]	; (8022074 <data_sent_cb+0x40>)
 802205e:	9205      	str	r2, [sp, #20]
 8022060:	2205      	movs	r2, #5
 8022062:	f00c fbe7 	bl	802e834 <log_n>
}
 8022066:	b007      	add	sp, #28
 8022068:	bd00      	pop	{pc}
 802206a:	46c0      	nop			; (mov r8, r8)
 802206c:	08031164 	.word	0x08031164
 8022070:	0803117c 	.word	0x0803117c
 8022074:	08031772 	.word	0x08031772

08022078 <join_request_cb>:
static void join_request_cb(LmHandlerJoinParams_t *params) {
 8022078:	b507      	push	{r0, r1, r2, lr}
 802207a:	4b0c      	ldr	r3, [pc, #48]	; (80220ac <join_request_cb+0x34>)
 802207c:	4a0c      	ldr	r2, [pc, #48]	; (80220b0 <join_request_cb+0x38>)
  LOG_INF("Joined to Lorawan with status[%u], DataRate[%d].", params->Status,
 802207e:	2101      	movs	r1, #1
 8022080:	1a9b      	subs	r3, r3, r2
 8022082:	2203      	movs	r2, #3
 8022084:	08db      	lsrs	r3, r3, #3
 8022086:	019b      	lsls	r3, r3, #6
 8022088:	4313      	orrs	r3, r2
 802208a:	2200      	movs	r2, #0
 802208c:	5641      	ldrsb	r1, [r0, r1]
 802208e:	5682      	ldrsb	r2, [r0, r2]
 8022090:	4808      	ldr	r0, [pc, #32]	; (80220b4 <join_request_cb+0x3c>)
 8022092:	f00c fb9e 	bl	802e7d2 <log_2>
  app_data.Buffer = NULL;
 8022096:	2200      	movs	r2, #0
  app_data.Port = 1;
 8022098:	2101      	movs	r1, #1
 802209a:	466b      	mov	r3, sp
  LmHandlerSend(&app_data, LORAMAC_HANDLER_CONFIRMED_MSG, NULL, false);
 802209c:	4668      	mov	r0, sp
  app_data.Port = 1;
 802209e:	8019      	strh	r1, [r3, #0]
  LmHandlerSend(&app_data, LORAMAC_HANDLER_CONFIRMED_MSG, NULL, false);
 80220a0:	0013      	movs	r3, r2
  app_data.Buffer = NULL;
 80220a2:	9201      	str	r2, [sp, #4]
  LmHandlerSend(&app_data, LORAMAC_HANDLER_CONFIRMED_MSG, NULL, false);
 80220a4:	f009 f968 	bl	802b378 <LmHandlerSend>
}
 80220a8:	bd07      	pop	{r0, r1, r2, pc}
 80220aa:	46c0      	nop			; (mov r8, r8)
 80220ac:	0803117c 	.word	0x0803117c
 80220b0:	08031164 	.word	0x08031164
 80220b4:	080317c6 	.word	0x080317c6

080220b8 <mac_process_cb>:
static void mac_process_cb(void) {
 80220b8:	b510      	push	{r4, lr}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 80220ba:	4802      	ldr	r0, [pc, #8]	; (80220c4 <mac_process_cb+0xc>)
 80220bc:	f00a fefe 	bl	802cebc <z_impl_k_sem_give>
}
 80220c0:	bd10      	pop	{r4, pc}
 80220c2:	46c0      	nop			; (mov r8, r8)
 80220c4:	20008538 	.word	0x20008538

080220c8 <main>:
    .DutyCycleEnabled = false,
    .StopPeripherals = NULL,
    .StartPeripherals = NULL,
};

void main(void) {
 80220c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80220ca:	b085      	sub	sp, #20
	return z_impl_k_sem_init(sem, initial_count, limit);
 80220cc:	4d2f      	ldr	r5, [pc, #188]	; (802218c <main+0xc4>)
 80220ce:	2201      	movs	r2, #1
 80220d0:	2100      	movs	r1, #0
 80220d2:	0028      	movs	r0, r5
 80220d4:	f00e fcfa 	bl	8030acc <z_impl_k_sem_init>
  k_sem_init(&sem_process, 0, 1);

  LoraInfo_Init();
 80220d8:	f002 f876 	bl	80241c8 <LoraInfo_Init>
  if (LmHandlerInit(&LmHandlerCallbacks) != LORAMAC_HANDLER_SUCCESS) {
 80220dc:	482c      	ldr	r0, [pc, #176]	; (8022190 <main+0xc8>)
 80220de:	f009 f9f7 	bl	802b4d0 <LmHandlerInit>
 80220e2:	2800      	cmp	r0, #0
 80220e4:	d00f      	beq.n	8022106 <main+0x3e>
 80220e6:	4b2b      	ldr	r3, [pc, #172]	; (8022194 <main+0xcc>)
 80220e8:	492b      	ldr	r1, [pc, #172]	; (8022198 <main+0xd0>)
    LOG_ERR("LoRaMac wasn't properly initialized");
 80220ea:	482c      	ldr	r0, [pc, #176]	; (802219c <main+0xd4>)
 80220ec:	1ac9      	subs	r1, r1, r3
 80220ee:	2301      	movs	r3, #1
 80220f0:	08c9      	lsrs	r1, r1, #3
 80220f2:	0189      	lsls	r1, r1, #6
 80220f4:	4319      	orrs	r1, r3
 80220f6:	f00c fb4c 	bl	802e792 <log_0>
    assert(0);
 80220fa:	2167      	movs	r1, #103	; 0x67
 80220fc:	4b28      	ldr	r3, [pc, #160]	; (80221a0 <main+0xd8>)
 80220fe:	4a29      	ldr	r2, [pc, #164]	; (80221a4 <main+0xdc>)
  }

  if (LmHandlerConfigure(&LmHandlerParams) != LORAMAC_HANDLER_SUCCESS) {
    LOG_ERR("LoRaMac wasn't properly initialized");
    assert(0);
 8022100:	4829      	ldr	r0, [pc, #164]	; (80221a8 <main+0xe0>)
 8022102:	f00b fbcb 	bl	802d89c <__assert_func>
  if (LmHandlerConfigure(&LmHandlerParams) != LORAMAC_HANDLER_SUCCESS) {
 8022106:	4829      	ldr	r0, [pc, #164]	; (80221ac <main+0xe4>)
 8022108:	f008 fff8 	bl	802b0fc <LmHandlerConfigure>
 802210c:	2800      	cmp	r0, #0
 802210e:	d00d      	beq.n	802212c <main+0x64>
 8022110:	4b20      	ldr	r3, [pc, #128]	; (8022194 <main+0xcc>)
 8022112:	4921      	ldr	r1, [pc, #132]	; (8022198 <main+0xd0>)
    LOG_ERR("LoRaMac wasn't properly initialized");
 8022114:	4821      	ldr	r0, [pc, #132]	; (802219c <main+0xd4>)
 8022116:	1ac9      	subs	r1, r1, r3
 8022118:	2301      	movs	r3, #1
 802211a:	08c9      	lsrs	r1, r1, #3
 802211c:	0189      	lsls	r1, r1, #6
 802211e:	4319      	orrs	r1, r3
 8022120:	f00c fb37 	bl	802e792 <log_0>
    assert(0);
 8022124:	216c      	movs	r1, #108	; 0x6c
 8022126:	4b1e      	ldr	r3, [pc, #120]	; (80221a0 <main+0xd8>)
 8022128:	4a1e      	ldr	r2, [pc, #120]	; (80221a4 <main+0xdc>)
 802212a:	e7e9      	b.n	8022100 <main+0x38>
  }

  // The LoRa-Alliance Compliance protocol package should always be
  // initialized and activated.
  LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams);
 802212c:	4920      	ldr	r1, [pc, #128]	; (80221b0 <main+0xe8>)
 802212e:	f009 f9a9 	bl	802b484 <LmHandlerPackageRegister>
	return z_impl_k_sem_take(sem, timeout);
 8022132:	26f0      	movs	r6, #240	; 0xf0
  /*
    LmHandlerPackageRegister(PACKAGE_ID_CLOCK_SYNC, NULL);
    LmHandlerPackageRegister(PACKAGE_ID_REMOTE_MCAST_SETUP, NULL);
  */

  LmHandlerJoin(ACTIVATION_TYPE_OTAA);
 8022134:	2002      	movs	r0, #2
 8022136:	f009 f8b9 	bl	802b2ac <LmHandlerJoin>
 802213a:	2700      	movs	r7, #0
 802213c:	02b6      	lsls	r6, r6, #10

  for (;;) {
    LmHandlerProcess();
 802213e:	f009 f851 	bl	802b1e4 <LmHandlerProcess>
 8022142:	0032      	movs	r2, r6
 8022144:	003b      	movs	r3, r7
 8022146:	0028      	movs	r0, r5
 8022148:	f00a fed4 	bl	802cef4 <z_impl_k_sem_take>
    if (k_sem_take(&sem_process, K_SECONDS(60)) == -EAGAIN) {
 802214c:	300b      	adds	r0, #11
 802214e:	d1f6      	bne.n	802213e <main+0x76>
      if (LmHandlerIsBusy()) {
 8022150:	f009 f8fa 	bl	802b348 <LmHandlerIsBusy>
 8022154:	1e04      	subs	r4, r0, #0
 8022156:	d1f2      	bne.n	802213e <main+0x76>
        continue;
      }
      LoRaMacTxInfo_t txinfo;
      LmHandlerAppData_t app_data;
      if (LoRaMacQueryTxPossible(5, &txinfo) == LORAMAC_STATUS_OK) {
 8022158:	a901      	add	r1, sp, #4
 802215a:	2005      	movs	r0, #5
 802215c:	f005 feb8 	bl	8027ed0 <LoRaMacQueryTxPossible>
 8022160:	1e01      	subs	r1, r0, #0
 8022162:	d10a      	bne.n	802217a <main+0xb2>
        app_data.Port = 1;
 8022164:	466a      	mov	r2, sp
        app_data.Buffer = (uint8_t *)"hello";
 8022166:	4b13      	ldr	r3, [pc, #76]	; (80221b4 <main+0xec>)
 8022168:	9303      	str	r3, [sp, #12]
        app_data.Port = 1;
 802216a:	4b13      	ldr	r3, [pc, #76]	; (80221b8 <main+0xf0>)
 802216c:	8113      	strh	r3, [r2, #8]
        app_data.BufferSize = 5;
        LmHandlerSend(&app_data, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, false);
 802216e:	0003      	movs	r3, r0
 8022170:	0002      	movs	r2, r0
      } else {
        app_data.Port = 1;
        app_data.Buffer = NULL;
        app_data.BufferSize = 0;
        LmHandlerSend(&app_data, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, false);
 8022172:	a802      	add	r0, sp, #8
 8022174:	f009 f900 	bl	802b378 <LmHandlerSend>
 8022178:	e7e1      	b.n	802213e <main+0x76>
        app_data.Port = 1;
 802217a:	466b      	mov	r3, sp
 802217c:	2201      	movs	r2, #1
        LmHandlerSend(&app_data, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, false);
 802217e:	0021      	movs	r1, r4
        app_data.Port = 1;
 8022180:	811a      	strh	r2, [r3, #8]
        app_data.Buffer = NULL;
 8022182:	9403      	str	r4, [sp, #12]
        LmHandlerSend(&app_data, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, false);
 8022184:	0023      	movs	r3, r4
 8022186:	0022      	movs	r2, r4
 8022188:	e7f3      	b.n	8022172 <main+0xaa>
 802218a:	46c0      	nop			; (mov r8, r8)
 802218c:	20008538 	.word	0x20008538
 8022190:	20008000 	.word	0x20008000
 8022194:	08031164 	.word	0x08031164
 8022198:	0803117c 	.word	0x0803117c
 802219c:	080317f7 	.word	0x080317f7
 80221a0:	0803197b 	.word	0x0803197b
 80221a4:	0803183a 	.word	0x0803183a
 80221a8:	0803181b 	.word	0x0803181b
 80221ac:	20008134 	.word	0x20008134
 80221b0:	20008020 	.word	0x20008020
 80221b4:	0803182d 	.word	0x0803182d
 80221b8:	00000501 	.word	0x00000501

080221bc <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 80221bc:	680b      	ldr	r3, [r1, #0]
{
 80221be:	b510      	push	{r4, lr}
	ctx->count++;
 80221c0:	3301      	adds	r3, #1
 80221c2:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 80221c4:	4b01      	ldr	r3, [pc, #4]	; (80221cc <char_out+0x10>)
 80221c6:	681b      	ldr	r3, [r3, #0]
 80221c8:	4798      	blx	r3
}
 80221ca:	bd10      	pop	{r4, pc}
 80221cc:	2000802c 	.word	0x2000802c

080221d0 <__printk_hook_install>:
	_char_out = fn;
 80221d0:	4b01      	ldr	r3, [pc, #4]	; (80221d8 <__printk_hook_install+0x8>)
 80221d2:	6018      	str	r0, [r3, #0]
}
 80221d4:	4770      	bx	lr
 80221d6:	46c0      	nop			; (mov r8, r8)
 80221d8:	2000802c 	.word	0x2000802c

080221dc <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
 80221dc:	b507      	push	{r0, r1, r2, lr}
 80221de:	000b      	movs	r3, r1
	struct out_context ctx = { 0 };
 80221e0:	2100      	movs	r1, #0
{
 80221e2:	0002      	movs	r2, r0
	struct out_context ctx = { 0 };
 80221e4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
 80221e6:	4802      	ldr	r0, [pc, #8]	; (80221f0 <vprintk+0x14>)
 80221e8:	a901      	add	r1, sp, #4
 80221ea:	f000 f87b 	bl	80222e4 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
 80221ee:	bd07      	pop	{r0, r1, r2, pc}
 80221f0:	080221bd 	.word	0x080221bd

080221f4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 80221f4:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
 80221f6:	2500      	movs	r5, #0
{
 80221f8:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
 80221fa:	9001      	str	r0, [sp, #4]
 80221fc:	9102      	str	r1, [sp, #8]
{
 80221fe:	0004      	movs	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
 8022200:	a901      	add	r1, sp, #4
 8022202:	4805      	ldr	r0, [pc, #20]	; (8022218 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
 8022204:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
 8022206:	f000 f86d 	bl	80222e4 <cbvprintf>

	if (ctx.count < ctx.max) {
 802220a:	9803      	ldr	r0, [sp, #12]
 802220c:	9b02      	ldr	r3, [sp, #8]
 802220e:	4298      	cmp	r0, r3
 8022210:	da00      	bge.n	8022214 <vsnprintk+0x20>
		str[ctx.count] = '\0';
 8022212:	5425      	strb	r5, [r4, r0]
	}

	return ctx.count;
}
 8022214:	b005      	add	sp, #20
 8022216:	bd30      	pop	{r4, r5, pc}
 8022218:	0802e679 	.word	0x0802e679

0802221c <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
 802221c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802221e:	0003      	movs	r3, r0
	const char *sp = *str;
 8022220:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
 8022222:	2404      	movs	r4, #4
	size_t val = 0;
 8022224:	2000      	movs	r0, #0
		val = 10U * val + *sp++ - '0';
 8022226:	260a      	movs	r6, #10
	while (isdigit((int)(unsigned char)*sp)) {
 8022228:	4d05      	ldr	r5, [pc, #20]	; (8022240 <extract_decimal+0x24>)
 802222a:	7811      	ldrb	r1, [r2, #0]
 802222c:	5c6f      	ldrb	r7, [r5, r1]
 802222e:	4227      	tst	r7, r4
 8022230:	d101      	bne.n	8022236 <extract_decimal+0x1a>
	}
	*str = sp;
 8022232:	601a      	str	r2, [r3, #0]
	return val;
}
 8022234:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
 8022236:	4370      	muls	r0, r6
 8022238:	3830      	subs	r0, #48	; 0x30
 802223a:	3201      	adds	r2, #1
 802223c:	1840      	adds	r0, r0, r1
 802223e:	e7f4      	b.n	802222a <extract_decimal+0xe>
 8022240:	08032192 	.word	0x08032192

08022244 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
 8022244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022246:	b085      	sub	sp, #20
 8022248:	9001      	str	r0, [sp, #4]
 802224a:	9303      	str	r3, [sp, #12]
	bool upcase = isupper((int)conv->specifier);
 802224c:	78d3      	ldrb	r3, [r2, #3]
{
 802224e:	0015      	movs	r5, r2
 8022250:	4a23      	ldr	r2, [pc, #140]	; (80222e0 <encode_uint+0x9c>)
 8022252:	000f      	movs	r7, r1
 8022254:	5cd1      	ldrb	r1, [r2, r3]
 8022256:	2203      	movs	r2, #3
 8022258:	4011      	ands	r1, r2
	switch (specifier) {
 802225a:	2408      	movs	r4, #8
 802225c:	9102      	str	r1, [sp, #8]
 802225e:	2b6f      	cmp	r3, #111	; 0x6f
 8022260:	d00a      	beq.n	8022278 <encode_uint+0x34>
 8022262:	d804      	bhi.n	802226e <encode_uint+0x2a>
		return 10;
 8022264:	3402      	adds	r4, #2
	switch (specifier) {
 8022266:	2b58      	cmp	r3, #88	; 0x58
 8022268:	d106      	bne.n	8022278 <encode_uint+0x34>
		return 16;
 802226a:	3406      	adds	r4, #6
 802226c:	e004      	b.n	8022278 <encode_uint+0x34>
	switch (specifier) {
 802226e:	2208      	movs	r2, #8
		return 10;
 8022270:	240a      	movs	r4, #10
	switch (specifier) {
 8022272:	4393      	bics	r3, r2
 8022274:	2b70      	cmp	r3, #112	; 0x70
 8022276:	d0f8      	beq.n	802226a <encode_uint+0x26>
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
 8022278:	9e0a      	ldr	r6, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
 802227a:	0022      	movs	r2, r4
 802227c:	2300      	movs	r3, #0
 802227e:	0039      	movs	r1, r7
 8022280:	9801      	ldr	r0, [sp, #4]
 8022282:	f7fe f913 	bl	80204ac <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
 8022286:	0013      	movs	r3, r2
 8022288:	468c      	mov	ip, r1
 802228a:	b2d2      	uxtb	r2, r2
 802228c:	2b09      	cmp	r3, #9
 802228e:	d819      	bhi.n	80222c4 <encode_uint+0x80>
 8022290:	0013      	movs	r3, r2
 8022292:	3330      	adds	r3, #48	; 0x30
 8022294:	b2db      	uxtb	r3, r3
 8022296:	3e01      	subs	r6, #1
 8022298:	7033      	strb	r3, [r6, #0]
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
 802229a:	2300      	movs	r3, #0
 802229c:	42bb      	cmp	r3, r7
 802229e:	d102      	bne.n	80222a6 <encode_uint+0x62>
 80222a0:	9b01      	ldr	r3, [sp, #4]
 80222a2:	429c      	cmp	r4, r3
 80222a4:	d802      	bhi.n	80222ac <encode_uint+0x68>
 80222a6:	9b03      	ldr	r3, [sp, #12]
 80222a8:	429e      	cmp	r6, r3
 80222aa:	d808      	bhi.n	80222be <encode_uint+0x7a>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
 80222ac:	782b      	ldrb	r3, [r5, #0]
 80222ae:	069b      	lsls	r3, r3, #26
 80222b0:	d513      	bpl.n	80222da <encode_uint+0x96>
		if (radix == 8) {
 80222b2:	2c08      	cmp	r4, #8
 80222b4:	d10f      	bne.n	80222d6 <encode_uint+0x92>
			conv->altform_0 = true;
		} else if (radix == 16) {
			conv->altform_0c = true;
 80222b6:	78ab      	ldrb	r3, [r5, #2]
 80222b8:	431c      	orrs	r4, r3
 80222ba:	70ac      	strb	r4, [r5, #2]
		} else {
			;
		}
	}

	return bp;
 80222bc:	e00d      	b.n	80222da <encode_uint+0x96>
		value /= radix;
 80222be:	4667      	mov	r7, ip
 80222c0:	9001      	str	r0, [sp, #4]
 80222c2:	e7da      	b.n	802227a <encode_uint+0x36>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80222c4:	0013      	movs	r3, r2
 80222c6:	9902      	ldr	r1, [sp, #8]
 80222c8:	3357      	adds	r3, #87	; 0x57
 80222ca:	b2db      	uxtb	r3, r3
 80222cc:	2901      	cmp	r1, #1
 80222ce:	d1e2      	bne.n	8022296 <encode_uint+0x52>
 80222d0:	3237      	adds	r2, #55	; 0x37
 80222d2:	b2d3      	uxtb	r3, r2
 80222d4:	e7df      	b.n	8022296 <encode_uint+0x52>
		} else if (radix == 16) {
 80222d6:	2c10      	cmp	r4, #16
 80222d8:	d0ed      	beq.n	80222b6 <encode_uint+0x72>
}
 80222da:	0030      	movs	r0, r6
 80222dc:	b005      	add	sp, #20
 80222de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80222e0:	08032192 	.word	0x08032192

080222e4 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 80222e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80222e6:	0016      	movs	r6, r2
 80222e8:	001f      	movs	r7, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 80222ea:	2500      	movs	r5, #0
{
 80222ec:	b099      	sub	sp, #100	; 0x64
 80222ee:	9006      	str	r0, [sp, #24]
 80222f0:	9107      	str	r1, [sp, #28]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 80222f2:	7830      	ldrb	r0, [r6, #0]
 80222f4:	2800      	cmp	r0, #0
 80222f6:	d101      	bne.n	80222fc <cbvprintf+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
 80222f8:	0028      	movs	r0, r5
 80222fa:	e2eb      	b.n	80228d4 <cbvprintf+0x5f0>
			OUTC(*fp++);
 80222fc:	1c73      	adds	r3, r6, #1
 80222fe:	9305      	str	r3, [sp, #20]
		if (*fp != '%') {
 8022300:	2825      	cmp	r0, #37	; 0x25
 8022302:	d007      	beq.n	8022314 <cbvprintf+0x30>
			OUTC('%');
 8022304:	9907      	ldr	r1, [sp, #28]
 8022306:	9b06      	ldr	r3, [sp, #24]
 8022308:	4798      	blx	r3
 802230a:	2800      	cmp	r0, #0
 802230c:	da00      	bge.n	8022310 <cbvprintf+0x2c>
 802230e:	e2e1      	b.n	80228d4 <cbvprintf+0x5f0>
 8022310:	3501      	adds	r5, #1
			break;
 8022312:	e1ad      	b.n	8022670 <cbvprintf+0x38c>
		} state = {
 8022314:	ac12      	add	r4, sp, #72	; 0x48
 8022316:	2218      	movs	r2, #24
 8022318:	2100      	movs	r1, #0
 802231a:	0020      	movs	r0, r4
 802231c:	f00e fd29 	bl	8030d72 <memset>
	if (*sp == '%') {
 8022320:	7873      	ldrb	r3, [r6, #1]
 8022322:	2b25      	cmp	r3, #37	; 0x25
 8022324:	d055      	beq.n	80223d2 <cbvprintf+0xee>
			conv->flag_zero = true;
 8022326:	2140      	movs	r1, #64	; 0x40
			conv->flag_space = true;
 8022328:	2010      	movs	r0, #16
		switch (*sp) {
 802232a:	9b05      	ldr	r3, [sp, #20]
 802232c:	781a      	ldrb	r2, [r3, #0]
 802232e:	ab12      	add	r3, sp, #72	; 0x48
 8022330:	2a2b      	cmp	r2, #43	; 0x2b
 8022332:	d06d      	beq.n	8022410 <cbvprintf+0x12c>
 8022334:	d861      	bhi.n	80223fa <cbvprintf+0x116>
 8022336:	2a20      	cmp	r2, #32
 8022338:	d06d      	beq.n	8022416 <cbvprintf+0x132>
 802233a:	2a23      	cmp	r2, #35	; 0x23
 802233c:	d072      	beq.n	8022424 <cbvprintf+0x140>
	if (conv->flag_zero && conv->flag_dash) {
 802233e:	2144      	movs	r1, #68	; 0x44
 8022340:	7a1a      	ldrb	r2, [r3, #8]
 8022342:	4011      	ands	r1, r2
 8022344:	2944      	cmp	r1, #68	; 0x44
 8022346:	d102      	bne.n	802234e <cbvprintf+0x6a>
		conv->flag_zero = false;
 8022348:	2140      	movs	r1, #64	; 0x40
 802234a:	438a      	bics	r2, r1
 802234c:	721a      	strb	r2, [r3, #8]
	conv->width_present = true;
 802234e:	2280      	movs	r2, #128	; 0x80
 8022350:	9b05      	ldr	r3, [sp, #20]
 8022352:	ac12      	add	r4, sp, #72	; 0x48
 8022354:	930b      	str	r3, [sp, #44]	; 0x2c
 8022356:	7a23      	ldrb	r3, [r4, #8]
 8022358:	4252      	negs	r2, r2
 802235a:	4313      	orrs	r3, r2
 802235c:	7223      	strb	r3, [r4, #8]
	if (*sp == '*') {
 802235e:	9b05      	ldr	r3, [sp, #20]
 8022360:	781b      	ldrb	r3, [r3, #0]
 8022362:	2b2a      	cmp	r3, #42	; 0x2a
 8022364:	d161      	bne.n	802242a <cbvprintf+0x146>
		conv->width_star = true;
 8022366:	7a62      	ldrb	r2, [r4, #9]
 8022368:	3b29      	subs	r3, #41	; 0x29
 802236a:	4313      	orrs	r3, r2
 802236c:	7263      	strb	r3, [r4, #9]
		return ++sp;
 802236e:	9a05      	ldr	r2, [sp, #20]
 8022370:	3201      	adds	r2, #1
	sp = extract_prec(conv, sp);
 8022372:	920b      	str	r2, [sp, #44]	; 0x2c
	conv->prec_present = (*sp == '.');
 8022374:	7811      	ldrb	r1, [r2, #0]
 8022376:	ac12      	add	r4, sp, #72	; 0x48
 8022378:	000b      	movs	r3, r1
 802237a:	3b2e      	subs	r3, #46	; 0x2e
 802237c:	4258      	negs	r0, r3
 802237e:	4143      	adcs	r3, r0
 8022380:	005b      	lsls	r3, r3, #1
 8022382:	469c      	mov	ip, r3
 8022384:	2002      	movs	r0, #2
 8022386:	7a63      	ldrb	r3, [r4, #9]
 8022388:	4383      	bics	r3, r0
 802238a:	4660      	mov	r0, ip
 802238c:	4303      	orrs	r3, r0
 802238e:	7263      	strb	r3, [r4, #9]
	if (!conv->prec_present) {
 8022390:	292e      	cmp	r1, #46	; 0x2e
 8022392:	d109      	bne.n	80223a8 <cbvprintf+0xc4>
	++sp;
 8022394:	1c53      	adds	r3, r2, #1
 8022396:	930b      	str	r3, [sp, #44]	; 0x2c
	if (*sp == '*') {
 8022398:	7853      	ldrb	r3, [r2, #1]
 802239a:	2b2a      	cmp	r3, #42	; 0x2a
 802239c:	d15a      	bne.n	8022454 <cbvprintf+0x170>
		conv->prec_star = true;
 802239e:	7a63      	ldrb	r3, [r4, #9]
 80223a0:	392a      	subs	r1, #42	; 0x2a
 80223a2:	430b      	orrs	r3, r1
 80223a4:	7263      	strb	r3, [r4, #9]
		return ++sp;
 80223a6:	3202      	adds	r2, #2
	switch (*sp) {
 80223a8:	7811      	ldrb	r1, [r2, #0]
		if (*++sp == 'h') {
 80223aa:	1c50      	adds	r0, r2, #1
 80223ac:	ab12      	add	r3, sp, #72	; 0x48
	switch (*sp) {
 80223ae:	296c      	cmp	r1, #108	; 0x6c
 80223b0:	d100      	bne.n	80223b4 <cbvprintf+0xd0>
 80223b2:	e09b      	b.n	80224ec <cbvprintf+0x208>
 80223b4:	d85d      	bhi.n	8022472 <cbvprintf+0x18e>
 80223b6:	2968      	cmp	r1, #104	; 0x68
 80223b8:	d064      	beq.n	8022484 <cbvprintf+0x1a0>
 80223ba:	296a      	cmp	r1, #106	; 0x6a
 80223bc:	d100      	bne.n	80223c0 <cbvprintf+0xdc>
 80223be:	e0a1      	b.n	8022504 <cbvprintf+0x220>
 80223c0:	294c      	cmp	r1, #76	; 0x4c
 80223c2:	d100      	bne.n	80223c6 <cbvprintf+0xe2>
 80223c4:	e0a8      	b.n	8022518 <cbvprintf+0x234>
		conv->length_mod = LENGTH_NONE;
 80223c6:	2078      	movs	r0, #120	; 0x78
 80223c8:	7a59      	ldrb	r1, [r3, #9]
 80223ca:	4381      	bics	r1, r0
 80223cc:	7259      	strb	r1, [r3, #9]
		break;
 80223ce:	0010      	movs	r0, r2
 80223d0:	e062      	b.n	8022498 <cbvprintf+0x1b4>
		conv->specifier = *sp++;
 80223d2:	1cb2      	adds	r2, r6, #2
 80223d4:	9205      	str	r2, [sp, #20]
 80223d6:	72e3      	strb	r3, [r4, #11]
		if (conv->width_star) {
 80223d8:	aa12      	add	r2, sp, #72	; 0x48
 80223da:	7a51      	ldrb	r1, [r2, #9]
 80223dc:	07cb      	lsls	r3, r1, #31
 80223de:	d400      	bmi.n	80223e2 <cbvprintf+0xfe>
 80223e0:	e0f4      	b.n	80225cc <cbvprintf+0x2e8>
			width = va_arg(ap, int);
 80223e2:	cf08      	ldmia	r7!, {r3}
 80223e4:	9303      	str	r3, [sp, #12]
			if (width < 0) {
 80223e6:	2b00      	cmp	r3, #0
 80223e8:	db00      	blt.n	80223ec <cbvprintf+0x108>
 80223ea:	e0f4      	b.n	80225d6 <cbvprintf+0x2f2>
				conv->flag_dash = true;
 80223ec:	2304      	movs	r3, #4
 80223ee:	7a10      	ldrb	r0, [r2, #8]
 80223f0:	4318      	orrs	r0, r3
				width = -width;
 80223f2:	9b03      	ldr	r3, [sp, #12]
				conv->flag_dash = true;
 80223f4:	7210      	strb	r0, [r2, #8]
		int width = -1;
 80223f6:	425b      	negs	r3, r3
 80223f8:	e0ec      	b.n	80225d4 <cbvprintf+0x2f0>
		switch (*sp) {
 80223fa:	2a2d      	cmp	r2, #45	; 0x2d
 80223fc:	d004      	beq.n	8022408 <cbvprintf+0x124>
 80223fe:	2a30      	cmp	r2, #48	; 0x30
 8022400:	d19d      	bne.n	802233e <cbvprintf+0x5a>
			conv->flag_zero = true;
 8022402:	7a1a      	ldrb	r2, [r3, #8]
 8022404:	430a      	orrs	r2, r1
 8022406:	e008      	b.n	802241a <cbvprintf+0x136>
			conv->flag_dash = true;
 8022408:	2404      	movs	r4, #4
 802240a:	7a1a      	ldrb	r2, [r3, #8]
			conv->flag_hash = true;
 802240c:	4322      	orrs	r2, r4
 802240e:	e004      	b.n	802241a <cbvprintf+0x136>
			conv->flag_plus = true;
 8022410:	2408      	movs	r4, #8
 8022412:	7a1a      	ldrb	r2, [r3, #8]
 8022414:	e7fa      	b.n	802240c <cbvprintf+0x128>
			conv->flag_space = true;
 8022416:	7a1a      	ldrb	r2, [r3, #8]
 8022418:	4302      	orrs	r2, r0
			conv->flag_zero = true;
 802241a:	721a      	strb	r2, [r3, #8]
			++sp;
 802241c:	9b05      	ldr	r3, [sp, #20]
 802241e:	3301      	adds	r3, #1
 8022420:	9305      	str	r3, [sp, #20]
	} while (loop);
 8022422:	e782      	b.n	802232a <cbvprintf+0x46>
			conv->flag_hash = true;
 8022424:	2220      	movs	r2, #32
 8022426:	7a1c      	ldrb	r4, [r3, #8]
 8022428:	e7f0      	b.n	802240c <cbvprintf+0x128>
	size_t width = extract_decimal(&sp);
 802242a:	a80b      	add	r0, sp, #44	; 0x2c
 802242c:	f7ff fef6 	bl	802221c <extract_decimal>
	if (sp != wp) {
 8022430:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022432:	9b05      	ldr	r3, [sp, #20]
 8022434:	429a      	cmp	r2, r3
 8022436:	d09c      	beq.n	8022372 <cbvprintf+0x8e>
		conv->unsupported |= ((conv->width_value < 0)
 8022438:	7a23      	ldrb	r3, [r4, #8]
		conv->width_value = width;
 802243a:	60e0      	str	r0, [r4, #12]
		conv->unsupported |= ((conv->width_value < 0)
 802243c:	0799      	lsls	r1, r3, #30
				      || (width != (size_t)conv->width_value));
 802243e:	4308      	orrs	r0, r1
		conv->unsupported |= ((conv->width_value < 0)
 8022440:	0fc0      	lsrs	r0, r0, #31
 8022442:	0041      	lsls	r1, r0, #1
 8022444:	2080      	movs	r0, #128	; 0x80
 8022446:	4240      	negs	r0, r0
 8022448:	4301      	orrs	r1, r0
 802244a:	30fd      	adds	r0, #253	; 0xfd
 802244c:	4003      	ands	r3, r0
 802244e:	430b      	orrs	r3, r1
 8022450:	7223      	strb	r3, [r4, #8]
 8022452:	e78e      	b.n	8022372 <cbvprintf+0x8e>
	size_t prec = extract_decimal(&sp);
 8022454:	a80b      	add	r0, sp, #44	; 0x2c
 8022456:	f7ff fee1 	bl	802221c <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
 802245a:	7a23      	ldrb	r3, [r4, #8]
	conv->prec_value = prec;
 802245c:	6120      	str	r0, [r4, #16]
	conv->unsupported |= ((conv->prec_value < 0)
 802245e:	079a      	lsls	r2, r3, #30
			      || (prec != (size_t)conv->prec_value));
 8022460:	4310      	orrs	r0, r2
	conv->unsupported |= ((conv->prec_value < 0)
 8022462:	2202      	movs	r2, #2
 8022464:	0fc0      	lsrs	r0, r0, #31
 8022466:	4393      	bics	r3, r2
 8022468:	0040      	lsls	r0, r0, #1
 802246a:	4318      	orrs	r0, r3
	return sp;
 802246c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	conv->unsupported |= ((conv->prec_value < 0)
 802246e:	7220      	strb	r0, [r4, #8]
	return sp;
 8022470:	e79a      	b.n	80223a8 <cbvprintf+0xc4>
 8022472:	2478      	movs	r4, #120	; 0x78
	switch (*sp) {
 8022474:	2974      	cmp	r1, #116	; 0x74
 8022476:	d04b      	beq.n	8022510 <cbvprintf+0x22c>
 8022478:	297a      	cmp	r1, #122	; 0x7a
 802247a:	d1a4      	bne.n	80223c6 <cbvprintf+0xe2>
		conv->length_mod = LENGTH_Z;
 802247c:	7a59      	ldrb	r1, [r3, #9]
 802247e:	2230      	movs	r2, #48	; 0x30
 8022480:	43a1      	bics	r1, r4
 8022482:	e030      	b.n	80224e6 <cbvprintf+0x202>
		if (*++sp == 'h') {
 8022484:	7851      	ldrb	r1, [r2, #1]
 8022486:	2478      	movs	r4, #120	; 0x78
 8022488:	2968      	cmp	r1, #104	; 0x68
 802248a:	d129      	bne.n	80224e0 <cbvprintf+0x1fc>
			conv->length_mod = LENGTH_HH;
 802248c:	2008      	movs	r0, #8
 802248e:	7a59      	ldrb	r1, [r3, #9]
 8022490:	43a1      	bics	r1, r4
			conv->length_mod = LENGTH_LL;
 8022492:	4301      	orrs	r1, r0
 8022494:	7259      	strb	r1, [r3, #9]
			++sp;
 8022496:	1c90      	adds	r0, r2, #2
	conv->specifier = *sp++;
 8022498:	7801      	ldrb	r1, [r0, #0]
 802249a:	1c43      	adds	r3, r0, #1
 802249c:	aa12      	add	r2, sp, #72	; 0x48
 802249e:	9305      	str	r3, [sp, #20]
 80224a0:	72d1      	strb	r1, [r2, #11]
		if (conv->length_mod == LENGTH_UPPER_L) {
 80224a2:	7a53      	ldrb	r3, [r2, #9]
	switch (conv->specifier) {
 80224a4:	2978      	cmp	r1, #120	; 0x78
 80224a6:	d900      	bls.n	80224aa <cbvprintf+0x1c6>
 80224a8:	e089      	b.n	80225be <cbvprintf+0x2da>
 80224aa:	2957      	cmp	r1, #87	; 0x57
 80224ac:	d83b      	bhi.n	8022526 <cbvprintf+0x242>
 80224ae:	2941      	cmp	r1, #65	; 0x41
 80224b0:	d003      	beq.n	80224ba <cbvprintf+0x1d6>
 80224b2:	3945      	subs	r1, #69	; 0x45
 80224b4:	2902      	cmp	r1, #2
 80224b6:	d900      	bls.n	80224ba <cbvprintf+0x1d6>
 80224b8:	e081      	b.n	80225be <cbvprintf+0x2da>
		conv->specifier_cat = SPECIFIER_FP;
 80224ba:	2107      	movs	r1, #7
 80224bc:	aa12      	add	r2, sp, #72	; 0x48
 80224be:	7a93      	ldrb	r3, [r2, #10]
 80224c0:	438b      	bics	r3, r1
 80224c2:	3903      	subs	r1, #3
 80224c4:	430b      	orrs	r3, r1
 80224c6:	7293      	strb	r3, [r2, #10]
			unsupported = true;
 80224c8:	2301      	movs	r3, #1
	conv->unsupported |= unsupported;
 80224ca:	aa12      	add	r2, sp, #72	; 0x48
 80224cc:	7a11      	ldrb	r1, [r2, #8]
 80224ce:	0788      	lsls	r0, r1, #30
 80224d0:	0fc0      	lsrs	r0, r0, #31
 80224d2:	4303      	orrs	r3, r0
 80224d4:	2002      	movs	r0, #2
 80224d6:	005b      	lsls	r3, r3, #1
 80224d8:	4381      	bics	r1, r0
 80224da:	430b      	orrs	r3, r1
 80224dc:	7213      	strb	r3, [r2, #8]
	return sp;
 80224de:	e77b      	b.n	80223d8 <cbvprintf+0xf4>
			conv->length_mod = LENGTH_H;
 80224e0:	2210      	movs	r2, #16
 80224e2:	7a59      	ldrb	r1, [r3, #9]
 80224e4:	43a1      	bics	r1, r4
			conv->length_mod = LENGTH_L;
 80224e6:	430a      	orrs	r2, r1
 80224e8:	725a      	strb	r2, [r3, #9]
 80224ea:	e7d5      	b.n	8022498 <cbvprintf+0x1b4>
		if (*++sp == 'l') {
 80224ec:	7851      	ldrb	r1, [r2, #1]
 80224ee:	2478      	movs	r4, #120	; 0x78
 80224f0:	296c      	cmp	r1, #108	; 0x6c
 80224f2:	d103      	bne.n	80224fc <cbvprintf+0x218>
			conv->length_mod = LENGTH_LL;
 80224f4:	7a58      	ldrb	r0, [r3, #9]
 80224f6:	394c      	subs	r1, #76	; 0x4c
 80224f8:	43a0      	bics	r0, r4
 80224fa:	e7ca      	b.n	8022492 <cbvprintf+0x1ae>
			conv->length_mod = LENGTH_L;
 80224fc:	7a59      	ldrb	r1, [r3, #9]
 80224fe:	2218      	movs	r2, #24
 8022500:	43a1      	bics	r1, r4
 8022502:	e7f0      	b.n	80224e6 <cbvprintf+0x202>
		conv->length_mod = LENGTH_J;
 8022504:	2178      	movs	r1, #120	; 0x78
 8022506:	7a5a      	ldrb	r2, [r3, #9]
 8022508:	438a      	bics	r2, r1
 802250a:	0011      	movs	r1, r2
 802250c:	2228      	movs	r2, #40	; 0x28
 802250e:	e7ea      	b.n	80224e6 <cbvprintf+0x202>
		conv->length_mod = LENGTH_T;
 8022510:	7a59      	ldrb	r1, [r3, #9]
 8022512:	2238      	movs	r2, #56	; 0x38
 8022514:	43a1      	bics	r1, r4
 8022516:	e7e6      	b.n	80224e6 <cbvprintf+0x202>
		conv->unsupported = true;
 8022518:	891a      	ldrh	r2, [r3, #8]
 802251a:	499b      	ldr	r1, [pc, #620]	; (8022788 <cbvprintf+0x4a4>)
 802251c:	4011      	ands	r1, r2
 802251e:	4a9b      	ldr	r2, [pc, #620]	; (802278c <cbvprintf+0x4a8>)
 8022520:	430a      	orrs	r2, r1
 8022522:	811a      	strh	r2, [r3, #8]
		break;
 8022524:	e7b8      	b.n	8022498 <cbvprintf+0x1b4>
 8022526:	0008      	movs	r0, r1
 8022528:	3858      	subs	r0, #88	; 0x58
 802252a:	2820      	cmp	r0, #32
 802252c:	d847      	bhi.n	80225be <cbvprintf+0x2da>
 802252e:	f7fd fdc7 	bl	80200c0 <__gnu_thumb1_case_sqi>
 8022532:	4628      	.short	0x4628
 8022534:	46464646 	.word	0x46464646
 8022538:	c4464646 	.word	0xc4464646
 802253c:	c4112846 	.word	0xc4112846
 8022540:	1146c4c4 	.word	0x1146c4c4
 8022544:	46464646 	.word	0x46464646
 8022548:	463c282e 	.word	0x463c282e
 802254c:	28463c46 	.word	0x28463c46
 8022550:	4646      	.short	0x4646
 8022552:	28          	.byte	0x28
 8022553:	00          	.byte	0x00
		conv->specifier_cat = SPECIFIER_SINT;
 8022554:	2407      	movs	r4, #7
 8022556:	7a90      	ldrb	r0, [r2, #10]
 8022558:	43a0      	bics	r0, r4
 802255a:	0004      	movs	r4, r0
 802255c:	2001      	movs	r0, #1
		conv->specifier_cat = SPECIFIER_UINT;
 802255e:	4320      	orrs	r0, r4
 8022560:	7290      	strb	r0, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
 8022562:	2278      	movs	r2, #120	; 0x78
 8022564:	401a      	ands	r2, r3
 8022566:	2a40      	cmp	r2, #64	; 0x40
 8022568:	d104      	bne.n	8022574 <cbvprintf+0x290>
			conv->invalid = true;
 802256a:	2301      	movs	r3, #1
 802256c:	a812      	add	r0, sp, #72	; 0x48
 802256e:	7a04      	ldrb	r4, [r0, #8]
 8022570:	4323      	orrs	r3, r4
 8022572:	7203      	strb	r3, [r0, #8]
	bool unsupported = false;
 8022574:	2300      	movs	r3, #0
		if (conv->specifier == 'c') {
 8022576:	2963      	cmp	r1, #99	; 0x63
 8022578:	d1a7      	bne.n	80224ca <cbvprintf+0x1e6>
			unsupported = (conv->length_mod != LENGTH_NONE);
 802257a:	0013      	movs	r3, r2
		if (conv->length_mod != LENGTH_NONE) {
 802257c:	1e5a      	subs	r2, r3, #1
 802257e:	4193      	sbcs	r3, r2
 8022580:	e011      	b.n	80225a6 <cbvprintf+0x2c2>
		conv->specifier_cat = SPECIFIER_UINT;
 8022582:	2407      	movs	r4, #7
 8022584:	7a90      	ldrb	r0, [r2, #10]
 8022586:	43a0      	bics	r0, r4
 8022588:	0004      	movs	r4, r0
 802258a:	2002      	movs	r0, #2
 802258c:	e7e7      	b.n	802255e <cbvprintf+0x27a>
		conv->specifier_cat = SPECIFIER_PTR;
 802258e:	2007      	movs	r0, #7
 8022590:	7a91      	ldrb	r1, [r2, #10]
 8022592:	4381      	bics	r1, r0
 8022594:	0008      	movs	r0, r1
 8022596:	2103      	movs	r1, #3
 8022598:	4301      	orrs	r1, r0
 802259a:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
 802259c:	2278      	movs	r2, #120	; 0x78
 802259e:	4013      	ands	r3, r2
 80225a0:	3b40      	subs	r3, #64	; 0x40
 80225a2:	425a      	negs	r2, r3
 80225a4:	4153      	adcs	r3, r2
		if (conv->length_mod != LENGTH_NONE) {
 80225a6:	b2db      	uxtb	r3, r3
 80225a8:	e78f      	b.n	80224ca <cbvprintf+0x1e6>
		conv->specifier_cat = SPECIFIER_PTR;
 80225aa:	2007      	movs	r0, #7
 80225ac:	7a91      	ldrb	r1, [r2, #10]
 80225ae:	4381      	bics	r1, r0
 80225b0:	0008      	movs	r0, r1
 80225b2:	2103      	movs	r1, #3
 80225b4:	4301      	orrs	r1, r0
 80225b6:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod != LENGTH_NONE) {
 80225b8:	2278      	movs	r2, #120	; 0x78
 80225ba:	4013      	ands	r3, r2
 80225bc:	e7de      	b.n	802257c <cbvprintf+0x298>
		conv->invalid = true;
 80225be:	2301      	movs	r3, #1
 80225c0:	aa12      	add	r2, sp, #72	; 0x48
 80225c2:	7a11      	ldrb	r1, [r2, #8]
 80225c4:	430b      	orrs	r3, r1
 80225c6:	7213      	strb	r3, [r2, #8]
	bool unsupported = false;
 80225c8:	2300      	movs	r3, #0
		break;
 80225ca:	e77e      	b.n	80224ca <cbvprintf+0x1e6>
		} else if (conv->width_present) {
 80225cc:	7a13      	ldrb	r3, [r2, #8]
 80225ce:	2b7f      	cmp	r3, #127	; 0x7f
 80225d0:	d910      	bls.n	80225f4 <cbvprintf+0x310>
			width = conv->width_value;
 80225d2:	68d3      	ldr	r3, [r2, #12]
		int width = -1;
 80225d4:	9303      	str	r3, [sp, #12]
		if (conv->prec_star) {
 80225d6:	2304      	movs	r3, #4
 80225d8:	aa12      	add	r2, sp, #72	; 0x48
 80225da:	4219      	tst	r1, r3
 80225dc:	d00c      	beq.n	80225f8 <cbvprintf+0x314>
			int arg = va_arg(ap, int);
 80225de:	cf08      	ldmia	r7!, {r3}
 80225e0:	9308      	str	r3, [sp, #32]
			if (arg < 0) {
 80225e2:	2b00      	cmp	r3, #0
 80225e4:	da0c      	bge.n	8022600 <cbvprintf+0x31c>
				conv->prec_present = false;
 80225e6:	2102      	movs	r1, #2
 80225e8:	7a53      	ldrb	r3, [r2, #9]
 80225ea:	438b      	bics	r3, r1
 80225ec:	7253      	strb	r3, [r2, #9]
		int precision = -1;
 80225ee:	2301      	movs	r3, #1
 80225f0:	425b      	negs	r3, r3
 80225f2:	e004      	b.n	80225fe <cbvprintf+0x31a>
		int width = -1;
 80225f4:	2301      	movs	r3, #1
 80225f6:	e6fe      	b.n	80223f6 <cbvprintf+0x112>
		} else if (conv->prec_present) {
 80225f8:	078b      	lsls	r3, r1, #30
 80225fa:	d5f8      	bpl.n	80225ee <cbvprintf+0x30a>
			precision = conv->prec_value;
 80225fc:	6913      	ldr	r3, [r2, #16]
		int precision = -1;
 80225fe:	9308      	str	r3, [sp, #32]
		conv->pad0_value = 0;
 8022600:	2400      	movs	r4, #0
 8022602:	aa12      	add	r2, sp, #72	; 0x48
			= (enum specifier_cat_enum)conv->specifier_cat;
 8022604:	7a93      	ldrb	r3, [r2, #10]
			= (enum length_mod_enum)conv->length_mod;
 8022606:	7a51      	ldrb	r1, [r2, #9]
			= (enum specifier_cat_enum)conv->specifier_cat;
 8022608:	075b      	lsls	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
 802260a:	0649      	lsls	r1, r1, #25
		enum specifier_cat_enum specifier_cat
 802260c:	0f5b      	lsrs	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
 802260e:	0f09      	lsrs	r1, r1, #28
		conv->pad0_value = 0;
 8022610:	60d4      	str	r4, [r2, #12]
		conv->pad0_pre_exp = 0;
 8022612:	6114      	str	r4, [r2, #16]
		if (specifier_cat == SPECIFIER_SINT) {
 8022614:	2b01      	cmp	r3, #1
 8022616:	d134      	bne.n	8022682 <cbvprintf+0x39e>
			switch (length_mod) {
 8022618:	1ec8      	subs	r0, r1, #3
 802261a:	2804      	cmp	r0, #4
 802261c:	d80b      	bhi.n	8022636 <cbvprintf+0x352>
 802261e:	f7fd fd59 	bl	80200d4 <__gnu_thumb1_case_uqi>
 8022622:	5003      	.short	0x5003
 8022624:	0a50      	.short	0x0a50
 8022626:	0a          	.byte	0x0a
 8022627:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
 8022628:	0038      	movs	r0, r7
 802262a:	c808      	ldmia	r0!, {r3}
 802262c:	6013      	str	r3, [r2, #0]
 802262e:	17db      	asrs	r3, r3, #31
 8022630:	6053      	str	r3, [r2, #4]
					(uint_value_type)va_arg(ap, size_t);
 8022632:	0007      	movs	r7, r0
 8022634:	e00b      	b.n	802264e <cbvprintf+0x36a>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8022636:	cf01      	ldmia	r7!, {r0}
 8022638:	ab12      	add	r3, sp, #72	; 0x48
 802263a:	6010      	str	r0, [r2, #0]
 802263c:	17c0      	asrs	r0, r0, #31
 802263e:	6050      	str	r0, [r2, #4]
			if (length_mod == LENGTH_HH) {
 8022640:	2901      	cmp	r1, #1
 8022642:	d117      	bne.n	8022674 <cbvprintf+0x390>
				value->sint = (char)value->sint;
 8022644:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022646:	b2d2      	uxtb	r2, r2
 8022648:	9212      	str	r2, [sp, #72]	; 0x48
 802264a:	2200      	movs	r2, #0
				value->sint = (short)value->sint;
 802264c:	605a      	str	r2, [r3, #4]
		if (conv->invalid || conv->unsupported) {
 802264e:	aa12      	add	r2, sp, #72	; 0x48
 8022650:	7a13      	ldrb	r3, [r2, #8]
 8022652:	2003      	movs	r0, #3
 8022654:	001c      	movs	r4, r3
 8022656:	4004      	ands	r4, r0
 8022658:	4203      	tst	r3, r0
 802265a:	d04f      	beq.n	80226fc <cbvprintf+0x418>
			OUTS(sp, fp);
 802265c:	0032      	movs	r2, r6
 802265e:	9b05      	ldr	r3, [sp, #20]
 8022660:	9907      	ldr	r1, [sp, #28]
 8022662:	9806      	ldr	r0, [sp, #24]
 8022664:	f00c f84e 	bl	802e704 <outs>
 8022668:	2800      	cmp	r0, #0
 802266a:	da00      	bge.n	802266e <cbvprintf+0x38a>
 802266c:	e132      	b.n	80228d4 <cbvprintf+0x5f0>
 802266e:	182d      	adds	r5, r5, r0
			OUTS(bps, bpe);
 8022670:	9e05      	ldr	r6, [sp, #20]
 8022672:	e63e      	b.n	80222f2 <cbvprintf+0xe>
			} else if (length_mod == LENGTH_H) {
 8022674:	2902      	cmp	r1, #2
 8022676:	d1ea      	bne.n	802264e <cbvprintf+0x36a>
				value->sint = (short)value->sint;
 8022678:	2000      	movs	r0, #0
 802267a:	5e1a      	ldrsh	r2, [r3, r0]
 802267c:	601a      	str	r2, [r3, #0]
 802267e:	17d2      	asrs	r2, r2, #31
 8022680:	e7e4      	b.n	802264c <cbvprintf+0x368>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8022682:	2b02      	cmp	r3, #2
 8022684:	d129      	bne.n	80226da <cbvprintf+0x3f6>
			switch (length_mod) {
 8022686:	1ec8      	subs	r0, r1, #3
 8022688:	2804      	cmp	r0, #4
 802268a:	d805      	bhi.n	8022698 <cbvprintf+0x3b4>
 802268c:	0014      	movs	r4, r2
 802268e:	f7fd fd21 	bl	80200d4 <__gnu_thumb1_case_uqi>
 8022692:	1813      	.short	0x1813
 8022694:	1f18      	.short	0x1f18
 8022696:	1f          	.byte	0x1f
 8022697:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
 8022698:	cf01      	ldmia	r7!, {r0}
 802269a:	c211      	stmia	r2!, {r0, r4}
				value->uint = (unsigned char)value->uint;
 802269c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802269e:	b2db      	uxtb	r3, r3
			if (length_mod == LENGTH_HH) {
 80226a0:	2901      	cmp	r1, #1
 80226a2:	d005      	beq.n	80226b0 <cbvprintf+0x3cc>
			} else if (length_mod == LENGTH_H) {
 80226a4:	2902      	cmp	r1, #2
 80226a6:	d1d2      	bne.n	802264e <cbvprintf+0x36a>
				value->uint = (unsigned short)value->uint;
 80226a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80226aa:	9304      	str	r3, [sp, #16]
 80226ac:	466b      	mov	r3, sp
 80226ae:	8a1b      	ldrh	r3, [r3, #16]
 80226b0:	9312      	str	r3, [sp, #72]	; 0x48
 80226b2:	2300      	movs	r3, #0
 80226b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80226b6:	e7ca      	b.n	802264e <cbvprintf+0x36a>
				if ((!WCHAR_IS_SIGNED)
 80226b8:	2300      	movs	r3, #0
					value->uint = va_arg(ap, unsigned long);
 80226ba:	683a      	ldr	r2, [r7, #0]
				value->sint = va_arg(ap, int);
 80226bc:	1d38      	adds	r0, r7, #4
					value->uint = va_arg(ap, unsigned long);
 80226be:	c40c      	stmia	r4!, {r2, r3}
 80226c0:	e7b7      	b.n	8022632 <cbvprintf+0x34e>
					(uint_value_type)va_arg(ap,
 80226c2:	2307      	movs	r3, #7
 80226c4:	1df8      	adds	r0, r7, #7
 80226c6:	4398      	bics	r0, r3
				value->uint =
 80226c8:	c80c      	ldmia	r0!, {r2, r3}
 80226ca:	9212      	str	r2, [sp, #72]	; 0x48
 80226cc:	9313      	str	r3, [sp, #76]	; 0x4c
				break;
 80226ce:	e7b0      	b.n	8022632 <cbvprintf+0x34e>
					(uint_value_type)va_arg(ap, size_t);
 80226d0:	cf01      	ldmia	r7!, {r0}
 80226d2:	6010      	str	r0, [r2, #0]
 80226d4:	2000      	movs	r0, #0
 80226d6:	6050      	str	r0, [r2, #4]
				break;
 80226d8:	e7e0      	b.n	802269c <cbvprintf+0x3b8>
		} else if (specifier_cat == SPECIFIER_FP) {
 80226da:	2b04      	cmp	r3, #4
 80226dc:	d109      	bne.n	80226f2 <cbvprintf+0x40e>
					(sint_value_type)va_arg(ap, long long);
 80226de:	2007      	movs	r0, #7
 80226e0:	1dfb      	adds	r3, r7, #7
 80226e2:	4383      	bics	r3, r0
 80226e4:	001f      	movs	r7, r3
				value->ldbl = va_arg(ap, long double);
 80226e6:	685c      	ldr	r4, [r3, #4]
 80226e8:	681b      	ldr	r3, [r3, #0]
					(sint_value_type)va_arg(ap, long long);
 80226ea:	3708      	adds	r7, #8
				value->ldbl = va_arg(ap, long double);
 80226ec:	6013      	str	r3, [r2, #0]
 80226ee:	6054      	str	r4, [r2, #4]
 80226f0:	e7ad      	b.n	802264e <cbvprintf+0x36a>
		} else if (specifier_cat == SPECIFIER_PTR) {
 80226f2:	2b03      	cmp	r3, #3
 80226f4:	d1ab      	bne.n	802264e <cbvprintf+0x36a>
			value->ptr = va_arg(ap, void *);
 80226f6:	cf01      	ldmia	r7!, {r0}
 80226f8:	6010      	str	r0, [r2, #0]
 80226fa:	e7a8      	b.n	802264e <cbvprintf+0x36a>
		switch (conv->specifier) {
 80226fc:	7ad0      	ldrb	r0, [r2, #11]
 80226fe:	2878      	cmp	r0, #120	; 0x78
 8022700:	d8b6      	bhi.n	8022670 <cbvprintf+0x38c>
 8022702:	2862      	cmp	r0, #98	; 0x62
 8022704:	d824      	bhi.n	8022750 <cbvprintf+0x46c>
 8022706:	2825      	cmp	r0, #37	; 0x25
 8022708:	d100      	bne.n	802270c <cbvprintf+0x428>
 802270a:	e5fb      	b.n	8022304 <cbvprintf+0x20>
 802270c:	2858      	cmp	r0, #88	; 0x58
 802270e:	d1af      	bne.n	8022670 <cbvprintf+0x38c>
			bps = encode_uint(value->uint, conv, buf, bpe);
 8022710:	9812      	ldr	r0, [sp, #72]	; 0x48
 8022712:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8022714:	2326      	movs	r3, #38	; 0x26
 8022716:	aa08      	add	r2, sp, #32
 8022718:	189b      	adds	r3, r3, r2
 802271a:	9300      	str	r3, [sp, #0]
 802271c:	aa14      	add	r2, sp, #80	; 0x50
 802271e:	ab0c      	add	r3, sp, #48	; 0x30
 8022720:	f7ff fd90 	bl	8022244 <encode_uint>
 8022724:	9004      	str	r0, [sp, #16]
			if (precision >= 0) {
 8022726:	2326      	movs	r3, #38	; 0x26
 8022728:	aa08      	add	r2, sp, #32
 802272a:	189b      	adds	r3, r3, r2
 802272c:	9309      	str	r3, [sp, #36]	; 0x24
 802272e:	9b08      	ldr	r3, [sp, #32]
 8022730:	2b00      	cmp	r3, #0
 8022732:	db3a      	blt.n	80227aa <cbvprintf+0x4c6>
				conv->flag_zero = false;
 8022734:	2040      	movs	r0, #64	; 0x40
				size_t len = bpe - bps;
 8022736:	9a04      	ldr	r2, [sp, #16]
 8022738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802273a:	1a9b      	subs	r3, r3, r2
				conv->flag_zero = false;
 802273c:	aa12      	add	r2, sp, #72	; 0x48
 802273e:	7a11      	ldrb	r1, [r2, #8]
 8022740:	4381      	bics	r1, r0
 8022742:	7211      	strb	r1, [r2, #8]
				if (len < (size_t)precision) {
 8022744:	9908      	ldr	r1, [sp, #32]
 8022746:	4299      	cmp	r1, r3
 8022748:	d92f      	bls.n	80227aa <cbvprintf+0x4c6>
					conv->pad0_value = precision - (int)len;
 802274a:	1acb      	subs	r3, r1, r3
 802274c:	9315      	str	r3, [sp, #84]	; 0x54
 802274e:	e02c      	b.n	80227aa <cbvprintf+0x4c6>
 8022750:	3863      	subs	r0, #99	; 0x63
 8022752:	2815      	cmp	r0, #21
 8022754:	d88c      	bhi.n	8022670 <cbvprintf+0x38c>
 8022756:	f7fd fcc7 	bl	80200e8 <__gnu_thumb1_case_shi>
 802275a:	005f      	.short	0x005f
 802275c:	ff8b0069 	.word	0xff8b0069
 8022760:	ff8bff8b 	.word	0xff8bff8b
 8022764:	0069ff8b 	.word	0x0069ff8b
 8022768:	ff8bff8b 	.word	0xff8bff8b
 802276c:	ff8bff8b 	.word	0xff8bff8b
 8022770:	007f0097 	.word	0x007f0097
 8022774:	ff8b0081 	.word	0xff8b0081
 8022778:	001bff8b 	.word	0x001bff8b
 802277c:	007fff8b 	.word	0x007fff8b
 8022780:	ff8bff8b 	.word	0xff8bff8b
 8022784:	007f      	.short	0x007f
 8022786:	46c0      	nop			; (mov r8, r8)
 8022788:	ffff87fd 	.word	0xffff87fd
 802278c:	00004002 	.word	0x00004002
			bps = (const char *)value->ptr;
 8022790:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022792:	9304      	str	r3, [sp, #16]
			if (precision >= 0) {
 8022794:	9b08      	ldr	r3, [sp, #32]
 8022796:	2b00      	cmp	r3, #0
 8022798:	db3a      	blt.n	8022810 <cbvprintf+0x52c>
				len = strnlen(bps, precision);
 802279a:	0019      	movs	r1, r3
 802279c:	9804      	ldr	r0, [sp, #16]
 802279e:	f00e fb9a 	bl	8030ed6 <strnlen>
		char sign = 0;
 80227a2:	2400      	movs	r4, #0
			bpe = bps + len;
 80227a4:	9b04      	ldr	r3, [sp, #16]
 80227a6:	181b      	adds	r3, r3, r0
 80227a8:	9309      	str	r3, [sp, #36]	; 0x24
		if (bps == NULL) {
 80227aa:	9b04      	ldr	r3, [sp, #16]
 80227ac:	2b00      	cmp	r3, #0
 80227ae:	d100      	bne.n	80227b2 <cbvprintf+0x4ce>
 80227b0:	e75e      	b.n	8022670 <cbvprintf+0x38c>
		size_t nj_len = (bpe - bps);
 80227b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80227b4:	9a04      	ldr	r2, [sp, #16]
 80227b6:	1a9e      	subs	r6, r3, r2
			nj_len += 1U;
 80227b8:	0023      	movs	r3, r4
 80227ba:	1e5a      	subs	r2, r3, #1
 80227bc:	4193      	sbcs	r3, r2
 80227be:	18f6      	adds	r6, r6, r3
		if (conv->altform_0c) {
 80227c0:	ab12      	add	r3, sp, #72	; 0x48
 80227c2:	7a9b      	ldrb	r3, [r3, #10]
 80227c4:	06da      	lsls	r2, r3, #27
 80227c6:	d579      	bpl.n	80228bc <cbvprintf+0x5d8>
			nj_len += 2U;
 80227c8:	3602      	adds	r6, #2
		nj_len += conv->pad0_value;
 80227ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80227cc:	9208      	str	r2, [sp, #32]
 80227ce:	18b6      	adds	r6, r6, r2
		if (conv->pad_fp) {
 80227d0:	065b      	lsls	r3, r3, #25
 80227d2:	d501      	bpl.n	80227d8 <cbvprintf+0x4f4>
			nj_len += conv->pad0_pre_exp;
 80227d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80227d6:	18f6      	adds	r6, r6, r3
		if (width > 0) {
 80227d8:	9b03      	ldr	r3, [sp, #12]
 80227da:	2b00      	cmp	r3, #0
 80227dc:	dc00      	bgt.n	80227e0 <cbvprintf+0x4fc>
 80227de:	e088      	b.n	80228f2 <cbvprintf+0x60e>
			width -= (int)nj_len;
 80227e0:	1b9b      	subs	r3, r3, r6
 80227e2:	9308      	str	r3, [sp, #32]
			if (!conv->flag_dash) {
 80227e4:	ab12      	add	r3, sp, #72	; 0x48
 80227e6:	7a1b      	ldrb	r3, [r3, #8]
 80227e8:	075a      	lsls	r2, r3, #29
 80227ea:	0fd6      	lsrs	r6, r2, #31
 80227ec:	2a00      	cmp	r2, #0
 80227ee:	da00      	bge.n	80227f2 <cbvprintf+0x50e>
 80227f0:	e0be      	b.n	8022970 <cbvprintf+0x68c>
				if (conv->flag_zero) {
 80227f2:	065b      	lsls	r3, r3, #25
 80227f4:	d400      	bmi.n	80227f8 <cbvprintf+0x514>
 80227f6:	e06f      	b.n	80228d8 <cbvprintf+0x5f4>
					if (sign != 0) {
 80227f8:	2c00      	cmp	r4, #0
 80227fa:	d007      	beq.n	802280c <cbvprintf+0x528>
						OUTC(sign);
 80227fc:	0020      	movs	r0, r4
 80227fe:	9907      	ldr	r1, [sp, #28]
 8022800:	9b06      	ldr	r3, [sp, #24]
 8022802:	4798      	blx	r3
 8022804:	2800      	cmp	r0, #0
 8022806:	db65      	blt.n	80228d4 <cbvprintf+0x5f0>
						sign = 0;
 8022808:	0034      	movs	r4, r6
						OUTC(sign);
 802280a:	3501      	adds	r5, #1
					pad = '0';
 802280c:	2630      	movs	r6, #48	; 0x30
 802280e:	e064      	b.n	80228da <cbvprintf+0x5f6>
				len = strlen(bps);
 8022810:	9804      	ldr	r0, [sp, #16]
 8022812:	f7ff fbbb 	bl	8021f8c <strlen>
 8022816:	e7c4      	b.n	80227a2 <cbvprintf+0x4be>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8022818:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802281a:	ab0c      	add	r3, sp, #48	; 0x30
 802281c:	701a      	strb	r2, [r3, #0]
			bpe = buf + 1;
 802281e:	2211      	movs	r2, #17
			break;
 8022820:	2400      	movs	r4, #0
			bpe = buf + 1;
 8022822:	a908      	add	r1, sp, #32
 8022824:	1852      	adds	r2, r2, r1
 8022826:	9209      	str	r2, [sp, #36]	; 0x24
			bps = "(nil)";
 8022828:	9304      	str	r3, [sp, #16]
 802282a:	e7c2      	b.n	80227b2 <cbvprintf+0x4ce>
			if (conv->flag_plus) {
 802282c:	2208      	movs	r2, #8
				sign = '+';
 802282e:	242b      	movs	r4, #43	; 0x2b
			if (conv->flag_plus) {
 8022830:	4213      	tst	r3, r2
 8022832:	d105      	bne.n	8022840 <cbvprintf+0x55c>
			} else if (conv->flag_space) {
 8022834:	001c      	movs	r4, r3
 8022836:	1892      	adds	r2, r2, r2
 8022838:	4014      	ands	r4, r2
 802283a:	4213      	tst	r3, r2
 802283c:	d000      	beq.n	8022840 <cbvprintf+0x55c>
				sign = ' ';
 802283e:	2420      	movs	r4, #32
			sint = value->sint;
 8022840:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022842:	9b13      	ldr	r3, [sp, #76]	; 0x4c
			if (sint < 0) {
 8022844:	2b00      	cmp	r3, #0
 8022846:	db00      	blt.n	802284a <cbvprintf+0x566>
 8022848:	e762      	b.n	8022710 <cbvprintf+0x42c>
				value->uint = (uint_value_type)-sint;
 802284a:	2100      	movs	r1, #0
 802284c:	4250      	negs	r0, r2
 802284e:	4199      	sbcs	r1, r3
				sign = '-';
 8022850:	242d      	movs	r4, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
 8022852:	9012      	str	r0, [sp, #72]	; 0x48
 8022854:	9113      	str	r1, [sp, #76]	; 0x4c
 8022856:	e75b      	b.n	8022710 <cbvprintf+0x42c>
		switch (conv->specifier) {
 8022858:	2400      	movs	r4, #0
 802285a:	e759      	b.n	8022710 <cbvprintf+0x42c>
			if (value->ptr != NULL) {
 802285c:	9812      	ldr	r0, [sp, #72]	; 0x48
 802285e:	ae12      	add	r6, sp, #72	; 0x48
 8022860:	2800      	cmp	r0, #0
 8022862:	d026      	beq.n	80228b2 <cbvprintf+0x5ce>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8022864:	2326      	movs	r3, #38	; 0x26
 8022866:	aa08      	add	r2, sp, #32
 8022868:	189b      	adds	r3, r3, r2
 802286a:	9300      	str	r3, [sp, #0]
 802286c:	aa14      	add	r2, sp, #80	; 0x50
 802286e:	ab0c      	add	r3, sp, #48	; 0x30
 8022870:	2100      	movs	r1, #0
 8022872:	f7ff fce7 	bl	8022244 <encode_uint>
				conv->altform_0c = true;
 8022876:	22ef      	movs	r2, #239	; 0xef
 8022878:	8973      	ldrh	r3, [r6, #10]
		char sign = 0;
 802287a:	2400      	movs	r4, #0
				conv->altform_0c = true;
 802287c:	401a      	ands	r2, r3
 802287e:	4b42      	ldr	r3, [pc, #264]	; (8022988 <cbvprintf+0x6a4>)
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8022880:	9004      	str	r0, [sp, #16]
				conv->altform_0c = true;
 8022882:	4313      	orrs	r3, r2
 8022884:	8173      	strh	r3, [r6, #10]
				goto prec_int_pad0;
 8022886:	e74e      	b.n	8022726 <cbvprintf+0x442>
				store_count(conv, value->ptr, count);
 8022888:	6813      	ldr	r3, [r2, #0]
	switch ((enum length_mod_enum)conv->length_mod) {
 802288a:	2907      	cmp	r1, #7
 802288c:	d900      	bls.n	8022890 <cbvprintf+0x5ac>
 802288e:	e6ef      	b.n	8022670 <cbvprintf+0x38c>
 8022890:	0008      	movs	r0, r1
 8022892:	f7fd fc1f 	bl	80200d4 <__gnu_thumb1_case_uqi>
 8022896:	040c      	.short	0x040c
 8022898:	08080c06 	.word	0x08080c06
 802289c:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
 802289e:	701d      	strb	r5, [r3, #0]
		break;
 80228a0:	e6e6      	b.n	8022670 <cbvprintf+0x38c>
		*(short *)dp = (short)count;
 80228a2:	801d      	strh	r5, [r3, #0]
		break;
 80228a4:	e6e4      	b.n	8022670 <cbvprintf+0x38c>
		*(intmax_t *)dp = (intmax_t)count;
 80228a6:	17ea      	asrs	r2, r5, #31
 80228a8:	601d      	str	r5, [r3, #0]
 80228aa:	605a      	str	r2, [r3, #4]
		break;
 80228ac:	e6e0      	b.n	8022670 <cbvprintf+0x38c>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 80228ae:	601d      	str	r5, [r3, #0]
		break;
 80228b0:	e6de      	b.n	8022670 <cbvprintf+0x38c>
			bpe = bps + 5;
 80228b2:	4b36      	ldr	r3, [pc, #216]	; (802298c <cbvprintf+0x6a8>)
 80228b4:	0004      	movs	r4, r0
 80228b6:	9309      	str	r3, [sp, #36]	; 0x24
			bps = "(nil)";
 80228b8:	4b35      	ldr	r3, [pc, #212]	; (8022990 <cbvprintf+0x6ac>)
 80228ba:	e7b5      	b.n	8022828 <cbvprintf+0x544>
		} else if (conv->altform_0) {
 80228bc:	2208      	movs	r2, #8
 80228be:	401a      	ands	r2, r3
			nj_len += 1U;
 80228c0:	1e51      	subs	r1, r2, #1
 80228c2:	418a      	sbcs	r2, r1
 80228c4:	18b6      	adds	r6, r6, r2
 80228c6:	e780      	b.n	80227ca <cbvprintf+0x4e6>
					OUTC(pad);
 80228c8:	0030      	movs	r0, r6
 80228ca:	9907      	ldr	r1, [sp, #28]
 80228cc:	9b06      	ldr	r3, [sp, #24]
 80228ce:	4798      	blx	r3
 80228d0:	2800      	cmp	r0, #0
 80228d2:	da04      	bge.n	80228de <cbvprintf+0x5fa>
#undef OUTS
#undef OUTC
}
 80228d4:	b019      	add	sp, #100	; 0x64
 80228d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				char pad = ' ';
 80228d8:	2620      	movs	r6, #32
					pad = '0';
 80228da:	9b08      	ldr	r3, [sp, #32]
 80228dc:	9303      	str	r3, [sp, #12]
 80228de:	9a03      	ldr	r2, [sp, #12]
 80228e0:	9b08      	ldr	r3, [sp, #32]
				while (width-- > 0) {
 80228e2:	0011      	movs	r1, r2
 80228e4:	195b      	adds	r3, r3, r5
 80228e6:	3901      	subs	r1, #1
 80228e8:	1a9b      	subs	r3, r3, r2
 80228ea:	9103      	str	r1, [sp, #12]
 80228ec:	2a00      	cmp	r2, #0
 80228ee:	dceb      	bgt.n	80228c8 <cbvprintf+0x5e4>
 80228f0:	001d      	movs	r5, r3
		if (sign != 0) {
 80228f2:	2c00      	cmp	r4, #0
 80228f4:	d006      	beq.n	8022904 <cbvprintf+0x620>
			OUTC(sign);
 80228f6:	0020      	movs	r0, r4
 80228f8:	9907      	ldr	r1, [sp, #28]
 80228fa:	9b06      	ldr	r3, [sp, #24]
 80228fc:	4798      	blx	r3
 80228fe:	2800      	cmp	r0, #0
 8022900:	dbe8      	blt.n	80228d4 <cbvprintf+0x5f0>
 8022902:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 8022904:	ab12      	add	r3, sp, #72	; 0x48
 8022906:	7a9b      	ldrb	r3, [r3, #10]
 8022908:	06da      	lsls	r2, r3, #27
 802290a:	d401      	bmi.n	8022910 <cbvprintf+0x62c>
 802290c:	071b      	lsls	r3, r3, #28
 802290e:	d506      	bpl.n	802291e <cbvprintf+0x63a>
				OUTC('0');
 8022910:	2030      	movs	r0, #48	; 0x30
 8022912:	9907      	ldr	r1, [sp, #28]
 8022914:	9b06      	ldr	r3, [sp, #24]
 8022916:	4798      	blx	r3
 8022918:	2800      	cmp	r0, #0
 802291a:	dbdb      	blt.n	80228d4 <cbvprintf+0x5f0>
 802291c:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 802291e:	ab12      	add	r3, sp, #72	; 0x48
 8022920:	7a9a      	ldrb	r2, [r3, #10]
 8022922:	06d2      	lsls	r2, r2, #27
 8022924:	d506      	bpl.n	8022934 <cbvprintf+0x650>
				OUTC(conv->specifier);
 8022926:	7ad8      	ldrb	r0, [r3, #11]
 8022928:	9907      	ldr	r1, [sp, #28]
 802292a:	9b06      	ldr	r3, [sp, #24]
 802292c:	4798      	blx	r3
 802292e:	2800      	cmp	r0, #0
 8022930:	dbd0      	blt.n	80228d4 <cbvprintf+0x5f0>
 8022932:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8022934:	002c      	movs	r4, r5
			pad_len = conv->pad0_value;
 8022936:	9e15      	ldr	r6, [sp, #84]	; 0x54
			while (pad_len-- > 0) {
 8022938:	1973      	adds	r3, r6, r5
 802293a:	1b1b      	subs	r3, r3, r4
 802293c:	2b00      	cmp	r3, #0
 802293e:	dc1a      	bgt.n	8022976 <cbvprintf+0x692>
			OUTS(bps, bpe);
 8022940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022942:	9a04      	ldr	r2, [sp, #16]
 8022944:	9907      	ldr	r1, [sp, #28]
 8022946:	9806      	ldr	r0, [sp, #24]
 8022948:	f00b fedc 	bl	802e704 <outs>
 802294c:	2800      	cmp	r0, #0
 802294e:	dbc1      	blt.n	80228d4 <cbvprintf+0x5f0>
 8022950:	1905      	adds	r5, r0, r4
 8022952:	002c      	movs	r4, r5
		while (width > 0) {
 8022954:	9b03      	ldr	r3, [sp, #12]
 8022956:	191b      	adds	r3, r3, r4
 8022958:	1b5b      	subs	r3, r3, r5
 802295a:	2b00      	cmp	r3, #0
 802295c:	dc00      	bgt.n	8022960 <cbvprintf+0x67c>
 802295e:	e687      	b.n	8022670 <cbvprintf+0x38c>
			OUTC(' ');
 8022960:	2020      	movs	r0, #32
 8022962:	9907      	ldr	r1, [sp, #28]
 8022964:	9b06      	ldr	r3, [sp, #24]
 8022966:	4798      	blx	r3
 8022968:	2800      	cmp	r0, #0
 802296a:	dbb3      	blt.n	80228d4 <cbvprintf+0x5f0>
 802296c:	3501      	adds	r5, #1
			--width;
 802296e:	e7f1      	b.n	8022954 <cbvprintf+0x670>
			width -= (int)nj_len;
 8022970:	9b08      	ldr	r3, [sp, #32]
 8022972:	9303      	str	r3, [sp, #12]
 8022974:	e7bd      	b.n	80228f2 <cbvprintf+0x60e>
				OUTC('0');
 8022976:	2030      	movs	r0, #48	; 0x30
 8022978:	9907      	ldr	r1, [sp, #28]
 802297a:	9b06      	ldr	r3, [sp, #24]
 802297c:	4798      	blx	r3
 802297e:	2800      	cmp	r0, #0
 8022980:	dba8      	blt.n	80228d4 <cbvprintf+0x5f0>
 8022982:	3401      	adds	r4, #1
 8022984:	e7d8      	b.n	8022938 <cbvprintf+0x654>
 8022986:	46c0      	nop			; (mov r8, r8)
 8022988:	00007810 	.word	0x00007810
 802298c:	08031844 	.word	0x08031844
 8022990:	0803183f 	.word	0x0803183f

08022994 <stm32wl_init>:
static ALWAYS_INLINE unsigned int arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	__asm__ volatile("mrs %0, PRIMASK;"
 8022994:	f3ef 8310 	mrs	r3, PRIMASK
 8022998:	b672      	cpsid	i
 */

static ALWAYS_INLINE void arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	if (key != 0U) {
 802299a:	2b00      	cmp	r3, #0
 802299c:	d102      	bne.n	80229a4 <stm32wl_init+0x10>
		return;
	}
	__asm__ volatile(
 802299e:	b662      	cpsie	i
 80229a0:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 4 MHz from MSI */
	SystemCoreClock = 4000000;
 80229a4:	4b02      	ldr	r3, [pc, #8]	; (80229b0 <stm32wl_init+0x1c>)
 80229a6:	4a03      	ldr	r2, [pc, #12]	; (80229b4 <stm32wl_init+0x20>)

	return 0;
}
 80229a8:	2000      	movs	r0, #0
	SystemCoreClock = 4000000;
 80229aa:	601a      	str	r2, [r3, #0]
}
 80229ac:	4770      	bx	lr
 80229ae:	46c0      	nop			; (mov r8, r8)
 80229b0:	200080c4 	.word	0x200080c4
 80229b4:	003d0900 	.word	0x003d0900

080229b8 <HAL_Delay>:
 *	  on variable incremented.
 * @param Delay: specifies the delay time length, in milliseconds.
 * @return None
 */
void HAL_Delay(__IO uint32_t Delay)
{
 80229b8:	b513      	push	{r0, r1, r4, lr}
 80229ba:	9001      	str	r0, [sp, #4]
	k_msleep(Delay);
 80229bc:	9b01      	ldr	r3, [sp, #4]
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
 80229be:	43da      	mvns	r2, r3
 80229c0:	17d2      	asrs	r2, r2, #31
 80229c2:	4013      	ands	r3, r2
 80229c4:	17dc      	asrs	r4, r3, #31
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
 80229c6:	0d1a      	lsrs	r2, r3, #20
 80229c8:	0318      	lsls	r0, r3, #12
 80229ca:	2300      	movs	r3, #0
 80229cc:	0321      	lsls	r1, r4, #12
 80229ce:	4311      	orrs	r1, r2
 80229d0:	4a05      	ldr	r2, [pc, #20]	; (80229e8 <HAL_Delay+0x30>)
 80229d2:	1880      	adds	r0, r0, r2
 80229d4:	4159      	adcs	r1, r3
 80229d6:	22fa      	movs	r2, #250	; 0xfa
 80229d8:	2300      	movs	r3, #0
 80229da:	0092      	lsls	r2, r2, #2
 80229dc:	f7fd fd66 	bl	80204ac <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
 80229e0:	f00a fc52 	bl	802d288 <z_impl_k_sleep>
}
 80229e4:	bd13      	pop	{r0, r1, r4, pc}
 80229e6:	46c0      	nop			; (mov r8, r8)
 80229e8:	000003e7 	.word	0x000003e7

080229ec <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
 80229ec:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 80229ee:	2200      	movs	r2, #0
{
 80229f0:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
 80229f2:	490f      	ldr	r1, [pc, #60]	; (8022a30 <enable_logger+0x44>)
 80229f4:	480f      	ldr	r0, [pc, #60]	; (8022a34 <enable_logger+0x48>)
 80229f6:	f00e f967 	bl	8030cc8 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 80229fa:	2400      	movs	r4, #0
 80229fc:	2000      	movs	r0, #0
 80229fe:	2100      	movs	r1, #0
 8022a00:	230e      	movs	r3, #14
 8022a02:	22c0      	movs	r2, #192	; 0xc0
 8022a04:	4d0c      	ldr	r5, [pc, #48]	; (8022a38 <enable_logger+0x4c>)
 8022a06:	9006      	str	r0, [sp, #24]
 8022a08:	9107      	str	r1, [sp, #28]
 8022a0a:	9303      	str	r3, [sp, #12]
 8022a0c:	0028      	movs	r0, r5
 8022a0e:	4b0b      	ldr	r3, [pc, #44]	; (8022a3c <enable_logger+0x50>)
 8022a10:	490b      	ldr	r1, [pc, #44]	; (8022a40 <enable_logger+0x54>)
 8022a12:	9404      	str	r4, [sp, #16]
 8022a14:	9402      	str	r4, [sp, #8]
 8022a16:	9401      	str	r4, [sp, #4]
 8022a18:	9400      	str	r4, [sp, #0]
 8022a1a:	0092      	lsls	r2, r2, #2
 8022a1c:	f00a f9ba 	bl	802cd94 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 8022a20:	4908      	ldr	r1, [pc, #32]	; (8022a44 <enable_logger+0x58>)
 8022a22:	0028      	movs	r0, r5
 8022a24:	f00e f847 	bl	8030ab6 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
 8022a28:	0020      	movs	r0, r4
 8022a2a:	b009      	add	sp, #36	; 0x24
 8022a2c:	bd30      	pop	{r4, r5, pc}
 8022a2e:	46c0      	nop			; (mov r8, r8)
 8022a30:	08022a49 	.word	0x08022a49
 8022a34:	20008378 	.word	0x20008378
 8022a38:	200083b0 	.word	0x200083b0
 8022a3c:	08022dbd 	.word	0x08022dbd
 8022a40:	20009b28 	.word	0x20009b28
 8022a44:	08031845 	.word	0x08031845

08022a48 <log_process_thread_timer_expiry_fn>:
{
 8022a48:	b510      	push	{r4, lr}
	z_impl_k_sem_give(sem);
 8022a4a:	4802      	ldr	r0, [pc, #8]	; (8022a54 <log_process_thread_timer_expiry_fn+0xc>)
 8022a4c:	f00a fa36 	bl	802cebc <z_impl_k_sem_give>
}
 8022a50:	bd10      	pop	{r4, pc}
 8022a52:	46c0      	nop			; (mov r8, r8)
 8022a54:	20008368 	.word	0x20008368

08022a58 <z_log_get_s_mask>:
{
 8022a58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022a5a:	0003      	movs	r3, r0
	uint32_t mask = 0U;
 8022a5c:	2000      	movs	r0, #0
{
 8022a5e:	9101      	str	r1, [sp, #4]
	uint32_t arg = 0U;
 8022a60:	0002      	movs	r2, r0
	bool arm = false;
 8022a62:	0001      	movs	r1, r0
				mask |= BIT(arg);
 8022a64:	2501      	movs	r5, #1
	while ((curr = *str++) && arg < nargs) {
 8022a66:	781c      	ldrb	r4, [r3, #0]
 8022a68:	2c00      	cmp	r4, #0
 8022a6a:	d002      	beq.n	8022a72 <z_log_get_s_mask+0x1a>
 8022a6c:	9f01      	ldr	r7, [sp, #4]
 8022a6e:	42ba      	cmp	r2, r7
 8022a70:	d300      	bcc.n	8022a74 <z_log_get_s_mask+0x1c>
}
 8022a72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if (curr == '%') {
 8022a74:	2c25      	cmp	r4, #37	; 0x25
 8022a76:	d102      	bne.n	8022a7e <z_log_get_s_mask+0x26>
			arm = !arm;
 8022a78:	4069      	eors	r1, r5
 8022a7a:	3301      	adds	r3, #1
 8022a7c:	e7f3      	b.n	8022a66 <z_log_get_s_mask+0xe>
		} else if (arm && isalpha((int)curr)) {
 8022a7e:	2900      	cmp	r1, #0
 8022a80:	d0fb      	beq.n	8022a7a <z_log_get_s_mask+0x22>
 8022a82:	4e06      	ldr	r6, [pc, #24]	; (8022a9c <z_log_get_s_mask+0x44>)
 8022a84:	5d37      	ldrb	r7, [r6, r4]
 8022a86:	2603      	movs	r6, #3
 8022a88:	4237      	tst	r7, r6
 8022a8a:	d0f6      	beq.n	8022a7a <z_log_get_s_mask+0x22>
			if (curr == 's') {
 8022a8c:	2c73      	cmp	r4, #115	; 0x73
 8022a8e:	d102      	bne.n	8022a96 <z_log_get_s_mask+0x3e>
				mask |= BIT(arg);
 8022a90:	0029      	movs	r1, r5
 8022a92:	4091      	lsls	r1, r2
 8022a94:	4308      	orrs	r0, r1
			arm = false;
 8022a96:	2100      	movs	r1, #0
			arg++;
 8022a98:	3201      	adds	r2, #1
 8022a9a:	e7ee      	b.n	8022a7a <z_log_get_s_mask+0x22>
 8022a9c:	08032192 	.word	0x08032192

08022aa0 <log_core_init>:
	log_output_timestamp_freq_set(freq);
 8022aa0:	20fa      	movs	r0, #250	; 0xfa
{
 8022aa2:	b510      	push	{r4, lr}
		timestamp_func = default_lf_get_timestamp;
 8022aa4:	4b08      	ldr	r3, [pc, #32]	; (8022ac8 <log_core_init+0x28>)
 8022aa6:	4a09      	ldr	r2, [pc, #36]	; (8022acc <log_core_init+0x2c>)
	log_output_timestamp_freq_set(freq);
 8022aa8:	0080      	lsls	r0, r0, #2
		timestamp_func = default_lf_get_timestamp;
 8022aaa:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
 8022aac:	f000 fc8a 	bl	80233c4 <log_output_timestamp_freq_set>
		log_msg_pool_init();
 8022ab0:	f000 fa30 	bl	8022f14 <log_msg_pool_init>
		log_list_init(&list);
 8022ab4:	4806      	ldr	r0, [pc, #24]	; (8022ad0 <log_core_init+0x30>)
 8022ab6:	f00b fe3c 	bl	802e732 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
 8022aba:	2304      	movs	r3, #4
 8022abc:	2228      	movs	r2, #40	; 0x28
 8022abe:	4905      	ldr	r1, [pc, #20]	; (8022ad4 <log_core_init+0x34>)
 8022ac0:	4805      	ldr	r0, [pc, #20]	; (8022ad8 <log_core_init+0x38>)
 8022ac2:	f00d ffb5 	bl	8030a30 <k_mem_slab_init>
}
 8022ac6:	bd10      	pop	{r4, pc}
 8022ac8:	20008030 	.word	0x20008030
 8022acc:	0802e777 	.word	0x0802e777
 8022ad0:	20008554 	.word	0x20008554
 8022ad4:	2000b728 	.word	0x2000b728
 8022ad8:	2000855c 	.word	0x2000855c

08022adc <get_msg>:
{
 8022adc:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
 8022ade:	f3ef 8410 	mrs	r4, PRIMASK
 8022ae2:	b672      	cpsid	i
	msg.msg = log_list_head_get(&list);
 8022ae4:	4804      	ldr	r0, [pc, #16]	; (8022af8 <get_msg+0x1c>)
 8022ae6:	f00b fe35 	bl	802e754 <log_list_head_get>
	if (key != 0U) {
 8022aea:	2c00      	cmp	r4, #0
 8022aec:	d102      	bne.n	8022af4 <get_msg+0x18>
	__asm__ volatile(
 8022aee:	b662      	cpsie	i
 8022af0:	f3bf 8f6f 	isb	sy
}
 8022af4:	bd10      	pop	{r4, pc}
 8022af6:	46c0      	nop			; (mov r8, r8)
 8022af8:	20008554 	.word	0x20008554

08022afc <z_log_dropped>:
{
 8022afc:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (atomic_val_t) arch_syscall_invoke2(*(uintptr_t *)&target, *(uintptr_t *)&value, K_SYSCALL_ATOMIC_ADD);
	}
#endif
	compiler_barrier();
	return z_impl_atomic_add(target, value);
 8022afe:	2101      	movs	r1, #1
 8022b00:	4801      	ldr	r0, [pc, #4]	; (8022b08 <z_log_dropped+0xc>)
 8022b02:	f00e f906 	bl	8030d12 <z_impl_atomic_add>
}
 8022b06:	bd10      	pop	{r4, pc}
 8022b08:	2000854c 	.word	0x2000854c

08022b0c <z_log_dropped_read_and_clear>:
{
 8022b0c:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (atomic_val_t) arch_syscall_invoke2(*(uintptr_t *)&target, *(uintptr_t *)&value, K_SYSCALL_ATOMIC_SET);
	}
#endif
	compiler_barrier();
	return z_impl_atomic_set(target, value);
 8022b0e:	2100      	movs	r1, #0
 8022b10:	4801      	ldr	r0, [pc, #4]	; (8022b18 <z_log_dropped_read_and_clear+0xc>)
 8022b12:	f00e f918 	bl	8030d46 <z_impl_atomic_set>
}
 8022b16:	bd10      	pop	{r4, pc}
 8022b18:	2000854c 	.word	0x2000854c

08022b1c <dropped_notify>:
{
 8022b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
 8022b1e:	f7ff fff5 	bl	8022b0c <z_log_dropped_read_and_clear>
	for (int i = 0; i < log_backend_count_get(); i++) {
 8022b22:	2600      	movs	r6, #0
	uint32_t dropped = z_log_dropped_read_and_clear();
 8022b24:	0007      	movs	r7, r0
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
 8022b26:	4c0a      	ldr	r4, [pc, #40]	; (8022b50 <dropped_notify+0x34>)
 8022b28:	4d0a      	ldr	r5, [pc, #40]	; (8022b54 <dropped_notify+0x38>)
 8022b2a:	1b2d      	subs	r5, r5, r4
 8022b2c:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 8022b2e:	42ae      	cmp	r6, r5
 8022b30:	db00      	blt.n	8022b34 <dropped_notify+0x18>
}
 8022b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
 8022b34:	6863      	ldr	r3, [r4, #4]
 8022b36:	795b      	ldrb	r3, [r3, #5]
 8022b38:	2b00      	cmp	r3, #0
 8022b3a:	d006      	beq.n	8022b4a <dropped_notify+0x2e>
	if (backend->api->dropped != NULL) {
 8022b3c:	6823      	ldr	r3, [r4, #0]
 8022b3e:	691b      	ldr	r3, [r3, #16]
 8022b40:	2b00      	cmp	r3, #0
 8022b42:	d002      	beq.n	8022b4a <dropped_notify+0x2e>
		backend->api->dropped(backend, cnt);
 8022b44:	0039      	movs	r1, r7
 8022b46:	0020      	movs	r0, r4
 8022b48:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 8022b4a:	3601      	adds	r6, #1
 8022b4c:	3410      	adds	r4, #16
 8022b4e:	e7ee      	b.n	8022b2e <dropped_notify+0x12>
 8022b50:	0803119c 	.word	0x0803119c
 8022b54:	080311ac 	.word	0x080311ac

08022b58 <log_source_name_get>:
 8022b58:	4a04      	ldr	r2, [pc, #16]	; (8022b6c <log_source_name_get+0x14>)
 8022b5a:	4b05      	ldr	r3, [pc, #20]	; (8022b70 <log_source_name_get+0x18>)
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
 8022b5c:	2000      	movs	r0, #0
 8022b5e:	1a9b      	subs	r3, r3, r2
 8022b60:	08db      	lsrs	r3, r3, #3
 8022b62:	4299      	cmp	r1, r3
 8022b64:	d201      	bcs.n	8022b6a <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
 8022b66:	00c9      	lsls	r1, r1, #3
 8022b68:	5888      	ldr	r0, [r1, r2]
}
 8022b6a:	4770      	bx	lr
 8022b6c:	08031164 	.word	0x08031164
 8022b70:	0803119c 	.word	0x0803119c

08022b74 <log_backend_enable>:
	id += backend - log_backend_get(0);
 8022b74:	4a09      	ldr	r2, [pc, #36]	; (8022b9c <log_backend_enable+0x28>)
	backend->cb->id = id;
 8022b76:	6843      	ldr	r3, [r0, #4]
 8022b78:	1a80      	subs	r0, r0, r2
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
 8022b7a:	2201      	movs	r2, #1
{
 8022b7c:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
 8022b7e:	1100      	asrs	r0, r0, #4
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 8022b80:	4c07      	ldr	r4, [pc, #28]	; (8022ba0 <log_backend_enable+0x2c>)
	id += backend - log_backend_get(0);
 8022b82:	3001      	adds	r0, #1
	backend->cb->id = id;
 8022b84:	7118      	strb	r0, [r3, #4]
	backend->cb->ctx = ctx;
 8022b86:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
 8022b88:	715a      	strb	r2, [r3, #5]
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 8022b8a:	7823      	ldrb	r3, [r4, #0]
 8022b8c:	2b00      	cmp	r3, #0
 8022b8e:	d102      	bne.n	8022b96 <log_backend_enable+0x22>
 8022b90:	4804      	ldr	r0, [pc, #16]	; (8022ba4 <log_backend_enable+0x30>)
 8022b92:	f00a f993 	bl	802cebc <z_impl_k_sem_give>
	backend_attached = true;
 8022b96:	2301      	movs	r3, #1
 8022b98:	7023      	strb	r3, [r4, #0]
}
 8022b9a:	bd10      	pop	{r4, pc}
 8022b9c:	0803119c 	.word	0x0803119c
 8022ba0:	2000990a 	.word	0x2000990a
 8022ba4:	20008368 	.word	0x20008368

08022ba8 <log_init>:
{
 8022ba8:	b570      	push	{r4, r5, r6, lr}
	return z_impl_atomic_add(target, value);
 8022baa:	2101      	movs	r1, #1
 8022bac:	480e      	ldr	r0, [pc, #56]	; (8022be8 <log_init+0x40>)
 8022bae:	f00e f8b0 	bl	8030d12 <z_impl_atomic_add>
 8022bb2:	1e05      	subs	r5, r0, #0
	if (atomic_inc(&initialized) != 0) {
 8022bb4:	d105      	bne.n	8022bc2 <log_init+0x1a>
	return __log_backends_end - __log_backends_start;
 8022bb6:	4c0d      	ldr	r4, [pc, #52]	; (8022bec <log_init+0x44>)
 8022bb8:	4e0d      	ldr	r6, [pc, #52]	; (8022bf0 <log_init+0x48>)
 8022bba:	1b36      	subs	r6, r6, r4
 8022bbc:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
 8022bbe:	42b5      	cmp	r5, r6
 8022bc0:	db00      	blt.n	8022bc4 <log_init+0x1c>
}
 8022bc2:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
 8022bc4:	7b23      	ldrb	r3, [r4, #12]
 8022bc6:	2b00      	cmp	r3, #0
 8022bc8:	d00a      	beq.n	8022be0 <log_init+0x38>
			if (backend->api->init != NULL) {
 8022bca:	6823      	ldr	r3, [r4, #0]
 8022bcc:	699b      	ldr	r3, [r3, #24]
 8022bce:	2b00      	cmp	r3, #0
 8022bd0:	d001      	beq.n	8022bd6 <log_init+0x2e>
				backend->api->init(backend);
 8022bd2:	0020      	movs	r0, r4
 8022bd4:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
 8022bd6:	2204      	movs	r2, #4
 8022bd8:	2100      	movs	r1, #0
 8022bda:	0020      	movs	r0, r4
 8022bdc:	f7ff ffca 	bl	8022b74 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 8022be0:	3501      	adds	r5, #1
 8022be2:	3410      	adds	r4, #16
 8022be4:	e7eb      	b.n	8022bbe <log_init+0x16>
 8022be6:	46c0      	nop			; (mov r8, r8)
 8022be8:	20008550 	.word	0x20008550
 8022bec:	0803119c 	.word	0x0803119c
 8022bf0:	080311ac 	.word	0x080311ac

08022bf4 <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
 8022bf4:	4b11      	ldr	r3, [pc, #68]	; (8022c3c <z_log_strdup+0x48>)
{
 8022bf6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022bf8:	0004      	movs	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
 8022bfa:	4298      	cmp	r0, r3
 8022bfc:	d302      	bcc.n	8022c04 <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
 8022bfe:	4b10      	ldr	r3, [pc, #64]	; (8022c40 <z_log_strdup+0x4c>)
 8022c00:	4298      	cmp	r0, r3
 8022c02:	d318      	bcc.n	8022c36 <z_log_strdup+0x42>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
 8022c04:	2200      	movs	r2, #0
 8022c06:	2300      	movs	r3, #0
 8022c08:	480e      	ldr	r0, [pc, #56]	; (8022c44 <z_log_strdup+0x50>)
 8022c0a:	a901      	add	r1, sp, #4
 8022c0c:	f00a f868 	bl	802cce0 <k_mem_slab_alloc>
		return (char *)log_strdup_fail_msg;
 8022c10:	4d0d      	ldr	r5, [pc, #52]	; (8022c48 <z_log_strdup+0x54>)
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
 8022c12:	1e07      	subs	r7, r0, #0
	if (err != 0) {
 8022c14:	d10e      	bne.n	8022c34 <z_log_strdup+0x40>
	(void)atomic_set(&dup->refcount, 1);
 8022c16:	9801      	ldr	r0, [sp, #4]
	return z_impl_atomic_set(target, value);
 8022c18:	2101      	movs	r1, #1
 8022c1a:	f00e f894 	bl	8030d46 <z_impl_atomic_set>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
 8022c1e:	9e01      	ldr	r6, [sp, #4]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 8022c20:	221f      	movs	r2, #31
 8022c22:	1d35      	adds	r5, r6, #4
 8022c24:	0021      	movs	r1, r4
 8022c26:	0028      	movs	r0, r5
 8022c28:	f00e f941 	bl	8030eae <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
 8022c2c:	237e      	movs	r3, #126	; 0x7e
	dup->buf[sizeof(dup->buf) - 1] = '\0';
 8022c2e:	3605      	adds	r6, #5
	dup->buf[sizeof(dup->buf) - 2] = '~';
 8022c30:	77eb      	strb	r3, [r5, #31]
	dup->buf[sizeof(dup->buf) - 1] = '\0';
 8022c32:	77f7      	strb	r7, [r6, #31]
	return dup->buf;
 8022c34:	002c      	movs	r4, r5
}
 8022c36:	0020      	movs	r0, r4
 8022c38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022c3a:	46c0      	nop			; (mov r8, r8)
 8022c3c:	08030ff4 	.word	0x08030ff4
 8022c40:	080322c8 	.word	0x080322c8
 8022c44:	2000855c 	.word	0x2000855c
 8022c48:	0803184d 	.word	0x0803184d

08022c4c <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
 8022c4c:	1e03      	subs	r3, r0, #0
 8022c4e:	d007      	beq.n	8022c60 <log_is_strdup+0x14>
 8022c50:	4a04      	ldr	r2, [pc, #16]	; (8022c64 <log_is_strdup+0x18>)
 8022c52:	2300      	movs	r3, #0
 8022c54:	4290      	cmp	r0, r2
 8022c56:	d303      	bcc.n	8022c60 <log_is_strdup+0x14>
 8022c58:	4b03      	ldr	r3, [pc, #12]	; (8022c68 <log_is_strdup+0x1c>)
 8022c5a:	4298      	cmp	r0, r3
 8022c5c:	419b      	sbcs	r3, r3
 8022c5e:	425b      	negs	r3, r3
 8022c60:	0018      	movs	r0, r3
}
 8022c62:	4770      	bx	lr
 8022c64:	2000b728 	.word	0x2000b728
 8022c68:	2000b7c8 	.word	0x2000b7c8

08022c6c <z_impl_log_process>:
{
 8022c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!backend_attached && !bypass) {
 8022c6e:	4b45      	ldr	r3, [pc, #276]	; (8022d84 <z_impl_log_process+0x118>)
{
 8022c70:	b087      	sub	sp, #28
	if (!backend_attached && !bypass) {
 8022c72:	781b      	ldrb	r3, [r3, #0]
{
 8022c74:	9002      	str	r0, [sp, #8]
	if (!backend_attached && !bypass) {
 8022c76:	2b00      	cmp	r3, #0
 8022c78:	d101      	bne.n	8022c7e <z_impl_log_process+0x12>
 8022c7a:	2800      	cmp	r0, #0
 8022c7c:	d01d      	beq.n	8022cba <z_impl_log_process+0x4e>
	msg = get_msg();
 8022c7e:	f7ff ff2d 	bl	8022adc <get_msg>
 8022c82:	1e04      	subs	r4, r0, #0
	if (msg.msg) {
 8022c84:	d009      	beq.n	8022c9a <z_impl_log_process+0x2e>
	return z_impl_atomic_sub(target, value);
 8022c86:	2101      	movs	r1, #1
 8022c88:	483f      	ldr	r0, [pc, #252]	; (8022d88 <z_impl_log_process+0x11c>)
 8022c8a:	f00e f84f 	bl	8030d2c <z_impl_atomic_sub>
	if (!bypass) {
 8022c8e:	9b02      	ldr	r3, [sp, #8]
 8022c90:	2b00      	cmp	r3, #0
 8022c92:	d015      	beq.n	8022cc0 <z_impl_log_process+0x54>
			log_msg_put(msg.msg);
 8022c94:	0020      	movs	r0, r4
 8022c96:	f00b fe50 	bl	802e93a <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
 8022c9a:	9b02      	ldr	r3, [sp, #8]
 8022c9c:	2b00      	cmp	r3, #0
 8022c9e:	d105      	bne.n	8022cac <z_impl_log_process+0x40>
	return dropped_cnt > 0;
 8022ca0:	4b3a      	ldr	r3, [pc, #232]	; (8022d8c <z_impl_log_process+0x120>)
	if (!bypass && z_log_dropped_pending()) {
 8022ca2:	681b      	ldr	r3, [r3, #0]
 8022ca4:	2b00      	cmp	r3, #0
 8022ca6:	dd01      	ble.n	8022cac <z_impl_log_process+0x40>
		dropped_notify();
 8022ca8:	f7ff ff38 	bl	8022b1c <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
 8022cac:	4838      	ldr	r0, [pc, #224]	; (8022d90 <z_impl_log_process+0x124>)
 8022cae:	f00b fd4f 	bl	802e750 <log_list_head_peek>
 8022cb2:	1e43      	subs	r3, r0, #1
 8022cb4:	4198      	sbcs	r0, r3
 8022cb6:	b2c3      	uxtb	r3, r0
 8022cb8:	9302      	str	r3, [sp, #8]
}
 8022cba:	9802      	ldr	r0, [sp, #8]
 8022cbc:	b007      	add	sp, #28
 8022cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		    !panic_mode) {
 8022cc0:	4b34      	ldr	r3, [pc, #208]	; (8022d94 <z_impl_log_process+0x128>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
 8022cc2:	781b      	ldrb	r3, [r3, #0]
 8022cc4:	2b00      	cmp	r3, #0
 8022cc6:	d119      	bne.n	8022cfc <z_impl_log_process+0x90>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8022cc8:	7a23      	ldrb	r3, [r4, #8]
	if (!log_msg_is_std(msg)) {
 8022cca:	07db      	lsls	r3, r3, #31
 8022ccc:	d416      	bmi.n	8022cfc <z_impl_log_process+0x90>
	msg_str = log_msg_str_get(msg);
 8022cce:	0020      	movs	r0, r4
 8022cd0:	f00b fe40 	bl	802e954 <log_msg_str_get>
 8022cd4:	9003      	str	r0, [sp, #12]
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
 8022cd6:	0020      	movs	r0, r4
 8022cd8:	f00b fe11 	bl	802e8fe <log_msg_nargs_get>
 8022cdc:	0001      	movs	r1, r0
 8022cde:	9803      	ldr	r0, [sp, #12]
 8022ce0:	f7ff feba 	bl	8022a58 <z_log_get_s_mask>
 8022ce4:	0005      	movs	r5, r0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8022ce6:	492c      	ldr	r1, [pc, #176]	; (8022d98 <z_impl_log_process+0x12c>)
 8022ce8:	4a2c      	ldr	r2, [pc, #176]	; (8022d9c <z_impl_log_process+0x130>)
 8022cea:	1a52      	subs	r2, r2, r1
 8022cec:	08d3      	lsrs	r3, r2, #3
 8022cee:	9304      	str	r3, [sp, #16]
 8022cf0:	4b2b      	ldr	r3, [pc, #172]	; (8022da0 <z_impl_log_process+0x134>)
 8022cf2:	1a5b      	subs	r3, r3, r1
 8022cf4:	08db      	lsrs	r3, r3, #3
 8022cf6:	9305      	str	r3, [sp, #20]
	while (mask) {
 8022cf8:	2d00      	cmp	r5, #0
 8022cfa:	d105      	bne.n	8022d08 <z_impl_log_process+0x9c>
 8022cfc:	4d29      	ldr	r5, [pc, #164]	; (8022da4 <z_impl_log_process+0x138>)
 8022cfe:	4e2a      	ldr	r6, [pc, #168]	; (8022da8 <z_impl_log_process+0x13c>)
 8022d00:	2700      	movs	r7, #0
 8022d02:	1b76      	subs	r6, r6, r5
 8022d04:	1136      	asrs	r6, r6, #4
 8022d06:	e039      	b.n	8022d7c <z_impl_log_process+0x110>
		idx = 31 - __builtin_clz(mask);
 8022d08:	0028      	movs	r0, r5
 8022d0a:	f7fd fbb1 	bl	8020470 <__clzsi2>
 8022d0e:	231f      	movs	r3, #31
 8022d10:	1a1f      	subs	r7, r3, r0
		str = (const char *)log_msg_arg_get(msg, idx);
 8022d12:	0039      	movs	r1, r7
 8022d14:	0020      	movs	r0, r4
 8022d16:	f00b fdf5 	bl	802e904 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
 8022d1a:	4b24      	ldr	r3, [pc, #144]	; (8022dac <z_impl_log_process+0x140>)
		str = (const char *)log_msg_arg_get(msg, idx);
 8022d1c:	0006      	movs	r6, r0
	return (((const char *)addr >= (const char *)RO_START) &&
 8022d1e:	4298      	cmp	r0, r3
 8022d20:	d302      	bcc.n	8022d28 <z_impl_log_process+0xbc>
		if (!is_rodata(str) && !log_is_strdup(str) &&
 8022d22:	4b23      	ldr	r3, [pc, #140]	; (8022db0 <z_impl_log_process+0x144>)
 8022d24:	4298      	cmp	r0, r3
 8022d26:	d31a      	bcc.n	8022d5e <z_impl_log_process+0xf2>
 8022d28:	0030      	movs	r0, r6
 8022d2a:	f7ff ff8f 	bl	8022c4c <log_is_strdup>
 8022d2e:	1e02      	subs	r2, r0, #0
 8022d30:	d115      	bne.n	8022d5e <z_impl_log_process+0xf2>
 8022d32:	4b20      	ldr	r3, [pc, #128]	; (8022db4 <z_impl_log_process+0x148>)
 8022d34:	429e      	cmp	r6, r3
 8022d36:	d012      	beq.n	8022d5e <z_impl_log_process+0xf2>
	return msg->hdr.ids.source_id;
 8022d38:	8963      	ldrh	r3, [r4, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
 8022d3a:	9904      	ldr	r1, [sp, #16]
 8022d3c:	099b      	lsrs	r3, r3, #6
 8022d3e:	428b      	cmp	r3, r1
 8022d40:	d202      	bcs.n	8022d48 <z_impl_log_process+0xdc>
	return __log_const_start[source_id].name;
 8022d42:	4a15      	ldr	r2, [pc, #84]	; (8022d98 <z_impl_log_process+0x12c>)
 8022d44:	00db      	lsls	r3, r3, #3
 8022d46:	589a      	ldr	r2, [r3, r2]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
 8022d48:	2101      	movs	r1, #1
 8022d4a:	9b05      	ldr	r3, [sp, #20]
 8022d4c:	481a      	ldr	r0, [pc, #104]	; (8022db8 <z_impl_log_process+0x14c>)
 8022d4e:	019b      	lsls	r3, r3, #6
 8022d50:	430b      	orrs	r3, r1
 8022d52:	4669      	mov	r1, sp
 8022d54:	800b      	strh	r3, [r1, #0]
 8022d56:	9b03      	ldr	r3, [sp, #12]
 8022d58:	0039      	movs	r1, r7
 8022d5a:	f00b fd50 	bl	802e7fe <log_3>
		mask &= ~BIT(idx);
 8022d5e:	2301      	movs	r3, #1
 8022d60:	40bb      	lsls	r3, r7
 8022d62:	439d      	bics	r5, r3
 8022d64:	e7c8      	b.n	8022cf8 <z_impl_log_process+0x8c>
			if (log_backend_is_active(backend) &&
 8022d66:	686b      	ldr	r3, [r5, #4]
 8022d68:	795b      	ldrb	r3, [r3, #5]
 8022d6a:	2b00      	cmp	r3, #0
 8022d6c:	d004      	beq.n	8022d78 <z_impl_log_process+0x10c>
	backend->api->put(backend, msg);
 8022d6e:	682b      	ldr	r3, [r5, #0]
 8022d70:	0021      	movs	r1, r4
 8022d72:	0028      	movs	r0, r5
 8022d74:	685b      	ldr	r3, [r3, #4]
 8022d76:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
 8022d78:	3701      	adds	r7, #1
 8022d7a:	3510      	adds	r5, #16
 8022d7c:	42b7      	cmp	r7, r6
 8022d7e:	dbf2      	blt.n	8022d66 <z_impl_log_process+0xfa>
 8022d80:	e788      	b.n	8022c94 <z_impl_log_process+0x28>
 8022d82:	46c0      	nop			; (mov r8, r8)
 8022d84:	2000990a 	.word	0x2000990a
 8022d88:	20008548 	.word	0x20008548
 8022d8c:	2000854c 	.word	0x2000854c
 8022d90:	20008554 	.word	0x20008554
 8022d94:	2000990b 	.word	0x2000990b
 8022d98:	08031164 	.word	0x08031164
 8022d9c:	0803119c 	.word	0x0803119c
 8022da0:	0803116c 	.word	0x0803116c
 8022da4:	0803119c 	.word	0x0803119c
 8022da8:	080311ac 	.word	0x080311ac
 8022dac:	08030ff4 	.word	0x08030ff4
 8022db0:	080322c8 	.word	0x080322c8
 8022db4:	0803184d 	.word	0x0803184d
 8022db8:	08031867 	.word	0x08031867

08022dbc <log_process_thread_func>:
{
 8022dbc:	b570      	push	{r4, r5, r6, lr}
	log_init();
 8022dbe:	f7ff fef3 	bl	8022ba8 <log_init>
	return z_impl_k_current_get();
 8022dc2:	f00a fa7d 	bl	802d2c0 <z_impl_k_current_get>
	proc_tid = process_tid;
 8022dc6:	4b0c      	ldr	r3, [pc, #48]	; (8022df8 <log_process_thread_func+0x3c>)
 8022dc8:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 8022dca:	2800      	cmp	r0, #0
 8022dcc:	d006      	beq.n	8022ddc <log_process_thread_func+0x20>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 8022dce:	4b0b      	ldr	r3, [pc, #44]	; (8022dfc <log_process_thread_func+0x40>)
	    process_tid &&
 8022dd0:	681b      	ldr	r3, [r3, #0]
 8022dd2:	2b09      	cmp	r3, #9
 8022dd4:	dd02      	ble.n	8022ddc <log_process_thread_func+0x20>
	z_impl_k_sem_give(sem);
 8022dd6:	480a      	ldr	r0, [pc, #40]	; (8022e00 <log_process_thread_func+0x44>)
 8022dd8:	f00a f870 	bl	802cebc <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
 8022ddc:	2401      	movs	r4, #1
 8022dde:	4264      	negs	r4, r4
 8022de0:	17e5      	asrs	r5, r4, #31
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
 8022de2:	2000      	movs	r0, #0
 8022de4:	f7ff ff42 	bl	8022c6c <z_impl_log_process>
		if (log_process(false) == false) {
 8022de8:	2800      	cmp	r0, #0
 8022dea:	d1fa      	bne.n	8022de2 <log_process_thread_func+0x26>
 8022dec:	4804      	ldr	r0, [pc, #16]	; (8022e00 <log_process_thread_func+0x44>)
 8022dee:	0022      	movs	r2, r4
 8022df0:	002b      	movs	r3, r5
 8022df2:	f00a f87f 	bl	802cef4 <z_impl_k_sem_take>
 8022df6:	e7f4      	b.n	8022de2 <log_process_thread_func+0x26>
 8022df8:	20008578 	.word	0x20008578
 8022dfc:	20008548 	.word	0x20008548
 8022e00:	20008368 	.word	0x20008368

08022e04 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
 8022e04:	4b21      	ldr	r3, [pc, #132]	; (8022e8c <msg_finalize+0x88>)
{
 8022e06:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
 8022e08:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
 8022e0a:	8141      	strh	r1, [r0, #10]
{
 8022e0c:	0004      	movs	r4, r0
	msg->hdr.timestamp = timestamp_func();
 8022e0e:	4798      	blx	r3
 8022e10:	60e0      	str	r0, [r4, #12]
	__asm__ volatile("mrs %0, PRIMASK;"
 8022e12:	f3ef 8510 	mrs	r5, PRIMASK
 8022e16:	b672      	cpsid	i
	log_list_add_tail(&list, msg);
 8022e18:	481d      	ldr	r0, [pc, #116]	; (8022e90 <msg_finalize+0x8c>)
 8022e1a:	0021      	movs	r1, r4
 8022e1c:	f00b fc8d 	bl	802e73a <log_list_add_tail>
	if (key != 0U) {
 8022e20:	2d00      	cmp	r5, #0
 8022e22:	d102      	bne.n	8022e2a <msg_finalize+0x26>
	__asm__ volatile(
 8022e24:	b662      	cpsie	i
 8022e26:	f3bf 8f6f 	isb	sy
	return z_impl_atomic_add(target, value);
 8022e2a:	4c1a      	ldr	r4, [pc, #104]	; (8022e94 <msg_finalize+0x90>)
 8022e2c:	2101      	movs	r1, #1
 8022e2e:	0020      	movs	r0, r4
 8022e30:	f00d ff6f 	bl	8030d12 <z_impl_atomic_add>
	if (panic_mode) {
 8022e34:	4b18      	ldr	r3, [pc, #96]	; (8022e98 <msg_finalize+0x94>)
 8022e36:	781b      	ldrb	r3, [r3, #0]
 8022e38:	2b00      	cmp	r3, #0
 8022e3a:	d00b      	beq.n	8022e54 <msg_finalize+0x50>
	__asm__ volatile("mrs %0, PRIMASK;"
 8022e3c:	f3ef 8410 	mrs	r4, PRIMASK
 8022e40:	b672      	cpsid	i
 8022e42:	2000      	movs	r0, #0
 8022e44:	f7ff ff12 	bl	8022c6c <z_impl_log_process>
	if (key != 0U) {
 8022e48:	2c00      	cmp	r4, #0
 8022e4a:	d102      	bne.n	8022e52 <msg_finalize+0x4e>
	__asm__ volatile(
 8022e4c:	b662      	cpsie	i
 8022e4e:	f3bf 8f6f 	isb	sy
}
 8022e52:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 8022e54:	4a11      	ldr	r2, [pc, #68]	; (8022e9c <msg_finalize+0x98>)
 8022e56:	6823      	ldr	r3, [r4, #0]
 8022e58:	6812      	ldr	r2, [r2, #0]
 8022e5a:	2a00      	cmp	r2, #0
 8022e5c:	d0f9      	beq.n	8022e52 <msg_finalize+0x4e>
 8022e5e:	2b01      	cmp	r3, #1
 8022e60:	d10a      	bne.n	8022e78 <msg_finalize+0x74>
	z_impl_k_timer_start(timer, duration, period);
 8022e62:	2200      	movs	r2, #0
 8022e64:	2300      	movs	r3, #0
 8022e66:	9200      	str	r2, [sp, #0]
 8022e68:	9301      	str	r3, [sp, #4]
 8022e6a:	2280      	movs	r2, #128	; 0x80
 8022e6c:	2300      	movs	r3, #0
 8022e6e:	480c      	ldr	r0, [pc, #48]	; (8022ea0 <msg_finalize+0x9c>)
 8022e70:	0152      	lsls	r2, r2, #5
 8022e72:	f00a fc13 	bl	802d69c <z_impl_k_timer_start>
 8022e76:	e7ec      	b.n	8022e52 <msg_finalize+0x4e>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 8022e78:	2b0a      	cmp	r3, #10
 8022e7a:	d1ea      	bne.n	8022e52 <msg_finalize+0x4e>
	z_impl_k_timer_stop(timer);
 8022e7c:	4808      	ldr	r0, [pc, #32]	; (8022ea0 <msg_finalize+0x9c>)
 8022e7e:	f00d ff2f 	bl	8030ce0 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 8022e82:	4808      	ldr	r0, [pc, #32]	; (8022ea4 <msg_finalize+0xa0>)
 8022e84:	f00a f81a 	bl	802cebc <z_impl_k_sem_give>
}
 8022e88:	e7e3      	b.n	8022e52 <msg_finalize+0x4e>
 8022e8a:	46c0      	nop			; (mov r8, r8)
 8022e8c:	20008030 	.word	0x20008030
 8022e90:	20008554 	.word	0x20008554
 8022e94:	20008548 	.word	0x20008548
 8022e98:	2000990b 	.word	0x2000990b
 8022e9c:	20008578 	.word	0x20008578
 8022ea0:	20008378 	.word	0x20008378
 8022ea4:	20008368 	.word	0x20008368

08022ea8 <z_impl_log_panic>:
{
 8022ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
 8022eaa:	4f0f      	ldr	r7, [pc, #60]	; (8022ee8 <z_impl_log_panic+0x40>)
 8022eac:	783d      	ldrb	r5, [r7, #0]
 8022eae:	2d00      	cmp	r5, #0
 8022eb0:	d10e      	bne.n	8022ed0 <z_impl_log_panic+0x28>
	log_init();
 8022eb2:	f7ff fe79 	bl	8022ba8 <log_init>
	return __log_backends_end - __log_backends_start;
 8022eb6:	4c0d      	ldr	r4, [pc, #52]	; (8022eec <z_impl_log_panic+0x44>)
 8022eb8:	4e0d      	ldr	r6, [pc, #52]	; (8022ef0 <z_impl_log_panic+0x48>)
 8022eba:	1b36      	subs	r6, r6, r4
 8022ebc:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 8022ebe:	42b5      	cmp	r5, r6
 8022ec0:	db07      	blt.n	8022ed2 <z_impl_log_panic+0x2a>
 8022ec2:	2000      	movs	r0, #0
 8022ec4:	f7ff fed2 	bl	8022c6c <z_impl_log_process>
		while (log_process(false) == true) {
 8022ec8:	2800      	cmp	r0, #0
 8022eca:	d1fa      	bne.n	8022ec2 <z_impl_log_panic+0x1a>
	panic_mode = true;
 8022ecc:	2301      	movs	r3, #1
 8022ece:	703b      	strb	r3, [r7, #0]
}
 8022ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
 8022ed2:	6863      	ldr	r3, [r4, #4]
 8022ed4:	795b      	ldrb	r3, [r3, #5]
 8022ed6:	2b00      	cmp	r3, #0
 8022ed8:	d003      	beq.n	8022ee2 <z_impl_log_panic+0x3a>
	backend->api->panic(backend);
 8022eda:	6823      	ldr	r3, [r4, #0]
 8022edc:	0020      	movs	r0, r4
 8022ede:	695b      	ldr	r3, [r3, #20]
 8022ee0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 8022ee2:	3501      	adds	r5, #1
 8022ee4:	3410      	adds	r4, #16
 8022ee6:	e7ea      	b.n	8022ebe <z_impl_log_panic+0x16>
 8022ee8:	2000990b 	.word	0x2000990b
 8022eec:	0803119c 	.word	0x0803119c
 8022ef0:	080311ac 	.word	0x080311ac

08022ef4 <log_free>:
{
 8022ef4:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
 8022ef6:	3804      	subs	r0, #4
 8022ef8:	9001      	str	r0, [sp, #4]
	return z_impl_atomic_sub(target, value);
 8022efa:	2101      	movs	r1, #1
 8022efc:	f00d ff16 	bl	8030d2c <z_impl_atomic_sub>
	if (atomic_dec(&dup->refcount) == 1) {
 8022f00:	2801      	cmp	r0, #1
 8022f02:	d103      	bne.n	8022f0c <log_free+0x18>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
 8022f04:	4802      	ldr	r0, [pc, #8]	; (8022f10 <log_free+0x1c>)
 8022f06:	a901      	add	r1, sp, #4
 8022f08:	f00d fdaf 	bl	8030a6a <k_mem_slab_free>
}
 8022f0c:	bd07      	pop	{r0, r1, r2, pc}
 8022f0e:	46c0      	nop			; (mov r8, r8)
 8022f10:	2000855c 	.word	0x2000855c

08022f14 <log_msg_pool_init>:
struct k_mem_slab log_msg_pool;
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
 8022f14:	b510      	push	{r4, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
 8022f16:	2340      	movs	r3, #64	; 0x40
 8022f18:	2220      	movs	r2, #32
 8022f1a:	4902      	ldr	r1, [pc, #8]	; (8022f24 <log_msg_pool_init+0x10>)
 8022f1c:	4802      	ldr	r0, [pc, #8]	; (8022f28 <log_msg_pool_init+0x14>)
 8022f1e:	f00d fd87 	bl	8030a30 <k_mem_slab_init>
}
 8022f22:	bd10      	pop	{r4, pc}
 8022f24:	2000b7c8 	.word	0x2000b7c8
 8022f28:	2000857c 	.word	0x2000857c

08022f2c <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
 8022f2c:	2300      	movs	r3, #0
{
 8022f2e:	b513      	push	{r0, r1, r4, lr}
	union log_msg_chunk *msg = NULL;
 8022f30:	9301      	str	r3, [sp, #4]
 8022f32:	2001      	movs	r0, #1
 8022f34:	f7ff fe9a 	bl	8022c6c <z_impl_log_process>
 8022f38:	0004      	movs	r4, r0
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
 8022f3a:	f7ff fddf 	bl	8022afc <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
 8022f3e:	2200      	movs	r2, #0
 8022f40:	2300      	movs	r3, #0
 8022f42:	4805      	ldr	r0, [pc, #20]	; (8022f58 <log_msg_no_space_handle+0x2c>)
 8022f44:	a901      	add	r1, sp, #4
 8022f46:	f009 fecb 	bl	802cce0 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
 8022f4a:	2800      	cmp	r0, #0
 8022f4c:	d001      	beq.n	8022f52 <log_msg_no_space_handle+0x26>
 8022f4e:	2c00      	cmp	r4, #0
 8022f50:	d1ef      	bne.n	8022f32 <log_msg_no_space_handle+0x6>
	} else {
		z_log_dropped();
	}
	return msg;

}
 8022f52:	9801      	ldr	r0, [sp, #4]
 8022f54:	bd16      	pop	{r1, r2, r4, pc}
 8022f56:	46c0      	nop			; (mov r8, r8)
 8022f58:	2000857c 	.word	0x2000857c

08022f5c <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
 8022f5c:	2300      	movs	r3, #0
{
 8022f5e:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
 8022f60:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
 8022f62:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
 8022f64:	4805      	ldr	r0, [pc, #20]	; (8022f7c <log_msg_chunk_alloc+0x20>)
 8022f66:	2300      	movs	r3, #0
 8022f68:	a901      	add	r1, sp, #4
 8022f6a:	f009 feb9 	bl	802cce0 <k_mem_slab_alloc>
	if (err != 0) {
 8022f6e:	2800      	cmp	r0, #0
 8022f70:	d002      	beq.n	8022f78 <log_msg_chunk_alloc+0x1c>
		msg = log_msg_no_space_handle();
 8022f72:	f7ff ffdb 	bl	8022f2c <log_msg_no_space_handle>
 8022f76:	9001      	str	r0, [sp, #4]
}
 8022f78:	9801      	ldr	r0, [sp, #4]
 8022f7a:	bd0e      	pop	{r1, r2, r3, pc}
 8022f7c:	2000857c 	.word	0x2000857c

08022f80 <msg_free>:
{
 8022f80:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8022f82:	7a02      	ldrb	r2, [r0, #8]
 8022f84:	b085      	sub	sp, #20
 8022f86:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
 8022f88:	07d2      	lsls	r2, r2, #31
 8022f8a:	d421      	bmi.n	8022fd0 <msg_free+0x50>
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
 8022f8c:	7a45      	ldrb	r5, [r0, #9]
 8022f8e:	092d      	lsrs	r5, r5, #4
	if (log_msg_is_std(msg) && nargs) {
 8022f90:	d01e      	beq.n	8022fd0 <msg_free+0x50>
		uint32_t smask = 0U;
 8022f92:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
 8022f94:	0026      	movs	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
 8022f96:	0031      	movs	r1, r6
 8022f98:	9801      	ldr	r0, [sp, #4]
 8022f9a:	f00b fcb3 	bl	802e904 <log_msg_arg_get>
 8022f9e:	0007      	movs	r7, r0
			if (log_is_strdup(buf)) {
 8022fa0:	f7ff fe54 	bl	8022c4c <log_is_strdup>
 8022fa4:	2800      	cmp	r0, #0
 8022fa6:	d010      	beq.n	8022fca <msg_free+0x4a>
				if (smask == 0U) {
 8022fa8:	2c00      	cmp	r4, #0
 8022faa:	d106      	bne.n	8022fba <msg_free+0x3a>
					smask = z_log_get_s_mask(
 8022fac:	9b01      	ldr	r3, [sp, #4]
 8022fae:	0029      	movs	r1, r5
 8022fb0:	6918      	ldr	r0, [r3, #16]
 8022fb2:	f7ff fd51 	bl	8022a58 <z_log_get_s_mask>
 8022fb6:	1e04      	subs	r4, r0, #0
					if (smask == 0U) {
 8022fb8:	d00a      	beq.n	8022fd0 <msg_free+0x50>
				if (smask & BIT(i)) {
 8022fba:	0023      	movs	r3, r4
 8022fbc:	2201      	movs	r2, #1
 8022fbe:	40f3      	lsrs	r3, r6
 8022fc0:	4213      	tst	r3, r2
 8022fc2:	d002      	beq.n	8022fca <msg_free+0x4a>
					log_free(buf);
 8022fc4:	0038      	movs	r0, r7
 8022fc6:	f7ff ff95 	bl	8022ef4 <log_free>
		for (i = 0U; i < nargs; i++) {
 8022fca:	3601      	adds	r6, #1
 8022fcc:	42ae      	cmp	r6, r5
 8022fce:	d3e2      	bcc.n	8022f96 <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
 8022fd0:	9b01      	ldr	r3, [sp, #4]
 8022fd2:	4c0b      	ldr	r4, [pc, #44]	; (8023000 <msg_free+0x80>)
 8022fd4:	7a1a      	ldrb	r2, [r3, #8]
 8022fd6:	0792      	lsls	r2, r2, #30
 8022fd8:	d504      	bpl.n	8022fe4 <msg_free+0x64>
		cont_free(msg->payload.ext.next);
 8022fda:	695b      	ldr	r3, [r3, #20]
 8022fdc:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
 8022fde:	9b03      	ldr	r3, [sp, #12]
 8022fe0:	2b00      	cmp	r3, #0
 8022fe2:	d105      	bne.n	8022ff0 <msg_free+0x70>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
 8022fe4:	0020      	movs	r0, r4
 8022fe6:	a901      	add	r1, sp, #4
 8022fe8:	f00d fd3f 	bl	8030a6a <k_mem_slab_free>
}
 8022fec:	b005      	add	sp, #20
 8022fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
 8022ff0:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
 8022ff2:	0020      	movs	r0, r4
 8022ff4:	a903      	add	r1, sp, #12
 8022ff6:	f00d fd38 	bl	8030a6a <k_mem_slab_free>
		cont = next;
 8022ffa:	9503      	str	r5, [sp, #12]
 8022ffc:	e7ef      	b.n	8022fde <msg_free+0x5e>
 8022ffe:	46c0      	nop			; (mov r8, r8)
 8023000:	2000857c 	.word	0x2000857c

08023004 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
 8023004:	b40e      	push	{r1, r2, r3}
 8023006:	b503      	push	{r0, r1, lr}
 8023008:	ab03      	add	r3, sp, #12
 802300a:	cb04      	ldmia	r3!, {r2}
 802300c:	0001      	movs	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
 802300e:	4804      	ldr	r0, [pc, #16]	; (8023020 <print_formatted+0x1c>)
	va_start(args, fmt);
 8023010:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8023012:	f7ff f967 	bl	80222e4 <cbvprintf>
	va_end(args);

	return length;
}
 8023016:	b002      	add	sp, #8
 8023018:	bc08      	pop	{r3}
 802301a:	b003      	add	sp, #12
 802301c:	4718      	bx	r3
 802301e:	46c0      	nop			; (mov r8, r8)
 8023020:	0802ecfb 	.word	0x0802ecfb

08023024 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
 8023024:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023026:	001d      	movs	r5, r3
 8023028:	9b08      	ldr	r3, [sp, #32]
 802302a:	0004      	movs	r4, r0
 802302c:	0016      	movs	r6, r2
 802302e:	9101      	str	r1, [sp, #4]
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 8023030:	06da      	lsls	r2, r3, #27
 8023032:	d406      	bmi.n	8023042 <hexdump_line_print+0x1e>
		print_formatted(ctx, "\n");
 8023034:	4926      	ldr	r1, [pc, #152]	; (80230d0 <hexdump_line_print+0xac>)
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 8023036:	069b      	lsls	r3, r3, #26
 8023038:	d400      	bmi.n	802303c <hexdump_line_print+0x18>
		print_formatted(ctx, "\r\n");
 802303a:	4926      	ldr	r1, [pc, #152]	; (80230d4 <hexdump_line_print+0xb0>)
 802303c:	0020      	movs	r0, r4
 802303e:	f7ff ffe1 	bl	8023004 <print_formatted>
{
 8023042:	2700      	movs	r7, #0
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
 8023044:	42af      	cmp	r7, r5
 8023046:	db24      	blt.n	8023092 <hexdump_line_print+0x6e>
		print_formatted(output, " ");
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8023048:	2500      	movs	r5, #0
		if (i > 0 && !(i % 8)) {
 802304a:	2707      	movs	r7, #7
			print_formatted(output, " ");
		}

		if (i < length) {
 802304c:	42b5      	cmp	r5, r6
 802304e:	d22d      	bcs.n	80230ac <hexdump_line_print+0x88>
			print_formatted(output, "%02x ", data[i]);
 8023050:	9b01      	ldr	r3, [sp, #4]
 8023052:	0020      	movs	r0, r4
 8023054:	5d5a      	ldrb	r2, [r3, r5]
 8023056:	4920      	ldr	r1, [pc, #128]	; (80230d8 <hexdump_line_print+0xb4>)
 8023058:	f7ff ffd4 	bl	8023004 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 802305c:	3501      	adds	r5, #1
 802305e:	2d10      	cmp	r5, #16
 8023060:	d11d      	bne.n	802309e <hexdump_line_print+0x7a>
		} else {
			print_formatted(output, "   ");
		}
	}

	print_formatted(output, "|");
 8023062:	0020      	movs	r0, r4
 8023064:	491d      	ldr	r1, [pc, #116]	; (80230dc <hexdump_line_print+0xb8>)
 8023066:	f7ff ffcd 	bl	8023004 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 802306a:	2500      	movs	r5, #0
 802306c:	272e      	movs	r7, #46	; 0x2e
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
		}

		if (i < length) {
 802306e:	42ae      	cmp	r6, r5
 8023070:	d928      	bls.n	80230c4 <hexdump_line_print+0xa0>
			char c = (char)data[i];

			print_formatted(output, "%c",
 8023072:	2168      	movs	r1, #104	; 0x68
			char c = (char)data[i];
 8023074:	9b01      	ldr	r3, [sp, #4]
 8023076:	5d5a      	ldrb	r2, [r3, r5]
			print_formatted(output, "%c",
 8023078:	4b19      	ldr	r3, [pc, #100]	; (80230e0 <hexdump_line_print+0xbc>)
 802307a:	5c9b      	ldrb	r3, [r3, r2]
 802307c:	438b      	bics	r3, r1
 802307e:	d100      	bne.n	8023082 <hexdump_line_print+0x5e>
 8023080:	003a      	movs	r2, r7
 8023082:	0020      	movs	r0, r4
 8023084:	4917      	ldr	r1, [pc, #92]	; (80230e4 <hexdump_line_print+0xc0>)
 8023086:	f7ff ffbd 	bl	8023004 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 802308a:	3501      	adds	r5, #1
 802308c:	2d10      	cmp	r5, #16
 802308e:	d112      	bne.n	80230b6 <hexdump_line_print+0x92>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
		}
	}
}
 8023090:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		print_formatted(output, " ");
 8023092:	0020      	movs	r0, r4
 8023094:	4914      	ldr	r1, [pc, #80]	; (80230e8 <hexdump_line_print+0xc4>)
 8023096:	f7ff ffb5 	bl	8023004 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 802309a:	3701      	adds	r7, #1
 802309c:	e7d2      	b.n	8023044 <hexdump_line_print+0x20>
		if (i > 0 && !(i % 8)) {
 802309e:	423d      	tst	r5, r7
 80230a0:	d1d4      	bne.n	802304c <hexdump_line_print+0x28>
			print_formatted(output, " ");
 80230a2:	0020      	movs	r0, r4
 80230a4:	4910      	ldr	r1, [pc, #64]	; (80230e8 <hexdump_line_print+0xc4>)
 80230a6:	f7ff ffad 	bl	8023004 <print_formatted>
 80230aa:	e7cf      	b.n	802304c <hexdump_line_print+0x28>
			print_formatted(output, "   ");
 80230ac:	0020      	movs	r0, r4
 80230ae:	490f      	ldr	r1, [pc, #60]	; (80230ec <hexdump_line_print+0xc8>)
 80230b0:	f7ff ffa8 	bl	8023004 <print_formatted>
 80230b4:	e7d2      	b.n	802305c <hexdump_line_print+0x38>
		if (i > 0 && !(i % 8)) {
 80230b6:	076b      	lsls	r3, r5, #29
 80230b8:	d1d9      	bne.n	802306e <hexdump_line_print+0x4a>
			print_formatted(output, " ");
 80230ba:	0020      	movs	r0, r4
 80230bc:	490a      	ldr	r1, [pc, #40]	; (80230e8 <hexdump_line_print+0xc4>)
 80230be:	f7ff ffa1 	bl	8023004 <print_formatted>
 80230c2:	e7d4      	b.n	802306e <hexdump_line_print+0x4a>
			print_formatted(output, " ");
 80230c4:	0020      	movs	r0, r4
 80230c6:	4908      	ldr	r1, [pc, #32]	; (80230e8 <hexdump_line_print+0xc4>)
 80230c8:	f7ff ff9c 	bl	8023004 <print_formatted>
 80230cc:	e7dd      	b.n	802308a <hexdump_line_print+0x66>
 80230ce:	46c0      	nop			; (mov r8, r8)
 80230d0:	080319e8 	.word	0x080319e8
 80230d4:	080319e7 	.word	0x080319e7
 80230d8:	080318aa 	.word	0x080318aa
 80230dc:	080318b4 	.word	0x080318b4
 80230e0:	08032192 	.word	0x08032192
 80230e4:	080318b6 	.word	0x080318b6
 80230e8:	080318b2 	.word	0x080318b2
 80230ec:	080318b0 	.word	0x080318b0

080230f0 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
 80230f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80230f2:	b08f      	sub	sp, #60	; 0x3c
 80230f4:	920b      	str	r2, [sp, #44]	; 0x2c
 80230f6:	001a      	movs	r2, r3
 80230f8:	ab14      	add	r3, sp, #80	; 0x50
 80230fa:	781b      	ldrb	r3, [r3, #0]
 80230fc:	0004      	movs	r4, r0
 80230fe:	9304      	str	r3, [sp, #16]
 8023100:	ab15      	add	r3, sp, #84	; 0x54
 8023102:	781b      	ldrb	r3, [r3, #0]
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
 8023104:	000d      	movs	r5, r1
{
 8023106:	930c      	str	r3, [sp, #48]	; 0x30
 8023108:	ab16      	add	r3, sp, #88	; 0x58
 802310a:	2000      	movs	r0, #0
 802310c:	5e1b      	ldrsh	r3, [r3, r0]
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 802310e:	2001      	movs	r0, #1
 8023110:	4008      	ands	r0, r1
 8023112:	9008      	str	r0, [sp, #32]
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 8023114:	2008      	movs	r0, #8
{
 8023116:	9305      	str	r3, [sp, #20]
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
 8023118:	2302      	movs	r3, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 802311a:	4008      	ands	r0, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
 802311c:	401d      	ands	r5, r3
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 802311e:	9007      	str	r0, [sp, #28]
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
 8023120:	4219      	tst	r1, r3
 8023122:	d007      	beq.n	8023134 <prefix_print+0x44>
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
 8023124:	3342      	adds	r3, #66	; 0x42
	if (!format) {
 8023126:	4219      	tst	r1, r3
 8023128:	d139      	bne.n	802319e <prefix_print+0xae>
		length = print_formatted(output, "[%08lu] ", timestamp);
 802312a:	0020      	movs	r0, r4
 802312c:	493b      	ldr	r1, [pc, #236]	; (802321c <prefix_print+0x12c>)
 802312e:	f7ff ff69 	bl	8023004 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
 8023132:	0005      	movs	r5, r0
	if (color) {
 8023134:	9b08      	ldr	r3, [sp, #32]
 8023136:	2b00      	cmp	r3, #0
 8023138:	d00a      	beq.n	8023150 <prefix_print+0x60>
		const char *log_color = start && (colors[level] != NULL) ?
 802313a:	9b04      	ldr	r3, [sp, #16]
 802313c:	009a      	lsls	r2, r3, #2
 802313e:	4b38      	ldr	r3, [pc, #224]	; (8023220 <prefix_print+0x130>)
 8023140:	58d2      	ldr	r2, [r2, r3]
 8023142:	2a00      	cmp	r2, #0
 8023144:	d100      	bne.n	8023148 <prefix_print+0x58>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
 8023146:	4a37      	ldr	r2, [pc, #220]	; (8023224 <prefix_print+0x134>)
		print_formatted(output, "%s", log_color);
 8023148:	0020      	movs	r0, r4
 802314a:	4937      	ldr	r1, [pc, #220]	; (8023228 <prefix_print+0x138>)
 802314c:	f7ff ff5a 	bl	8023004 <print_formatted>
	int total = 0;
 8023150:	2600      	movs	r6, #0
	if (level_on) {
 8023152:	9b07      	ldr	r3, [sp, #28]
 8023154:	42b3      	cmp	r3, r6
 8023156:	d008      	beq.n	802316a <prefix_print+0x7a>
		total += print_formatted(output, "<%s> ", severity[level]);
 8023158:	9b04      	ldr	r3, [sp, #16]
 802315a:	0020      	movs	r0, r4
 802315c:	009a      	lsls	r2, r3, #2
 802315e:	4b33      	ldr	r3, [pc, #204]	; (802322c <prefix_print+0x13c>)
 8023160:	4933      	ldr	r1, [pc, #204]	; (8023230 <prefix_print+0x140>)
 8023162:	58d2      	ldr	r2, [r2, r3]
 8023164:	f7ff ff4e 	bl	8023004 <print_formatted>
 8023168:	0006      	movs	r6, r0
	if (source_id >= 0) {
 802316a:	9b05      	ldr	r3, [sp, #20]
 802316c:	2b00      	cmp	r3, #0
 802316e:	db13      	blt.n	8023198 <prefix_print+0xa8>
		total += print_formatted(output,
 8023170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023172:	4f30      	ldr	r7, [pc, #192]	; (8023234 <prefix_print+0x144>)
 8023174:	2b00      	cmp	r3, #0
 8023176:	d005      	beq.n	8023184 <prefix_print+0x94>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
 8023178:	2301      	movs	r3, #1
 802317a:	9a04      	ldr	r2, [sp, #16]
 802317c:	4093      	lsls	r3, r2
				(func_on &&
 802317e:	06db      	lsls	r3, r3, #27
 8023180:	d500      	bpl.n	8023184 <prefix_print+0x94>
		total += print_formatted(output,
 8023182:	4f2d      	ldr	r7, [pc, #180]	; (8023238 <prefix_print+0x148>)
 8023184:	9905      	ldr	r1, [sp, #20]
 8023186:	980c      	ldr	r0, [sp, #48]	; 0x30
 8023188:	f7ff fce6 	bl	8022b58 <log_source_name_get>
 802318c:	0039      	movs	r1, r7
 802318e:	0002      	movs	r2, r0
 8023190:	0020      	movs	r0, r4
 8023192:	f7ff ff37 	bl	8023004 <print_formatted>
 8023196:	1836      	adds	r6, r6, r0
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
	}

	length += ids_print(output, level_on, func_on,
 8023198:	1970      	adds	r0, r6, r5
			domain_id, source_id, level);


	return length;
}
 802319a:	b00f      	add	sp, #60	; 0x3c
 802319c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = 0;
 802319e:	2000      	movs	r0, #0
	} else if (freq != 0U) {
 80231a0:	4b26      	ldr	r3, [pc, #152]	; (802323c <prefix_print+0x14c>)
 80231a2:	681e      	ldr	r6, [r3, #0]
 80231a4:	4286      	cmp	r6, r0
 80231a6:	d0c4      	beq.n	8023132 <prefix_print+0x42>
		timestamp /= timestamp_div;
 80231a8:	4b25      	ldr	r3, [pc, #148]	; (8023240 <prefix_print+0x150>)
 80231aa:	0010      	movs	r0, r2
 80231ac:	6819      	ldr	r1, [r3, #0]
 80231ae:	f7fc ffaf 	bl	8020110 <__udivsi3>
 80231b2:	0031      	movs	r1, r6
 80231b4:	f7fd f832 	bl	802021c <__aeabi_uidivmod>
 80231b8:	0007      	movs	r7, r0
 80231ba:	000d      	movs	r5, r1
		seconds -= hours * 3600U;
 80231bc:	21e1      	movs	r1, #225	; 0xe1
 80231be:	0038      	movs	r0, r7
 80231c0:	0109      	lsls	r1, r1, #4
 80231c2:	f7fd f82b 	bl	802021c <__aeabi_uidivmod>
		ms = (remainder * 1000U) / freq;
 80231c6:	20fa      	movs	r0, #250	; 0xfa
 80231c8:	0080      	lsls	r0, r0, #2
 80231ca:	9106      	str	r1, [sp, #24]
 80231cc:	4368      	muls	r0, r5
 80231ce:	0031      	movs	r1, r6
 80231d0:	f7fd f824 	bl	802021c <__aeabi_uidivmod>
 80231d4:	9009      	str	r0, [sp, #36]	; 0x24
 80231d6:	910a      	str	r1, [sp, #40]	; 0x28
		mins = seconds / 60U;
 80231d8:	9806      	ldr	r0, [sp, #24]
 80231da:	213c      	movs	r1, #60	; 0x3c
 80231dc:	f7fc ff98 	bl	8020110 <__udivsi3>
		hours = seconds / 3600U;
 80231e0:	21e1      	movs	r1, #225	; 0xe1
		mins = seconds / 60U;
 80231e2:	900d      	str	r0, [sp, #52]	; 0x34
		hours = seconds / 3600U;
 80231e4:	0109      	lsls	r1, r1, #4
 80231e6:	0038      	movs	r0, r7
 80231e8:	f7fc ff92 	bl	8020110 <__udivsi3>
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 80231ec:	23fa      	movs	r3, #250	; 0xfa
		hours = seconds / 3600U;
 80231ee:	0005      	movs	r5, r0
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 80231f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80231f2:	009b      	lsls	r3, r3, #2
 80231f4:	0031      	movs	r1, r6
 80231f6:	4358      	muls	r0, r3
 80231f8:	f7fc ff8a 	bl	8020110 <__udivsi3>
			length = print_formatted(output,
 80231fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80231fe:	9002      	str	r0, [sp, #8]
 8023200:	213c      	movs	r1, #60	; 0x3c
 8023202:	9806      	ldr	r0, [sp, #24]
 8023204:	9301      	str	r3, [sp, #4]
 8023206:	f7fd f809 	bl	802021c <__aeabi_uidivmod>
 802320a:	002a      	movs	r2, r5
 802320c:	9100      	str	r1, [sp, #0]
 802320e:	0020      	movs	r0, r4
 8023210:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023212:	490c      	ldr	r1, [pc, #48]	; (8023244 <prefix_print+0x154>)
 8023214:	f7ff fef6 	bl	8023004 <print_formatted>
 8023218:	e78b      	b.n	8023132 <prefix_print+0x42>
 802321a:	46c0      	nop			; (mov r8, r8)
 802321c:	080318c7 	.word	0x080318c7
 8023220:	080312f8 	.word	0x080312f8
 8023224:	080318b9 	.word	0x080318b9
 8023228:	080318ec 	.word	0x080318ec
 802322c:	0803130c 	.word	0x0803130c
 8023230:	080318ef 	.word	0x080318ef
 8023234:	080318be 	.word	0x080318be
 8023238:	080318c3 	.word	0x080318c3
 802323c:	20008598 	.word	0x20008598
 8023240:	2000859c 	.word	0x2000859c
 8023244:	080318d0 	.word	0x080318d0

08023248 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
 8023248:	b570      	push	{r4, r5, r6, lr}
 802324a:	0004      	movs	r4, r0
 802324c:	000d      	movs	r5, r1
	if (color) {
 802324e:	07cb      	lsls	r3, r1, #31
 8023250:	d503      	bpl.n	802325a <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
 8023252:	4a07      	ldr	r2, [pc, #28]	; (8023270 <postfix_print+0x28>)
 8023254:	4907      	ldr	r1, [pc, #28]	; (8023274 <postfix_print+0x2c>)
 8023256:	f7ff fed5 	bl	8023004 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 802325a:	06eb      	lsls	r3, r5, #27
 802325c:	d406      	bmi.n	802326c <postfix_print+0x24>
		print_formatted(ctx, "\n");
 802325e:	4906      	ldr	r1, [pc, #24]	; (8023278 <postfix_print+0x30>)
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 8023260:	06ab      	lsls	r3, r5, #26
 8023262:	d400      	bmi.n	8023266 <postfix_print+0x1e>
		print_formatted(ctx, "\r\n");
 8023264:	4905      	ldr	r1, [pc, #20]	; (802327c <postfix_print+0x34>)
 8023266:	0020      	movs	r0, r4
 8023268:	f7ff fecc 	bl	8023004 <print_formatted>
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
 802326c:	bd70      	pop	{r4, r5, r6, pc}
 802326e:	46c0      	nop			; (mov r8, r8)
 8023270:	080318b9 	.word	0x080318b9
 8023274:	080318ec 	.word	0x080318ec
 8023278:	080319e8 	.word	0x080319e8
 802327c:	080319e7 	.word	0x080319e7

08023280 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
 8023280:	b5f0      	push	{r4, r5, r6, r7, lr}
	return msg->hdr.ids.level;
 8023282:	7a8b      	ldrb	r3, [r1, #10]
 8023284:	000e      	movs	r6, r1
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
 8023286:	2100      	movs	r1, #0
{
 8023288:	b08d      	sub	sp, #52	; 0x34
 802328a:	9204      	str	r2, [sp, #16]
 802328c:	075a      	lsls	r2, r3, #29
 802328e:	0004      	movs	r4, r0
	uint8_t level = (uint8_t)log_msg_level_get(msg);
 8023290:	0f57      	lsrs	r7, r2, #29
			0 : prefix_print(output, flags, std_msg, timestamp,
 8023292:	9105      	str	r1, [sp, #20]
 8023294:	428a      	cmp	r2, r1
 8023296:	d00e      	beq.n	80232b6 <log_output_msg_process+0x36>
 8023298:	2201      	movs	r2, #1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 802329a:	7a31      	ldrb	r1, [r6, #8]
	return msg->hdr.ids.domain_id;
 802329c:	069b      	lsls	r3, r3, #26
 802329e:	438a      	bics	r2, r1
	return msg->hdr.ids.source_id;
 80232a0:	8971      	ldrh	r1, [r6, #10]
 80232a2:	0f5b      	lsrs	r3, r3, #29
 80232a4:	0989      	lsrs	r1, r1, #6
 80232a6:	9102      	str	r1, [sp, #8]
 80232a8:	9301      	str	r3, [sp, #4]
 80232aa:	9904      	ldr	r1, [sp, #16]
 80232ac:	68f3      	ldr	r3, [r6, #12]
 80232ae:	9700      	str	r7, [sp, #0]
 80232b0:	f7ff ff1e 	bl	80230f0 <prefix_print>
 80232b4:	9005      	str	r0, [sp, #20]
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 80232b6:	2501      	movs	r5, #1
 80232b8:	7a33      	ldrb	r3, [r6, #8]
 80232ba:	439d      	bics	r5, r3
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
 80232bc:	d00b      	beq.n	80232d6 <log_output_msg_process+0x56>
		std_print(msg, output);
 80232be:	0021      	movs	r1, r4
 80232c0:	0030      	movs	r0, r6
 80232c2:	f00b fbbc 	bl	802ea3e <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
 80232c6:	2f00      	cmp	r7, #0
 80232c8:	d02a      	beq.n	8023320 <log_output_msg_process+0xa0>
		postfix_print(output, flags, level);
 80232ca:	003a      	movs	r2, r7
 80232cc:	0020      	movs	r0, r4
 80232ce:	9904      	ldr	r1, [sp, #16]
 80232d0:	f7ff ffba 	bl	8023248 <postfix_print>
 80232d4:	e024      	b.n	8023320 <log_output_msg_process+0xa0>
	} else if (raw_string) {
 80232d6:	2f00      	cmp	r7, #0
 80232d8:	d127      	bne.n	802332a <log_output_msg_process+0xaa>
	size_t offset = 0;
 80232da:	002f      	movs	r7, r5
		length = output->size;
 80232dc:	68e3      	ldr	r3, [r4, #12]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
 80232de:	aa08      	add	r2, sp, #32
		length = output->size;
 80232e0:	9308      	str	r3, [sp, #32]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
 80232e2:	0030      	movs	r0, r6
 80232e4:	003b      	movs	r3, r7
 80232e6:	68a1      	ldr	r1, [r4, #8]
 80232e8:	f00b fb95 	bl	802ea16 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
 80232ec:	9b08      	ldr	r3, [sp, #32]
 80232ee:	6862      	ldr	r2, [r4, #4]
 80232f0:	6013      	str	r3, [r2, #0]
		if (length != 0) {
 80232f2:	2b00      	cmp	r3, #0
 80232f4:	d007      	beq.n	8023306 <log_output_msg_process+0x86>
			eol = (output->buf[length - 1] == '\n');
 80232f6:	68a2      	ldr	r2, [r4, #8]
 80232f8:	18d3      	adds	r3, r2, r3
 80232fa:	3b01      	subs	r3, #1
 80232fc:	781d      	ldrb	r5, [r3, #0]
 80232fe:	3d0a      	subs	r5, #10
 8023300:	426b      	negs	r3, r5
 8023302:	415d      	adcs	r5, r3
 8023304:	b2ed      	uxtb	r5, r5
		log_output_flush(output);
 8023306:	0020      	movs	r0, r4
 8023308:	f00b fceb 	bl	802ece2 <log_output_flush>
		offset += length;
 802330c:	9b08      	ldr	r3, [sp, #32]
 802330e:	18ff      	adds	r7, r7, r3
	} while (length > 0);
 8023310:	2b00      	cmp	r3, #0
 8023312:	d1e3      	bne.n	80232dc <log_output_msg_process+0x5c>
	if (eol) {
 8023314:	2d00      	cmp	r5, #0
 8023316:	d003      	beq.n	8023320 <log_output_msg_process+0xa0>
		print_formatted(output, "\r");
 8023318:	0020      	movs	r0, r4
 802331a:	4912      	ldr	r1, [pc, #72]	; (8023364 <log_output_msg_process+0xe4>)
 802331c:	f7ff fe72 	bl	8023004 <print_formatted>
	}

	log_output_flush(output);
 8023320:	0020      	movs	r0, r4
 8023322:	f00b fcde 	bl	802ece2 <log_output_flush>
}
 8023326:	b00d      	add	sp, #52	; 0x34
 8023328:	bdf0      	pop	{r4, r5, r6, r7, pc}
	print_formatted(output, "%s", log_msg_str_get(msg));
 802332a:	0030      	movs	r0, r6
 802332c:	f00b fb12 	bl	802e954 <log_msg_str_get>
 8023330:	490d      	ldr	r1, [pc, #52]	; (8023368 <log_output_msg_process+0xe8>)
 8023332:	0002      	movs	r2, r0
 8023334:	0020      	movs	r0, r4
 8023336:	f7ff fe65 	bl	8023004 <print_formatted>
		length = sizeof(buf);
 802333a:	2310      	movs	r3, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
 802333c:	aa07      	add	r2, sp, #28
		length = sizeof(buf);
 802333e:	9307      	str	r3, [sp, #28]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
 8023340:	0030      	movs	r0, r6
 8023342:	002b      	movs	r3, r5
 8023344:	a908      	add	r1, sp, #32
 8023346:	f00b fb66 	bl	802ea16 <log_msg_hexdump_data_get>
		if (length) {
 802334a:	9a07      	ldr	r2, [sp, #28]
 802334c:	2a00      	cmp	r2, #0
 802334e:	d0bc      	beq.n	80232ca <log_output_msg_process+0x4a>
			hexdump_line_print(output, buf, length,
 8023350:	9b04      	ldr	r3, [sp, #16]
 8023352:	0020      	movs	r0, r4
 8023354:	9300      	str	r3, [sp, #0]
 8023356:	a908      	add	r1, sp, #32
 8023358:	9b05      	ldr	r3, [sp, #20]
 802335a:	f7ff fe63 	bl	8023024 <hexdump_line_print>
			offset += length;
 802335e:	9b07      	ldr	r3, [sp, #28]
 8023360:	18ed      	adds	r5, r5, r3
		length = sizeof(buf);
 8023362:	e7ea      	b.n	802333a <log_output_msg_process+0xba>
 8023364:	080318f5 	.word	0x080318f5
 8023368:	080318ec 	.word	0x080318ec

0802336c <log_output_dropped_process>:
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
 802336c:	4a11      	ldr	r2, [pc, #68]	; (80233b4 <log_output_dropped_process+0x48>)
{
 802336e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	cnt = MIN(cnt, 9999);
 8023370:	000b      	movs	r3, r1
{
 8023372:	0004      	movs	r4, r0
	log_output_func_t outf = output->func;
 8023374:	6805      	ldr	r5, [r0, #0]
	cnt = MIN(cnt, 9999);
 8023376:	4291      	cmp	r1, r2
 8023378:	d900      	bls.n	802337c <log_output_dropped_process+0x10>
 802337a:	0013      	movs	r3, r2
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 802337c:	2105      	movs	r1, #5
 802337e:	4668      	mov	r0, sp
 8023380:	4a0d      	ldr	r2, [pc, #52]	; (80233b8 <log_output_dropped_process+0x4c>)
 8023382:	f00b f999 	bl	802e6b8 <snprintk>
 8023386:	0006      	movs	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 8023388:	6863      	ldr	r3, [r4, #4]
 802338a:	0028      	movs	r0, r5
 802338c:	220b      	movs	r2, #11
 802338e:	685b      	ldr	r3, [r3, #4]
 8023390:	490a      	ldr	r1, [pc, #40]	; (80233bc <log_output_dropped_process+0x50>)
 8023392:	f00b fb46 	bl	802ea22 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
 8023396:	6863      	ldr	r3, [r4, #4]
 8023398:	0032      	movs	r2, r6
 802339a:	0028      	movs	r0, r5
 802339c:	4669      	mov	r1, sp
 802339e:	685b      	ldr	r3, [r3, #4]
 80233a0:	f00b fb3f 	bl	802ea22 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
 80233a4:	6863      	ldr	r3, [r4, #4]
 80233a6:	0028      	movs	r0, r5
 80233a8:	221b      	movs	r2, #27
 80233aa:	685b      	ldr	r3, [r3, #4]
 80233ac:	4904      	ldr	r1, [pc, #16]	; (80233c0 <log_output_dropped_process+0x54>)
 80233ae:	f00b fb38 	bl	802ea22 <buffer_write>
		     output->control_block->ctx);
}
 80233b2:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 80233b4:	0000270f 	.word	0x0000270f
 80233b8:	0803207f 	.word	0x0803207f
 80233bc:	08031933 	.word	0x08031933
 80233c0:	08031917 	.word	0x08031917

080233c4 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
 80233c4:	2301      	movs	r3, #1
{
 80233c6:	b530      	push	{r4, r5, lr}
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 80233c8:	2100      	movs	r1, #0
		frequency /= 2U;
		timestamp_div *= 2U;
 80233ca:	001d      	movs	r5, r3
	timestamp_div = 1U;
 80233cc:	4a07      	ldr	r2, [pc, #28]	; (80233ec <log_output_timestamp_freq_set+0x28>)
	while (frequency > 1000000) {
 80233ce:	4c08      	ldr	r4, [pc, #32]	; (80233f0 <log_output_timestamp_freq_set+0x2c>)
	timestamp_div = 1U;
 80233d0:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
 80233d2:	42a0      	cmp	r0, r4
 80233d4:	d805      	bhi.n	80233e2 <log_output_timestamp_freq_set+0x1e>
 80233d6:	2900      	cmp	r1, #0
 80233d8:	d000      	beq.n	80233dc <log_output_timestamp_freq_set+0x18>
 80233da:	6013      	str	r3, [r2, #0]
	}

	freq = frequency;
 80233dc:	4b05      	ldr	r3, [pc, #20]	; (80233f4 <log_output_timestamp_freq_set+0x30>)
 80233de:	6018      	str	r0, [r3, #0]
}
 80233e0:	bd30      	pop	{r4, r5, pc}
		timestamp_div *= 2U;
 80233e2:	0029      	movs	r1, r5
		frequency /= 2U;
 80233e4:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 80233e6:	005b      	lsls	r3, r3, #1
 80233e8:	e7f3      	b.n	80233d2 <log_output_timestamp_freq_set+0xe>
 80233ea:	46c0      	nop			; (mov r8, r8)
 80233ec:	2000859c 	.word	0x2000859c
 80233f0:	000f4240 	.word	0x000f4240
 80233f4:	20008598 	.word	0x20008598

080233f8 <char_out>:
static const char LOG_HEX_SEP[10] = "##ZLOGV1##";

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
 80233f8:	b570      	push	{r4, r5, r6, lr}
 80233fa:	000d      	movs	r5, r1
 80233fc:	0004      	movs	r4, r0
 80233fe:	1846      	adds	r6, r0, r1
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
 8023400:	42b4      	cmp	r4, r6
 8023402:	d101      	bne.n	8023408 <char_out+0x10>
		uart_poll_out(uart_dev, data[i]);
#endif
	}

	return length;
}
 8023404:	0028      	movs	r0, r5
 8023406:	bd70      	pop	{r4, r5, r6, pc}
		uart_poll_out(uart_dev, data[i]);
 8023408:	4b03      	ldr	r3, [pc, #12]	; (8023418 <char_out+0x20>)
 802340a:	7821      	ldrb	r1, [r4, #0]
 802340c:	6818      	ldr	r0, [r3, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 802340e:	6883      	ldr	r3, [r0, #8]
 8023410:	3401      	adds	r4, #1
 8023412:	685b      	ldr	r3, [r3, #4]
 8023414:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
 8023416:	e7f3      	b.n	8023400 <char_out+0x8>
 8023418:	200085b4 	.word	0x200085b4

0802341c <panic>:
		}
	}
}

static void panic(struct log_backend const *const backend)
{
 802341c:	b510      	push	{r4, lr}
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
 802341e:	4802      	ldr	r0, [pc, #8]	; (8023428 <panic+0xc>)
 8023420:	f00b fc5f 	bl	802ece2 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
 8023424:	bd10      	pop	{r4, pc}
 8023426:	46c0      	nop			; (mov r8, r8)
 8023428:	0803133c 	.word	0x0803133c

0802342c <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
 802342c:	b510      	push	{r4, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
 802342e:	4802      	ldr	r0, [pc, #8]	; (8023438 <dropped+0xc>)
 8023430:	f7ff ff9c 	bl	802336c <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
 8023434:	bd10      	pop	{r4, pc}
 8023436:	46c0      	nop			; (mov r8, r8)
 8023438:	0803133c 	.word	0x0803133c

0802343c <log_backend_uart_init>:
{
 802343c:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 802343e:	4803      	ldr	r0, [pc, #12]	; (802344c <log_backend_uart_init+0x10>)
 8023440:	f009 fade 	bl	802ca00 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 8023444:	4b02      	ldr	r3, [pc, #8]	; (8023450 <log_backend_uart_init+0x14>)
 8023446:	6018      	str	r0, [r3, #0]
}
 8023448:	bd10      	pop	{r4, pc}
 802344a:	46c0      	nop			; (mov r8, r8)
 802344c:	0803193f 	.word	0x0803193f
 8023450:	200085b4 	.word	0x200085b4

08023454 <put>:
{
 8023454:	b510      	push	{r4, lr}
 8023456:	000c      	movs	r4, r1
	log_msg_get(msg);
 8023458:	0008      	movs	r0, r1
 802345a:	f00b fa4a 	bl	802e8f2 <log_msg_get>
	log_output_msg_process(output, msg, flags);
 802345e:	220f      	movs	r2, #15
 8023460:	0021      	movs	r1, r4
 8023462:	4803      	ldr	r0, [pc, #12]	; (8023470 <put+0x1c>)
 8023464:	f7ff ff0c 	bl	8023280 <log_output_msg_process>
	log_msg_put(msg);
 8023468:	0020      	movs	r0, r4
 802346a:	f00b fa66 	bl	802e93a <log_msg_put>
}
 802346e:	bd10      	pop	{r4, pc}
 8023470:	0803133c 	.word	0x0803133c

08023474 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
 8023474:	b570      	push	{r4, r5, r6, lr}
 8023476:	0005      	movs	r5, r0
	__asm__ volatile("mrs %0, PRIMASK;"
 8023478:	f3ef 8610 	mrs	r6, PRIMASK
 802347c:	b672      	cpsid	i
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 802347e:	4b0b      	ldr	r3, [pc, #44]	; (80234ac <pm_state_notify+0x38>)
 8023480:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
 8023482:	2c00      	cmp	r4, #0
 8023484:	d102      	bne.n	802348c <pm_state_notify+0x18>
	if (key != 0U) {
 8023486:	2e00      	cmp	r6, #0
 8023488:	d00c      	beq.n	80234a4 <pm_state_notify+0x30>
		if (callback) {
			callback(z_power_state.state);
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
 802348a:	bd70      	pop	{r4, r5, r6, pc}
		if (entering_state) {
 802348c:	2d00      	cmp	r5, #0
 802348e:	d007      	beq.n	80234a0 <pm_state_notify+0x2c>
			callback = notifier->state_entry;
 8023490:	6863      	ldr	r3, [r4, #4]
		if (callback) {
 8023492:	2b00      	cmp	r3, #0
 8023494:	d002      	beq.n	802349c <pm_state_notify+0x28>
			callback(z_power_state.state);
 8023496:	4a06      	ldr	r2, [pc, #24]	; (80234b0 <pm_state_notify+0x3c>)
 8023498:	7810      	ldrb	r0, [r2, #0]
 802349a:	4798      	blx	r3
	return node->next;
 802349c:	6824      	ldr	r4, [r4, #0]
 802349e:	e7f0      	b.n	8023482 <pm_state_notify+0xe>
			callback = notifier->state_exit;
 80234a0:	68a3      	ldr	r3, [r4, #8]
 80234a2:	e7f6      	b.n	8023492 <pm_state_notify+0x1e>
	__asm__ volatile(
 80234a4:	b662      	cpsie	i
 80234a6:	f3bf 8f6f 	isb	sy
}
 80234aa:	e7ee      	b.n	802348a <pm_state_notify+0x16>
 80234ac:	200085b8 	.word	0x200085b8
 80234b0:	200085c0 	.word	0x200085c0

080234b4 <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
 80234b4:	4b07      	ldr	r3, [pc, #28]	; (80234d4 <pm_system_resume+0x20>)
{
 80234b6:	b510      	push	{r4, lr}
	if (!post_ops_done) {
 80234b8:	681c      	ldr	r4, [r3, #0]
 80234ba:	2c00      	cmp	r4, #0
 80234bc:	d108      	bne.n	80234d0 <pm_system_resume+0x1c>
		post_ops_done = 1;
 80234be:	2201      	movs	r2, #1
 80234c0:	601a      	str	r2, [r3, #0]
		pm_power_state_exit_post_ops(z_power_state);
 80234c2:	4b05      	ldr	r3, [pc, #20]	; (80234d8 <pm_system_resume+0x24>)
 80234c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80234c6:	f00b fc30 	bl	802ed2a <pm_power_state_exit_post_ops>
		pm_state_notify(false);
 80234ca:	0020      	movs	r0, r4
 80234cc:	f7ff ffd2 	bl	8023474 <pm_state_notify>
	}
}
 80234d0:	bd10      	pop	{r4, pc}
 80234d2:	46c0      	nop			; (mov r8, r8)
 80234d4:	20008034 	.word	0x20008034
 80234d8:	200085c0 	.word	0x200085c0

080234dc <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
 80234dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_power_state = pm_policy_next_state(ticks);
 80234de:	466e      	mov	r6, sp
 80234e0:	4c25      	ldr	r4, [pc, #148]	; (8023578 <pm_system_suspend+0x9c>)
 80234e2:	0001      	movs	r1, r0
{
 80234e4:	0005      	movs	r5, r0
	z_power_state = pm_policy_next_state(ticks);
 80234e6:	0030      	movs	r0, r6
 80234e8:	f00b fc44 	bl	802ed74 <pm_policy_next_state>
 80234ec:	0023      	movs	r3, r4
 80234ee:	ce07      	ldmia	r6!, {r0, r1, r2}
 80234f0:	c307      	stmia	r3!, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
 80234f2:	7820      	ldrb	r0, [r4, #0]
 80234f4:	2800      	cmp	r0, #0
 80234f6:	d03a      	beq.n	802356e <pm_system_suspend+0x92>
		LOG_DBG("No PM operations done.");
		return z_power_state.state;
	}
	post_ops_done = 0;
 80234f8:	2200      	movs	r2, #0
 80234fa:	4b20      	ldr	r3, [pc, #128]	; (802357c <pm_system_suspend+0xa0>)
 80234fc:	601a      	str	r2, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
 80234fe:	1c6b      	adds	r3, r5, #1
 8023500:	d00e      	beq.n	8023520 <pm_system_suspend+0x44>
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint32_t k_us_to_ticks_ceil32(uint32_t t)
{
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_us, Z_HZ_ticks, true, true, true, false);
 8023502:	68a3      	ldr	r3, [r4, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
 8023504:	4a1e      	ldr	r2, [pc, #120]	; (8023580 <pm_system_suspend+0xa4>)
 8023506:	0d19      	lsrs	r1, r3, #20
 8023508:	0318      	lsls	r0, r3, #12
 802350a:	2300      	movs	r3, #0
 802350c:	1880      	adds	r0, r0, r2
 802350e:	4159      	adcs	r1, r3
 8023510:	2300      	movs	r3, #0
 8023512:	4a1c      	ldr	r2, [pc, #112]	; (8023584 <pm_system_suspend+0xa8>)
 8023514:	f7fc ffca 	bl	80204ac <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
 8023518:	2101      	movs	r1, #1
 802351a:	1a28      	subs	r0, r5, r0
 802351c:	f00d fbb6 	bl	8030c8c <z_set_timeout_expiry>

#if CONFIG_PM_DEVICE

	bool should_resume_devices = true;

	switch (z_power_state.state) {
 8023520:	7825      	ldrb	r5, [r4, #0]
 8023522:	2d03      	cmp	r5, #3
 8023524:	d815      	bhi.n	8023552 <pm_system_suspend+0x76>
 8023526:	2d00      	cmp	r5, #0
 8023528:	d118      	bne.n	802355c <pm_system_suspend+0x80>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
 802352a:	f009 fd23 	bl	802cf74 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
 802352e:	2001      	movs	r0, #1
 8023530:	f7ff ffa0 	bl	8023474 <pm_state_notify>
	pm_power_state_set(z_power_state);
 8023534:	6820      	ldr	r0, [r4, #0]
 8023536:	6861      	ldr	r1, [r4, #4]
 8023538:	68a2      	ldr	r2, [r4, #8]
 802353a:	f00b fbff 	bl	802ed3c <pm_power_state_set>
	pm_debug_stop_timer();

	/* Wake up sequence starts here */
#if CONFIG_PM_DEVICE
	if (should_resume_devices) {
 802353e:	2d00      	cmp	r5, #0
 8023540:	d001      	beq.n	8023546 <pm_system_suspend+0x6a>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
 8023542:	f000 f881 	bl	8023648 <pm_resume_devices>
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
 8023546:	f7ff ffb5 	bl	80234b4 <pm_system_resume>
	k_sched_unlock();
 802354a:	f009 fdaf 	bl	802d0ac <k_sched_unlock>

	return z_power_state.state;
 802354e:	7820      	ldrb	r0, [r4, #0]
 8023550:	e00d      	b.n	802356e <pm_system_suspend+0x92>
	switch (z_power_state.state) {
 8023552:	1f2b      	subs	r3, r5, #4
 8023554:	2b01      	cmp	r3, #1
 8023556:	d90c      	bls.n	8023572 <pm_system_suspend+0x96>
 8023558:	2500      	movs	r5, #0
 802355a:	e7e6      	b.n	802352a <pm_system_suspend+0x4e>
		if (pm_low_power_devices()) {
 802355c:	f00b fc05 	bl	802ed6a <pm_low_power_devices>
	bool should_resume_devices = true;
 8023560:	2501      	movs	r5, #1
		if (pm_low_power_devices()) {
 8023562:	2800      	cmp	r0, #0
 8023564:	d0e1      	beq.n	802352a <pm_system_suspend+0x4e>
	pm_resume_devices();
 8023566:	f000 f86f 	bl	8023648 <pm_resume_devices>
	z_power_state.state = PM_STATE_ACTIVE;
 802356a:	2000      	movs	r0, #0
 802356c:	7020      	strb	r0, [r4, #0]
}
 802356e:	b004      	add	sp, #16
 8023570:	bd70      	pop	{r4, r5, r6, pc}
		if (pm_suspend_devices()) {
 8023572:	f00b fbf5 	bl	802ed60 <pm_suspend_devices>
 8023576:	e7f3      	b.n	8023560 <pm_system_suspend+0x84>
 8023578:	200085c0 	.word	0x200085c0
 802357c:	20008034 	.word	0x20008034
 8023580:	000f423f 	.word	0x000f423f
 8023584:	000f4240 	.word	0x000f4240

08023588 <pm_create_device_list>:
		++pmi;
	}
}

void pm_create_device_list(void)
{
 8023588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	size_t count = z_device_get_all_static(&all_devices);
 802358a:	4c16      	ldr	r4, [pc, #88]	; (80235e4 <pm_create_device_list+0x5c>)
 802358c:	0020      	movs	r0, r4
 802358e:	f009 fa2d 	bl	802c9ec <z_device_get_all_static>
	 */

	__ASSERT_NO_MSG(count <= DEVICE_IDX_MAX);

	/* Reserve initial slots for core devices. */
	core_dev = 0;
 8023592:	2300      	movs	r3, #0
	while (z_pm_core_devices[core_dev]) {
 8023594:	4a14      	ldr	r2, [pc, #80]	; (80235e8 <pm_create_device_list+0x60>)
	size_t count = z_device_get_all_static(&all_devices);
 8023596:	9001      	str	r0, [sp, #4]
	while (z_pm_core_devices[core_dev]) {
 8023598:	0099      	lsls	r1, r3, #2
 802359a:	5888      	ldr	r0, [r1, r2]
 802359c:	2800      	cmp	r0, #0
 802359e:	d10e      	bne.n	80235be <pm_create_device_list+0x36>
	num_pm = core_dev;
	__ASSERT_NO_MSG(num_pm <= CONFIG_PM_MAX_DEVICES);

	for (pmi = 0; pmi < count; pmi++) {
		device_idx_t cdi = 0;
		const struct device *dev = &all_devices[pmi];
 80235a0:	6826      	ldr	r6, [r4, #0]
			++cdi;
		}

		/* Append the device if it doesn't have a reserved slot. */
		if (cdi == core_dev) {
			pm_devices[num_pm++] = pmi;
 80235a2:	2401      	movs	r4, #1
	for (pmi = 0; pmi < count; pmi++) {
 80235a4:	0019      	movs	r1, r3
 80235a6:	0002      	movs	r2, r0
			pm_devices[num_pm++] = pmi;
 80235a8:	46a4      	mov	ip, r4
	num_pm = core_dev;
 80235aa:	4d10      	ldr	r5, [pc, #64]	; (80235ec <pm_create_device_list+0x64>)
			pm_devices[num_pm++] = pmi;
 80235ac:	4f10      	ldr	r7, [pc, #64]	; (80235f0 <pm_create_device_list+0x68>)
	num_pm = core_dev;
 80235ae:	802b      	strh	r3, [r5, #0]
	for (pmi = 0; pmi < count; pmi++) {
 80235b0:	9c01      	ldr	r4, [sp, #4]
 80235b2:	42a2      	cmp	r2, r4
 80235b4:	d306      	bcc.n	80235c4 <pm_create_device_list+0x3c>
 80235b6:	2800      	cmp	r0, #0
 80235b8:	d000      	beq.n	80235bc <pm_create_device_list+0x34>
 80235ba:	8029      	strh	r1, [r5, #0]
		}
	}
}
 80235bc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		core_dev++;
 80235be:	3301      	adds	r3, #1
 80235c0:	b29b      	uxth	r3, r3
 80235c2:	e7e9      	b.n	8023598 <pm_create_device_list+0x10>
		if (dev->pm_control == NULL) {
 80235c4:	0154      	lsls	r4, r2, #5
 80235c6:	1934      	adds	r4, r6, r4
 80235c8:	69a4      	ldr	r4, [r4, #24]
 80235ca:	2c00      	cmp	r4, #0
 80235cc:	d006      	beq.n	80235dc <pm_create_device_list+0x54>
		if (cdi == core_dev) {
 80235ce:	2b00      	cmp	r3, #0
 80235d0:	d104      	bne.n	80235dc <pm_create_device_list+0x54>
			pm_devices[num_pm++] = pmi;
 80235d2:	1c48      	adds	r0, r1, #1
 80235d4:	0049      	lsls	r1, r1, #1
 80235d6:	53ca      	strh	r2, [r1, r7]
 80235d8:	b281      	uxth	r1, r0
 80235da:	4660      	mov	r0, ip
	for (pmi = 0; pmi < count; pmi++) {
 80235dc:	3201      	adds	r2, #1
 80235de:	b292      	uxth	r2, r2
 80235e0:	e7e6      	b.n	80235b0 <pm_create_device_list+0x28>
 80235e2:	46c0      	nop			; (mov r8, r8)
 80235e4:	200085cc 	.word	0x200085cc
 80235e8:	0803134c 	.word	0x0803134c
 80235ec:	200098e8 	.word	0x200098e8
 80235f0:	200098ec 	.word	0x200098ec

080235f4 <_pm_devices>:
	num_susp = 0;
 80235f4:	2300      	movs	r3, #0
{
 80235f6:	b570      	push	{r4, r5, r6, lr}
 80235f8:	0005      	movs	r5, r0
	num_susp = 0;
 80235fa:	4e0f      	ldr	r6, [pc, #60]	; (8023638 <_pm_devices+0x44>)
 80235fc:	8033      	strh	r3, [r6, #0]
	for (int i = num_pm - 1; i >= 0; i--) {
 80235fe:	4b0f      	ldr	r3, [pc, #60]	; (802363c <_pm_devices+0x48>)
 8023600:	881c      	ldrh	r4, [r3, #0]
 8023602:	3c01      	subs	r4, #1
 8023604:	1c63      	adds	r3, r4, #1
 8023606:	d101      	bne.n	802360c <_pm_devices+0x18>
	return 0;
 8023608:	2000      	movs	r0, #0
}
 802360a:	bd70      	pop	{r4, r5, r6, pc}
		const struct device *dev = &all_devices[idx];
 802360c:	4b0c      	ldr	r3, [pc, #48]	; (8023640 <_pm_devices+0x4c>)
		device_idx_t idx = pm_devices[i];
 802360e:	0062      	lsls	r2, r4, #1
		const struct device *dev = &all_devices[idx];
 8023610:	5ad3      	ldrh	r3, [r2, r3]
 8023612:	4a0c      	ldr	r2, [pc, #48]	; (8023644 <_pm_devices+0x50>)
 8023614:	015b      	lsls	r3, r3, #5
 8023616:	6810      	ldr	r0, [r2, #0]
		rc = pm_device_state_set(dev, state, NULL, NULL);
 8023618:	0029      	movs	r1, r5
		const struct device *dev = &all_devices[idx];
 802361a:	18c0      	adds	r0, r0, r3
		rc = pm_device_state_set(dev, state, NULL, NULL);
 802361c:	2300      	movs	r3, #0
 802361e:	001a      	movs	r2, r3
 8023620:	f00b fb8f 	bl	802ed42 <pm_device_state_set>
		if ((rc != -ENOTSUP) && (rc != 0)) {
 8023624:	0003      	movs	r3, r0
 8023626:	3386      	adds	r3, #134	; 0x86
 8023628:	d001      	beq.n	802362e <_pm_devices+0x3a>
 802362a:	2800      	cmp	r0, #0
 802362c:	d1ed      	bne.n	802360a <_pm_devices+0x16>
		++num_susp;
 802362e:	8833      	ldrh	r3, [r6, #0]
 8023630:	3301      	adds	r3, #1
 8023632:	8033      	strh	r3, [r6, #0]
 8023634:	e7e5      	b.n	8023602 <_pm_devices+0xe>
 8023636:	46c0      	nop			; (mov r8, r8)
 8023638:	200098ea 	.word	0x200098ea
 802363c:	200098e8 	.word	0x200098e8
 8023640:	200098ec 	.word	0x200098ec
 8023644:	200085cc 	.word	0x200085cc

08023648 <pm_resume_devices>:
{
 8023648:	b570      	push	{r4, r5, r6, lr}
	device_idx_t pmi = num_pm - num_susp;
 802364a:	4b0d      	ldr	r3, [pc, #52]	; (8023680 <pm_resume_devices+0x38>)
 802364c:	4d0d      	ldr	r5, [pc, #52]	; (8023684 <pm_resume_devices+0x3c>)
 802364e:	881a      	ldrh	r2, [r3, #0]
 8023650:	882c      	ldrh	r4, [r5, #0]
 8023652:	1aa4      	subs	r4, r4, r2
	num_susp = 0;
 8023654:	2200      	movs	r2, #0
	device_idx_t pmi = num_pm - num_susp;
 8023656:	b2a4      	uxth	r4, r4
	num_susp = 0;
 8023658:	801a      	strh	r2, [r3, #0]
	while (pmi < num_pm) {
 802365a:	882b      	ldrh	r3, [r5, #0]
 802365c:	42a3      	cmp	r3, r4
 802365e:	d800      	bhi.n	8023662 <pm_resume_devices+0x1a>
}
 8023660:	bd70      	pop	{r4, r5, r6, pc}
		pm_device_state_set(&all_devices[idx],
 8023662:	4b09      	ldr	r3, [pc, #36]	; (8023688 <pm_resume_devices+0x40>)
		device_idx_t idx = pm_devices[pmi];
 8023664:	0062      	lsls	r2, r4, #1
		pm_device_state_set(&all_devices[idx],
 8023666:	5ad3      	ldrh	r3, [r2, r3]
 8023668:	4a08      	ldr	r2, [pc, #32]	; (802368c <pm_resume_devices+0x44>)
 802366a:	015b      	lsls	r3, r3, #5
 802366c:	6810      	ldr	r0, [r2, #0]
 802366e:	2101      	movs	r1, #1
 8023670:	18c0      	adds	r0, r0, r3
 8023672:	2300      	movs	r3, #0
		++pmi;
 8023674:	3401      	adds	r4, #1
		pm_device_state_set(&all_devices[idx],
 8023676:	001a      	movs	r2, r3
 8023678:	f00b fb63 	bl	802ed42 <pm_device_state_set>
		++pmi;
 802367c:	b2a4      	uxth	r4, r4
 802367e:	e7ec      	b.n	802365a <pm_resume_devices+0x12>
 8023680:	200098ea 	.word	0x200098ea
 8023684:	200098e8 	.word	0x200098e8
 8023688:	200098ec 	.word	0x200098ec
 802368c:	200085cc 	.word	0x200085cc

08023690 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 8023690:	b510      	push	{r4, lr}
 8023692:	4807      	ldr	r0, [pc, #28]	; (80236b0 <uart_console_init+0x20>)
 8023694:	f009 f9b4 	bl	802ca00 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 8023698:	4b06      	ldr	r3, [pc, #24]	; (80236b4 <uart_console_init+0x24>)
	__stdout_hook_install(console_out);
 802369a:	4c07      	ldr	r4, [pc, #28]	; (80236b8 <uart_console_init+0x28>)
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 802369c:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
 802369e:	0020      	movs	r0, r4
 80236a0:	f008 fc70 	bl	802bf84 <__stdout_hook_install>
	__printk_hook_install(console_out);
 80236a4:	0020      	movs	r0, r4
 80236a6:	f7fe fd93 	bl	80221d0 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
 80236aa:	2000      	movs	r0, #0
 80236ac:	bd10      	pop	{r4, pc}
 80236ae:	46c0      	nop			; (mov r8, r8)
 80236b0:	0803193f 	.word	0x0803193f
 80236b4:	200085d0 	.word	0x200085d0
 80236b8:	080236bd 	.word	0x080236bd

080236bc <console_out>:
{
 80236bc:	b570      	push	{r4, r5, r6, lr}
 80236be:	0004      	movs	r4, r0
 80236c0:	4d07      	ldr	r5, [pc, #28]	; (80236e0 <console_out+0x24>)
	if ('\n' == c) {
 80236c2:	280a      	cmp	r0, #10
 80236c4:	d104      	bne.n	80236d0 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
 80236c6:	6828      	ldr	r0, [r5, #0]
 80236c8:	6883      	ldr	r3, [r0, #8]
 80236ca:	210d      	movs	r1, #13
 80236cc:	685b      	ldr	r3, [r3, #4]
 80236ce:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
 80236d0:	6828      	ldr	r0, [r5, #0]
 80236d2:	6883      	ldr	r3, [r0, #8]
 80236d4:	b2e1      	uxtb	r1, r4
 80236d6:	685b      	ldr	r3, [r3, #4]
 80236d8:	4798      	blx	r3
}
 80236da:	0020      	movs	r0, r4
 80236dc:	bd70      	pop	{r4, r5, r6, pc}
 80236de:	46c0      	nop			; (mov r8, r8)
 80236e0:	200085d0 	.word	0x200085d0

080236e4 <__stm32_exti_isr.isra.0>:
 *
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
 80236e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80236e6:	0004      	movs	r4, r0
 80236e8:	000e      	movs	r6, r1
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 80236ea:	2701      	movs	r7, #1
 80236ec:	00c5      	lsls	r5, r0, #3
 80236ee:	1955      	adds	r5, r2, r5
{
	struct stm32_exti_data *data = dev->data;
	int line;

	/* see which bits are set */
	for (line = min; line < max; line++) {
 80236f0:	42b4      	cmp	r4, r6
 80236f2:	db00      	blt.n	80236f6 <__stm32_exti_isr.isra.0+0x12>
			}

			data->cb[line].cb(line, data->cb[line].data);
		}
	}
}
 80236f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 80236f6:	003b      	movs	r3, r7
 80236f8:	40a3      	lsls	r3, r4
  *         @arg @ref LL_EXTI_LINE_22
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80236fa:	4907      	ldr	r1, [pc, #28]	; (8023718 <__stm32_exti_isr.isra.0+0x34>)
 80236fc:	68ca      	ldr	r2, [r1, #12]
 80236fe:	401a      	ands	r2, r3
		if (stm32_exti_is_pending(line)) {
 8023700:	4293      	cmp	r3, r2
 8023702:	d106      	bne.n	8023712 <__stm32_exti_isr.isra.0+0x2e>
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8023704:	60cb      	str	r3, [r1, #12]
			if (!data->cb[line].cb) {
 8023706:	682b      	ldr	r3, [r5, #0]
 8023708:	2b00      	cmp	r3, #0
 802370a:	d002      	beq.n	8023712 <__stm32_exti_isr.isra.0+0x2e>
			data->cb[line].cb(line, data->cb[line].data);
 802370c:	0020      	movs	r0, r4
 802370e:	6869      	ldr	r1, [r5, #4]
 8023710:	4798      	blx	r3
	for (line = min; line < max; line++) {
 8023712:	3401      	adds	r4, #1
 8023714:	3508      	adds	r5, #8
 8023716:	e7eb      	b.n	80236f0 <__stm32_exti_isr.isra.0+0xc>
 8023718:	58000800 	.word	0x58000800

0802371c <stm32_exti_enable>:
	irqnum = exti_irq_table[line];
 802371c:	4b06      	ldr	r3, [pc, #24]	; (8023738 <stm32_exti_enable+0x1c>)
{
 802371e:	0002      	movs	r2, r0
	irqnum = exti_irq_table[line];
 8023720:	5618      	ldrsb	r0, [r3, r0]
	LL_EXTI_EnableIT_0_31(1 << line);
 8023722:	2301      	movs	r3, #1
 8023724:	4093      	lsls	r3, r2
  SET_BIT(EXTI->IMR1, ExtiLine);
 8023726:	4905      	ldr	r1, [pc, #20]	; (802373c <stm32_exti_enable+0x20>)
{
 8023728:	b510      	push	{r4, lr}
 802372a:	6fcc      	ldr	r4, [r1, #124]	; 0x7c
 802372c:	4323      	orrs	r3, r4
 802372e:	67cb      	str	r3, [r1, #124]	; 0x7c
	irq_enable(irqnum);
 8023730:	f008 f9c8 	bl	802bac4 <arch_irq_enable>
}
 8023734:	bd10      	pop	{r4, pc}
 8023736:	46c0      	nop			; (mov r8, r8)
 8023738:	0803197d 	.word	0x0803197d
 802373c:	58000804 	.word	0x58000804

08023740 <stm32_exti_disable>:
	if (line < 32) {
 8023740:	281f      	cmp	r0, #31
 8023742:	dc05      	bgt.n	8023750 <stm32_exti_disable+0x10>
		LL_EXTI_DisableIT_0_31(1 << line);
 8023744:	2201      	movs	r2, #1
 8023746:	4082      	lsls	r2, r0
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8023748:	4902      	ldr	r1, [pc, #8]	; (8023754 <stm32_exti_disable+0x14>)
 802374a:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
 802374c:	4393      	bics	r3, r2
 802374e:	67cb      	str	r3, [r1, #124]	; 0x7c
}
 8023750:	4770      	bx	lr
 8023752:	46c0      	nop			; (mov r8, r8)
 8023754:	58000804 	.word	0x58000804

08023758 <stm32_exti_trigger>:
{
 8023758:	b510      	push	{r4, lr}
 802375a:	0004      	movs	r4, r0
 802375c:	0008      	movs	r0, r1
 802375e:	2903      	cmp	r1, #3
 8023760:	d80c      	bhi.n	802377c <stm32_exti_trigger+0x24>
 8023762:	2301      	movs	r3, #1
 8023764:	4a10      	ldr	r2, [pc, #64]	; (80237a8 <stm32_exti_trigger+0x50>)
 8023766:	f7fc fcb5 	bl	80200d4 <__gnu_thumb1_case_uqi>
 802376a:	0a02      	.short	0x0a02
 802376c:	160e      	.short	0x160e
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 802376e:	40a3      	lsls	r3, r4
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8023770:	6811      	ldr	r1, [r2, #0]
 8023772:	4399      	bics	r1, r3
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8023774:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8023776:	6851      	ldr	r1, [r2, #4]
 8023778:	4399      	bics	r1, r3
 802377a:	6051      	str	r1, [r2, #4]
}
 802377c:	bd10      	pop	{r4, pc}
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 802377e:	40a3      	lsls	r3, r4
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8023780:	6811      	ldr	r1, [r2, #0]
 8023782:	4319      	orrs	r1, r3
 8023784:	e7f6      	b.n	8023774 <stm32_exti_trigger+0x1c>
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8023786:	40a3      	lsls	r3, r4
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8023788:	6851      	ldr	r1, [r2, #4]
 802378a:	4319      	orrs	r1, r3
 802378c:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 802378e:	6811      	ldr	r1, [r2, #0]
 8023790:	4399      	bics	r1, r3
 8023792:	6011      	str	r1, [r2, #0]
}
 8023794:	e7f2      	b.n	802377c <stm32_exti_trigger+0x24>
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8023796:	40a3      	lsls	r3, r4
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8023798:	6811      	ldr	r1, [r2, #0]
 802379a:	4319      	orrs	r1, r3
 802379c:	6011      	str	r1, [r2, #0]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 802379e:	6851      	ldr	r1, [r2, #4]
 80237a0:	430b      	orrs	r3, r1
 80237a2:	6053      	str	r3, [r2, #4]
}
 80237a4:	e7ea      	b.n	802377c <stm32_exti_trigger+0x24>
 80237a6:	46c0      	nop			; (mov r8, r8)
 80237a8:	58000800 	.word	0x58000800

080237ac <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 80237ac:	4b06      	ldr	r3, [pc, #24]	; (80237c8 <stm32_exti_set_callback+0x1c>)
{
 80237ae:	b510      	push	{r4, lr}
	if (data->cb[line].cb) {
 80237b0:	00c4      	lsls	r4, r0, #3
 80237b2:	58e0      	ldr	r0, [r4, r3]
 80237b4:	2800      	cmp	r0, #0
 80237b6:	d103      	bne.n	80237c0 <stm32_exti_set_callback+0x14>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 80237b8:	50e1      	str	r1, [r4, r3]
	data->cb[line].data = arg;
 80237ba:	191b      	adds	r3, r3, r4
 80237bc:	605a      	str	r2, [r3, #4]

	return 0;
}
 80237be:	bd10      	pop	{r4, pc}
		return -EBUSY;
 80237c0:	2010      	movs	r0, #16
 80237c2:	4240      	negs	r0, r0
 80237c4:	e7fb      	b.n	80237be <stm32_exti_set_callback+0x12>
 80237c6:	46c0      	nop			; (mov r8, r8)
 80237c8:	20008630 	.word	0x20008630

080237cc <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 80237cc:	2200      	movs	r2, #0
 80237ce:	4b03      	ldr	r3, [pc, #12]	; (80237dc <stm32_exti_unset_callback+0x10>)
 80237d0:	00c0      	lsls	r0, r0, #3
 80237d2:	50c2      	str	r2, [r0, r3]
	data->cb[line].data = NULL;
 80237d4:	181b      	adds	r3, r3, r0
 80237d6:	605a      	str	r2, [r3, #4]
}
 80237d8:	4770      	bx	lr
 80237da:	46c0      	nop			; (mov r8, r8)
 80237dc:	20008630 	.word	0x20008630

080237e0 <stm32_clock_control_get_subsys_rate>:
	uint32_t apb2_clock = get_bus_clock(ahb_clock, STM32_APB2_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 80237e0:	680b      	ldr	r3, [r1, #0]
 80237e2:	2b04      	cmp	r3, #4
 80237e4:	d901      	bls.n	80237ea <stm32_clock_control_get_subsys_rate+0xa>
 80237e6:	2b06      	cmp	r3, #6
 80237e8:	d104      	bne.n	80237f4 <stm32_clock_control_get_subsys_rate+0x14>
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 80237ea:	2000      	movs	r0, #0
	uint32_t ahb_clock = SystemCoreClock;
 80237ec:	4b03      	ldr	r3, [pc, #12]	; (80237fc <stm32_clock_control_get_subsys_rate+0x1c>)
 80237ee:	681b      	ldr	r3, [r3, #0]
 80237f0:	6013      	str	r3, [r2, #0]
}
 80237f2:	4770      	bx	lr
	switch (pclken->bus) {
 80237f4:	2086      	movs	r0, #134	; 0x86
 80237f6:	4240      	negs	r0, r0
 80237f8:	e7fb      	b.n	80237f2 <stm32_clock_control_get_subsys_rate+0x12>
 80237fa:	46c0      	nop			; (mov r8, r8)
 80237fc:	200080c4 	.word	0x200080c4

08023800 <stm32_clock_control_init>:
	clk_init->CPU1CLKDivider = ahb_prescaler(STM32_CPU1_PRESCALER);
 8023800:	2300      	movs	r3, #0
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 8023802:	b510      	push	{r4, lr}
 8023804:	b088      	sub	sp, #32
	clk_init->CPU1CLKDivider = ahb_prescaler(STM32_CPU1_PRESCALER);
 8023806:	9303      	str	r3, [sp, #12]
	clk_init->CPU2CLKDivider = ahb_prescaler(STM32_CPU2_PRESCALER);
 8023808:	9304      	str	r3, [sp, #16]
	clk_init->AHB3CLKDivider = ahb_prescaler(STM32_AHB3_PRESCALER);
 802380a:	9305      	str	r3, [sp, #20]
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 802380c:	9306      	str	r3, [sp, #24]
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 802380e:	9307      	str	r3, [sp, #28]
#else
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
#endif /* CONFIG_SOC_SERIES_STM32WBX */

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8023810:	f00b fb74 	bl	802eefc <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8023814:	4668      	mov	r0, sp
 8023816:	f00b fb69 	bl	802eeec <config_pll_init>
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 802381a:	23b0      	movs	r3, #176	; 0xb0
 802381c:	2180      	movs	r1, #128	; 0x80
 802381e:	05db      	lsls	r3, r3, #23
 8023820:	681a      	ldr	r2, [r3, #0]
 8023822:	00c9      	lsls	r1, r1, #3
 8023824:	420a      	tst	r2, r1
 8023826:	d107      	bne.n	8023838 <stm32_clock_control_init+0x38>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8023828:	2280      	movs	r2, #128	; 0x80
 802382a:	6818      	ldr	r0, [r3, #0]
 802382c:	0052      	lsls	r2, r2, #1
 802382e:	4302      	orrs	r2, r0
 8023830:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8023832:	681a      	ldr	r2, [r3, #0]
 8023834:	420a      	tst	r2, r1
 8023836:	d0fc      	beq.n	8023832 <stm32_clock_control_init+0x32>
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8023838:	24b0      	movs	r4, #176	; 0xb0
 802383a:	2203      	movs	r2, #3
 802383c:	05e4      	lsls	r4, r4, #23
 802383e:	68a3      	ldr	r3, [r4, #8]
 8023840:	4393      	bics	r3, r2
 8023842:	001a      	movs	r2, r3
 8023844:	2301      	movs	r3, #1
 8023846:	4313      	orrs	r3, r2
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8023848:	22f0      	movs	r2, #240	; 0xf0
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 802384a:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 802384c:	68a3      	ldr	r3, [r4, #8]
 802384e:	4393      	bics	r3, r2
 8023850:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8023852:	3ae4      	subs	r2, #228	; 0xe4
 8023854:	68a3      	ldr	r3, [r4, #8]
 8023856:	4013      	ands	r3, r2
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8023858:	2b04      	cmp	r3, #4
 802385a:	d1fb      	bne.n	8023854 <stm32_clock_control_init+0x54>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 802385c:	6823      	ldr	r3, [r4, #0]
 802385e:	4a0c      	ldr	r2, [pc, #48]	; (8023890 <stm32_clock_control_init+0x90>)

	/* Switch to PLL with HSE as clock source */
#ifdef CONFIG_SOC_SERIES_STM32WLX
	LL_RCC_HSE_EnableTcxo();
#endif
	LL_PLL_ConfigSystemClock_HSE(
 8023860:	4668      	mov	r0, sp
 8023862:	4013      	ands	r3, r2
 8023864:	6023      	str	r3, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8023866:	2380      	movs	r3, #128	; 0x80
 8023868:	6822      	ldr	r2, [r4, #0]
 802386a:	039b      	lsls	r3, r3, #14
 802386c:	4313      	orrs	r3, r2
 802386e:	6023      	str	r3, [r4, #0]
 8023870:	a903      	add	r1, sp, #12
 8023872:	f009 f833 	bl	802c8dc <LL_PLL_ConfigSystemClock_HSE>

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8023876:	2000      	movs	r0, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8023878:	6823      	ldr	r3, [r4, #0]
 802387a:	4a06      	ldr	r2, [pc, #24]	; (8023894 <stm32_clock_control_init+0x94>)
 802387c:	4013      	ands	r3, r2
 802387e:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8023880:	6823      	ldr	r3, [r4, #0]
 8023882:	3203      	adds	r2, #3
 8023884:	32ff      	adds	r2, #255	; 0xff
 8023886:	4393      	bics	r3, r2
 8023888:	6023      	str	r3, [r4, #0]
 802388a:	b008      	add	sp, #32
 802388c:	bd10      	pop	{r4, pc}
 802388e:	46c0      	nop			; (mov r8, r8)
 8023890:	feffffff 	.word	0xfeffffff
 8023894:	fffffeff 	.word	0xfffffeff

08023898 <stm32_dt_pinctrl_configure>:
 *
 * @return 0 on success, -EINVAL otherwise
 */
int stm32_dt_pinctrl_configure(const struct soc_gpio_pinctrl *pinctrl,
			       size_t list_size, uint32_t base)
{
 8023898:	b5f0      	push	{r4, r5, r6, r7, lr}
 802389a:	b085      	sub	sp, #20
 802389c:	0004      	movs	r4, r0
 802389e:	9102      	str	r1, [sp, #8]
	const struct device *port_device;
	uint32_t pin, mux;
	uint32_t func = 0;
	int ret = 0;

	if (!list_size) {
 80238a0:	2900      	cmp	r1, #0
 80238a2:	d102      	bne.n	80238aa <stm32_dt_pinctrl_configure+0x12>
		/* Empty pinctrl. Exit */
		return 0;
 80238a4:	2000      	movs	r0, #0

		stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
	}

	return 0;
}
 80238a6:	b005      	add	sp, #20
 80238a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (int i = 0; i < list_size; i++) {
 80238aa:	2600      	movs	r6, #0
	uint32_t func = 0;
 80238ac:	9601      	str	r6, [sp, #4]
		if (STM32_DT_PINMUX_FUNC(mux) < ANALOG) {
 80238ae:	23f0      	movs	r3, #240	; 0xf0
		mux = pinctrl[i].pinmux;
 80238b0:	6825      	ldr	r5, [r4, #0]
		if (STM32_DT_PINMUX_FUNC(mux) < ANALOG) {
 80238b2:	421d      	tst	r5, r3
 80238b4:	d126      	bne.n	8023904 <stm32_dt_pinctrl_configure+0x6c>
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
 80238b6:	6862      	ldr	r2, [r4, #4]
 80238b8:	3bd0      	subs	r3, #208	; 0xd0
 80238ba:	431a      	orrs	r2, r3
 80238bc:	9201      	str	r2, [sp, #4]
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 80238be:	22ff      	movs	r2, #255	; 0xff
 80238c0:	0b2b      	lsrs	r3, r5, #12
 80238c2:	011b      	lsls	r3, r3, #4
 80238c4:	4013      	ands	r3, r2
 80238c6:	0a29      	lsrs	r1, r5, #8
 80238c8:	3af0      	subs	r2, #240	; 0xf0
 80238ca:	4011      	ands	r1, r2
		port_device = gpio_ports[STM32_PORT(pin)];
 80238cc:	4a11      	ldr	r2, [pc, #68]	; (8023914 <stm32_dt_pinctrl_configure+0x7c>)
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 80238ce:	4319      	orrs	r1, r3
		port_device = gpio_ports[STM32_PORT(pin)];
 80238d0:	089b      	lsrs	r3, r3, #2
 80238d2:	589f      	ldr	r7, [r3, r2]
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 80238d4:	9103      	str	r1, [sp, #12]
		ret = gpio_stm32_clock_request(port_device, true);
 80238d6:	0038      	movs	r0, r7
 80238d8:	2101      	movs	r1, #1
 80238da:	f008 fc29 	bl	802c130 <gpio_stm32_clock_request>
		if (ret != 0) {
 80238de:	2800      	cmp	r0, #0
 80238e0:	d1e1      	bne.n	80238a6 <stm32_dt_pinctrl_configure+0xe>
		stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
 80238e2:	23ff      	movs	r3, #255	; 0xff
 80238e4:	402b      	ands	r3, r5
	if (port_device == NULL) {
 80238e6:	2f00      	cmp	r7, #0
 80238e8:	d006      	beq.n	80238f8 <stm32_dt_pinctrl_configure+0x60>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 80238ea:	220f      	movs	r2, #15
 80238ec:	9903      	ldr	r1, [sp, #12]
 80238ee:	0038      	movs	r0, r7
 80238f0:	4011      	ands	r1, r2
 80238f2:	9a01      	ldr	r2, [sp, #4]
 80238f4:	f00c fddc 	bl	80304b0 <gpio_stm32_configure>
	for (int i = 0; i < list_size; i++) {
 80238f8:	9b02      	ldr	r3, [sp, #8]
 80238fa:	3601      	adds	r6, #1
 80238fc:	3408      	adds	r4, #8
 80238fe:	429e      	cmp	r6, r3
 8023900:	d1d5      	bne.n	80238ae <stm32_dt_pinctrl_configure+0x16>
 8023902:	e7cf      	b.n	80238a4 <stm32_dt_pinctrl_configure+0xc>
		} else if (STM32_DT_PINMUX_FUNC(mux) == ANALOG) {
 8023904:	23ff      	movs	r3, #255	; 0xff
 8023906:	402b      	ands	r3, r5
 8023908:	2b10      	cmp	r3, #16
 802390a:	d1d8      	bne.n	80238be <stm32_dt_pinctrl_configure+0x26>
			func = STM32_MODER_ANALOG_MODE;
 802390c:	3320      	adds	r3, #32
 802390e:	9301      	str	r3, [sp, #4]
 8023910:	e7d5      	b.n	80238be <stm32_dt_pinctrl_configure+0x26>
 8023912:	46c0      	nop			; (mov r8, r8)
 8023914:	08031350 	.word	0x08031350

08023918 <z_clock_lptim_getcounter>:
  * @param  LPTIMx Low-Power Timer instance
  * @retval Counter value
  */
__STATIC_INLINE uint32_t LL_LPTIM_GetCounter(LPTIM_TypeDef *LPTIMx)
{
  return (uint32_t)(READ_BIT(LPTIMx->CNT, LPTIM_CNT_CNT));
 8023918:	4b04      	ldr	r3, [pc, #16]	; (802392c <z_clock_lptim_getcounter+0x14>)
 802391a:	69d8      	ldr	r0, [r3, #28]
 802391c:	b280      	uxth	r0, r0
 802391e:	69d9      	ldr	r1, [r3, #28]
 8023920:	0002      	movs	r2, r0
 8023922:	b288      	uxth	r0, r1
	 */
	lp_time = LL_LPTIM_GetCounter(LPTIM1);
	do {
		lp_time_prev_read = lp_time;
		lp_time = LL_LPTIM_GetCounter(LPTIM1);
	} while (lp_time != lp_time_prev_read);
 8023924:	4282      	cmp	r2, r0
 8023926:	d1fa      	bne.n	802391e <z_clock_lptim_getcounter+0x6>
	return lp_time;
}
 8023928:	4770      	bx	lr
 802392a:	46c0      	nop			; (mov r8, r8)
 802392c:	40007c00 	.word	0x40007c00

08023930 <lptim_irq_handler>:
  * @param  LPTIMx Low-Power Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPTIM_IsActiveFlag_ARRM(LPTIM_TypeDef *LPTIMx)
{
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 8023930:	2202      	movs	r2, #2
 8023932:	4b0f      	ldr	r3, [pc, #60]	; (8023970 <lptim_irq_handler+0x40>)
{
 8023934:	b510      	push	{r4, lr}
 8023936:	6819      	ldr	r1, [r3, #0]
 8023938:	4211      	tst	r1, r2
 802393a:	d017      	beq.n	802396c <lptim_irq_handler+0x3c>
  * @param  LPTIMx Low-Power Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPTIM_IsEnabledIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
  return (((READ_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE) == LPTIM_IER_ARRMIE) ? 1UL : 0UL));
 802393c:	6899      	ldr	r1, [r3, #8]
 802393e:	4211      	tst	r1, r2
 8023940:	d014      	beq.n	802396c <lptim_irq_handler+0x3c>
	__asm__ volatile("mrs %0, PRIMASK;"
 8023942:	f3ef 8110 	mrs	r1, PRIMASK
 8023946:	b672      	cpsid	i
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 8023948:	6858      	ldr	r0, [r3, #4]
 802394a:	4302      	orrs	r2, r0
 802394c:	605a      	str	r2, [r3, #4]
  return (uint32_t)(READ_BIT(LPTIMx->ARR, LPTIM_ARR_ARR));
 802394e:	6998      	ldr	r0, [r3, #24]
		accumulated_lptim_cnt += autoreload;
 8023950:	4a08      	ldr	r2, [pc, #32]	; (8023974 <lptim_irq_handler+0x44>)
 8023952:	b280      	uxth	r0, r0
 8023954:	6813      	ldr	r3, [r2, #0]
		uint32_t autoreload = LL_LPTIM_GetAutoReload(LPTIM1) + 1;
 8023956:	3001      	adds	r0, #1
		accumulated_lptim_cnt += autoreload;
 8023958:	181b      	adds	r3, r3, r0
 802395a:	6013      	str	r3, [r2, #0]
	if (key != 0U) {
 802395c:	2900      	cmp	r1, #0
 802395e:	d102      	bne.n	8023966 <lptim_irq_handler+0x36>
	__asm__ volatile(
 8023960:	b662      	cpsie	i
 8023962:	f3bf 8f6f 	isb	sy
		uint32_t dticks = (autoreload
 8023966:	08c0      	lsrs	r0, r0, #3
		sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL)
 8023968:	f009 fde6 	bl	802d538 <sys_clock_announce>
}
 802396c:	bd10      	pop	{r4, pc}
 802396e:	46c0      	nop			; (mov r8, r8)
 8023970:	40007c00 	.word	0x40007c00
 8023974:	20008768 	.word	0x20008768

08023978 <sys_clock_driver_init>:
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8023978:	23b0      	movs	r3, #176	; 0xb0
 802397a:	2280      	movs	r2, #128	; 0x80
 802397c:	05db      	lsls	r3, r3, #23
{
 802397e:	b513      	push	{r0, r1, r4, lr}
 8023980:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8023982:	0612      	lsls	r2, r2, #24
 8023984:	430a      	orrs	r2, r1
 8023986:	659a      	str	r2, [r3, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8023988:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 802398a:	2402      	movs	r4, #2
 802398c:	0fd2      	lsrs	r2, r2, #31
 802398e:	07d2      	lsls	r2, r2, #31
 8023990:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8023992:	9a01      	ldr	r2, [sp, #4]

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8023994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8023996:	0052      	lsls	r2, r2, #1
 8023998:	0852      	lsrs	r2, r2, #1
 802399a:	639a      	str	r2, [r3, #56]	; 0x38
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 802399c:	2380      	movs	r3, #128	; 0x80
 802399e:	4a31      	ldr	r2, [pc, #196]	; (8023a64 <sys_clock_driver_init+0xec>)
 80239a0:	005b      	lsls	r3, r3, #1
 80239a2:	6811      	ldr	r1, [r2, #0]
 80239a4:	430b      	orrs	r3, r1
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80239a6:	2104      	movs	r1, #4
 80239a8:	6013      	str	r3, [r2, #0]
 80239aa:	4b2f      	ldr	r3, [pc, #188]	; (8023a68 <sys_clock_driver_init+0xf0>)
 80239ac:	681a      	ldr	r2, [r3, #0]
 80239ae:	438a      	bics	r2, r1
 80239b0:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80239b2:	2201      	movs	r2, #1
 80239b4:	6819      	ldr	r1, [r3, #0]
 80239b6:	430a      	orrs	r2, r1
 80239b8:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80239ba:	681a      	ldr	r2, [r3, #0]
 80239bc:	4222      	tst	r2, r4
 80239be:	d0fc      	beq.n	80239ba <sys_clock_driver_init+0x42>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80239c0:	2280      	movs	r2, #128	; 0x80
 80239c2:	6819      	ldr	r1, [r3, #0]
	IRQ_CONNECT(DT_IRQN(DT_NODELABEL(lptim1)),
 80239c4:	200b      	movs	r0, #11
 80239c6:	430a      	orrs	r2, r1
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80239c8:	21c0      	movs	r1, #192	; 0xc0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80239ca:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80239cc:	4a27      	ldr	r2, [pc, #156]	; (8023a6c <sys_clock_driver_init+0xf4>)
 80239ce:	0309      	lsls	r1, r1, #12
 80239d0:	6813      	ldr	r3, [r2, #0]
 80239d2:	430b      	orrs	r3, r1
 80239d4:	6013      	str	r3, [r2, #0]
 80239d6:	2200      	movs	r2, #0
 80239d8:	0011      	movs	r1, r2
 80239da:	f008 f87f 	bl	802badc <z_arm_irq_priority_set>
	irq_enable(DT_IRQN(DT_NODELABEL(lptim1)));
 80239de:	200b      	movs	r0, #11
 80239e0:	f008 f870 	bl	802bac4 <arch_irq_enable>
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 80239e4:	2201      	movs	r2, #1
 80239e6:	4b22      	ldr	r3, [pc, #136]	; (8023a70 <sys_clock_driver_init+0xf8>)
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 80239e8:	4822      	ldr	r0, [pc, #136]	; (8023a74 <sys_clock_driver_init+0xfc>)
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 80239ea:	68d9      	ldr	r1, [r3, #12]
 80239ec:	4391      	bics	r1, r2
 80239ee:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 80239f0:	68d9      	ldr	r1, [r3, #12]
 80239f2:	4001      	ands	r1, r0
 80239f4:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 80239f6:	68d9      	ldr	r1, [r3, #12]
 80239f8:	481f      	ldr	r0, [pc, #124]	; (8023a78 <sys_clock_driver_init+0x100>)
 80239fa:	4001      	ands	r1, r0
 80239fc:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 80239fe:	68d9      	ldr	r1, [r3, #12]
 8023a00:	481e      	ldr	r0, [pc, #120]	; (8023a7c <sys_clock_driver_init+0x104>)
 8023a02:	4001      	ands	r1, r0
 8023a04:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 8023a06:	68d9      	ldr	r1, [r3, #12]
 8023a08:	481d      	ldr	r0, [pc, #116]	; (8023a80 <sys_clock_driver_init+0x108>)
 8023a0a:	4001      	ands	r1, r0
 8023a0c:	60d9      	str	r1, [r3, #12]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TIMOUT);
 8023a0e:	68d9      	ldr	r1, [r3, #12]
 8023a10:	481c      	ldr	r0, [pc, #112]	; (8023a84 <sys_clock_driver_init+0x10c>)
 8023a12:	4001      	ands	r1, r0
 8023a14:	60d9      	str	r1, [r3, #12]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 8023a16:	68d9      	ldr	r1, [r3, #12]
 8023a18:	481b      	ldr	r0, [pc, #108]	; (8023a88 <sys_clock_driver_init+0x110>)
 8023a1a:	4001      	ands	r1, r0
 8023a1c:	60d9      	str	r1, [r3, #12]
  CLEAR_BIT(LPTIMx->IER, LPTIM_IER_CMPMIE);
 8023a1e:	6899      	ldr	r1, [r3, #8]
 8023a20:	4391      	bics	r1, r2
 8023a22:	6099      	str	r1, [r3, #8]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_CMPMCF);
 8023a24:	6859      	ldr	r1, [r3, #4]
 8023a26:	4311      	orrs	r1, r2
 8023a28:	6059      	str	r1, [r3, #4]
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8023a2a:	6899      	ldr	r1, [r3, #8]
 8023a2c:	4321      	orrs	r1, r4
 8023a2e:	6099      	str	r1, [r3, #8]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 8023a30:	6859      	ldr	r1, [r3, #4]
 8023a32:	430c      	orrs	r4, r1
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARROKCF);
 8023a34:	2110      	movs	r1, #16
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 8023a36:	605c      	str	r4, [r3, #4]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARROKCF);
 8023a38:	6858      	ldr	r0, [r3, #4]
 8023a3a:	4301      	orrs	r1, r0
	accumulated_lptim_cnt = 0;
 8023a3c:	2000      	movs	r0, #0
 8023a3e:	6059      	str	r1, [r3, #4]
 8023a40:	4912      	ldr	r1, [pc, #72]	; (8023a8c <sys_clock_driver_init+0x114>)
 8023a42:	6008      	str	r0, [r1, #0]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 8023a44:	6919      	ldr	r1, [r3, #16]
 8023a46:	430a      	orrs	r2, r1
 8023a48:	611a      	str	r2, [r3, #16]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 8023a4a:	699a      	ldr	r2, [r3, #24]
 8023a4c:	4910      	ldr	r1, [pc, #64]	; (8023a90 <sys_clock_driver_init+0x118>)
 8023a4e:	430a      	orrs	r2, r1
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 8023a50:	2106      	movs	r1, #6
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 8023a52:	619a      	str	r2, [r3, #24]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 8023a54:	691a      	ldr	r2, [r3, #16]
 8023a56:	438a      	bics	r2, r1
 8023a58:	0011      	movs	r1, r2
 8023a5a:	2204      	movs	r2, #4
 8023a5c:	430a      	orrs	r2, r1
 8023a5e:	611a      	str	r2, [r3, #16]
}
 8023a60:	bd16      	pop	{r1, r2, r4, pc}
 8023a62:	46c0      	nop			; (mov r8, r8)
 8023a64:	58000400 	.word	0x58000400
 8023a68:	58000090 	.word	0x58000090
 8023a6c:	58000088 	.word	0x58000088
 8023a70:	40007c00 	.word	0x40007c00
 8023a74:	fffff1ff 	.word	0xfffff1ff
 8023a78:	ffdfffff 	.word	0xffdfffff
 8023a7c:	ffbfffff 	.word	0xffbfffff
 8023a80:	ff7fffff 	.word	0xff7fffff
 8023a84:	fff7ffff 	.word	0xfff7ffff
 8023a88:	fff9ffff 	.word	0xfff9ffff
 8023a8c:	20008768 	.word	0x20008768
 8023a90:	0000ffff 	.word	0x0000ffff

08023a94 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	if (ticks == K_TICKS_FOREVER) {
 8023a94:	23b0      	movs	r3, #176	; 0xb0
{
 8023a96:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023a98:	05db      	lsls	r3, r3, #23
 8023a9a:	0004      	movs	r4, r0
	if (ticks == K_TICKS_FOREVER) {
 8023a9c:	1c42      	adds	r2, r0, #1
 8023a9e:	d104      	bne.n	8023aaa <sys_clock_set_timeout+0x16>
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8023aa0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8023aa2:	0052      	lsls	r2, r2, #1
 8023aa4:	0852      	lsrs	r2, r2, #1
 8023aa6:	659a      	str	r2, [r3, #88]	; 0x58

	/* run timer and wait for the reload match */
	LL_LPTIM_SetAutoReload(LPTIM1, next_arr);

	k_spin_unlock(&lock, key);
}
 8023aa8:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == (Periphs)) ? 1UL : 0UL);
 8023aaa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8023aac:	2a00      	cmp	r2, #0
 8023aae:	db09      	blt.n	8023ac4 <sys_clock_set_timeout+0x30>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8023ab0:	2280      	movs	r2, #128	; 0x80
 8023ab2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8023ab4:	0612      	lsls	r2, r2, #24
 8023ab6:	430a      	orrs	r2, r1
 8023ab8:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8023aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023abc:	0fdb      	lsrs	r3, r3, #31
 8023abe:	07db      	lsls	r3, r3, #31
 8023ac0:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8023ac2:	9b01      	ldr	r3, [sp, #4]
	__asm__ volatile("mrs %0, PRIMASK;"
 8023ac4:	f3ef 8510 	mrs	r5, PRIMASK
 8023ac8:	b672      	cpsid	i
	uint32_t lp_time = z_clock_lptim_getcounter();
 8023aca:	f7ff ff25 	bl	8023918 <z_clock_lptim_getcounter>
  return (uint32_t)(READ_BIT(LPTIMx->ARR, LPTIM_ARR_ARR));
 8023ace:	491b      	ldr	r1, [pc, #108]	; (8023b3c <sys_clock_set_timeout+0xa8>)
 8023ad0:	698b      	ldr	r3, [r1, #24]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 8023ad2:	680a      	ldr	r2, [r1, #0]
 8023ad4:	0792      	lsls	r2, r2, #30
 8023ad6:	d403      	bmi.n	8023ae0 <sys_clock_set_timeout+0x4c>
  return (uint32_t)(READ_BIT(LPTIMx->ARR, LPTIM_ARR_ARR));
 8023ad8:	b29b      	uxth	r3, r3
	    || ((autoreload - lp_time) < LPTIM_GUARD_VALUE)) {
 8023ada:	1a1b      	subs	r3, r3, r0
 8023adc:	2b01      	cmp	r3, #1
 8023ade:	d805      	bhi.n	8023aec <sys_clock_set_timeout+0x58>
	if (key != 0U) {
 8023ae0:	2d00      	cmp	r5, #0
 8023ae2:	d1e1      	bne.n	8023aa8 <sys_clock_set_timeout+0x14>
	__asm__ volatile(
 8023ae4:	b662      	cpsie	i
 8023ae6:	f3bf 8f6f 	isb	sy
 8023aea:	e7dd      	b.n	8023aa8 <sys_clock_set_timeout+0x14>
	next_arr = (((lp_time * CONFIG_SYS_CLOCK_TICKS_PER_SEC)
 8023aec:	0303      	lsls	r3, r0, #12
			/ LPTIM_CLOCK) + 1) * LPTIM_CLOCK
 8023aee:	0bdb      	lsrs	r3, r3, #15
 8023af0:	3301      	adds	r3, #1
 8023af2:	03db      	lsls	r3, r3, #15
	next_arr = (((lp_time * CONFIG_SYS_CLOCK_TICKS_PER_SEC)
 8023af4:	0b1a      	lsrs	r2, r3, #12
	ticks = CLAMP(ticks - 1, 1, (int32_t)LPTIM_TIMEBASE);
 8023af6:	1e63      	subs	r3, r4, #1
 8023af8:	2480      	movs	r4, #128	; 0x80
 8023afa:	0264      	lsls	r4, r4, #9
 8023afc:	42a3      	cmp	r3, r4
 8023afe:	db17      	blt.n	8023b30 <sys_clock_set_timeout+0x9c>
 8023b00:	4b0f      	ldr	r3, [pc, #60]	; (8023b40 <sys_clock_set_timeout+0xac>)
	next_arr = next_arr + ((uint32_t)(ticks) * LPTIM_CLOCK)
 8023b02:	03db      	lsls	r3, r3, #15
			/ CONFIG_SYS_CLOCK_TICKS_PER_SEC - 1;
 8023b04:	0b1b      	lsrs	r3, r3, #12
	next_arr = next_arr + ((uint32_t)(ticks) * LPTIM_CLOCK)
 8023b06:	3b01      	subs	r3, #1
 8023b08:	189b      	adds	r3, r3, r2
	if (next_arr > LPTIM_TIMEBASE) {
 8023b0a:	42a3      	cmp	r3, r4
 8023b0c:	d214      	bcs.n	8023b38 <sys_clock_set_timeout+0xa4>
	else if (next_arr < (lp_time + LPTIM_GUARD_VALUE)) {
 8023b0e:	3002      	adds	r0, #2
 8023b10:	4298      	cmp	r0, r3
 8023b12:	d200      	bcs.n	8023b16 <sys_clock_set_timeout+0x82>
 8023b14:	0018      	movs	r0, r3
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARROK) == LPTIM_ISR_ARROK) ? 1UL : 0UL));
 8023b16:	2310      	movs	r3, #16
 8023b18:	680a      	ldr	r2, [r1, #0]
 8023b1a:	421a      	tst	r2, r3
 8023b1c:	d0fc      	beq.n	8023b18 <sys_clock_set_timeout+0x84>
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARROKCF);
 8023b1e:	684a      	ldr	r2, [r1, #4]
 8023b20:	4313      	orrs	r3, r2
 8023b22:	604b      	str	r3, [r1, #4]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 8023b24:	698b      	ldr	r3, [r1, #24]
 8023b26:	0c1b      	lsrs	r3, r3, #16
 8023b28:	041b      	lsls	r3, r3, #16
 8023b2a:	4318      	orrs	r0, r3
 8023b2c:	6188      	str	r0, [r1, #24]
 8023b2e:	e7d7      	b.n	8023ae0 <sys_clock_set_timeout+0x4c>
	next_arr = next_arr + ((uint32_t)(ticks) * LPTIM_CLOCK)
 8023b30:	2b00      	cmp	r3, #0
 8023b32:	dce6      	bgt.n	8023b02 <sys_clock_set_timeout+0x6e>
 8023b34:	2301      	movs	r3, #1
 8023b36:	e7e4      	b.n	8023b02 <sys_clock_set_timeout+0x6e>
		next_arr = LPTIM_TIMEBASE;
 8023b38:	4801      	ldr	r0, [pc, #4]	; (8023b40 <sys_clock_set_timeout+0xac>)
 8023b3a:	e7ec      	b.n	8023b16 <sys_clock_set_timeout+0x82>
 8023b3c:	40007c00 	.word	0x40007c00
 8023b40:	0000ffff 	.word	0x0000ffff

08023b44 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
 8023b44:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
 8023b46:	f3ef 8410 	mrs	r4, PRIMASK
 8023b4a:	b672      	cpsid	i
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);

	uint32_t lp_time = z_clock_lptim_getcounter();
 8023b4c:	f7ff fee4 	bl	8023918 <z_clock_lptim_getcounter>
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 8023b50:	2202      	movs	r2, #2
 8023b52:	4b0b      	ldr	r3, [pc, #44]	; (8023b80 <sys_clock_elapsed+0x3c>)
 8023b54:	6819      	ldr	r1, [r3, #0]
 8023b56:	4211      	tst	r1, r2
 8023b58:	d006      	beq.n	8023b68 <sys_clock_elapsed+0x24>
  return (((READ_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE) == LPTIM_IER_ARRMIE) ? 1UL : 0UL));
 8023b5a:	6899      	ldr	r1, [r3, #8]
 8023b5c:	4211      	tst	r1, r2
 8023b5e:	d003      	beq.n	8023b68 <sys_clock_elapsed+0x24>
  return (uint32_t)(READ_BIT(LPTIMx->ARR, LPTIM_ARR_ARR));
 8023b60:	699b      	ldr	r3, [r3, #24]
 8023b62:	b29b      	uxth	r3, r3
	/* In case of counter roll-over, add this value,
	 * even if the irq has not yet been handled
	 */
	if ((LL_LPTIM_IsActiveFlag_ARRM(LPTIM1) != 0)
	  && LL_LPTIM_IsEnabledIT_ARRM(LPTIM1) != 0) {
		lp_time += LL_LPTIM_GetAutoReload(LPTIM1) + 1;
 8023b64:	3301      	adds	r3, #1
 8023b66:	18c0      	adds	r0, r0, r3
	if (key != 0U) {
 8023b68:	2c00      	cmp	r4, #0
 8023b6a:	d102      	bne.n	8023b72 <sys_clock_elapsed+0x2e>
	__asm__ volatile(
 8023b6c:	b662      	cpsie	i
 8023b6e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	/* gives the value of LPTIM1 counter (ms)
	 * since the previous 'announce'
	 */
	uint64_t ret = ((uint64_t)lp_time * CONFIG_SYS_CLOCK_TICKS_PER_SEC) / LPTIM_CLOCK;
 8023b72:	0d03      	lsrs	r3, r0, #20
 8023b74:	0300      	lsls	r0, r0, #12
 8023b76:	045b      	lsls	r3, r3, #17
 8023b78:	0bc0      	lsrs	r0, r0, #15
 8023b7a:	4318      	orrs	r0, r3

	return (uint32_t)(ret);
}
 8023b7c:	bd10      	pop	{r4, pc}
 8023b7e:	46c0      	nop			; (mov r8, r8)
 8023b80:	40007c00 	.word	0x40007c00

08023b84 <stm32_ipcc_mailbox_ipm_set_enabled>:

  /* For now: nothing to be done */
  LOG_DBG("%s %s mailbox\r\n", __func__, enable ? "enable" : "disable");
  if (enable) {
    /* Enable RX and TX interrupts */
    IPCC_EnableIT_TXF(cfg->ipcc);
 8023b84:	6843      	ldr	r3, [r0, #4]
    IPCC_EnableIT_RXO(cfg->ipcc);
    for (i = 0; i < data->num_ch; i++) {
 8023b86:	6902      	ldr	r2, [r0, #16]
                                              int enable) {
 8023b88:	b530      	push	{r4, r5, lr}
    IPCC_EnableIT_TXF(cfg->ipcc);
 8023b8a:	685b      	ldr	r3, [r3, #4]
    for (i = 0; i < data->num_ch; i++) {
 8023b8c:	6810      	ldr	r0, [r2, #0]
  if (enable) {
 8023b8e:	2900      	cmp	r1, #0
 8023b90:	d014      	beq.n	8023bbc <stm32_ipcc_mailbox_ipm_set_enabled+0x38>
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
  SET_BIT(IPCCx->C2CR, IPCC_C2CR_TXFIE);
 8023b92:	2280      	movs	r2, #128	; 0x80
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
  SET_BIT(IPCCx->C2CR, IPCC_C2CR_RXOIE);
 8023b94:	2401      	movs	r4, #1
  SET_BIT(IPCCx->C2CR, IPCC_C2CR_TXFIE);
 8023b96:	6919      	ldr	r1, [r3, #16]
 8023b98:	0252      	lsls	r2, r2, #9
 8023b9a:	430a      	orrs	r2, r1
 8023b9c:	611a      	str	r2, [r3, #16]
  SET_BIT(IPCCx->C2CR, IPCC_C2CR_RXOIE);
 8023b9e:	691a      	ldr	r2, [r3, #16]
 8023ba0:	4322      	orrs	r2, r4
 8023ba2:	611a      	str	r2, [r3, #16]
    for (i = 0; i < data->num_ch; i++) {
 8023ba4:	2200      	movs	r2, #0
 8023ba6:	4282      	cmp	r2, r0
 8023ba8:	d101      	bne.n	8023bae <stm32_ipcc_mailbox_ipm_set_enabled+0x2a>
      IPCC_DisableReceiveChannel(cfg->ipcc, i);
    }
  }

  return 0;
}
 8023baa:	2000      	movs	r0, #0
 8023bac:	bd30      	pop	{r4, r5, pc}
      IPCC_EnableReceiveChannel(cfg->ipcc, i);
 8023bae:	0025      	movs	r5, r4
 8023bb0:	4095      	lsls	r5, r2
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  CLEAR_BIT(IPCCx->C2MR, Channel);
 8023bb2:	6959      	ldr	r1, [r3, #20]
    for (i = 0; i < data->num_ch; i++) {
 8023bb4:	3201      	adds	r2, #1
 8023bb6:	43a9      	bics	r1, r5
 8023bb8:	6159      	str	r1, [r3, #20]
 8023bba:	e7f4      	b.n	8023ba6 <stm32_ipcc_mailbox_ipm_set_enabled+0x22>
  CLEAR_BIT(IPCCx->C2CR, IPCC_C2CR_TXFIE);
 8023bbc:	691a      	ldr	r2, [r3, #16]
 8023bbe:	4c08      	ldr	r4, [pc, #32]	; (8023be0 <stm32_ipcc_mailbox_ipm_set_enabled+0x5c>)
 8023bc0:	4022      	ands	r2, r4
  CLEAR_BIT(IPCCx->C2CR, IPCC_C2CR_RXOIE);
 8023bc2:	2401      	movs	r4, #1
  CLEAR_BIT(IPCCx->C2CR, IPCC_C2CR_TXFIE);
 8023bc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(IPCCx->C2CR, IPCC_C2CR_RXOIE);
 8023bc6:	691a      	ldr	r2, [r3, #16]
 8023bc8:	43a2      	bics	r2, r4
 8023bca:	611a      	str	r2, [r3, #16]
    for (i = 0; i < data->num_ch; i++) {
 8023bcc:	4281      	cmp	r1, r0
 8023bce:	d0ec      	beq.n	8023baa <stm32_ipcc_mailbox_ipm_set_enabled+0x26>
      IPCC_DisableReceiveChannel(cfg->ipcc, i);
 8023bd0:	0022      	movs	r2, r4
 8023bd2:	408a      	lsls	r2, r1
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  SET_BIT(IPCCx->C2MR, Channel);
 8023bd4:	695d      	ldr	r5, [r3, #20]
    for (i = 0; i < data->num_ch; i++) {
 8023bd6:	3101      	adds	r1, #1
 8023bd8:	432a      	orrs	r2, r5
 8023bda:	615a      	str	r2, [r3, #20]
 8023bdc:	e7f6      	b.n	8023bcc <stm32_ipcc_mailbox_ipm_set_enabled+0x48>
 8023bde:	46c0      	nop			; (mov r8, r8)
 8023be0:	fffeffff 	.word	0xfffeffff

08023be4 <stm32_ipcc_mailbox_ipm_send>:
                                       int size) {
 8023be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023be6:	0019      	movs	r1, r3
 8023be8:	0016      	movs	r6, r2
 8023bea:	9d06      	ldr	r5, [sp, #24]
  struct stm32_ipcc_mbx_data *data = dev->data;
 8023bec:	6903      	ldr	r3, [r0, #16]
  const struct stm32_ipcc_mailbox_config *cfg = DEV_CFG(dev);
 8023bee:	6847      	ldr	r7, [r0, #4]
  if (buff == NULL && size != 0) {
 8023bf0:	2900      	cmp	r1, #0
 8023bf2:	d10d      	bne.n	8023c10 <stm32_ipcc_mailbox_ipm_send+0x2c>
 8023bf4:	2d00      	cmp	r5, #0
 8023bf6:	d00b      	beq.n	8023c10 <stm32_ipcc_mailbox_ipm_send+0x2c>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8023bf8:	4b21      	ldr	r3, [pc, #132]	; (8023c80 <stm32_ipcc_mailbox_ipm_send+0x9c>)
 8023bfa:	4922      	ldr	r1, [pc, #136]	; (8023c84 <stm32_ipcc_mailbox_ipm_send+0xa0>)
    LOG_ERR("invalid sending buffer.");
 8023bfc:	4822      	ldr	r0, [pc, #136]	; (8023c88 <stm32_ipcc_mailbox_ipm_send+0xa4>)
 8023bfe:	1ac9      	subs	r1, r1, r3
 8023c00:	2301      	movs	r3, #1
 8023c02:	08c9      	lsrs	r1, r1, #3
 8023c04:	0189      	lsls	r1, r1, #6
 8023c06:	4319      	orrs	r1, r3
 8023c08:	f00a fdc3 	bl	802e792 <log_0>
    return -EINVAL;
 8023c0c:	2016      	movs	r0, #22
 8023c0e:	e00e      	b.n	8023c2e <stm32_ipcc_mailbox_ipm_send+0x4a>
  if (size > cfg->buff_size) {
 8023c10:	697a      	ldr	r2, [r7, #20]
 8023c12:	42aa      	cmp	r2, r5
 8023c14:	d20d      	bcs.n	8023c32 <stm32_ipcc_mailbox_ipm_send+0x4e>
 8023c16:	4b1a      	ldr	r3, [pc, #104]	; (8023c80 <stm32_ipcc_mailbox_ipm_send+0x9c>)
 8023c18:	4a1a      	ldr	r2, [pc, #104]	; (8023c84 <stm32_ipcc_mailbox_ipm_send+0xa0>)
    LOG_ERR("invalid buffer size (%d)\r\n", size);
 8023c1a:	481c      	ldr	r0, [pc, #112]	; (8023c8c <stm32_ipcc_mailbox_ipm_send+0xa8>)
 8023c1c:	1ad2      	subs	r2, r2, r3
 8023c1e:	2301      	movs	r3, #1
 8023c20:	08d2      	lsrs	r2, r2, #3
 8023c22:	0192      	lsls	r2, r2, #6
 8023c24:	0029      	movs	r1, r5
 8023c26:	431a      	orrs	r2, r3
 8023c28:	f00a fdbf 	bl	802e7aa <log_1>
    return -EMSGSIZE;
 8023c2c:	207a      	movs	r0, #122	; 0x7a
    return -EINVAL;
 8023c2e:	4240      	negs	r0, r0
}
 8023c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (id >= data->num_ch) {
 8023c32:	681b      	ldr	r3, [r3, #0]
 8023c34:	42b3      	cmp	r3, r6
 8023c36:	d80b      	bhi.n	8023c50 <stm32_ipcc_mailbox_ipm_send+0x6c>
 8023c38:	4a11      	ldr	r2, [pc, #68]	; (8023c80 <stm32_ipcc_mailbox_ipm_send+0x9c>)
 8023c3a:	4b12      	ldr	r3, [pc, #72]	; (8023c84 <stm32_ipcc_mailbox_ipm_send+0xa0>)
    LOG_ERR("invalid id (%d)\r\n", id);
 8023c3c:	0031      	movs	r1, r6
 8023c3e:	1a9b      	subs	r3, r3, r2
 8023c40:	2201      	movs	r2, #1
 8023c42:	08db      	lsrs	r3, r3, #3
 8023c44:	019b      	lsls	r3, r3, #6
 8023c46:	4812      	ldr	r0, [pc, #72]	; (8023c90 <stm32_ipcc_mailbox_ipm_send+0xac>)
 8023c48:	431a      	orrs	r2, r3
 8023c4a:	f00a fdae 	bl	802e7aa <log_1>
 8023c4e:	e7dd      	b.n	8023c0c <stm32_ipcc_mailbox_ipm_send+0x28>
  if (IPCC_IsActiveFlag_CHx(cfg->ipcc, id)) {
 8023c50:	2401      	movs	r4, #1
 8023c52:	40b4      	lsls	r4, r6
 8023c54:	687a      	ldr	r2, [r7, #4]
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8023c56:	69d3      	ldr	r3, [r2, #28]
 8023c58:	4023      	ands	r3, r4
 8023c5a:	429c      	cmp	r4, r3
 8023c5c:	d0fb      	beq.n	8023c56 <stm32_ipcc_mailbox_ipm_send+0x72>
  if (buff != NULL && size != 0) {
 8023c5e:	2900      	cmp	r1, #0
 8023c60:	d005      	beq.n	8023c6e <stm32_ipcc_mailbox_ipm_send+0x8a>
 8023c62:	2d00      	cmp	r5, #0
 8023c64:	d003      	beq.n	8023c6e <stm32_ipcc_mailbox_ipm_send+0x8a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8023c66:	002a      	movs	r2, r5
 8023c68:	6938      	ldr	r0, [r7, #16]
 8023c6a:	f00d f879 	bl	8030d60 <memcpy>
  IPCC_EnableTransmitChannel(cfg->ipcc, id);
 8023c6e:	687b      	ldr	r3, [r7, #4]
  CLEAR_BIT(IPCCx->C2MR, Channel << IPCC_C2MR_CH1FM_Pos);
 8023c70:	0424      	lsls	r4, r4, #16
 8023c72:	695a      	ldr	r2, [r3, #20]
  return 0;
 8023c74:	2000      	movs	r0, #0
 8023c76:	43a2      	bics	r2, r4
 8023c78:	615a      	str	r2, [r3, #20]
  WRITE_REG(IPCCx->C2SCR, Channel << IPCC_C2SCR_CH1S_Pos);
 8023c7a:	619c      	str	r4, [r3, #24]
 8023c7c:	e7d8      	b.n	8023c30 <stm32_ipcc_mailbox_ipm_send+0x4c>
 8023c7e:	46c0      	nop			; (mov r8, r8)
 8023c80:	08031164 	.word	0x08031164
 8023c84:	08031164 	.word	0x08031164
 8023c88:	080319a5 	.word	0x080319a5
 8023c8c:	080319bd 	.word	0x080319bd
 8023c90:	080319d8 	.word	0x080319d8

08023c94 <stm32_ipcc_mailbox_init>:

static int stm32_ipcc_mailbox_init(const struct device *dev) {
 8023c94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  struct stm32_ipcc_mbx_data *data = DEV_DATA(dev);
  const struct stm32_ipcc_mailbox_config *cfg = DEV_CFG(dev);
 8023c96:	6845      	ldr	r5, [r0, #4]
static int stm32_ipcc_mailbox_init(const struct device *dev) {
 8023c98:	0004      	movs	r4, r0
  uint32_t i;

  clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);

  /* enable clock */
  if (clock_control_on(clk, (clock_control_subsys_t *)&cfg->pclken) != 0) {
 8023c9a:	002b      	movs	r3, r5
 8023c9c:	3308      	adds	r3, #8
  struct stm32_ipcc_mbx_data *data = DEV_DATA(dev);
 8023c9e:	6907      	ldr	r7, [r0, #16]
  if (clock_control_on(clk, (clock_control_subsys_t *)&cfg->pclken) != 0) {
 8023ca0:	9301      	str	r3, [sp, #4]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
 8023ca2:	4e16      	ldr	r6, [pc, #88]	; (8023cfc <stm32_ipcc_mailbox_init+0x68>)
 8023ca4:	0030      	movs	r0, r6
 8023ca6:	f00c feb5 	bl	8030a14 <z_device_ready>
 8023caa:	2800      	cmp	r0, #0
 8023cac:	d103      	bne.n	8023cb6 <stm32_ipcc_mailbox_init+0x22>
    return -EIO;
 8023cae:	2605      	movs	r6, #5
 8023cb0:	4276      	negs	r6, r6
  }

  cfg->irq_config_func(dev);

  return 0;
}
 8023cb2:	0030      	movs	r0, r6
 8023cb4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8023cb6:	68b3      	ldr	r3, [r6, #8]
 8023cb8:	0030      	movs	r0, r6
 8023cba:	681b      	ldr	r3, [r3, #0]
 8023cbc:	9901      	ldr	r1, [sp, #4]
 8023cbe:	4798      	blx	r3
 8023cc0:	1e06      	subs	r6, r0, #0
  if (clock_control_on(clk, (clock_control_subsys_t *)&cfg->pclken) != 0) {
 8023cc2:	d1f4      	bne.n	8023cae <stm32_ipcc_mailbox_init+0x1a>
  IPCC_DisableIT_TXF(cfg->ipcc);
 8023cc4:	686b      	ldr	r3, [r5, #4]
  CLEAR_BIT(IPCCx->C2CR, IPCC_C2CR_TXFIE);
 8023cc6:	490e      	ldr	r1, [pc, #56]	; (8023d00 <stm32_ipcc_mailbox_init+0x6c>)
 8023cc8:	691a      	ldr	r2, [r3, #16]
 8023cca:	400a      	ands	r2, r1
  CLEAR_BIT(IPCCx->C2CR, IPCC_C2CR_RXOIE);
 8023ccc:	2101      	movs	r1, #1
  CLEAR_BIT(IPCCx->C2CR, IPCC_C2CR_TXFIE);
 8023cce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(IPCCx->C2CR, IPCC_C2CR_RXOIE);
 8023cd0:	691a      	ldr	r2, [r3, #16]
 8023cd2:	438a      	bics	r2, r1
 8023cd4:	611a      	str	r2, [r3, #16]
  data->num_ch = 6;
 8023cd6:	2206      	movs	r2, #6
 8023cd8:	603a      	str	r2, [r7, #0]
    IPCC_ClearFlag_CHx(cfg->ipcc, i);
 8023cda:	000a      	movs	r2, r1
 8023cdc:	4082      	lsls	r2, r0
  WRITE_REG(IPCCx->C2SCR, Channel);
 8023cde:	619a      	str	r2, [r3, #24]
  SET_BIT(IPCCx->C2MR, Channel);
 8023ce0:	695f      	ldr	r7, [r3, #20]
  for (i = 0; i < data->num_ch; i++) {
 8023ce2:	3001      	adds	r0, #1
 8023ce4:	4317      	orrs	r7, r2
 8023ce6:	615f      	str	r7, [r3, #20]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8023ce8:	695f      	ldr	r7, [r3, #20]
 8023cea:	0412      	lsls	r2, r2, #16
 8023cec:	433a      	orrs	r2, r7
 8023cee:	615a      	str	r2, [r3, #20]
 8023cf0:	2806      	cmp	r0, #6
 8023cf2:	d1f2      	bne.n	8023cda <stm32_ipcc_mailbox_init+0x46>
  cfg->irq_config_func(dev);
 8023cf4:	0020      	movs	r0, r4
 8023cf6:	682b      	ldr	r3, [r5, #0]
 8023cf8:	4798      	blx	r3
  return 0;
 8023cfa:	e7da      	b.n	8023cb2 <stm32_ipcc_mailbox_init+0x1e>
 8023cfc:	20008200 	.word	0x20008200
 8023d00:	fffeffff 	.word	0xfffeffff

08023d04 <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8023d04:	b082      	sub	sp, #8
 8023d06:	b513      	push	{r0, r1, r4, lr}
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds + b.Seconds;
 8023d08:	18c9      	adds	r1, r1, r3
{
 8023d0a:	9305      	str	r3, [sp, #20]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8023d0c:	ab05      	add	r3, sp, #20
 8023d0e:	889c      	ldrh	r4, [r3, #4]
    if( c.SubSeconds >= 1000 )
 8023d10:	23fa      	movs	r3, #250	; 0xfa
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8023d12:	18a2      	adds	r2, r4, r2
 8023d14:	b212      	sxth	r2, r2
    if( c.SubSeconds >= 1000 )
 8023d16:	009b      	lsls	r3, r3, #2
 8023d18:	429a      	cmp	r2, r3
 8023d1a:	db03      	blt.n	8023d24 <SysTimeAdd+0x20>
    {
        c.Seconds++;
        c.SubSeconds -= 1000;
 8023d1c:	4b04      	ldr	r3, [pc, #16]	; (8023d30 <SysTimeAdd+0x2c>)
        c.Seconds++;
 8023d1e:	3101      	adds	r1, #1
        c.SubSeconds -= 1000;
 8023d20:	18d2      	adds	r2, r2, r3
 8023d22:	b212      	sxth	r2, r2
    }
    return c;
 8023d24:	6001      	str	r1, [r0, #0]
 8023d26:	8082      	strh	r2, [r0, #4]
}
 8023d28:	bc16      	pop	{r1, r2, r4}
 8023d2a:	bc08      	pop	{r3}
 8023d2c:	b002      	add	sp, #8
 8023d2e:	4718      	bx	r3
 8023d30:	fffffc18 	.word	0xfffffc18

08023d34 <SysTimeGet>:

    RtcBkupWrite( deltaTime.Seconds, ( uint32_t )deltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 8023d34:	b530      	push	{r4, r5, lr}
 8023d36:	b085      	sub	sp, #20
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8023d38:	2300      	movs	r3, #0
 8023d3a:	466a      	mov	r2, sp
{
 8023d3c:	0004      	movs	r4, r0
    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
    SysTime_t deltaTime;

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8023d3e:	a801      	add	r0, sp, #4
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8023d40:	8093      	strh	r3, [r2, #4]
 8023d42:	9300      	str	r3, [sp, #0]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8023d44:	f00b f9e3 	bl	802f10e <RtcGetCalendarTime>

    RtcBkupRead( &deltaTime.Seconds, ( uint32_t* )&deltaTime.SubSeconds );
 8023d48:	ad02      	add	r5, sp, #8
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8023d4a:	9000      	str	r0, [sp, #0]
    RtcBkupRead( &deltaTime.Seconds, ( uint32_t* )&deltaTime.SubSeconds );
 8023d4c:	a903      	add	r1, sp, #12
 8023d4e:	0028      	movs	r0, r5
 8023d50:	f000 f8fe 	bl	8023f50 <RtcBkupRead>
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8023d54:	4669      	mov	r1, sp
    c.Seconds = a.Seconds + b.Seconds;
 8023d56:	9b02      	ldr	r3, [sp, #8]
 8023d58:	9a00      	ldr	r2, [sp, #0]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8023d5a:	8889      	ldrh	r1, [r1, #4]
    c.Seconds = a.Seconds + b.Seconds;
 8023d5c:	189a      	adds	r2, r3, r2
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8023d5e:	88ab      	ldrh	r3, [r5, #4]
 8023d60:	185b      	adds	r3, r3, r1
    if( c.SubSeconds >= 1000 )
 8023d62:	21fa      	movs	r1, #250	; 0xfa
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8023d64:	b21b      	sxth	r3, r3
    if( c.SubSeconds >= 1000 )
 8023d66:	0089      	lsls	r1, r1, #2
 8023d68:	428b      	cmp	r3, r1
 8023d6a:	db03      	blt.n	8023d74 <SysTimeGet+0x40>
        c.SubSeconds -= 1000;
 8023d6c:	4904      	ldr	r1, [pc, #16]	; (8023d80 <SysTimeGet+0x4c>)
        c.Seconds++;
 8023d6e:	3201      	adds	r2, #1
        c.SubSeconds -= 1000;
 8023d70:	185b      	adds	r3, r3, r1
 8023d72:	b21b      	sxth	r3, r3

    sysTime = SysTimeAdd( deltaTime, calendarTime );

    return sysTime;
}
 8023d74:	0020      	movs	r0, r4
    return sysTime;
 8023d76:	6022      	str	r2, [r4, #0]
 8023d78:	80a3      	strh	r3, [r4, #4]
}
 8023d7a:	b005      	add	sp, #20
 8023d7c:	bd30      	pop	{r4, r5, pc}
 8023d7e:	46c0      	nop			; (mov r8, r8)
 8023d80:	fffffc18 	.word	0xfffffc18

08023d84 <SysTimeFromMs>:
    SysTime_t calendarTime = SysTimeSub( sysTime, deltaTime );
    return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
}

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8023d84:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023d86:	000c      	movs	r4, r1
    uint32_t seconds = timeMs / 1000;
 8023d88:	21fa      	movs	r1, #250	; 0xfa
{
 8023d8a:	0005      	movs	r5, r0
    uint32_t seconds = timeMs / 1000;
 8023d8c:	0089      	lsls	r1, r1, #2
 8023d8e:	0020      	movs	r0, r4
 8023d90:	f7fc f9be 	bl	8020110 <__udivsi3>
    SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
    SysTime_t deltaTime = { 0 };
 8023d94:	2208      	movs	r2, #8
    uint32_t seconds = timeMs / 1000;
 8023d96:	0006      	movs	r6, r0
    SysTime_t deltaTime = { 0 };
 8023d98:	2100      	movs	r1, #0
 8023d9a:	4668      	mov	r0, sp
 8023d9c:	f00c ffe9 	bl	8030d72 <memset>
    RtcBkupRead( &deltaTime.Seconds, ( uint32_t* )&deltaTime.SubSeconds );
 8023da0:	a901      	add	r1, sp, #4
 8023da2:	4668      	mov	r0, sp
 8023da4:	f000 f8d4 	bl	8023f50 <RtcBkupRead>
    SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8023da8:	22fa      	movs	r2, #250	; 0xfa
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8023daa:	4669      	mov	r1, sp
    c.Seconds = a.Seconds + b.Seconds;
 8023dac:	9b00      	ldr	r3, [sp, #0]
    SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8023dae:	0092      	lsls	r2, r2, #2
    c.Seconds = a.Seconds + b.Seconds;
 8023db0:	18f3      	adds	r3, r6, r3
    SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8023db2:	4356      	muls	r6, r2
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8023db4:	8889      	ldrh	r1, [r1, #4]
    SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8023db6:	1ba4      	subs	r4, r4, r6
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8023db8:	1861      	adds	r1, r4, r1
 8023dba:	b209      	sxth	r1, r1
    if( c.SubSeconds >= 1000 )
 8023dbc:	4291      	cmp	r1, r2
 8023dbe:	db03      	blt.n	8023dc8 <SysTimeFromMs+0x44>
        c.SubSeconds -= 1000;
 8023dc0:	4a03      	ldr	r2, [pc, #12]	; (8023dd0 <SysTimeFromMs+0x4c>)
        c.Seconds++;
 8023dc2:	3301      	adds	r3, #1
        c.SubSeconds -= 1000;
 8023dc4:	1889      	adds	r1, r1, r2
 8023dc6:	b209      	sxth	r1, r1

    return SysTimeAdd( sysTime, deltaTime );
}
 8023dc8:	0028      	movs	r0, r5
    return c;
 8023dca:	602b      	str	r3, [r5, #0]
 8023dcc:	80a9      	strh	r1, [r5, #4]
}
 8023dce:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8023dd0:	fffffc18 	.word	0xfffffc18

08023dd4 <TimerInsertNewHeadTimer>:
    obj->Next = NULL;
}

static void TimerInsertNewHeadTimer(TimerEvent_t *obj)
{
    TimerEvent_t *cur = TimerListHead;
 8023dd4:	4a05      	ldr	r2, [pc, #20]	; (8023dec <TimerInsertNewHeadTimer+0x18>)
{
 8023dd6:	b510      	push	{r4, lr}
    TimerEvent_t *cur = TimerListHead;
 8023dd8:	6813      	ldr	r3, [r2, #0]

    if (cur != NULL)
 8023dda:	2b00      	cmp	r3, #0
 8023ddc:	d001      	beq.n	8023de2 <TimerInsertNewHeadTimer+0xe>
    {
        cur->IsNext2Expire = false;
 8023dde:	2100      	movs	r1, #0
 8023de0:	7259      	strb	r1, [r3, #9]
    }

    obj->Next = cur;
 8023de2:	6143      	str	r3, [r0, #20]
    TimerListHead = obj;
 8023de4:	6010      	str	r0, [r2, #0]
    TimerSetTimeout(TimerListHead);
 8023de6:	f00b f93f 	bl	802f068 <TimerSetTimeout>
}
 8023dea:	bd10      	pop	{r4, pc}
 8023dec:	200087d4 	.word	0x200087d4

08023df0 <TimerStart>:
{
 8023df0:	b570      	push	{r4, r5, r6, lr}
 8023df2:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
 8023df4:	f3ef 8510 	mrs	r5, PRIMASK
 8023df8:	b672      	cpsid	i
    if ((obj == NULL) || (TimerExists(obj) == true))
 8023dfa:	2800      	cmp	r0, #0
 8023dfc:	d00f      	beq.n	8023e1e <TimerStart+0x2e>
    CRITICAL_SECTION_END();
}

static bool TimerExists(TimerEvent_t *obj)
{
    TimerEvent_t *cur = TimerListHead;
 8023dfe:	4e19      	ldr	r6, [pc, #100]	; (8023e64 <TimerStart+0x74>)
 8023e00:	6832      	ldr	r2, [r6, #0]
 8023e02:	0013      	movs	r3, r2

    while (cur != NULL)
 8023e04:	2b00      	cmp	r3, #0
 8023e06:	d110      	bne.n	8023e2a <TimerStart+0x3a>
    obj->Timestamp = obj->ReloadValue;
 8023e08:	6863      	ldr	r3, [r4, #4]
 8023e0a:	6023      	str	r3, [r4, #0]
    obj->IsStarted = true;
 8023e0c:	2301      	movs	r3, #1
 8023e0e:	8123      	strh	r3, [r4, #8]
    if (TimerListHead == NULL)
 8023e10:	2a00      	cmp	r2, #0
 8023e12:	d10e      	bne.n	8023e32 <TimerStart+0x42>
        RtcSetTimerContext();
 8023e14:	f000 f8d0 	bl	8023fb8 <RtcSetTimerContext>
            TimerInsertNewHeadTimer(obj);
 8023e18:	0020      	movs	r0, r4
 8023e1a:	f7ff ffdb 	bl	8023dd4 <TimerInsertNewHeadTimer>
	if (key != 0U) {
 8023e1e:	2d00      	cmp	r5, #0
 8023e20:	d102      	bne.n	8023e28 <TimerStart+0x38>
	__asm__ volatile(
 8023e22:	b662      	cpsie	i
 8023e24:	f3bf 8f6f 	isb	sy
}
 8023e28:	bd70      	pop	{r4, r5, r6, pc}
    {
        if (cur == obj)
 8023e2a:	429c      	cmp	r4, r3
 8023e2c:	d0f7      	beq.n	8023e1e <TimerStart+0x2e>
        {
            return true;
        }
        cur = cur->Next;
 8023e2e:	695b      	ldr	r3, [r3, #20]
 8023e30:	e7e8      	b.n	8023e04 <TimerStart+0x14>
        elapsedTime = RtcGetTimerElapsedTime();
 8023e32:	f000 f895 	bl	8023f60 <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
 8023e36:	6823      	ldr	r3, [r4, #0]
 8023e38:	18c0      	adds	r0, r0, r3
        if (obj->Timestamp < TimerListHead->Timestamp)
 8023e3a:	6833      	ldr	r3, [r6, #0]
        obj->Timestamp += elapsedTime;
 8023e3c:	6020      	str	r0, [r4, #0]
        if (obj->Timestamp < TimerListHead->Timestamp)
 8023e3e:	681a      	ldr	r2, [r3, #0]
 8023e40:	4290      	cmp	r0, r2
 8023e42:	d3e9      	bcc.n	8023e18 <TimerStart+0x28>
    TimerEvent_t *next = TimerListHead->Next;
 8023e44:	695a      	ldr	r2, [r3, #20]
    while (cur->Next != NULL)
 8023e46:	6959      	ldr	r1, [r3, #20]
 8023e48:	2900      	cmp	r1, #0
 8023e4a:	d102      	bne.n	8023e52 <TimerStart+0x62>
    cur->Next = obj;
 8023e4c:	615c      	str	r4, [r3, #20]
    obj->Next = NULL;
 8023e4e:	6161      	str	r1, [r4, #20]
 8023e50:	e7e5      	b.n	8023e1e <TimerStart+0x2e>
        if (obj->Timestamp > next->Timestamp)
 8023e52:	6811      	ldr	r1, [r2, #0]
 8023e54:	4288      	cmp	r0, r1
 8023e56:	d902      	bls.n	8023e5e <TimerStart+0x6e>
            next = next->Next;
 8023e58:	0013      	movs	r3, r2
 8023e5a:	6952      	ldr	r2, [r2, #20]
 8023e5c:	e7f3      	b.n	8023e46 <TimerStart+0x56>
            cur->Next = obj;
 8023e5e:	615c      	str	r4, [r3, #20]
            obj->Next = next;
 8023e60:	6162      	str	r2, [r4, #20]
            return;
 8023e62:	e7dc      	b.n	8023e1e <TimerStart+0x2e>
 8023e64:	200087d4 	.word	0x200087d4

08023e68 <TimerIrqHandler>:
{
 8023e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t old = RtcGetTimerContext();
 8023e6a:	f000 f8ad 	bl	8023fc8 <RtcGetTimerContext>
 8023e6e:	0005      	movs	r5, r0
    uint32_t now = RtcSetTimerContext();
 8023e70:	f000 f8a2 	bl	8023fb8 <RtcSetTimerContext>
    if (TimerListHead != NULL)
 8023e74:	4c1a      	ldr	r4, [pc, #104]	; (8023ee0 <TimerIrqHandler+0x78>)
 8023e76:	6823      	ldr	r3, [r4, #0]
 8023e78:	2b00      	cmp	r3, #0
 8023e7a:	d015      	beq.n	8023ea8 <TimerIrqHandler+0x40>
    uint32_t deltaContext = now - old; // intentional wrap around
 8023e7c:	001a      	movs	r2, r3
 8023e7e:	1b47      	subs	r7, r0, r5
        for (cur = TimerListHead; cur->Next != NULL; cur = cur->Next)
 8023e80:	6952      	ldr	r2, [r2, #20]
 8023e82:	2a00      	cmp	r2, #0
 8023e84:	d106      	bne.n	8023e94 <TimerIrqHandler+0x2c>
        TimerListHead = TimerListHead->Next;
 8023e86:	6959      	ldr	r1, [r3, #20]
        cur->IsStarted = false;
 8023e88:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack(cur->Callback, cur->Context);
 8023e8a:	68da      	ldr	r2, [r3, #12]
        TimerListHead = TimerListHead->Next;
 8023e8c:	6021      	str	r1, [r4, #0]
        ExecuteCallBack(cur->Callback, cur->Context);
 8023e8e:	2a00      	cmp	r2, #0
 8023e90:	d108      	bne.n	8023ea4 <TimerIrqHandler+0x3c>
 8023e92:	e7fe      	b.n	8023e92 <TimerIrqHandler+0x2a>
            if (next->Timestamp > deltaContext)
 8023e94:	6811      	ldr	r1, [r2, #0]
                next->Timestamp = 0;
 8023e96:	2600      	movs	r6, #0
            if (next->Timestamp > deltaContext)
 8023e98:	42b9      	cmp	r1, r7
 8023e9a:	d901      	bls.n	8023ea0 <TimerIrqHandler+0x38>
                next->Timestamp -= deltaContext;
 8023e9c:	1949      	adds	r1, r1, r5
 8023e9e:	1a0e      	subs	r6, r1, r0
 8023ea0:	6016      	str	r6, [r2, #0]
 8023ea2:	e7ed      	b.n	8023e80 <TimerIrqHandler+0x18>
        ExecuteCallBack(cur->Callback, cur->Context);
 8023ea4:	6918      	ldr	r0, [r3, #16]
 8023ea6:	4790      	blx	r2
    while ((TimerListHead != NULL) && (TimerListHead->Timestamp < RtcGetTimerElapsedTime()))
 8023ea8:	6823      	ldr	r3, [r4, #0]
 8023eaa:	2b00      	cmp	r3, #0
 8023eac:	d103      	bne.n	8023eb6 <TimerIrqHandler+0x4e>
    if ((TimerListHead != NULL) && (TimerListHead->IsNext2Expire == false))
 8023eae:	6820      	ldr	r0, [r4, #0]
 8023eb0:	2800      	cmp	r0, #0
 8023eb2:	d10e      	bne.n	8023ed2 <TimerIrqHandler+0x6a>
}
 8023eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while ((TimerListHead != NULL) && (TimerListHead->Timestamp < RtcGetTimerElapsedTime()))
 8023eb6:	681d      	ldr	r5, [r3, #0]
 8023eb8:	f000 f852 	bl	8023f60 <RtcGetTimerElapsedTime>
 8023ebc:	4285      	cmp	r5, r0
 8023ebe:	d2f6      	bcs.n	8023eae <TimerIrqHandler+0x46>
        cur = TimerListHead;
 8023ec0:	6823      	ldr	r3, [r4, #0]
        TimerListHead = TimerListHead->Next;
 8023ec2:	695a      	ldr	r2, [r3, #20]
 8023ec4:	6022      	str	r2, [r4, #0]
        cur->IsStarted = false;
 8023ec6:	2200      	movs	r2, #0
 8023ec8:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack(cur->Callback, cur->Context);
 8023eca:	68da      	ldr	r2, [r3, #12]
 8023ecc:	2a00      	cmp	r2, #0
 8023ece:	d1e9      	bne.n	8023ea4 <TimerIrqHandler+0x3c>
 8023ed0:	e7fe      	b.n	8023ed0 <TimerIrqHandler+0x68>
    if ((TimerListHead != NULL) && (TimerListHead->IsNext2Expire == false))
 8023ed2:	7a43      	ldrb	r3, [r0, #9]
 8023ed4:	2b00      	cmp	r3, #0
 8023ed6:	d1ed      	bne.n	8023eb4 <TimerIrqHandler+0x4c>
        TimerSetTimeout(TimerListHead);
 8023ed8:	f00b f8c6 	bl	802f068 <TimerSetTimeout>
}
 8023edc:	e7ea      	b.n	8023eb4 <TimerIrqHandler+0x4c>
 8023ede:	46c0      	nop			; (mov r8, r8)
 8023ee0:	200087d4 	.word	0x200087d4

08023ee4 <TimerStop>:
{
 8023ee4:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
 8023ee6:	f3ef 8510 	mrs	r5, PRIMASK
 8023eea:	b672      	cpsid	i
    TimerEvent_t *prev = TimerListHead;
 8023eec:	4c14      	ldr	r4, [pc, #80]	; (8023f40 <TimerStop+0x5c>)
 8023eee:	6823      	ldr	r3, [r4, #0]
    if ((TimerListHead == NULL) || (obj == NULL))
 8023ef0:	2b00      	cmp	r3, #0
 8023ef2:	d001      	beq.n	8023ef8 <TimerStop+0x14>
 8023ef4:	2800      	cmp	r0, #0
 8023ef6:	d105      	bne.n	8023f04 <TimerStop+0x20>
	if (key != 0U) {
 8023ef8:	2d00      	cmp	r5, #0
 8023efa:	d102      	bne.n	8023f02 <TimerStop+0x1e>
	__asm__ volatile(
 8023efc:	b662      	cpsie	i
 8023efe:	f3bf 8f6f 	isb	sy
}
 8023f02:	bd70      	pop	{r4, r5, r6, pc}
    obj->IsStarted = false;
 8023f04:	2200      	movs	r2, #0
 8023f06:	7202      	strb	r2, [r0, #8]
    if (TimerListHead == obj) // Stop the Head
 8023f08:	4283      	cmp	r3, r0
 8023f0a:	d10f      	bne.n	8023f2c <TimerStop+0x48>
        if (TimerListHead->IsNext2Expire == true) // The head is already running
 8023f0c:	7a59      	ldrb	r1, [r3, #9]
            if (TimerListHead->Next != NULL)
 8023f0e:	695e      	ldr	r6, [r3, #20]
        if (TimerListHead->IsNext2Expire == true) // The head is already running
 8023f10:	4291      	cmp	r1, r2
 8023f12:	d009      	beq.n	8023f28 <TimerStop+0x44>
            TimerListHead->IsNext2Expire = false;
 8023f14:	725a      	strb	r2, [r3, #9]
            if (TimerListHead->Next != NULL)
 8023f16:	4296      	cmp	r6, r2
 8023f18:	d004      	beq.n	8023f24 <TimerStop+0x40>
                TimerSetTimeout(TimerListHead);
 8023f1a:	0030      	movs	r0, r6
                TimerListHead = TimerListHead->Next;
 8023f1c:	6026      	str	r6, [r4, #0]
                TimerSetTimeout(TimerListHead);
 8023f1e:	f00b f8a3 	bl	802f068 <TimerSetTimeout>
 8023f22:	e7e9      	b.n	8023ef8 <TimerStop+0x14>
                RtcStopAlarm();
 8023f24:	f000 f826 	bl	8023f74 <RtcStopAlarm>
                TimerListHead = NULL;
 8023f28:	6026      	str	r6, [r4, #0]
 8023f2a:	e7e5      	b.n	8023ef8 <TimerStop+0x14>
                cur = cur->Next;
 8023f2c:	001a      	movs	r2, r3
 8023f2e:	695b      	ldr	r3, [r3, #20]
        while (cur != NULL)
 8023f30:	2b00      	cmp	r3, #0
 8023f32:	d0e1      	beq.n	8023ef8 <TimerStop+0x14>
            if (cur == obj)
 8023f34:	4298      	cmp	r0, r3
 8023f36:	d1f9      	bne.n	8023f2c <TimerStop+0x48>
                if (cur->Next != NULL)
 8023f38:	6943      	ldr	r3, [r0, #20]
 8023f3a:	6153      	str	r3, [r2, #20]
 8023f3c:	e7dc      	b.n	8023ef8 <TimerStop+0x14>
 8023f3e:	46c0      	nop			; (mov r8, r8)
 8023f40:	200087d4 	.word	0x200087d4

08023f44 <RtcBkupWrite>:
}

K_TIMER_DEFINE(lora_timer, timer_callback, NULL);

void RtcBkupWrite(uint32_t data0, uint32_t data1) {
  rtc_clock_base[0] = data0;
 8023f44:	4b01      	ldr	r3, [pc, #4]	; (8023f4c <RtcBkupWrite+0x8>)
 8023f46:	6018      	str	r0, [r3, #0]
  rtc_clock_base[1] = data1;
 8023f48:	6059      	str	r1, [r3, #4]
}
 8023f4a:	4770      	bx	lr
 8023f4c:	200087d8 	.word	0x200087d8

08023f50 <RtcBkupRead>:

void RtcBkupRead(uint32_t *data0, uint32_t *data1) {
  *data0 = rtc_clock_base[0];
 8023f50:	4b02      	ldr	r3, [pc, #8]	; (8023f5c <RtcBkupRead+0xc>)
 8023f52:	681a      	ldr	r2, [r3, #0]
  *data1 = rtc_clock_base[1];
 8023f54:	685b      	ldr	r3, [r3, #4]
  *data0 = rtc_clock_base[0];
 8023f56:	6002      	str	r2, [r0, #0]
  *data1 = rtc_clock_base[1];
 8023f58:	600b      	str	r3, [r1, #0]
}
 8023f5a:	4770      	bx	lr
 8023f5c:	200087d8 	.word	0x200087d8

08023f60 <RtcGetTimerElapsedTime>:
  return now / MSEC_PER_SEC;
}

uint32_t RtcGetTimerValue(void) { return k_uptime_get_32(); }

uint32_t RtcGetTimerElapsedTime(void) {
 8023f60:	b510      	push	{r4, lr}
  return (k_uptime_get_32() - rtc_time_base);
 8023f62:	f00b f8c8 	bl	802f0f6 <k_uptime_get_32>
 8023f66:	4b02      	ldr	r3, [pc, #8]	; (8023f70 <RtcGetTimerElapsedTime+0x10>)
 8023f68:	681b      	ldr	r3, [r3, #0]
 8023f6a:	1ac0      	subs	r0, r0, r3
}
 8023f6c:	bd10      	pop	{r4, pc}
 8023f6e:	46c0      	nop			; (mov r8, r8)
 8023f70:	200087e0 	.word	0x200087e0

08023f74 <RtcStopAlarm>:

uint32_t RtcGetMinimumTimeout(void) { return 1; }

void RtcStopAlarm(void) { k_timer_stop(&lora_timer); }
 8023f74:	b510      	push	{r4, lr}
	z_impl_k_timer_stop(timer);
 8023f76:	4802      	ldr	r0, [pc, #8]	; (8023f80 <RtcStopAlarm+0xc>)
 8023f78:	f00c feb2 	bl	8030ce0 <z_impl_k_timer_stop>
 8023f7c:	bd10      	pop	{r4, pc}
 8023f7e:	46c0      	nop			; (mov r8, r8)
 8023f80:	20008320 	.word	0x20008320

08023f84 <RtcSetAlarm>:

void RtcSetAlarm(uint32_t timeout) {
 8023f84:	b507      	push	{r0, r1, r2, lr}
			return (t * to_hz + off) / from_hz;
 8023f86:	2100      	movs	r1, #0
 8023f88:	0d03      	lsrs	r3, r0, #20
 8023f8a:	0302      	lsls	r2, r0, #12
 8023f8c:	4808      	ldr	r0, [pc, #32]	; (8023fb0 <RtcSetAlarm+0x2c>)
 8023f8e:	1880      	adds	r0, r0, r2
 8023f90:	4159      	adcs	r1, r3
 8023f92:	22fa      	movs	r2, #250	; 0xfa
 8023f94:	2300      	movs	r3, #0
 8023f96:	0092      	lsls	r2, r2, #2
 8023f98:	f7fc fa88 	bl	80204ac <__aeabi_uldivmod>
 8023f9c:	0002      	movs	r2, r0
 8023f9e:	000b      	movs	r3, r1
	z_impl_k_timer_start(timer, duration, period);
 8023fa0:	2000      	movs	r0, #0
 8023fa2:	2100      	movs	r1, #0
 8023fa4:	9000      	str	r0, [sp, #0]
 8023fa6:	9101      	str	r1, [sp, #4]
 8023fa8:	4802      	ldr	r0, [pc, #8]	; (8023fb4 <RtcSetAlarm+0x30>)
 8023faa:	f009 fb77 	bl	802d69c <z_impl_k_timer_start>
  k_timer_start(&lora_timer, K_MSEC(timeout), K_NO_WAIT);
}
 8023fae:	bd07      	pop	{r0, r1, r2, pc}
 8023fb0:	000003e7 	.word	0x000003e7
 8023fb4:	20008320 	.word	0x20008320

08023fb8 <RtcSetTimerContext>:

uint32_t RtcSetTimerContext(void) {
 8023fb8:	b510      	push	{r4, lr}
  rtc_time_base = k_uptime_get_32();
 8023fba:	f00b f89c 	bl	802f0f6 <k_uptime_get_32>
 8023fbe:	4b01      	ldr	r3, [pc, #4]	; (8023fc4 <RtcSetTimerContext+0xc>)
 8023fc0:	6018      	str	r0, [r3, #0]

  return rtc_time_base;
}
 8023fc2:	bd10      	pop	{r4, pc}
 8023fc4:	200087e0 	.word	0x200087e0

08023fc8 <RtcGetTimerContext>:

/* For us, 1 tick = 1 milli second. So no need to do any conversion here */
uint32_t RtcGetTimerContext(void) { return rtc_time_base; }
 8023fc8:	4b01      	ldr	r3, [pc, #4]	; (8023fd0 <RtcGetTimerContext+0x8>)
 8023fca:	6818      	ldr	r0, [r3, #0]
 8023fcc:	4770      	bx	lr
 8023fce:	46c0      	nop			; (mov r8, r8)
 8023fd0:	200087e0 	.word	0x200087e0

08023fd4 <srand1>:
    return ((next = next * 1103515245L + 12345L) % RAND_LOCAL_MAX);
}

void srand1(uint32_t seed)
{
    next = seed;
 8023fd4:	4b01      	ldr	r3, [pc, #4]	; (8023fdc <srand1+0x8>)
 8023fd6:	6018      	str	r0, [r3, #0]
}
 8023fd8:	4770      	bx	lr
 8023fda:	46c0      	nop			; (mov r8, r8)
 8023fdc:	2000804c 	.word	0x2000804c

08023fe0 <randr>:
    return ((next = next * 1103515245L + 12345L) % RAND_LOCAL_MAX);
 8023fe0:	4b09      	ldr	r3, [pc, #36]	; (8024008 <randr+0x28>)
// Standard random functions redefinition end

int32_t randr(int32_t min, int32_t max)
{
 8023fe2:	b570      	push	{r4, r5, r6, lr}
    return ((next = next * 1103515245L + 12345L) % RAND_LOCAL_MAX);
 8023fe4:	681a      	ldr	r2, [r3, #0]
{
 8023fe6:	0005      	movs	r5, r0
    return ((next = next * 1103515245L + 12345L) % RAND_LOCAL_MAX);
 8023fe8:	4808      	ldr	r0, [pc, #32]	; (802400c <randr+0x2c>)
{
 8023fea:	000c      	movs	r4, r1
    return ((next = next * 1103515245L + 12345L) % RAND_LOCAL_MAX);
 8023fec:	4350      	muls	r0, r2
 8023fee:	4a08      	ldr	r2, [pc, #32]	; (8024010 <randr+0x30>)
 8023ff0:	4908      	ldr	r1, [pc, #32]	; (8024014 <randr+0x34>)
 8023ff2:	1880      	adds	r0, r0, r2
 8023ff4:	6018      	str	r0, [r3, #0]
 8023ff6:	f7fc f911 	bl	802021c <__aeabi_uidivmod>
 8023ffa:	0008      	movs	r0, r1
    return (int32_t)rand1() % (max - min + 1) + min;
 8023ffc:	1b61      	subs	r1, r4, r5
 8023ffe:	3101      	adds	r1, #1
 8024000:	f7fc f9f6 	bl	80203f0 <__aeabi_idivmod>
 8024004:	1948      	adds	r0, r1, r5
}
 8024006:	bd70      	pop	{r4, r5, r6, pc}
 8024008:	2000804c 	.word	0x2000804c
 802400c:	41c64e6d 	.word	0x41c64e6d
 8024010:	00003039 	.word	0x00003039
 8024014:	7fffffff 	.word	0x7fffffff

08024018 <memset1>:
    }
}

void memset1(uint8_t *dst, uint8_t value, uint16_t size)
{
    while (size--)
 8024018:	4b04      	ldr	r3, [pc, #16]	; (802402c <memset1+0x14>)
 802401a:	3a01      	subs	r2, #1
 802401c:	b292      	uxth	r2, r2
 802401e:	429a      	cmp	r2, r3
 8024020:	d100      	bne.n	8024024 <memset1+0xc>
    {
        *dst++ = value;
    }
}
 8024022:	4770      	bx	lr
        *dst++ = value;
 8024024:	7001      	strb	r1, [r0, #0]
 8024026:	3001      	adds	r0, #1
 8024028:	e7f7      	b.n	802401a <memset1+0x2>
 802402a:	46c0      	nop			; (mov r8, r8)
 802402c:	0000ffff 	.word	0x0000ffff

08024030 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8(void *dst, uint8_t value, uint16_t size)
{
    uint8_t *dst8 = (uint8_t *)dst;
    while (size--)
 8024030:	4b04      	ldr	r3, [pc, #16]	; (8024044 <UTIL_MEM_set_8+0x14>)
 8024032:	3a01      	subs	r2, #1
 8024034:	b292      	uxth	r2, r2
 8024036:	429a      	cmp	r2, r3
 8024038:	d100      	bne.n	802403c <UTIL_MEM_set_8+0xc>
    {
        *dst8++ = value;
    }
}
 802403a:	4770      	bx	lr
        *dst8++ = value;
 802403c:	7001      	strb	r1, [r0, #0]
 802403e:	3001      	adds	r0, #1
 8024040:	e7f7      	b.n	8024032 <UTIL_MEM_set_8+0x2>
 8024042:	46c0      	nop			; (mov r8, r8)
 8024044:	0000ffff 	.word	0x0000ffff

08024048 <MX_SUBGHZ_Init>:
SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8024048:	2308      	movs	r3, #8
 802404a:	4807      	ldr	r0, [pc, #28]	; (8024068 <MX_SUBGHZ_Init+0x20>)
{
 802404c:	b510      	push	{r4, lr}
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 802404e:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8024050:	f008 fa82 	bl	802c558 <HAL_SUBGHZ_Init>
 8024054:	2800      	cmp	r0, #0
 8024056:	d005      	beq.n	8024064 <MX_SUBGHZ_Init+0x1c>
  {
    assert(0);
 8024058:	2121      	movs	r1, #33	; 0x21
 802405a:	4b04      	ldr	r3, [pc, #16]	; (802406c <MX_SUBGHZ_Init+0x24>)
 802405c:	4a04      	ldr	r2, [pc, #16]	; (8024070 <MX_SUBGHZ_Init+0x28>)
 802405e:	4805      	ldr	r0, [pc, #20]	; (8024074 <MX_SUBGHZ_Init+0x2c>)
 8024060:	f009 fc1c 	bl	802d89c <__assert_func>
  }
}
 8024064:	bd10      	pop	{r4, pc}
 8024066:	46c0      	nop			; (mov r8, r8)
 8024068:	200087ec 	.word	0x200087ec
 802406c:	0803197b 	.word	0x0803197b
 8024070:	08031a25 	.word	0x08031a25
 8024074:	080319fe 	.word	0x080319fe

08024078 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef *subghzHandle)
{
 8024078:	b507      	push	{r0, r1, r2, lr}
  * @retval None
  */
__STATIC_INLINE void LL_C2_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2APB3ENR, Periphs);
 802407a:	2001      	movs	r0, #1
 802407c:	4a08      	ldr	r2, [pc, #32]	; (80240a0 <HAL_SUBGHZ_MspInit+0x28>)
 802407e:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8024080:	4301      	orrs	r1, r0
 8024082:	6691      	str	r1, [r2, #104]	; 0x68
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2APB3ENR, Periphs);
 8024084:	6e93      	ldr	r3, [r2, #104]	; 0x68
  __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

  IRQ_CONNECT(SUBGHZ_Radio_IRQn, 0,
 8024086:	2200      	movs	r2, #0
 8024088:	4003      	ands	r3, r0
 802408a:	0011      	movs	r1, r2
 802408c:	9301      	str	r3, [sp, #4]
 802408e:	301e      	adds	r0, #30
  (void)tmpreg;
 8024090:	9b01      	ldr	r3, [sp, #4]
 8024092:	f007 fd23 	bl	802badc <z_arm_irq_priority_set>
              HAL_SUBGHZ_IRQHandler, &hsubghz, 0);
  irq_enable(SUBGHZ_Radio_IRQn);
 8024096:	201f      	movs	r0, #31
 8024098:	f007 fd14 	bl	802bac4 <arch_irq_enable>
}
 802409c:	bd07      	pop	{r0, r1, r2, pc}
 802409e:	46c0      	nop			; (mov r8, r8)
 80240a0:	580000fc 	.word	0x580000fc

080240a4 <RBI_Init>:
#define DB_RADIO_TX_NAME DT_GPIO_LABEL(DB_RADIO_TX_NODE, gpios)
#define DB_RADIO_TX_PIN DT_GPIO_PIN(DB_RADIO_TX_NODE, gpios)
#define DB_RADIO_TX_FLAGS DT_GPIO_FLAGS(DB_RADIO_TX_NODE, gpios)

int32_t RBI_Init(void)
{
 80240a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80240a6:	4c1c      	ldr	r4, [pc, #112]	; (8024118 <RBI_Init+0x74>)
 80240a8:	0020      	movs	r0, r4
 80240aa:	f008 fca9 	bl	802ca00 <z_impl_device_get_binding>
  rf_sw_ctrl1_gpio = device_get_binding(RF_SW_CTRL1_NAME);
 80240ae:	4d1b      	ldr	r5, [pc, #108]	; (802411c <RBI_Init+0x78>)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
 80240b0:	6906      	ldr	r6, [r0, #16]
 80240b2:	6028      	str	r0, [r5, #0]
	return api->pin_configure(port, pin, flags);
 80240b4:	22c0      	movs	r2, #192	; 0xc0
 80240b6:	6883      	ldr	r3, [r0, #8]
 80240b8:	2104      	movs	r1, #4
 80240ba:	681b      	ldr	r3, [r3, #0]
 80240bc:	00d2      	lsls	r2, r2, #3
 80240be:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
 80240c0:	2800      	cmp	r0, #0
 80240c2:	d103      	bne.n	80240cc <RBI_Init+0x28>
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 80240c4:	2310      	movs	r3, #16
 80240c6:	6832      	ldr	r2, [r6, #0]
 80240c8:	439a      	bics	r2, r3
 80240ca:	6032      	str	r2, [r6, #0]
 80240cc:	0020      	movs	r0, r4
 80240ce:	f008 fc97 	bl	802ca00 <z_impl_device_get_binding>
  gpio_pin_configure(rf_sw_ctrl1_gpio, RF_SW_CTRL1_PIN, GPIO_OUTPUT_LOW);

  rf_sw_ctrl2_gpio = device_get_binding(RF_SW_CTRL2_NAME);
 80240d2:	4e13      	ldr	r6, [pc, #76]	; (8024120 <RBI_Init+0x7c>)
 80240d4:	6030      	str	r0, [r6, #0]
 80240d6:	0020      	movs	r0, r4
 80240d8:	f008 fc92 	bl	802ca00 <z_impl_device_get_binding>
  //gpio_pin_configure(rf_sw_ctrl2_gpio, RF_SW_CTRL2_PIN, GPIO_OUTPUT_LOW);

  rf_sw_ctrl3_gpio = device_get_binding(RF_SW_CTRL3_NAME);
 80240dc:	4c11      	ldr	r4, [pc, #68]	; (8024124 <RBI_Init+0x80>)
 80240de:	6020      	str	r0, [r4, #0]
 80240e0:	4f11      	ldr	r7, [pc, #68]	; (8024128 <RBI_Init+0x84>)
 80240e2:	0038      	movs	r0, r7
 80240e4:	f008 fc8c 	bl	802ca00 <z_impl_device_get_binding>
  //gpio_pin_configure(rf_sw_ctrl3_gpio, RF_SW_CTRL3_PIN, GPIO_OUTPUT_LOW);

  db_radio_rx_gpio = device_get_binding(DB_RADIO_RX_NAME);
 80240e8:	4b10      	ldr	r3, [pc, #64]	; (802412c <RBI_Init+0x88>)
 80240ea:	6018      	str	r0, [r3, #0]
 80240ec:	0038      	movs	r0, r7
 80240ee:	f008 fc87 	bl	802ca00 <z_impl_device_get_binding>
  //gpio_pin_configure(db_radio_rx_gpio, DB_RADIO_RX_PIN, GPIO_OUTPUT_LOW);

  db_radio_tx_gpio = device_get_binding(DB_RADIO_TX_NAME);
 80240f2:	4b0f      	ldr	r3, [pc, #60]	; (8024130 <RBI_Init+0x8c>)
  //gpio_pin_configure(db_radio_tx_gpio, DB_RADIO_TX_PIN, GPIO_OUTPUT_LOW);

  gpio_pin_set(rf_sw_ctrl1_gpio, RF_SW_CTRL1_PIN, 0);
 80240f4:	2200      	movs	r2, #0
  db_radio_tx_gpio = device_get_binding(DB_RADIO_TX_NAME);
 80240f6:	6018      	str	r0, [r3, #0]
  gpio_pin_set(rf_sw_ctrl1_gpio, RF_SW_CTRL1_PIN, 0);
 80240f8:	2104      	movs	r1, #4
 80240fa:	6828      	ldr	r0, [r5, #0]
 80240fc:	f00b f837 	bl	802f16e <gpio_pin_set.isra.0>
  gpio_pin_set(rf_sw_ctrl2_gpio, RF_SW_CTRL2_PIN, 0);
 8024100:	6830      	ldr	r0, [r6, #0]
 8024102:	2200      	movs	r2, #0
 8024104:	2105      	movs	r1, #5
 8024106:	f00b f832 	bl	802f16e <gpio_pin_set.isra.0>
  gpio_pin_set(rf_sw_ctrl3_gpio, RF_SW_CTRL3_PIN, 0);
 802410a:	6820      	ldr	r0, [r4, #0]
 802410c:	2200      	movs	r2, #0
 802410e:	2103      	movs	r1, #3
 8024110:	f00b f82d 	bl	802f16e <gpio_pin_set.isra.0>

  return 0;
}
 8024114:	2000      	movs	r0, #0
 8024116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024118:	08031a19 	.word	0x08031a19
 802411c:	200087f8 	.word	0x200087f8
 8024120:	200087fc 	.word	0x200087fc
 8024124:	20008800 	.word	0x20008800
 8024128:	08031a1f 	.word	0x08031a1f
 802412c:	200087e4 	.word	0x200087e4
 8024130:	200087e8 	.word	0x200087e8

08024134 <RBI_ConfigRFSwitch>:

  return 0;
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8024134:	b570      	push	{r4, r5, r6, lr}
 8024136:	2803      	cmp	r0, #3
 8024138:	d815      	bhi.n	8024166 <RBI_ConfigRFSwitch+0x32>
 802413a:	4b16      	ldr	r3, [pc, #88]	; (8024194 <RBI_ConfigRFSwitch+0x60>)
 802413c:	4d16      	ldr	r5, [pc, #88]	; (8024198 <RBI_ConfigRFSwitch+0x64>)
 802413e:	4c17      	ldr	r4, [pc, #92]	; (802419c <RBI_ConfigRFSwitch+0x68>)
 8024140:	f7fb ffc8 	bl	80200d4 <__gnu_thumb1_case_uqi>
 8024144:	261f1302 	.word	0x261f1302
  switch (Config)
  {
  case RBI_SWITCH_OFF:
  {
    /* Turn off switch */
    gpio_pin_set(rf_sw_ctrl1_gpio, RF_SW_CTRL1_PIN, 0);
 8024148:	6818      	ldr	r0, [r3, #0]
 802414a:	2200      	movs	r2, #0
 802414c:	2104      	movs	r1, #4
 802414e:	f00b f80e 	bl	802f16e <gpio_pin_set.isra.0>
    gpio_pin_set(rf_sw_ctrl2_gpio, RF_SW_CTRL2_PIN, 0);
 8024152:	2200      	movs	r2, #0
 8024154:	2105      	movs	r1, #5
 8024156:	6828      	ldr	r0, [r5, #0]
 8024158:	f00b f809 	bl	802f16e <gpio_pin_set.isra.0>
    gpio_pin_set(rf_sw_ctrl3_gpio, RF_SW_CTRL3_PIN, 0);
 802415c:	2200      	movs	r2, #0
  case RBI_SWITCH_RFO_HP:
  {
    /*Turns On in Tx High Power the RF Switch */
    gpio_pin_set(rf_sw_ctrl1_gpio, RF_SW_CTRL1_PIN, 0);
    gpio_pin_set(rf_sw_ctrl2_gpio, RF_SW_CTRL2_PIN, 1);
    gpio_pin_set(rf_sw_ctrl3_gpio, RF_SW_CTRL3_PIN, 1);
 802415e:	2103      	movs	r1, #3
 8024160:	6820      	ldr	r0, [r4, #0]
 8024162:	f00b f804 	bl	802f16e <gpio_pin_set.isra.0>
  default:
    break;
  }

  return 0;
}
 8024166:	2000      	movs	r0, #0
 8024168:	bd70      	pop	{r4, r5, r6, pc}
    gpio_pin_set(rf_sw_ctrl1_gpio, RF_SW_CTRL1_PIN, 1);
 802416a:	2201      	movs	r2, #1
 802416c:	2104      	movs	r1, #4
 802416e:	6818      	ldr	r0, [r3, #0]
 8024170:	f00a fffd 	bl	802f16e <gpio_pin_set.isra.0>
    gpio_pin_set(rf_sw_ctrl2_gpio, RF_SW_CTRL2_PIN, 0);
 8024174:	2200      	movs	r2, #0
    gpio_pin_set(rf_sw_ctrl2_gpio, RF_SW_CTRL2_PIN, 1);
 8024176:	2105      	movs	r1, #5
 8024178:	6828      	ldr	r0, [r5, #0]
 802417a:	f00a fff8 	bl	802f16e <gpio_pin_set.isra.0>
    gpio_pin_set(rf_sw_ctrl3_gpio, RF_SW_CTRL3_PIN, 1);
 802417e:	2201      	movs	r2, #1
 8024180:	e7ed      	b.n	802415e <RBI_ConfigRFSwitch+0x2a>
    gpio_pin_set(rf_sw_ctrl1_gpio, RF_SW_CTRL1_PIN, 1);
 8024182:	2201      	movs	r2, #1
    gpio_pin_set(rf_sw_ctrl1_gpio, RF_SW_CTRL1_PIN, 0);
 8024184:	2104      	movs	r1, #4
 8024186:	6818      	ldr	r0, [r3, #0]
 8024188:	f00a fff1 	bl	802f16e <gpio_pin_set.isra.0>
    gpio_pin_set(rf_sw_ctrl2_gpio, RF_SW_CTRL2_PIN, 1);
 802418c:	2201      	movs	r2, #1
 802418e:	e7f2      	b.n	8024176 <RBI_ConfigRFSwitch+0x42>
    gpio_pin_set(rf_sw_ctrl1_gpio, RF_SW_CTRL1_PIN, 0);
 8024190:	2200      	movs	r2, #0
 8024192:	e7f7      	b.n	8024184 <RBI_ConfigRFSwitch+0x50>
 8024194:	200087f8 	.word	0x200087f8
 8024198:	200087fc 	.word	0x200087fc
 802419c:	20008800 	.word	0x20008800

080241a0 <dbg_gpio_radio_rx>:

void dbg_gpio_radio_rx(int v)
{
 80241a0:	b510      	push	{r4, lr}
  gpio_pin_set(db_radio_rx_gpio, DB_RADIO_RX_PIN, v);
 80241a2:	4b03      	ldr	r3, [pc, #12]	; (80241b0 <dbg_gpio_radio_rx+0x10>)
{
 80241a4:	0002      	movs	r2, r0
  gpio_pin_set(db_radio_rx_gpio, DB_RADIO_RX_PIN, v);
 80241a6:	210c      	movs	r1, #12
 80241a8:	6818      	ldr	r0, [r3, #0]
 80241aa:	f00a ffe0 	bl	802f16e <gpio_pin_set.isra.0>
}
 80241ae:	bd10      	pop	{r4, pc}
 80241b0:	200087e4 	.word	0x200087e4

080241b4 <dbg_gpio_radio_tx>:

void dbg_gpio_radio_tx(int v)
{
 80241b4:	b510      	push	{r4, lr}
  gpio_pin_set(db_radio_tx_gpio, DB_RADIO_TX_PIN, v);
 80241b6:	4b03      	ldr	r3, [pc, #12]	; (80241c4 <dbg_gpio_radio_tx+0x10>)
{
 80241b8:	0002      	movs	r2, r0
  gpio_pin_set(db_radio_tx_gpio, DB_RADIO_TX_PIN, v);
 80241ba:	210d      	movs	r1, #13
 80241bc:	6818      	ldr	r0, [r3, #0]
 80241be:	f00a ffd6 	bl	802f16e <gpio_pin_set.isra.0>
}
 80241c2:	bd10      	pop	{r4, pc}
 80241c4:	200087e8 	.word	0x200087e8

080241c8 <LoraInfo_Init>:
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
  loraInfo.Region = 0;
  loraInfo.ClassB = 0;
  loraInfo.Kms = 0;
 80241c8:	2200      	movs	r2, #0
 80241ca:	4b04      	ldr	r3, [pc, #16]	; (80241dc <LoraInfo_Init+0x14>)
 80241cc:	60da      	str	r2, [r3, #12]
#endif /* REGION_AS923 */
#ifdef  REGION_AU915
  loraInfo.Region |= (1 << LORAMAC_REGION_AU915) ;
#endif /* REGION_AU915 */
#ifdef  REGION_CN470
  loraInfo.Region |= (1 << LORAMAC_REGION_CN470) ;
 80241ce:	3204      	adds	r2, #4
 80241d0:	605a      	str	r2, [r3, #4]
    assert(0);  /* At least one region shall be defined */
    while (1) {}
  }

#if ( LORAMAC_CLASSB_ENABLED == 1 )
  loraInfo.ClassB = 1;
 80241d2:	3a03      	subs	r2, #3
 80241d4:	609a      	str	r2, [r3, #8]
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 80241d6:	3202      	adds	r2, #2
 80241d8:	601a      	str	r2, [r3, #0]
 }
 80241da:	4770      	bx	lr
 80241dc:	20008804 	.word	0x20008804

080241e0 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
  return &loraInfo;
}
 80241e0:	4800      	ldr	r0, [pc, #0]	; (80241e4 <LoraInfo_GetPtr+0x4>)
 80241e2:	4770      	bx	lr
 80241e4:	20008804 	.word	0x20008804

080241e8 <lorawan_aes_set_key>:

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
    uint8_t cc, rc, hi;

    switch( keylen )
 80241e8:	000b      	movs	r3, r1
{
 80241ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80241ec:	3b10      	subs	r3, #16
 80241ee:	b2db      	uxtb	r3, r3
 80241f0:	000f      	movs	r7, r1
 80241f2:	0014      	movs	r4, r2
 80241f4:	b087      	sub	sp, #28
 80241f6:	2b10      	cmp	r3, #16
 80241f8:	d805      	bhi.n	8024206 <lorawan_aes_set_key+0x1e>
 80241fa:	2201      	movs	r2, #1
 80241fc:	409a      	lsls	r2, r3
 80241fe:	0013      	movs	r3, r2
 8024200:	4a3b      	ldr	r2, [pc, #236]	; (80242f0 <lorawan_aes_set_key+0x108>)
 8024202:	4213      	tst	r3, r2
 8024204:	d105      	bne.n	8024212 <lorawan_aes_set_key+0x2a>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8024206:	2300      	movs	r3, #0
        return ( uint8_t )-1;
 8024208:	20ff      	movs	r0, #255	; 0xff
        ctx->rnd = 0;
 802420a:	34f0      	adds	r4, #240	; 0xf0
 802420c:	7023      	strb	r3, [r4, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 802420e:	b007      	add	sp, #28
 8024210:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while( nn-- )
 8024212:	2300      	movs	r3, #0
 8024214:	429f      	cmp	r7, r3
 8024216:	d155      	bne.n	80242c4 <lorawan_aes_set_key+0xdc>
    hi = (keylen + 28) << 2;
 8024218:	003b      	movs	r3, r7
    ctx->rnd = (hi >> 4) - 1;
 802421a:	0022      	movs	r2, r4
    hi = (keylen + 28) << 2;
 802421c:	331c      	adds	r3, #28
 802421e:	009b      	lsls	r3, r3, #2
 8024220:	b2db      	uxtb	r3, r3
 8024222:	9305      	str	r3, [sp, #20]
    ctx->rnd = (hi >> 4) - 1;
 8024224:	091b      	lsrs	r3, r3, #4
 8024226:	3b01      	subs	r3, #1
 8024228:	32f0      	adds	r2, #240	; 0xf0
 802422a:	7013      	strb	r3, [r2, #0]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 802422c:	2301      	movs	r3, #1
    ctx->rnd = (hi >> 4) - 1;
 802422e:	003d      	movs	r5, r7
            t0 = s_box(t0);
 8024230:	4e30      	ldr	r6, [pc, #192]	; (80242f4 <lorawan_aes_set_key+0x10c>)
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8024232:	9304      	str	r3, [sp, #16]
        t0 = ctx->ksch[cc - 4];
 8024234:	1963      	adds	r3, r4, r5
 8024236:	1f1a      	subs	r2, r3, #4
 8024238:	7812      	ldrb	r2, [r2, #0]
        if( cc % keylen == 0 )
 802423a:	0039      	movs	r1, r7
        t0 = ctx->ksch[cc - 4];
 802423c:	9200      	str	r2, [sp, #0]
        t1 = ctx->ksch[cc - 3];
 802423e:	1eda      	subs	r2, r3, #3
 8024240:	7812      	ldrb	r2, [r2, #0]
        if( cc % keylen == 0 )
 8024242:	0028      	movs	r0, r5
        t1 = ctx->ksch[cc - 3];
 8024244:	9201      	str	r2, [sp, #4]
        t2 = ctx->ksch[cc - 2];
 8024246:	1e9a      	subs	r2, r3, #2
        t3 = ctx->ksch[cc - 1];
 8024248:	3b01      	subs	r3, #1
        t2 = ctx->ksch[cc - 2];
 802424a:	7812      	ldrb	r2, [r2, #0]
        t3 = ctx->ksch[cc - 1];
 802424c:	781b      	ldrb	r3, [r3, #0]
        t2 = ctx->ksch[cc - 2];
 802424e:	9202      	str	r2, [sp, #8]
        t3 = ctx->ksch[cc - 1];
 8024250:	9303      	str	r3, [sp, #12]
        if( cc % keylen == 0 )
 8024252:	f7fb ffe3 	bl	802021c <__aeabi_uidivmod>
 8024256:	b2c9      	uxtb	r1, r1
 8024258:	2900      	cmp	r1, #0
 802425a:	d137      	bne.n	80242cc <lorawan_aes_set_key+0xe4>
            t0 = s_box(t1) ^ rc;
 802425c:	9b01      	ldr	r3, [sp, #4]
            rc = f2(rc);
 802425e:	311b      	adds	r1, #27
            t0 = s_box(t1) ^ rc;
 8024260:	5cf2      	ldrb	r2, [r6, r3]
 8024262:	9b04      	ldr	r3, [sp, #16]
 8024264:	405a      	eors	r2, r3
            t1 = s_box(t2);
 8024266:	9b02      	ldr	r3, [sp, #8]
 8024268:	5cf3      	ldrb	r3, [r6, r3]
 802426a:	9301      	str	r3, [sp, #4]
            t2 = s_box(t3);
 802426c:	9b03      	ldr	r3, [sp, #12]
 802426e:	5cf3      	ldrb	r3, [r6, r3]
 8024270:	9302      	str	r3, [sp, #8]
            t3 = s_box(tt);
 8024272:	9b00      	ldr	r3, [sp, #0]
            t0 = s_box(t1) ^ rc;
 8024274:	9200      	str	r2, [sp, #0]
            t3 = s_box(tt);
 8024276:	5cf3      	ldrb	r3, [r6, r3]
 8024278:	9303      	str	r3, [sp, #12]
            rc = f2(rc);
 802427a:	9b04      	ldr	r3, [sp, #16]
 802427c:	09db      	lsrs	r3, r3, #7
 802427e:	434b      	muls	r3, r1
 8024280:	9904      	ldr	r1, [sp, #16]
 8024282:	0049      	lsls	r1, r1, #1
 8024284:	404b      	eors	r3, r1
 8024286:	b2db      	uxtb	r3, r3
 8024288:	9304      	str	r3, [sp, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 802428a:	1beb      	subs	r3, r5, r7
 802428c:	b2db      	uxtb	r3, r3
 802428e:	5ce2      	ldrb	r2, [r4, r3]
 8024290:	9900      	ldr	r1, [sp, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8024292:	18e3      	adds	r3, r4, r3
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8024294:	4051      	eors	r1, r2
 8024296:	5561      	strb	r1, [r4, r5]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8024298:	785a      	ldrb	r2, [r3, #1]
 802429a:	9801      	ldr	r0, [sp, #4]
 802429c:	1c69      	adds	r1, r5, #1
 802429e:	4050      	eors	r0, r2
 80242a0:	b2c9      	uxtb	r1, r1
 80242a2:	5460      	strb	r0, [r4, r1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 80242a4:	789a      	ldrb	r2, [r3, #2]
 80242a6:	9802      	ldr	r0, [sp, #8]
 80242a8:	1961      	adds	r1, r4, r5
 80242aa:	4050      	eors	r0, r2
 80242ac:	7088      	strb	r0, [r1, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80242ae:	78db      	ldrb	r3, [r3, #3]
 80242b0:	9a03      	ldr	r2, [sp, #12]
 80242b2:	3504      	adds	r5, #4
 80242b4:	405a      	eors	r2, r3
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80242b6:	9b05      	ldr	r3, [sp, #20]
 80242b8:	b2ed      	uxtb	r5, r5
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80242ba:	70ca      	strb	r2, [r1, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80242bc:	42ab      	cmp	r3, r5
 80242be:	d8b9      	bhi.n	8024234 <lorawan_aes_set_key+0x4c>
    return 0;
 80242c0:	2000      	movs	r0, #0
 80242c2:	e7a4      	b.n	802420e <lorawan_aes_set_key+0x26>
        *d++ = *s++;
 80242c4:	5cc2      	ldrb	r2, [r0, r3]
 80242c6:	54e2      	strb	r2, [r4, r3]
 80242c8:	3301      	adds	r3, #1
 80242ca:	e7a3      	b.n	8024214 <lorawan_aes_set_key+0x2c>
        else if( keylen > 24 && cc % keylen == 16 )
 80242cc:	2f18      	cmp	r7, #24
 80242ce:	d9dc      	bls.n	802428a <lorawan_aes_set_key+0xa2>
 80242d0:	2910      	cmp	r1, #16
 80242d2:	d1da      	bne.n	802428a <lorawan_aes_set_key+0xa2>
            t0 = s_box(t0);
 80242d4:	9b00      	ldr	r3, [sp, #0]
 80242d6:	5cf3      	ldrb	r3, [r6, r3]
 80242d8:	9300      	str	r3, [sp, #0]
            t1 = s_box(t1);
 80242da:	9b01      	ldr	r3, [sp, #4]
 80242dc:	5cf3      	ldrb	r3, [r6, r3]
 80242de:	9301      	str	r3, [sp, #4]
            t2 = s_box(t2);
 80242e0:	9b02      	ldr	r3, [sp, #8]
 80242e2:	5cf3      	ldrb	r3, [r6, r3]
 80242e4:	9302      	str	r3, [sp, #8]
            t3 = s_box(t3);
 80242e6:	9b03      	ldr	r3, [sp, #12]
 80242e8:	5cf3      	ldrb	r3, [r6, r3]
 80242ea:	9303      	str	r3, [sp, #12]
 80242ec:	e7cd      	b.n	802428a <lorawan_aes_set_key+0xa2>
 80242ee:	46c0      	nop			; (mov r8, r8)
 80242f0:	00010101 	.word	0x00010101
 80242f4:	08031c34 	.word	0x08031c34

080242f8 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 80242f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80242fa:	b0a5      	sub	sp, #148	; 0x94
 80242fc:	0016      	movs	r6, r2
 80242fe:	911f      	str	r1, [sp, #124]	; 0x7c
    if( ctx->rnd )
 8024300:	32f0      	adds	r2, #240	; 0xf0
 8024302:	7812      	ldrb	r2, [r2, #0]
{
 8024304:	0003      	movs	r3, r0
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
    }
    else
        return ( uint8_t )-1;
 8024306:	20ff      	movs	r0, #255	; 0xff
    if( ctx->rnd )
 8024308:	2a00      	cmp	r2, #0
 802430a:	d100      	bne.n	802430e <lorawan_aes_encrypt+0x16>
 802430c:	e08a      	b.n	8024424 <lorawan_aes_encrypt+0x12c>
        copy_and_key( s1, in, ctx->ksch );
 802430e:	0032      	movs	r2, r6
 8024310:	0019      	movs	r1, r3
 8024312:	a820      	add	r0, sp, #128	; 0x80
 8024314:	f00a ff87 	bl	802f226 <copy_and_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8024318:	2501      	movs	r5, #1
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 802431a:	012a      	lsls	r2, r5, #4
 802431c:	18b3      	adds	r3, r6, r2
 802431e:	469c      	mov	ip, r3
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8024320:	ab20      	add	r3, sp, #128	; 0x80
 8024322:	781b      	ldrb	r3, [r3, #0]
 8024324:	9301      	str	r3, [sp, #4]
 8024326:	ab20      	add	r3, sp, #128	; 0x80
 8024328:	795b      	ldrb	r3, [r3, #5]
 802432a:	9302      	str	r3, [sp, #8]
 802432c:	ab20      	add	r3, sp, #128	; 0x80
 802432e:	7a9f      	ldrb	r7, [r3, #10]
 8024330:	4b91      	ldr	r3, [pc, #580]	; (8024578 <lorawan_aes_encrypt+0x280>)
 8024332:	5dda      	ldrb	r2, [r3, r7]
 8024334:	9203      	str	r2, [sp, #12]
 8024336:	aa20      	add	r2, sp, #128	; 0x80
 8024338:	7bd2      	ldrb	r2, [r2, #15]
 802433a:	9204      	str	r2, [sp, #16]
 802433c:	5c9a      	ldrb	r2, [r3, r2]
 802433e:	9205      	str	r2, [sp, #20]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8024340:	9a01      	ldr	r2, [sp, #4]
 8024342:	5c98      	ldrb	r0, [r3, r2]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8024344:	9a02      	ldr	r2, [sp, #8]
 8024346:	5c9a      	ldrb	r2, [r3, r2]
 8024348:	9206      	str	r2, [sp, #24]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 802434a:	aa20      	add	r2, sp, #128	; 0x80
 802434c:	7912      	ldrb	r2, [r2, #4]
 802434e:	9207      	str	r2, [sp, #28]
 8024350:	aa20      	add	r2, sp, #128	; 0x80
 8024352:	7a52      	ldrb	r2, [r2, #9]
 8024354:	9208      	str	r2, [sp, #32]
 8024356:	aa20      	add	r2, sp, #128	; 0x80
 8024358:	7b92      	ldrb	r2, [r2, #14]
 802435a:	9209      	str	r2, [sp, #36]	; 0x24
 802435c:	5c9a      	ldrb	r2, [r3, r2]
 802435e:	920a      	str	r2, [sp, #40]	; 0x28
 8024360:	aa20      	add	r2, sp, #128	; 0x80
 8024362:	78d2      	ldrb	r2, [r2, #3]
 8024364:	920b      	str	r2, [sp, #44]	; 0x2c
 8024366:	5c9a      	ldrb	r2, [r3, r2]
 8024368:	920c      	str	r2, [sp, #48]	; 0x30
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 802436a:	9a07      	ldr	r2, [sp, #28]
 802436c:	5c9a      	ldrb	r2, [r3, r2]
 802436e:	920d      	str	r2, [sp, #52]	; 0x34
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8024370:	9a08      	ldr	r2, [sp, #32]
 8024372:	5c9a      	ldrb	r2, [r3, r2]
 8024374:	920e      	str	r2, [sp, #56]	; 0x38
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8024376:	aa20      	add	r2, sp, #128	; 0x80
 8024378:	7a12      	ldrb	r2, [r2, #8]
 802437a:	920f      	str	r2, [sp, #60]	; 0x3c
 802437c:	aa20      	add	r2, sp, #128	; 0x80
 802437e:	7b52      	ldrb	r2, [r2, #13]
 8024380:	9210      	str	r2, [sp, #64]	; 0x40
 8024382:	aa20      	add	r2, sp, #128	; 0x80
 8024384:	7892      	ldrb	r2, [r2, #2]
 8024386:	9211      	str	r2, [sp, #68]	; 0x44
 8024388:	5c9a      	ldrb	r2, [r3, r2]
 802438a:	9212      	str	r2, [sp, #72]	; 0x48
 802438c:	aa20      	add	r2, sp, #128	; 0x80
 802438e:	79d2      	ldrb	r2, [r2, #7]
 8024390:	9213      	str	r2, [sp, #76]	; 0x4c
 8024392:	5c9a      	ldrb	r2, [r3, r2]
 8024394:	9214      	str	r2, [sp, #80]	; 0x50
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8024396:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024398:	5c9a      	ldrb	r2, [r3, r2]
 802439a:	9215      	str	r2, [sp, #84]	; 0x54
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 802439c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802439e:	5c9a      	ldrb	r2, [r3, r2]
 80243a0:	9216      	str	r2, [sp, #88]	; 0x58
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 80243a2:	aa20      	add	r2, sp, #128	; 0x80
 80243a4:	7b12      	ldrb	r2, [r2, #12]
 80243a6:	9217      	str	r2, [sp, #92]	; 0x5c
 80243a8:	aa20      	add	r2, sp, #128	; 0x80
 80243aa:	7852      	ldrb	r2, [r2, #1]
 80243ac:	9218      	str	r2, [sp, #96]	; 0x60
 80243ae:	aa20      	add	r2, sp, #128	; 0x80
 80243b0:	7992      	ldrb	r2, [r2, #6]
 80243b2:	9219      	str	r2, [sp, #100]	; 0x64
 80243b4:	5c9a      	ldrb	r2, [r3, r2]
 80243b6:	921a      	str	r2, [sp, #104]	; 0x68
 80243b8:	aa20      	add	r2, sp, #128	; 0x80
 80243ba:	7ad2      	ldrb	r2, [r2, #11]
 80243bc:	921b      	str	r2, [sp, #108]	; 0x6c
 80243be:	5c9a      	ldrb	r2, [r3, r2]
 80243c0:	921c      	str	r2, [sp, #112]	; 0x70
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 80243c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80243c4:	5c9a      	ldrb	r2, [r3, r2]
 80243c6:	921d      	str	r2, [sp, #116]	; 0x74
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 80243c8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80243ca:	5c9b      	ldrb	r3, [r3, r2]
 80243cc:	931e      	str	r3, [sp, #120]	; 0x78
        for( r = 1 ; r < ctx->rnd ; ++r )
 80243ce:	0033      	movs	r3, r6
 80243d0:	33f0      	adds	r3, #240	; 0xf0
 80243d2:	781b      	ldrb	r3, [r3, #0]
 80243d4:	42ab      	cmp	r3, r5
 80243d6:	d827      	bhi.n	8024428 <lorawan_aes_encrypt+0x130>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 80243d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80243da:	ab20      	add	r3, sp, #128	; 0x80
 80243dc:	711a      	strb	r2, [r3, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 80243de:	9a15      	ldr	r2, [sp, #84]	; 0x54
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 80243e0:	7018      	strb	r0, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 80243e2:	721a      	strb	r2, [r3, #8]
 80243e4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 80243e6:	981f      	ldr	r0, [sp, #124]	; 0x7c
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 80243e8:	731a      	strb	r2, [r3, #12]
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 80243ea:	9a06      	ldr	r2, [sp, #24]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 80243ec:	0019      	movs	r1, r3
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 80243ee:	705a      	strb	r2, [r3, #1]
 80243f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80243f2:	715a      	strb	r2, [r3, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 80243f4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80243f6:	725a      	strb	r2, [r3, #9]
 80243f8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80243fa:	735a      	strb	r2, [r3, #13]
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 80243fc:	9a03      	ldr	r2, [sp, #12]
 80243fe:	709a      	strb	r2, [r3, #2]
 8024400:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024402:	729a      	strb	r2, [r3, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8024404:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024406:	719a      	strb	r2, [r3, #6]
 8024408:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 802440a:	739a      	strb	r2, [r3, #14]
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 802440c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 802440e:	73da      	strb	r2, [r3, #15]
 8024410:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024412:	72da      	strb	r2, [r3, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8024414:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024416:	71da      	strb	r2, [r3, #7]
 8024418:	9a05      	ldr	r2, [sp, #20]
 802441a:	70da      	strb	r2, [r3, #3]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 802441c:	4662      	mov	r2, ip
 802441e:	f00a ff02 	bl	802f226 <copy_and_key>
    return 0;
 8024422:	2000      	movs	r0, #0
}
 8024424:	b025      	add	sp, #148	; 0x94
 8024426:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8024428:	4b54      	ldr	r3, [pc, #336]	; (802457c <lorawan_aes_encrypt+0x284>)
 802442a:	9c01      	ldr	r4, [sp, #4]
 802442c:	9905      	ldr	r1, [sp, #20]
 802442e:	9a03      	ldr	r2, [sp, #12]
 8024430:	5d1c      	ldrb	r4, [r3, r4]
 8024432:	404a      	eors	r2, r1
 8024434:	4054      	eors	r4, r2
 8024436:	9902      	ldr	r1, [sp, #8]
 8024438:	4a51      	ldr	r2, [pc, #324]	; (8024580 <lorawan_aes_encrypt+0x288>)
        for( r = 1 ; r < ctx->rnd ; ++r )
 802443a:	3501      	adds	r5, #1
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 802443c:	5c51      	ldrb	r1, [r2, r1]
        for( r = 1 ; r < ctx->rnd ; ++r )
 802443e:	b2ed      	uxtb	r5, r5
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8024440:	404c      	eors	r4, r1
 8024442:	a920      	add	r1, sp, #128	; 0x80
 8024444:	700c      	strb	r4, [r1, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8024446:	9c02      	ldr	r4, [sp, #8]
 8024448:	9905      	ldr	r1, [sp, #20]
 802444a:	5d1c      	ldrb	r4, [r3, r4]
 802444c:	4041      	eors	r1, r0
 802444e:	4061      	eors	r1, r4
 8024450:	5dd4      	ldrb	r4, [r2, r7]
 8024452:	4061      	eors	r1, r4
 8024454:	ac20      	add	r4, sp, #128	; 0x80
 8024456:	7061      	strb	r1, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8024458:	9906      	ldr	r1, [sp, #24]
 802445a:	4048      	eors	r0, r1
 802445c:	5dd9      	ldrb	r1, [r3, r7]
 802445e:	4048      	eors	r0, r1
 8024460:	9904      	ldr	r1, [sp, #16]
 8024462:	5c51      	ldrb	r1, [r2, r1]
 8024464:	4048      	eors	r0, r1
 8024466:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8024468:	9903      	ldr	r1, [sp, #12]
 802446a:	9806      	ldr	r0, [sp, #24]
 802446c:	4041      	eors	r1, r0
 802446e:	9801      	ldr	r0, [sp, #4]
 8024470:	5c10      	ldrb	r0, [r2, r0]
 8024472:	4048      	eors	r0, r1
 8024474:	9904      	ldr	r1, [sp, #16]
 8024476:	5c59      	ldrb	r1, [r3, r1]
 8024478:	4041      	eors	r1, r0
 802447a:	70e1      	strb	r1, [r4, #3]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 802447c:	980c      	ldr	r0, [sp, #48]	; 0x30
 802447e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8024480:	4041      	eors	r1, r0
 8024482:	9807      	ldr	r0, [sp, #28]
 8024484:	5c18      	ldrb	r0, [r3, r0]
 8024486:	4041      	eors	r1, r0
 8024488:	9808      	ldr	r0, [sp, #32]
 802448a:	5c10      	ldrb	r0, [r2, r0]
 802448c:	4041      	eors	r1, r0
 802448e:	7121      	strb	r1, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8024490:	980d      	ldr	r0, [sp, #52]	; 0x34
 8024492:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024494:	4041      	eors	r1, r0
 8024496:	9808      	ldr	r0, [sp, #32]
 8024498:	5c18      	ldrb	r0, [r3, r0]
 802449a:	4041      	eors	r1, r0
 802449c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802449e:	5c10      	ldrb	r0, [r2, r0]
 80244a0:	4041      	eors	r1, r0
 80244a2:	7161      	strb	r1, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 80244a4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80244a6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80244a8:	4041      	eors	r1, r0
 80244aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80244ac:	5c18      	ldrb	r0, [r3, r0]
 80244ae:	4041      	eors	r1, r0
 80244b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80244b2:	5c10      	ldrb	r0, [r2, r0]
 80244b4:	4041      	eors	r1, r0
 80244b6:	71a1      	strb	r1, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 80244b8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80244ba:	990a      	ldr	r1, [sp, #40]	; 0x28
 80244bc:	4041      	eors	r1, r0
 80244be:	9807      	ldr	r0, [sp, #28]
 80244c0:	5c10      	ldrb	r0, [r2, r0]
 80244c2:	4048      	eors	r0, r1
 80244c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80244c6:	5c59      	ldrb	r1, [r3, r1]
 80244c8:	4041      	eors	r1, r0
 80244ca:	71e1      	strb	r1, [r4, #7]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 80244cc:	9814      	ldr	r0, [sp, #80]	; 0x50
 80244ce:	9912      	ldr	r1, [sp, #72]	; 0x48
 80244d0:	4041      	eors	r1, r0
 80244d2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80244d4:	5c18      	ldrb	r0, [r3, r0]
 80244d6:	4041      	eors	r1, r0
 80244d8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80244da:	5c10      	ldrb	r0, [r2, r0]
 80244dc:	4041      	eors	r1, r0
 80244de:	7221      	strb	r1, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 80244e0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80244e2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80244e4:	4041      	eors	r1, r0
 80244e6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80244e8:	5c18      	ldrb	r0, [r3, r0]
 80244ea:	4041      	eors	r1, r0
 80244ec:	9811      	ldr	r0, [sp, #68]	; 0x44
 80244ee:	5c10      	ldrb	r0, [r2, r0]
 80244f0:	4041      	eors	r1, r0
 80244f2:	7261      	strb	r1, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 80244f4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80244f6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80244f8:	4041      	eors	r1, r0
 80244fa:	9811      	ldr	r0, [sp, #68]	; 0x44
 80244fc:	5c18      	ldrb	r0, [r3, r0]
 80244fe:	4041      	eors	r1, r0
 8024500:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8024502:	5c10      	ldrb	r0, [r2, r0]
 8024504:	4041      	eors	r1, r0
 8024506:	72a1      	strb	r1, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8024508:	9816      	ldr	r0, [sp, #88]	; 0x58
 802450a:	9912      	ldr	r1, [sp, #72]	; 0x48
 802450c:	4041      	eors	r1, r0
 802450e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8024510:	5c10      	ldrb	r0, [r2, r0]
 8024512:	4048      	eors	r0, r1
 8024514:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8024516:	5c59      	ldrb	r1, [r3, r1]
 8024518:	4041      	eors	r1, r0
 802451a:	72e1      	strb	r1, [r4, #11]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 802451c:	981c      	ldr	r0, [sp, #112]	; 0x70
 802451e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8024520:	4041      	eors	r1, r0
 8024522:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8024524:	5c18      	ldrb	r0, [r3, r0]
 8024526:	4041      	eors	r1, r0
 8024528:	9818      	ldr	r0, [sp, #96]	; 0x60
 802452a:	5c10      	ldrb	r0, [r2, r0]
 802452c:	4041      	eors	r1, r0
 802452e:	7321      	strb	r1, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8024530:	981d      	ldr	r0, [sp, #116]	; 0x74
 8024532:	991c      	ldr	r1, [sp, #112]	; 0x70
 8024534:	4041      	eors	r1, r0
 8024536:	9818      	ldr	r0, [sp, #96]	; 0x60
 8024538:	5c18      	ldrb	r0, [r3, r0]
 802453a:	4041      	eors	r1, r0
 802453c:	9819      	ldr	r0, [sp, #100]	; 0x64
 802453e:	5c10      	ldrb	r0, [r2, r0]
 8024540:	4041      	eors	r1, r0
 8024542:	7361      	strb	r1, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8024544:	991d      	ldr	r1, [sp, #116]	; 0x74
 8024546:	981e      	ldr	r0, [sp, #120]	; 0x78
 8024548:	4041      	eors	r1, r0
 802454a:	9819      	ldr	r0, [sp, #100]	; 0x64
 802454c:	5c18      	ldrb	r0, [r3, r0]
 802454e:	4041      	eors	r1, r0
 8024550:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8024552:	5c10      	ldrb	r0, [r2, r0]
 8024554:	4041      	eors	r1, r0
 8024556:	73a1      	strb	r1, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8024558:	981e      	ldr	r0, [sp, #120]	; 0x78
 802455a:	991a      	ldr	r1, [sp, #104]	; 0x68
 802455c:	4041      	eors	r1, r0
 802455e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8024560:	5c12      	ldrb	r2, [r2, r0]
    xor_block(d, k);
 8024562:	0020      	movs	r0, r4
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8024564:	404a      	eors	r2, r1
 8024566:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8024568:	5c5b      	ldrb	r3, [r3, r1]
    xor_block(d, k);
 802456a:	4661      	mov	r1, ip
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 802456c:	4053      	eors	r3, r2
 802456e:	73e3      	strb	r3, [r4, #15]
    xor_block(d, k);
 8024570:	f00a fe18 	bl	802f1a4 <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8024574:	e6d1      	b.n	802431a <lorawan_aes_encrypt+0x22>
 8024576:	46c0      	nop			; (mov r8, r8)
 8024578:	08031c34 	.word	0x08031c34
 802457c:	08031a34 	.word	0x08031a34
 8024580:	08031b34 	.word	0x08031b34

08024584 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID(KeyIdentifier_t keyID, Key_t **keyItem)
{
 8024584:	b530      	push	{r4, r5, lr}
 8024586:	4c09      	ldr	r4, [pc, #36]	; (80245ac <GetKeyByID+0x28>)
 8024588:	2200      	movs	r2, #0
 802458a:	0025      	movs	r5, r4
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
  {
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 802458c:	7c23      	ldrb	r3, [r4, #16]
 802458e:	4283      	cmp	r3, r0
 8024590:	d106      	bne.n	80245a0 <GetKeyByID+0x1c>
    {
      *keyItem = &(SeNvmCtx.KeyList[i]);
 8024592:	2311      	movs	r3, #17
      return SECURE_ELEMENT_SUCCESS;
 8024594:	2000      	movs	r0, #0
      *keyItem = &(SeNvmCtx.KeyList[i]);
 8024596:	4353      	muls	r3, r2
 8024598:	3310      	adds	r3, #16
 802459a:	18eb      	adds	r3, r5, r3
 802459c:	600b      	str	r3, [r1, #0]
    }
  }
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
}
 802459e:	bd30      	pop	{r4, r5, pc}
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 80245a0:	3201      	adds	r2, #1
 80245a2:	3411      	adds	r4, #17
 80245a4:	2a0a      	cmp	r2, #10
 80245a6:	d1f1      	bne.n	802458c <GetKeyByID+0x8>
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80245a8:	2003      	movs	r0, #3
 80245aa:	e7f8      	b.n	802459e <GetKeyByID+0x1a>
 80245ac:	2000813a 	.word	0x2000813a

080245b0 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit(SecureElementNvmEvent seNvmCtxChanged)
{
 80245b0:	b513      	push	{r0, r1, r4, lr}
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  Key_t *keyItem;
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;

  /* Initialize LoRaWAN Key List buffer */
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 80245b2:	22aa      	movs	r2, #170	; 0xaa
{
 80245b4:	0004      	movs	r4, r0
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 80245b6:	490e      	ldr	r1, [pc, #56]	; (80245f0 <SecureElementInit+0x40>)
 80245b8:	480e      	ldr	r0, [pc, #56]	; (80245f4 <SecureElementInit+0x44>)
 80245ba:	f00a fdba 	bl	802f132 <memcpy1>

  retval = GetKeyByID(APP_KEY, &keyItem);
 80245be:	a901      	add	r1, sp, #4
 80245c0:	2000      	movs	r0, #0
 80245c2:	f7ff ffdf 	bl	8024584 <GetKeyByID>
  KEY_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
  if (retval == SECURE_ELEMENT_SUCCESS)
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppKey:  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
  }
  retval = GetKeyByID(NWK_KEY, &keyItem);
 80245c6:	a901      	add	r1, sp, #4
 80245c8:	2001      	movs	r0, #1
 80245ca:	f7ff ffdb 	bl	8024584 <GetKeyByID>
  if (retval == SECURE_ELEMENT_SUCCESS)
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
  }
  KEY_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
  retval = GetKeyByID(APP_S_KEY, &keyItem);
 80245ce:	a901      	add	r1, sp, #4
 80245d0:	2003      	movs	r0, #3
 80245d2:	f7ff ffd7 	bl	8024584 <GetKeyByID>
  if (retval == SECURE_ELEMENT_SUCCESS)
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppSKey: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
  }
#if ( USE_LRWAN_1_1_X_CRYPTO == 0)
  retval = GetKeyByID(NWK_S_KEY, &keyItem);
 80245d6:	2002      	movs	r0, #2
 80245d8:	a901      	add	r1, sp, #4
 80245da:	f7ff ffd3 	bl	8024584 <GetKeyByID>
  SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;

#endif /* LORAWAN_KMS */

  /* Assign callback */
  if (seNvmCtxChanged != 0)
 80245de:	2c00      	cmp	r4, #0
 80245e0:	d100      	bne.n	80245e4 <SecureElementInit+0x34>
  {
    SeNvmCtxChanged = seNvmCtxChanged;
  }
  else
  {
    SeNvmCtxChanged = DummyCB;
 80245e2:	4c05      	ldr	r4, [pc, #20]	; (80245f8 <SecureElementInit+0x48>)
 80245e4:	4b05      	ldr	r3, [pc, #20]	; (80245fc <SecureElementInit+0x4c>)
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
  SeNvmCtxChanged();

  return SECURE_ELEMENT_SUCCESS;
}
 80245e6:	601c      	str	r4, [r3, #0]
  SeNvmCtxChanged();
 80245e8:	47a0      	blx	r4
}
 80245ea:	2000      	movs	r0, #0
 80245ec:	bd16      	pop	{r1, r2, r4, pc}
 80245ee:	46c0      	nop			; (mov r8, r8)
 80245f0:	08031d34 	.word	0x08031d34
 80245f4:	2000814a 	.word	0x2000814a
 80245f8:	0802f507 	.word	0x0802f507
 80245fc:	20008814 	.word	0x20008814

08024600 <SecureElementRestoreNvmCtx>:
  return SECURE_ELEMENT_SUCCESS;
#endif /* LORAWAN_KMS == 1 */
}

SecureElementStatus_t SecureElementRestoreNvmCtx(void *seNvmCtx)
{
 8024600:	0001      	movs	r1, r0
 8024602:	b510      	push	{r4, lr}
    memcpy1((uint8_t *) &SeNvmCtx, (uint8_t *) seNvmCtx, sizeof(SeNvmCtx));
    return SECURE_ELEMENT_SUCCESS;
  }
  else
  {
    return SECURE_ELEMENT_ERROR_NPE;
 8024604:	2002      	movs	r0, #2
  if (seNvmCtx != 0)
 8024606:	2900      	cmp	r1, #0
 8024608:	d004      	beq.n	8024614 <SecureElementRestoreNvmCtx+0x14>
    memcpy1((uint8_t *) &SeNvmCtx, (uint8_t *) seNvmCtx, sizeof(SeNvmCtx));
 802460a:	4803      	ldr	r0, [pc, #12]	; (8024618 <SecureElementRestoreNvmCtx+0x18>)
 802460c:	22ba      	movs	r2, #186	; 0xba
 802460e:	f00a fd90 	bl	802f132 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8024612:	2000      	movs	r0, #0
  }
}
 8024614:	bd10      	pop	{r4, pc}
 8024616:	46c0      	nop			; (mov r8, r8)
 8024618:	2000813a 	.word	0x2000813a

0802461c <SecureElementGetNvmCtx>:

void *SecureElementGetNvmCtx(size_t *seNvmCtxSize)
{
  *seNvmCtxSize = sizeof(SeNvmCtx);
 802461c:	23ba      	movs	r3, #186	; 0xba
 802461e:	6003      	str	r3, [r0, #0]
  return &SeNvmCtx;
}
 8024620:	4800      	ldr	r0, [pc, #0]	; (8024624 <SecureElementGetNvmCtx+0x8>)
 8024622:	4770      	bx	lr
 8024624:	2000813a 	.word	0x2000813a

08024628 <SecureElementSetKey.part.0>:

SecureElementStatus_t SecureElementSetKey(KeyIdentifier_t keyID, uint8_t *key)
 8024628:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 802462a:	4a19      	ldr	r2, [pc, #100]	; (8024690 <SecureElementSetKey.part.0+0x68>)
 802462c:	000c      	movs	r4, r1
 802462e:	2300      	movs	r3, #0
 8024630:	0015      	movs	r5, r2
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
  {
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 8024632:	7c11      	ldrb	r1, [r2, #16]
 8024634:	3301      	adds	r3, #1
 8024636:	4281      	cmp	r1, r0
 8024638:	d125      	bne.n	8024686 <SecureElementSetKey.part.0+0x5e>
        SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
        uint8_t decryptedKey[16] = { 0 };

        retval = SecureElementAesEncrypt(key, 16, MC_KE_KEY, decryptedKey);

        memcpy1(SeNvmCtx.KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE);
 802463a:	2211      	movs	r2, #17
 802463c:	4353      	muls	r3, r2
 802463e:	4e15      	ldr	r6, [pc, #84]	; (8024694 <SecureElementSetKey.part.0+0x6c>)
 8024640:	18ed      	adds	r5, r5, r3
      if (keyID == MC_KEY_0)
 8024642:	2880      	cmp	r0, #128	; 0x80
 8024644:	d116      	bne.n	8024674 <SecureElementSetKey.part.0+0x4c>
        uint8_t decryptedKey[16] = { 0 };
 8024646:	2100      	movs	r1, #0
 8024648:	3a05      	subs	r2, #5
 802464a:	a801      	add	r0, sp, #4
 802464c:	9100      	str	r1, [sp, #0]
 802464e:	f00c fb90 	bl	8030d72 <memset>
        retval = SecureElementAesEncrypt(key, 16, MC_KE_KEY, decryptedKey);
 8024652:	466b      	mov	r3, sp
 8024654:	227f      	movs	r2, #127	; 0x7f
 8024656:	2110      	movs	r1, #16
 8024658:	0020      	movs	r0, r4
 802465a:	f00a ffa8 	bl	802f5ae <SecureElementAesEncrypt>
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE);
 802465e:	2210      	movs	r2, #16
        retval = SecureElementAesEncrypt(key, 16, MC_KE_KEY, decryptedKey);
 8024660:	0004      	movs	r4, r0
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE);
 8024662:	4669      	mov	r1, sp
 8024664:	0028      	movs	r0, r5
 8024666:	f00a fd64 	bl	802f132 <memcpy1>
        SeNvmCtxChanged();
 802466a:	6833      	ldr	r3, [r6, #0]
 802466c:	4798      	blx	r3
#else /* LORAWAN_KMS == 1 */
  /* Indexes are already stored at init or when deriving the key */
  CK_OBJECT_HANDLE keyIndex;
  return GetKeyIndexByID(keyID, &keyIndex);
#endif /* LORAWAN_KMS */
}
 802466e:	0020      	movs	r0, r4
 8024670:	b004      	add	sp, #16
 8024672:	bd70      	pop	{r4, r5, r6, pc}
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, key, SE_KEY_SIZE);
 8024674:	0021      	movs	r1, r4
 8024676:	2210      	movs	r2, #16
 8024678:	0028      	movs	r0, r5
 802467a:	f00a fd5a 	bl	802f132 <memcpy1>
        SeNvmCtxChanged();
 802467e:	6833      	ldr	r3, [r6, #0]
 8024680:	4798      	blx	r3
        return SECURE_ELEMENT_SUCCESS;
 8024682:	2400      	movs	r4, #0
 8024684:	e7f3      	b.n	802466e <SecureElementSetKey.part.0+0x46>
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 8024686:	3211      	adds	r2, #17
 8024688:	2b0a      	cmp	r3, #10
 802468a:	d1d2      	bne.n	8024632 <SecureElementSetKey.part.0+0xa>
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 802468c:	2403      	movs	r4, #3
 802468e:	e7ee      	b.n	802466e <SecureElementSetKey.part.0+0x46>
 8024690:	2000813a 	.word	0x2000813a
 8024694:	20008814 	.word	0x20008814

08024698 <SecureElementRandomNumber>:

  return SECURE_ELEMENT_SUCCESS;
}

SecureElementStatus_t SecureElementRandomNumber(uint32_t *randomNum)
{
 8024698:	b513      	push	{r0, r1, r4, lr}
 802469a:	0004      	movs	r4, r0
  if (randomNum == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 802469c:	2002      	movs	r0, #2
  if (randomNum == NULL)
 802469e:	2c00      	cmp	r4, #0
 80246a0:	d005      	beq.n	80246ae <SecureElementRandomNumber+0x16>
  }
  *randomNum = Radio.Random( );
 80246a2:	4b03      	ldr	r3, [pc, #12]	; (80246b0 <SecureElementRandomNumber+0x18>)
 80246a4:	695b      	ldr	r3, [r3, #20]
 80246a6:	9301      	str	r3, [sp, #4]
 80246a8:	4798      	blx	r3
 80246aa:	6020      	str	r0, [r4, #0]
  return SECURE_ELEMENT_SUCCESS;
 80246ac:	2000      	movs	r0, #0
}
 80246ae:	bd16      	pop	{r1, r2, r4, pc}
 80246b0:	08031484 	.word	0x08031484

080246b4 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui(uint8_t *devEui)
{
 80246b4:	0001      	movs	r1, r0
 80246b6:	b510      	push	{r4, lr}
  if (devEui == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 80246b8:	2002      	movs	r0, #2
  if (devEui == NULL)
 80246ba:	2900      	cmp	r1, #0
 80246bc:	d007      	beq.n	80246ce <SecureElementSetDevEui+0x1a>
  }
  memcpy1(SeNvmCtx.DevEui, devEui, SE_EUI_SIZE);
 80246be:	4804      	ldr	r0, [pc, #16]	; (80246d0 <SecureElementSetDevEui+0x1c>)
 80246c0:	2208      	movs	r2, #8
 80246c2:	f00a fd36 	bl	802f132 <memcpy1>
  SeNvmCtxChanged();
 80246c6:	4b03      	ldr	r3, [pc, #12]	; (80246d4 <SecureElementSetDevEui+0x20>)
 80246c8:	681b      	ldr	r3, [r3, #0]
 80246ca:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 80246cc:	2000      	movs	r0, #0
}
 80246ce:	bd10      	pop	{r4, pc}
 80246d0:	2000813a 	.word	0x2000813a
 80246d4:	20008814 	.word	0x20008814

080246d8 <SecureElementGetDevEui>:

uint8_t *SecureElementGetDevEui(void)
{
  return SeNvmCtx.DevEui;
}
 80246d8:	4800      	ldr	r0, [pc, #0]	; (80246dc <SecureElementGetDevEui+0x4>)
 80246da:	4770      	bx	lr
 80246dc:	2000813a 	.word	0x2000813a

080246e0 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui(uint8_t *joinEui)
{
 80246e0:	0001      	movs	r1, r0
 80246e2:	b510      	push	{r4, lr}
  if (joinEui == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 80246e4:	2002      	movs	r0, #2
  if (joinEui == NULL)
 80246e6:	2900      	cmp	r1, #0
 80246e8:	d007      	beq.n	80246fa <SecureElementSetJoinEui+0x1a>
  }
  memcpy1(SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE);
 80246ea:	4804      	ldr	r0, [pc, #16]	; (80246fc <SecureElementSetJoinEui+0x1c>)
 80246ec:	2208      	movs	r2, #8
 80246ee:	f00a fd20 	bl	802f132 <memcpy1>
  SeNvmCtxChanged();
 80246f2:	4b03      	ldr	r3, [pc, #12]	; (8024700 <SecureElementSetJoinEui+0x20>)
 80246f4:	681b      	ldr	r3, [r3, #0]
 80246f6:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 80246f8:	2000      	movs	r0, #0
}
 80246fa:	bd10      	pop	{r4, pc}
 80246fc:	20008142 	.word	0x20008142
 8024700:	20008814 	.word	0x20008814

08024704 <SecureElementGetJoinEui>:

uint8_t *SecureElementGetJoinEui(void)
{
  return SeNvmCtx.JoinEui;
}
 8024704:	4800      	ldr	r0, [pc, #0]	; (8024708 <SecureElementGetJoinEui+0x4>)
 8024706:	4770      	bx	lr
 8024708:	20008142 	.word	0x20008142

0802470c <SUBGRF_GetOperatingMode>:
    OperatingMode = MODE_STDBY_RC;
}

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
    return OperatingMode;
 802470c:	4b01      	ldr	r3, [pc, #4]	; (8024714 <SUBGRF_GetOperatingMode+0x8>)
 802470e:	7818      	ldrb	r0, [r3, #0]
}
 8024710:	4770      	bx	lr
 8024712:	46c0      	nop			; (mov r8, r8)
 8024714:	2000990f 	.word	0x2000990f

08024718 <SUBGRF_SetStandby>:
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
    OperatingMode = MODE_SLEEP;
}

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8024718:	b507      	push	{r0, r1, r2, lr}
 802471a:	466b      	mov	r3, sp
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 802471c:	466a      	mov	r2, sp
{
 802471e:	71d8      	strb	r0, [r3, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8024720:	3207      	adds	r2, #7
 8024722:	2301      	movs	r3, #1
 8024724:	2180      	movs	r1, #128	; 0x80
 8024726:	4805      	ldr	r0, [pc, #20]	; (802473c <SUBGRF_SetStandby+0x24>)
 8024728:	f00c f83a 	bl	80307a0 <HAL_SUBGHZ_ExecSetCmd>
    if( standbyConfig == STDBY_RC )
 802472c:	466b      	mov	r3, sp
 802472e:	79db      	ldrb	r3, [r3, #7]
    {
        OperatingMode = MODE_STDBY_RC;
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
 8024730:	1e5a      	subs	r2, r3, #1
 8024732:	4193      	sbcs	r3, r2
 8024734:	4a02      	ldr	r2, [pc, #8]	; (8024740 <SUBGRF_SetStandby+0x28>)
 8024736:	3301      	adds	r3, #1
 8024738:	7013      	strb	r3, [r2, #0]
    }
}
 802473a:	bd07      	pop	{r0, r1, r2, pc}
 802473c:	200087ec 	.word	0x200087ec
 8024740:	2000990f 	.word	0x2000990f

08024744 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8024744:	b507      	push	{r0, r1, r2, lr}
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8024746:	2204      	movs	r2, #4
 8024748:	4b06      	ldr	r3, [pc, #24]	; (8024764 <SUBGRF_SetTx+0x20>)

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
    buf[2] = ( uint8_t )( timeout & 0xFF );
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 802474a:	2183      	movs	r1, #131	; 0x83
    OperatingMode = MODE_TX;
 802474c:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 802474e:	aa01      	add	r2, sp, #4
 8024750:	0c03      	lsrs	r3, r0, #16
 8024752:	7013      	strb	r3, [r2, #0]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8024754:	0a03      	lsrs	r3, r0, #8
 8024756:	7053      	strb	r3, [r2, #1]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8024758:	7090      	strb	r0, [r2, #2]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 802475a:	2303      	movs	r3, #3
 802475c:	4802      	ldr	r0, [pc, #8]	; (8024768 <SUBGRF_SetTx+0x24>)
 802475e:	f00c f81f 	bl	80307a0 <HAL_SUBGHZ_ExecSetCmd>
}
 8024762:	bd07      	pop	{r0, r1, r2, pc}
 8024764:	2000990f 	.word	0x2000990f
 8024768:	200087ec 	.word	0x200087ec

0802476c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 802476c:	b507      	push	{r0, r1, r2, lr}
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 802476e:	2205      	movs	r2, #5
 8024770:	4b06      	ldr	r3, [pc, #24]	; (802478c <SUBGRF_SetRx+0x20>)

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
    buf[2] = ( uint8_t )( timeout & 0xFF );
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8024772:	2182      	movs	r1, #130	; 0x82
    OperatingMode = MODE_RX;
 8024774:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8024776:	aa01      	add	r2, sp, #4
 8024778:	0c03      	lsrs	r3, r0, #16
 802477a:	7013      	strb	r3, [r2, #0]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 802477c:	0a03      	lsrs	r3, r0, #8
 802477e:	7053      	strb	r3, [r2, #1]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8024780:	7090      	strb	r0, [r2, #2]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8024782:	2303      	movs	r3, #3
 8024784:	4802      	ldr	r0, [pc, #8]	; (8024790 <SUBGRF_SetRx+0x24>)
 8024786:	f00c f80b 	bl	80307a0 <HAL_SUBGHZ_ExecSetCmd>
}
 802478a:	bd07      	pop	{r0, r1, r2, pc}
 802478c:	2000990f 	.word	0x2000990f
 8024790:	200087ec 	.word	0x200087ec

08024794 <SUBGRF_SetRxDutyCycle>:
    buf[2] = ( uint8_t )( timeout & 0xFF );
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
}

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8024794:	b507      	push	{r0, r1, r2, lr}
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8024796:	466a      	mov	r2, sp
 8024798:	0c03      	lsrs	r3, r0, #16
 802479a:	7013      	strb	r3, [r2, #0]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 802479c:	0a03      	lsrs	r3, r0, #8
 802479e:	7053      	strb	r3, [r2, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80247a0:	0c0b      	lsrs	r3, r1, #16
 80247a2:	70d3      	strb	r3, [r2, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80247a4:	0a0b      	lsrs	r3, r1, #8
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80247a6:	7090      	strb	r0, [r2, #2]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80247a8:	7113      	strb	r3, [r2, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80247aa:	7151      	strb	r1, [r2, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80247ac:	2306      	movs	r3, #6
 80247ae:	2194      	movs	r1, #148	; 0x94
 80247b0:	4803      	ldr	r0, [pc, #12]	; (80247c0 <SUBGRF_SetRxDutyCycle+0x2c>)
 80247b2:	f00b fff5 	bl	80307a0 <HAL_SUBGHZ_ExecSetCmd>
    OperatingMode = MODE_RX_DC;
 80247b6:	2206      	movs	r2, #6
 80247b8:	4b02      	ldr	r3, [pc, #8]	; (80247c4 <SUBGRF_SetRxDutyCycle+0x30>)
 80247ba:	701a      	strb	r2, [r3, #0]
}
 80247bc:	bd07      	pop	{r0, r1, r2, pc}
 80247be:	46c0      	nop			; (mov r8, r8)
 80247c0:	200087ec 	.word	0x200087ec
 80247c4:	2000990f 	.word	0x2000990f

080247c8 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80247c8:	2300      	movs	r3, #0
{
 80247ca:	b510      	push	{r4, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80247cc:	001a      	movs	r2, r3
 80247ce:	21c5      	movs	r1, #197	; 0xc5
 80247d0:	4803      	ldr	r0, [pc, #12]	; (80247e0 <SUBGRF_SetCad+0x18>)
 80247d2:	f00b ffe5 	bl	80307a0 <HAL_SUBGHZ_ExecSetCmd>
    OperatingMode = MODE_CAD;
 80247d6:	2207      	movs	r2, #7
 80247d8:	4b02      	ldr	r3, [pc, #8]	; (80247e4 <SUBGRF_SetCad+0x1c>)
 80247da:	701a      	strb	r2, [r3, #0]
}
 80247dc:	bd10      	pop	{r4, pc}
 80247de:	46c0      	nop			; (mov r8, r8)
 80247e0:	200087ec 	.word	0x200087ec
 80247e4:	2000990f 	.word	0x2000990f

080247e8 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80247e8:	2300      	movs	r3, #0
{
 80247ea:	b510      	push	{r4, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80247ec:	001a      	movs	r2, r3
 80247ee:	21d1      	movs	r1, #209	; 0xd1
 80247f0:	4801      	ldr	r0, [pc, #4]	; (80247f8 <SUBGRF_SetTxContinuousWave+0x10>)
 80247f2:	f00b ffd5 	bl	80307a0 <HAL_SUBGHZ_ExecSetCmd>
}
 80247f6:	bd10      	pop	{r4, pc}
 80247f8:	200087ec 	.word	0x200087ec

080247fc <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 80247fc:	2300      	movs	r3, #0
{
 80247fe:	b510      	push	{r4, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8024800:	001a      	movs	r2, r3
 8024802:	21d2      	movs	r1, #210	; 0xd2
 8024804:	4801      	ldr	r0, [pc, #4]	; (802480c <SUBGRF_SetTxInfinitePreamble+0x10>)
 8024806:	f00b ffcb 	bl	80307a0 <HAL_SUBGHZ_ExecSetCmd>
}
 802480a:	bd10      	pop	{r4, pc}
 802480c:	200087ec 	.word	0x200087ec

08024810 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8024810:	b507      	push	{r0, r1, r2, lr}
 8024812:	466b      	mov	r3, sp
 8024814:	1dda      	adds	r2, r3, #7
 8024816:	7010      	strb	r0, [r2, #0]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8024818:	2301      	movs	r3, #1
 802481a:	219f      	movs	r1, #159	; 0x9f
 802481c:	4801      	ldr	r0, [pc, #4]	; (8024824 <SUBGRF_SetStopRxTimerOnPreambleDetect+0x14>)
 802481e:	f00b ffbf 	bl	80307a0 <HAL_SUBGHZ_ExecSetCmd>
}
 8024822:	bd07      	pop	{r0, r1, r2, pc}
 8024824:	200087ec 	.word	0x200087ec

08024828 <SUBGRF_SetRegulatorMode>:
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
    }
}

void SUBGRF_SetRegulatorMode( void )
{
 8024828:	b507      	push	{r0, r1, r2, lr}
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( 1U == RBI_IsDCDC() )
 802482a:	f00a fcb9 	bl	802f1a0 <RBI_IsDCDC>
    {
        mode = USE_LDO ;
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
}
 802482e:	466b      	mov	r3, sp
    if ( 1U == RBI_IsDCDC() )
 8024830:	3801      	subs	r0, #1
 8024832:	1dda      	adds	r2, r3, #7
 8024834:	4243      	negs	r3, r0
 8024836:	4158      	adcs	r0, r3
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8024838:	2196      	movs	r1, #150	; 0x96
    if ( 1U == RBI_IsDCDC() )
 802483a:	7010      	strb	r0, [r2, #0]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 802483c:	2301      	movs	r3, #1
 802483e:	4802      	ldr	r0, [pc, #8]	; (8024848 <SUBGRF_SetRegulatorMode+0x20>)
 8024840:	f00b ffae 	bl	80307a0 <HAL_SUBGHZ_ExecSetCmd>
}
 8024844:	bd07      	pop	{r0, r1, r2, pc}
 8024846:	46c0      	nop			; (mov r8, r8)
 8024848:	200087ec 	.word	0x200087ec

0802484c <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 802484c:	1c03      	adds	r3, r0, #0
 802484e:	b507      	push	{r0, r1, r2, lr}
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8024850:	2060      	movs	r0, #96	; 0x60
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8024852:	07d9      	lsls	r1, r3, #31
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8024854:	4018      	ands	r0, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8024856:	0fc9      	lsrs	r1, r1, #31
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8024858:	4308      	orrs	r0, r1
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 802485a:	2110      	movs	r1, #16
 802485c:	4019      	ands	r1, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 802485e:	4308      	orrs	r0, r1
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8024860:	2108      	movs	r1, #8
 8024862:	4019      	ands	r1, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8024864:	4308      	orrs	r0, r1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8024866:	2104      	movs	r1, #4
 8024868:	4019      	ands	r1, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 802486a:	4308      	orrs	r0, r1
 802486c:	2102      	movs	r1, #2
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 802486e:	466a      	mov	r2, sp
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8024870:	400b      	ands	r3, r1
 8024872:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8024874:	3207      	adds	r2, #7
 8024876:	7010      	strb	r0, [r2, #0]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8024878:	2301      	movs	r3, #1
 802487a:	4802      	ldr	r0, [pc, #8]	; (8024884 <SUBGRF_Calibrate+0x38>)
 802487c:	3187      	adds	r1, #135	; 0x87
 802487e:	f00b ff8f 	bl	80307a0 <HAL_SUBGHZ_ExecSetCmd>
}
 8024882:	bd07      	pop	{r0, r1, r2, pc}
 8024884:	200087ec 	.word	0x200087ec

08024888 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8024888:	b507      	push	{r0, r1, r2, lr}
    uint8_t calFreq[2];

    if( freq > 900000000 )
 802488a:	4b13      	ldr	r3, [pc, #76]	; (80248d8 <SUBGRF_CalibrateImage+0x50>)
 802488c:	aa01      	add	r2, sp, #4
 802488e:	4298      	cmp	r0, r3
 8024890:	d909      	bls.n	80248a6 <SUBGRF_CalibrateImage+0x1e>
    {
        calFreq[0] = 0xE1;
 8024892:	23e1      	movs	r3, #225	; 0xe1
 8024894:	7013      	strb	r3, [r2, #0]
        calFreq[1] = 0xE9;
 8024896:	3308      	adds	r3, #8
        calFreq[1] = 0x81;
    }
    else if( freq > 425000000 )
    {
        calFreq[0] = 0x6B;
        calFreq[1] = 0x6F;
 8024898:	7053      	strb	r3, [r2, #1]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 802489a:	2302      	movs	r3, #2
 802489c:	2198      	movs	r1, #152	; 0x98
 802489e:	480f      	ldr	r0, [pc, #60]	; (80248dc <SUBGRF_CalibrateImage+0x54>)
 80248a0:	f00b ff7e 	bl	80307a0 <HAL_SUBGHZ_ExecSetCmd>
}
 80248a4:	bd07      	pop	{r0, r1, r2, pc}
    else if( freq > 850000000 )
 80248a6:	4b0e      	ldr	r3, [pc, #56]	; (80248e0 <SUBGRF_CalibrateImage+0x58>)
 80248a8:	4298      	cmp	r0, r3
 80248aa:	d903      	bls.n	80248b4 <SUBGRF_CalibrateImage+0x2c>
        calFreq[0] = 0xD7;
 80248ac:	23d7      	movs	r3, #215	; 0xd7
        calFreq[0] = 0x6B;
 80248ae:	7013      	strb	r3, [r2, #0]
        calFreq[1] = 0x6F;
 80248b0:	3304      	adds	r3, #4
 80248b2:	e7f1      	b.n	8024898 <SUBGRF_CalibrateImage+0x10>
    else if( freq > 770000000 )
 80248b4:	4b0b      	ldr	r3, [pc, #44]	; (80248e4 <SUBGRF_CalibrateImage+0x5c>)
 80248b6:	4298      	cmp	r0, r3
 80248b8:	d901      	bls.n	80248be <SUBGRF_CalibrateImage+0x36>
        calFreq[0] = 0xC1;
 80248ba:	23c1      	movs	r3, #193	; 0xc1
 80248bc:	e7f7      	b.n	80248ae <SUBGRF_CalibrateImage+0x26>
    else if( freq > 460000000 )
 80248be:	4b0a      	ldr	r3, [pc, #40]	; (80248e8 <SUBGRF_CalibrateImage+0x60>)
 80248c0:	4298      	cmp	r0, r3
 80248c2:	d903      	bls.n	80248cc <SUBGRF_CalibrateImage+0x44>
        calFreq[0] = 0x75;
 80248c4:	2375      	movs	r3, #117	; 0x75
 80248c6:	7013      	strb	r3, [r2, #0]
        calFreq[1] = 0x81;
 80248c8:	330c      	adds	r3, #12
 80248ca:	e7e5      	b.n	8024898 <SUBGRF_CalibrateImage+0x10>
    else if( freq > 425000000 )
 80248cc:	4b07      	ldr	r3, [pc, #28]	; (80248ec <SUBGRF_CalibrateImage+0x64>)
 80248ce:	4298      	cmp	r0, r3
 80248d0:	d9e3      	bls.n	802489a <SUBGRF_CalibrateImage+0x12>
        calFreq[0] = 0x6B;
 80248d2:	236b      	movs	r3, #107	; 0x6b
 80248d4:	e7eb      	b.n	80248ae <SUBGRF_CalibrateImage+0x26>
 80248d6:	46c0      	nop			; (mov r8, r8)
 80248d8:	35a4e900 	.word	0x35a4e900
 80248dc:	200087ec 	.word	0x200087ec
 80248e0:	32a9f880 	.word	0x32a9f880
 80248e4:	2de54480 	.word	0x2de54480
 80248e8:	1b6b0b00 	.word	0x1b6b0b00
 80248ec:	1954fc40 	.word	0x1954fc40

080248f0 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80248f0:	b513      	push	{r0, r1, r4, lr}
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 80248f2:	ac01      	add	r4, sp, #4
 80248f4:	7020      	strb	r0, [r4, #0]
    buf[1] = hpMax;
 80248f6:	7061      	strb	r1, [r4, #1]
    buf[2] = deviceSel;
 80248f8:	70a2      	strb	r2, [r4, #2]
    buf[3] = paLut;
 80248fa:	70e3      	strb	r3, [r4, #3]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80248fc:	0022      	movs	r2, r4
 80248fe:	2304      	movs	r3, #4
 8024900:	2195      	movs	r1, #149	; 0x95
 8024902:	4802      	ldr	r0, [pc, #8]	; (802490c <SUBGRF_SetPaConfig+0x1c>)
 8024904:	f00b ff4c 	bl	80307a0 <HAL_SUBGHZ_ExecSetCmd>
}
 8024908:	bd13      	pop	{r0, r1, r4, pc}
 802490a:	46c0      	nop			; (mov r8, r8)
 802490c:	200087ec 	.word	0x200087ec

08024910 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8024910:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8024912:	466d      	mov	r5, sp
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8024914:	7068      	strb	r0, [r5, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8024916:	70e9      	strb	r1, [r5, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8024918:	716a      	strb	r2, [r5, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 802491a:	71eb      	strb	r3, [r5, #7]
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 802491c:	0a04      	lsrs	r4, r0, #8
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 802491e:	0a08      	lsrs	r0, r1, #8
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8024920:	0a11      	lsrs	r1, r2, #8
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8024922:	0a1a      	lsrs	r2, r3, #8
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8024924:	2308      	movs	r3, #8
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8024926:	70a8      	strb	r0, [r5, #2]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8024928:	7129      	strb	r1, [r5, #4]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 802492a:	71aa      	strb	r2, [r5, #6]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 802492c:	0019      	movs	r1, r3
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 802492e:	466a      	mov	r2, sp
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8024930:	4802      	ldr	r0, [pc, #8]	; (802493c <SUBGRF_SetDioIrqParams+0x2c>)
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8024932:	702c      	strb	r4, [r5, #0]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8024934:	f00b ff34 	bl	80307a0 <HAL_SUBGHZ_ExecSetCmd>
}
 8024938:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 802493a:	46c0      	nop			; (mov r8, r8)
 802493c:	200087ec 	.word	0x200087ec

08024940 <SUBGRF_SetTcxoMode>:

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8024940:	2307      	movs	r3, #7
{
 8024942:	b507      	push	{r0, r1, r2, lr}
    buf[0] = tcxoVoltage & 0x07;
 8024944:	4018      	ands	r0, r3
 8024946:	aa01      	add	r2, sp, #4
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8024948:	0c0b      	lsrs	r3, r1, #16
 802494a:	7053      	strb	r3, [r2, #1]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 802494c:	0a0b      	lsrs	r3, r1, #8
    buf[0] = tcxoVoltage & 0x07;
 802494e:	7010      	strb	r0, [r2, #0]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8024950:	7093      	strb	r3, [r2, #2]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8024952:	70d1      	strb	r1, [r2, #3]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8024954:	2304      	movs	r3, #4
 8024956:	2197      	movs	r1, #151	; 0x97
 8024958:	4801      	ldr	r0, [pc, #4]	; (8024960 <SUBGRF_SetTcxoMode+0x20>)
 802495a:	f00b ff21 	bl	80307a0 <HAL_SUBGHZ_ExecSetCmd>
}
 802495e:	bd07      	pop	{r0, r1, r2, pc}
 8024960:	200087ec 	.word	0x200087ec

08024964 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8024964:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t buf[4];
    uint32_t chan = 0;

    frequency+= RF_FREQUENCY_ERROR;

    if( ImageCalibrated == false )
 8024966:	4d0e      	ldr	r5, [pc, #56]	; (80249a0 <SUBGRF_SetRfFrequency+0x3c>)
{
 8024968:	0004      	movs	r4, r0
    if( ImageCalibrated == false )
 802496a:	782b      	ldrb	r3, [r5, #0]
 802496c:	2b00      	cmp	r3, #0
 802496e:	d103      	bne.n	8024978 <SUBGRF_SetRfFrequency+0x14>
    {
        SUBGRF_CalibrateImage( frequency );
 8024970:	f7ff ff8a 	bl	8024888 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8024974:	2301      	movs	r3, #1
 8024976:	702b      	strb	r3, [r5, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 8024978:	2300      	movs	r3, #0
 802497a:	4a0a      	ldr	r2, [pc, #40]	; (80249a4 <SUBGRF_SetRfFrequency+0x40>)
 802497c:	09e1      	lsrs	r1, r4, #7
 802497e:	0660      	lsls	r0, r4, #25
 8024980:	f7fb fd94 	bl	80204ac <__aeabi_uldivmod>
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8024984:	aa01      	add	r2, sp, #4
 8024986:	0e03      	lsrs	r3, r0, #24
 8024988:	7013      	strb	r3, [r2, #0]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 802498a:	0c03      	lsrs	r3, r0, #16
 802498c:	7053      	strb	r3, [r2, #1]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 802498e:	0a03      	lsrs	r3, r0, #8
 8024990:	7093      	strb	r3, [r2, #2]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8024992:	70d0      	strb	r0, [r2, #3]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8024994:	2304      	movs	r3, #4
 8024996:	2186      	movs	r1, #134	; 0x86
 8024998:	4803      	ldr	r0, [pc, #12]	; (80249a8 <SUBGRF_SetRfFrequency+0x44>)
 802499a:	f00b ff01 	bl	80307a0 <HAL_SUBGHZ_ExecSetCmd>
}
 802499e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 80249a0:	2000990d 	.word	0x2000990d
 80249a4:	01e84800 	.word	0x01e84800
 80249a8:	200087ec 	.word	0x200087ec

080249ac <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 80249ac:	b507      	push	{r0, r1, r2, lr}
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 80249ae:	466b      	mov	r3, sp
 80249b0:	7118      	strb	r0, [r3, #4]
    buf[1] = rxBaseAddress;
 80249b2:	7159      	strb	r1, [r3, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 80249b4:	4803      	ldr	r0, [pc, #12]	; (80249c4 <SUBGRF_SetBufferBaseAddress+0x18>)
 80249b6:	2302      	movs	r3, #2
 80249b8:	218f      	movs	r1, #143	; 0x8f
 80249ba:	aa01      	add	r2, sp, #4
 80249bc:	f00b fef0 	bl	80307a0 <HAL_SUBGHZ_ExecSetCmd>
}
 80249c0:	bd07      	pop	{r0, r1, r2, pc}
 80249c2:	46c0      	nop			; (mov r8, r8)
 80249c4:	200087ec 	.word	0x200087ec

080249c8 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 80249c8:	b513      	push	{r0, r1, r4, lr}
    uint8_t buf[1];
    int8_t rssi = 0;

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 80249ca:	ac01      	add	r4, sp, #4
 80249cc:	2301      	movs	r3, #1
 80249ce:	0022      	movs	r2, r4
 80249d0:	2115      	movs	r1, #21
 80249d2:	4803      	ldr	r0, [pc, #12]	; (80249e0 <SUBGRF_GetRssiInst+0x18>)
 80249d4:	f00b ff1c 	bl	8030810 <HAL_SUBGHZ_ExecGetCmd>
    rssi = -buf[0] >> 1;
 80249d8:	7820      	ldrb	r0, [r4, #0]
 80249da:	4240      	negs	r0, r0
 80249dc:	1040      	asrs	r0, r0, #1
    return rssi;
}
 80249de:	bd16      	pop	{r1, r2, r4, pc}
 80249e0:	200087ec 	.word	0x200087ec

080249e4 <SUBGRF_GetPacketStatus>:
    }
    *rxStartBufferPointer = status[1];
}

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 80249e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80249e6:	0004      	movs	r4, r0
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80249e8:	ad01      	add	r5, sp, #4
 80249ea:	2303      	movs	r3, #3
 80249ec:	002a      	movs	r2, r5
 80249ee:	2114      	movs	r1, #20
 80249f0:	4817      	ldr	r0, [pc, #92]	; (8024a50 <SUBGRF_GetPacketStatus+0x6c>)
 80249f2:	f00b ff0d 	bl	8030810 <HAL_SUBGHZ_ExecGetCmd>
    return PacketType;
 80249f6:	4b17      	ldr	r3, [pc, #92]	; (8024a54 <SUBGRF_GetPacketStatus+0x70>)
 80249f8:	781a      	ldrb	r2, [r3, #0]

    pktStatus->packetType = SUBGRF_GetPacketType( );
 80249fa:	7022      	strb	r2, [r4, #0]
    switch( pktStatus->packetType )
 80249fc:	2a00      	cmp	r2, #0
 80249fe:	d009      	beq.n	8024a14 <SUBGRF_GetPacketStatus+0x30>
 8024a00:	2a01      	cmp	r2, #1
 8024a02:	d013      	beq.n	8024a2c <SUBGRF_GetPacketStatus+0x48>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8024a04:	2214      	movs	r2, #20
 8024a06:	2100      	movs	r1, #0
 8024a08:	0020      	movs	r0, r4
 8024a0a:	f7ff fb11 	bl	8024030 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8024a0e:	230f      	movs	r3, #15
 8024a10:	7023      	strb	r3, [r4, #0]
            break;
    }
}
 8024a12:	e00a      	b.n	8024a2a <SUBGRF_GetPacketStatus+0x46>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8024a14:	782b      	ldrb	r3, [r5, #0]
            pktStatus->Params.Gfsk.FreqError = 0;
 8024a16:	60a2      	str	r2, [r4, #8]
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8024a18:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8024a1a:	786b      	ldrb	r3, [r5, #1]
 8024a1c:	425b      	negs	r3, r3
 8024a1e:	105b      	asrs	r3, r3, #1
 8024a20:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8024a22:	78ab      	ldrb	r3, [r5, #2]
 8024a24:	425b      	negs	r3, r3
 8024a26:	105b      	asrs	r3, r3, #1
 8024a28:	7163      	strb	r3, [r4, #5]
}
 8024a2a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8024a2c:	782b      	ldrb	r3, [r5, #0]
 8024a2e:	425b      	negs	r3, r3
 8024a30:	105b      	asrs	r3, r3, #1
 8024a32:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8024a34:	2301      	movs	r3, #1
 8024a36:	56eb      	ldrsb	r3, [r5, r3]
 8024a38:	3302      	adds	r3, #2
 8024a3a:	109b      	asrs	r3, r3, #2
 8024a3c:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8024a3e:	78ab      	ldrb	r3, [r5, #2]
 8024a40:	425b      	negs	r3, r3
 8024a42:	105b      	asrs	r3, r3, #1
 8024a44:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8024a46:	4b04      	ldr	r3, [pc, #16]	; (8024a58 <SUBGRF_GetPacketStatus+0x74>)
 8024a48:	681b      	ldr	r3, [r3, #0]
 8024a4a:	6123      	str	r3, [r4, #16]
            break;
 8024a4c:	e7ed      	b.n	8024a2a <SUBGRF_GetPacketStatus+0x46>
 8024a4e:	46c0      	nop			; (mov r8, r8)
 8024a50:	200087ec 	.word	0x200087ec
 8024a54:	20009910 	.word	0x20009910
 8024a58:	20008818 	.word	0x20008818

08024a5c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8024a5c:	b507      	push	{r0, r1, r2, lr}
 8024a5e:	466b      	mov	r3, sp
 8024a60:	1dda      	adds	r2, r3, #7
 8024a62:	7011      	strb	r1, [r2, #0]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8024a64:	2301      	movs	r3, #1
 8024a66:	0001      	movs	r1, r0
 8024a68:	4801      	ldr	r0, [pc, #4]	; (8024a70 <SUBGRF_WriteRegister+0x14>)
 8024a6a:	f00b fe27 	bl	80306bc <HAL_SUBGHZ_WriteRegisters>
}
 8024a6e:	bd07      	pop	{r0, r1, r2, pc}
 8024a70:	200087ec 	.word	0x200087ec

08024a74 <SUBGRF_SetRxBoosted>:
{
 8024a74:	b513      	push	{r0, r1, r4, lr}
    OperatingMode = MODE_RX;
 8024a76:	2205      	movs	r2, #5
{
 8024a78:	0004      	movs	r4, r0
    OperatingMode = MODE_RX;
 8024a7a:	4b09      	ldr	r3, [pc, #36]	; (8024aa0 <SUBGRF_SetRxBoosted+0x2c>)
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8024a7c:	2197      	movs	r1, #151	; 0x97
 8024a7e:	4809      	ldr	r0, [pc, #36]	; (8024aa4 <SUBGRF_SetRxBoosted+0x30>)
    OperatingMode = MODE_RX;
 8024a80:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8024a82:	f7ff ffeb 	bl	8024a5c <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8024a86:	aa01      	add	r2, sp, #4
 8024a88:	0c23      	lsrs	r3, r4, #16
 8024a8a:	7013      	strb	r3, [r2, #0]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8024a8c:	0a23      	lsrs	r3, r4, #8
 8024a8e:	7053      	strb	r3, [r2, #1]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8024a90:	2182      	movs	r1, #130	; 0x82
 8024a92:	2303      	movs	r3, #3
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8024a94:	7094      	strb	r4, [r2, #2]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8024a96:	4804      	ldr	r0, [pc, #16]	; (8024aa8 <SUBGRF_SetRxBoosted+0x34>)
 8024a98:	f00b fe82 	bl	80307a0 <HAL_SUBGHZ_ExecSetCmd>
}
 8024a9c:	bd13      	pop	{r0, r1, r4, pc}
 8024a9e:	46c0      	nop			; (mov r8, r8)
 8024aa0:	2000990f 	.word	0x2000990f
 8024aa4:	000008ac 	.word	0x000008ac
 8024aa8:	200087ec 	.word	0x200087ec

08024aac <SUBGRF_SetLoRaSymbNumTimeout>:
{
 8024aac:	b507      	push	{r0, r1, r2, lr}
 8024aae:	466b      	mov	r3, sp
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8024ab0:	466a      	mov	r2, sp
{
 8024ab2:	71d8      	strb	r0, [r3, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8024ab4:	21a0      	movs	r1, #160	; 0xa0
 8024ab6:	2301      	movs	r3, #1
 8024ab8:	4807      	ldr	r0, [pc, #28]	; (8024ad8 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>)
 8024aba:	3207      	adds	r2, #7
 8024abc:	f00b fe70 	bl	80307a0 <HAL_SUBGHZ_ExecSetCmd>
    if( symbNum >= 64 )
 8024ac0:	466b      	mov	r3, sp
 8024ac2:	79d9      	ldrb	r1, [r3, #7]
 8024ac4:	293f      	cmp	r1, #63	; 0x3f
 8024ac6:	d906      	bls.n	8024ad6 <SUBGRF_SetLoRaSymbNumTimeout+0x2a>
        reg = exp + ( mant << 3 );
 8024ac8:	08c9      	lsrs	r1, r1, #3
 8024aca:	00c9      	lsls	r1, r1, #3
 8024acc:	3101      	adds	r1, #1
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8024ace:	4803      	ldr	r0, [pc, #12]	; (8024adc <SUBGRF_SetLoRaSymbNumTimeout+0x30>)
 8024ad0:	b2c9      	uxtb	r1, r1
 8024ad2:	f7ff ffc3 	bl	8024a5c <SUBGRF_WriteRegister>
}
 8024ad6:	bd07      	pop	{r0, r1, r2, pc}
 8024ad8:	200087ec 	.word	0x200087ec
 8024adc:	00000706 	.word	0x00000706

08024ae0 <SUBGRF_SetPacketType>:
{
 8024ae0:	b513      	push	{r0, r1, r4, lr}
 8024ae2:	466b      	mov	r3, sp
 8024ae4:	1ddc      	adds	r4, r3, #7
    PacketType = packetType;
 8024ae6:	4b07      	ldr	r3, [pc, #28]	; (8024b04 <SUBGRF_SetPacketType+0x24>)
{
 8024ae8:	1e01      	subs	r1, r0, #0
    PacketType = packetType;
 8024aea:	7018      	strb	r0, [r3, #0]
{
 8024aec:	7020      	strb	r0, [r4, #0]
    if( packetType == PACKET_TYPE_GFSK )
 8024aee:	d102      	bne.n	8024af6 <SUBGRF_SetPacketType+0x16>
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8024af0:	4805      	ldr	r0, [pc, #20]	; (8024b08 <SUBGRF_SetPacketType+0x28>)
 8024af2:	f7ff ffb3 	bl	8024a5c <SUBGRF_WriteRegister>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8024af6:	2301      	movs	r3, #1
 8024af8:	0022      	movs	r2, r4
 8024afa:	218a      	movs	r1, #138	; 0x8a
 8024afc:	4803      	ldr	r0, [pc, #12]	; (8024b0c <SUBGRF_SetPacketType+0x2c>)
 8024afe:	f00b fe4f 	bl	80307a0 <HAL_SUBGHZ_ExecSetCmd>
}
 8024b02:	bd13      	pop	{r0, r1, r4, pc}
 8024b04:	20009910 	.word	0x20009910
 8024b08:	000006ac 	.word	0x000006ac
 8024b0c:	200087ec 	.word	0x200087ec

08024b10 <SUBGRF_SetModulationParams>:
{
 8024b10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024b12:	0004      	movs	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8024b14:	2208      	movs	r2, #8
 8024b16:	4668      	mov	r0, sp
 8024b18:	492c      	ldr	r1, [pc, #176]	; (8024bcc <SUBGRF_SetModulationParams+0xbc>)
 8024b1a:	f00c f921 	bl	8030d60 <memcpy>
    if( PacketType != modulationParams->PacketType )
 8024b1e:	4b2c      	ldr	r3, [pc, #176]	; (8024bd0 <SUBGRF_SetModulationParams+0xc0>)
 8024b20:	7820      	ldrb	r0, [r4, #0]
 8024b22:	781b      	ldrb	r3, [r3, #0]
 8024b24:	4283      	cmp	r3, r0
 8024b26:	d001      	beq.n	8024b2c <SUBGRF_SetModulationParams+0x1c>
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8024b28:	f7ff ffda 	bl	8024ae0 <SUBGRF_SetPacketType>
    switch( modulationParams->PacketType )
 8024b2c:	7820      	ldrb	r0, [r4, #0]
 8024b2e:	2803      	cmp	r0, #3
 8024b30:	d824      	bhi.n	8024b7c <SUBGRF_SetModulationParams+0x6c>
 8024b32:	4d28      	ldr	r5, [pc, #160]	; (8024bd4 <SUBGRF_SetModulationParams+0xc4>)
 8024b34:	f7fb face 	bl	80200d4 <__gnu_thumb1_case_uqi>
 8024b38:	3a233102 	.word	0x3a233102
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8024b3c:	6861      	ldr	r1, [r4, #4]
 8024b3e:	4826      	ldr	r0, [pc, #152]	; (8024bd8 <SUBGRF_SetModulationParams+0xc8>)
 8024b40:	f7fb fae6 	bl	8020110 <__udivsi3>
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8024b44:	466a      	mov	r2, sp
 8024b46:	0c03      	lsrs	r3, r0, #16
 8024b48:	7013      	strb	r3, [r2, #0]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8024b4a:	0a03      	lsrs	r3, r0, #8
        buf[2] = tempVal & 0xFF;
 8024b4c:	7090      	strb	r0, [r2, #2]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8024b4e:	7053      	strb	r3, [r2, #1]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8024b50:	7b23      	ldrb	r3, [r4, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8024b52:	68a0      	ldr	r0, [r4, #8]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8024b54:	70d3      	strb	r3, [r2, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8024b56:	7b63      	ldrb	r3, [r4, #13]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8024b58:	09c1      	lsrs	r1, r0, #7
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8024b5a:	7113      	strb	r3, [r2, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8024b5c:	0640      	lsls	r0, r0, #25
 8024b5e:	2300      	movs	r3, #0
 8024b60:	4a1e      	ldr	r2, [pc, #120]	; (8024bdc <SUBGRF_SetModulationParams+0xcc>)
 8024b62:	f7fb fca3 	bl	80204ac <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8024b66:	466a      	mov	r2, sp
 8024b68:	0c03      	lsrs	r3, r0, #16
 8024b6a:	7153      	strb	r3, [r2, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8024b6c:	0a03      	lsrs	r3, r0, #8
 8024b6e:	7193      	strb	r3, [r2, #6]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8024b70:	2308      	movs	r3, #8
        buf[7] = ( tempVal& 0xFF );
 8024b72:	71d0      	strb	r0, [r2, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8024b74:	218b      	movs	r1, #139	; 0x8b
 8024b76:	0028      	movs	r0, r5
 8024b78:	f00b fe12 	bl	80307a0 <HAL_SUBGHZ_ExecSetCmd>
}
 8024b7c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8024b7e:	6921      	ldr	r1, [r4, #16]
 8024b80:	4815      	ldr	r0, [pc, #84]	; (8024bd8 <SUBGRF_SetModulationParams+0xc8>)
 8024b82:	f7fb fac5 	bl	8020110 <__udivsi3>
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8024b86:	466a      	mov	r2, sp
 8024b88:	0c03      	lsrs	r3, r0, #16
 8024b8a:	7013      	strb	r3, [r2, #0]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8024b8c:	0a03      	lsrs	r3, r0, #8
 8024b8e:	7053      	strb	r3, [r2, #1]
        buf[2] = tempVal & 0xFF;
 8024b90:	7090      	strb	r0, [r2, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8024b92:	7d23      	ldrb	r3, [r4, #20]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8024b94:	70d3      	strb	r3, [r2, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8024b96:	2304      	movs	r3, #4
 8024b98:	e7ec      	b.n	8024b74 <SUBGRF_SetModulationParams+0x64>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8024b9a:	466a      	mov	r2, sp
 8024b9c:	7e23      	ldrb	r3, [r4, #24]
 8024b9e:	7013      	strb	r3, [r2, #0]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8024ba0:	7e63      	ldrb	r3, [r4, #25]
 8024ba2:	7053      	strb	r3, [r2, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8024ba4:	7ea3      	ldrb	r3, [r4, #26]
 8024ba6:	7093      	strb	r3, [r2, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8024ba8:	7ee3      	ldrb	r3, [r4, #27]
 8024baa:	e7f3      	b.n	8024b94 <SUBGRF_SetModulationParams+0x84>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8024bac:	6861      	ldr	r1, [r4, #4]
 8024bae:	480a      	ldr	r0, [pc, #40]	; (8024bd8 <SUBGRF_SetModulationParams+0xc8>)
 8024bb0:	f7fb faae 	bl	8020110 <__udivsi3>
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8024bb4:	466a      	mov	r2, sp
 8024bb6:	0c03      	lsrs	r3, r0, #16
 8024bb8:	7013      	strb	r3, [r2, #0]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8024bba:	0a03      	lsrs	r3, r0, #8
 8024bbc:	7053      	strb	r3, [r2, #1]
        buf[2] = tempVal & 0xFF;
 8024bbe:	7090      	strb	r0, [r2, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8024bc0:	7b23      	ldrb	r3, [r4, #12]
 8024bc2:	70d3      	strb	r3, [r2, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8024bc4:	7b63      	ldrb	r3, [r4, #13]
 8024bc6:	7113      	strb	r3, [r2, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8024bc8:	2305      	movs	r3, #5
 8024bca:	e7d3      	b.n	8024b74 <SUBGRF_SetModulationParams+0x64>
 8024bcc:	080312d4 	.word	0x080312d4
 8024bd0:	20009910 	.word	0x20009910
 8024bd4:	200087ec 	.word	0x200087ec
 8024bd8:	3d090000 	.word	0x3d090000
 8024bdc:	01e84800 	.word	0x01e84800

08024be0 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8024be0:	b513      	push	{r0, r1, r4, lr}
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8024be2:	466b      	mov	r3, sp
 8024be4:	1ddc      	adds	r4, r3, #7
{
 8024be6:	0001      	movs	r1, r0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8024be8:	2301      	movs	r3, #1
 8024bea:	0022      	movs	r2, r4
 8024bec:	4802      	ldr	r0, [pc, #8]	; (8024bf8 <SUBGRF_ReadRegister+0x18>)
 8024bee:	f00b fd9d 	bl	803072c <HAL_SUBGHZ_ReadRegisters>
    return data;
 8024bf2:	7820      	ldrb	r0, [r4, #0]
}
 8024bf4:	bd16      	pop	{r1, r2, r4, pc}
 8024bf6:	46c0      	nop			; (mov r8, r8)
 8024bf8:	200087ec 	.word	0x200087ec

08024bfc <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 8024bfc:	b510      	push	{r4, lr}
 8024bfe:	0004      	movs	r4, r0
  if ( 1U == RBI_IsDCDC() )
 8024c00:	f00a face 	bl	802f1a0 <RBI_IsDCDC>
 8024c04:	2801      	cmp	r0, #1
 8024c06:	d10a      	bne.n	8024c1e <Radio_SMPS_Set+0x22>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8024c08:	4805      	ldr	r0, [pc, #20]	; (8024c20 <Radio_SMPS_Set+0x24>)
 8024c0a:	f7ff ffe9 	bl	8024be0 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 8024c0e:	2306      	movs	r3, #6
 8024c10:	0001      	movs	r1, r0
 8024c12:	4399      	bics	r1, r3
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8024c14:	4321      	orrs	r1, r4
 8024c16:	4802      	ldr	r0, [pc, #8]	; (8024c20 <Radio_SMPS_Set+0x24>)
 8024c18:	b2c9      	uxtb	r1, r1
 8024c1a:	f7ff ff1f 	bl	8024a5c <SUBGRF_WriteRegister>
  }
}
 8024c1e:	bd10      	pop	{r4, pc}
 8024c20:	00000923 	.word	0x00000923

08024c24 <SUBGRF_Init>:
{
 8024c24:	b570      	push	{r4, r5, r6, lr}
    if ( dioIrq != NULL)
 8024c26:	2800      	cmp	r0, #0
 8024c28:	d001      	beq.n	8024c2e <SUBGRF_Init+0xa>
        RadioOnDioIrqCb = dioIrq;
 8024c2a:	4b17      	ldr	r3, [pc, #92]	; (8024c88 <SUBGRF_Init+0x64>)
 8024c2c:	6018      	str	r0, [r3, #0]
    ImageCalibrated = false;
 8024c2e:	2500      	movs	r5, #0
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8024c30:	2002      	movs	r0, #2
 8024c32:	f7ff ffe3 	bl	8024bfc <Radio_SMPS_Set>
    RADIO_INIT();
 8024c36:	f7ff fa07 	bl	8024048 <MX_SUBGHZ_Init>
    ImageCalibrated = false;
 8024c3a:	4b14      	ldr	r3, [pc, #80]	; (8024c8c <SUBGRF_Init+0x68>)
    SUBGRF_SetStandby( STDBY_RC );
 8024c3c:	0028      	movs	r0, r5
    ImageCalibrated = false;
 8024c3e:	701d      	strb	r5, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 8024c40:	f7ff fd6a 	bl	8024718 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8024c44:	f00a faaa 	bl	802f19c <RBI_IsTCXO>
 8024c48:	0004      	movs	r4, r0
 8024c4a:	2801      	cmp	r0, #1
 8024c4c:	d112      	bne.n	8024c74 <SUBGRF_Init+0x50>
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RBI_GetWakeUpTime() << 6 );// 100 ms
 8024c4e:	f00a faa3 	bl	802f198 <RBI_GetWakeUpTime>
 8024c52:	0181      	lsls	r1, r0, #6
 8024c54:	0020      	movs	r0, r4
 8024c56:	f7ff fe73 	bl	8024940 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8024c5a:	480d      	ldr	r0, [pc, #52]	; (8024c90 <SUBGRF_Init+0x6c>)
 8024c5c:	0029      	movs	r1, r5
 8024c5e:	f7ff fefd 	bl	8024a5c <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 8024c62:	207f      	movs	r0, #127	; 0x7f
 8024c64:	f7ff fdf2 	bl	802484c <SUBGRF_Calibrate>
    RBI_Init();
 8024c68:	f7ff fa1c 	bl	80240a4 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 8024c6c:	2201      	movs	r2, #1
 8024c6e:	4b09      	ldr	r3, [pc, #36]	; (8024c94 <SUBGRF_Init+0x70>)
 8024c70:	701a      	strb	r2, [r3, #0]
}
 8024c72:	bd70      	pop	{r4, r5, r6, pc}
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8024c74:	2120      	movs	r1, #32
 8024c76:	4806      	ldr	r0, [pc, #24]	; (8024c90 <SUBGRF_Init+0x6c>)
 8024c78:	f7ff fef0 	bl	8024a5c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8024c7c:	2120      	movs	r1, #32
 8024c7e:	4806      	ldr	r0, [pc, #24]	; (8024c98 <SUBGRF_Init+0x74>)
 8024c80:	f7ff feec 	bl	8024a5c <SUBGRF_WriteRegister>
 8024c84:	e7f0      	b.n	8024c68 <SUBGRF_Init+0x44>
 8024c86:	46c0      	nop			; (mov r8, r8)
 8024c88:	2000881c 	.word	0x2000881c
 8024c8c:	2000990d 	.word	0x2000990d
 8024c90:	00000911 	.word	0x00000911
 8024c94:	2000990f 	.word	0x2000990f
 8024c98:	00000912 	.word	0x00000912

08024c9c <SUBGRF_SetSleep>:
{
 8024c9c:	b513      	push	{r0, r1, r4, lr}
 8024c9e:	1c04      	adds	r4, r0, #0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8024ca0:	2000      	movs	r0, #0
 8024ca2:	f7ff fa47 	bl	8024134 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8024ca6:	2002      	movs	r0, #2
 8024ca8:	f7ff ffa8 	bl	8024bfc <Radio_SMPS_Set>
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8024cac:	2006      	movs	r0, #6
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8024cae:	466b      	mov	r3, sp
 8024cb0:	4020      	ands	r0, r4
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8024cb2:	07e4      	lsls	r4, r4, #31
 8024cb4:	0fe4      	lsrs	r4, r4, #31
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8024cb6:	1dda      	adds	r2, r3, #7
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8024cb8:	4304      	orrs	r4, r0
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8024cba:	2301      	movs	r3, #1
 8024cbc:	2184      	movs	r1, #132	; 0x84
 8024cbe:	4804      	ldr	r0, [pc, #16]	; (8024cd0 <SUBGRF_SetSleep+0x34>)
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8024cc0:	7014      	strb	r4, [r2, #0]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8024cc2:	f00b fd6d 	bl	80307a0 <HAL_SUBGHZ_ExecSetCmd>
    OperatingMode = MODE_SLEEP;
 8024cc6:	2200      	movs	r2, #0
 8024cc8:	4b02      	ldr	r3, [pc, #8]	; (8024cd4 <SUBGRF_SetSleep+0x38>)
 8024cca:	701a      	strb	r2, [r3, #0]
}
 8024ccc:	bd13      	pop	{r0, r1, r4, pc}
 8024cce:	46c0      	nop			; (mov r8, r8)
 8024cd0:	200087ec 	.word	0x200087ec
 8024cd4:	2000990f 	.word	0x2000990f

08024cd8 <SUBGRF_SetWhiteningSeed>:
{
 8024cd8:	b510      	push	{r4, lr}
    return PacketType;
 8024cda:	4b0c      	ldr	r3, [pc, #48]	; (8024d0c <SUBGRF_SetWhiteningSeed+0x34>)
{
 8024cdc:	0004      	movs	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 8024cde:	781b      	ldrb	r3, [r3, #0]
 8024ce0:	2b00      	cmp	r3, #0
 8024ce2:	d111      	bne.n	8024d08 <SUBGRF_SetWhiteningSeed+0x30>
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8024ce4:	20d7      	movs	r0, #215	; 0xd7
 8024ce6:	00c0      	lsls	r0, r0, #3
 8024ce8:	f7ff ff7a 	bl	8024be0 <SUBGRF_ReadRegister>
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8024cec:	2301      	movs	r3, #1
 8024cee:	0a21      	lsrs	r1, r4, #8
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8024cf0:	4398      	bics	r0, r3
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8024cf2:	4019      	ands	r1, r3
 8024cf4:	4301      	orrs	r1, r0
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8024cf6:	20d7      	movs	r0, #215	; 0xd7
 8024cf8:	b2c9      	uxtb	r1, r1
 8024cfa:	00c0      	lsls	r0, r0, #3
 8024cfc:	f7ff feae 	bl	8024a5c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8024d00:	4803      	ldr	r0, [pc, #12]	; (8024d10 <SUBGRF_SetWhiteningSeed+0x38>)
 8024d02:	b2e1      	uxtb	r1, r4
 8024d04:	f7ff feaa 	bl	8024a5c <SUBGRF_WriteRegister>
}
 8024d08:	bd10      	pop	{r4, pc}
 8024d0a:	46c0      	nop			; (mov r8, r8)
 8024d0c:	20009910 	.word	0x20009910
 8024d10:	000006b9 	.word	0x000006b9

08024d14 <SUBGRF_SetTxParams>:
{
 8024d14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024d16:	0003      	movs	r3, r0
 8024d18:	000d      	movs	r5, r1
 8024d1a:	0014      	movs	r4, r2
    if( paSelect == RFO_LP )
 8024d1c:	2801      	cmp	r0, #1
 8024d1e:	d123      	bne.n	8024d68 <SUBGRF_SetTxParams+0x54>
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8024d20:	0002      	movs	r2, r0
 8024d22:	2100      	movs	r1, #0
        if( power == 15 )
 8024d24:	2d0f      	cmp	r5, #15
 8024d26:	d116      	bne.n	8024d56 <SUBGRF_SetTxParams+0x42>
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8024d28:	2006      	movs	r0, #6
 8024d2a:	f7ff fde1 	bl	80248f0 <SUBGRF_SetPaConfig>
 8024d2e:	1c2b      	adds	r3, r5, #0
 8024d30:	b25a      	sxtb	r2, r3
 8024d32:	2a0e      	cmp	r2, #14
 8024d34:	dd00      	ble.n	8024d38 <SUBGRF_SetTxParams+0x24>
 8024d36:	230e      	movs	r3, #14
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 8024d38:	2118      	movs	r1, #24
 8024d3a:	b25d      	sxtb	r5, r3
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8024d3c:	4818      	ldr	r0, [pc, #96]	; (8024da0 <SUBGRF_SetTxParams+0x8c>)
 8024d3e:	f7ff fe8d 	bl	8024a5c <SUBGRF_WriteRegister>
    buf[0] = power;
 8024d42:	466b      	mov	r3, sp
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8024d44:	218e      	movs	r1, #142	; 0x8e
    buf[0] = power;
 8024d46:	711d      	strb	r5, [r3, #4]
    buf[1] = ( uint8_t )rampTime;
 8024d48:	715c      	strb	r4, [r3, #5]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8024d4a:	aa01      	add	r2, sp, #4
 8024d4c:	2302      	movs	r3, #2
 8024d4e:	4815      	ldr	r0, [pc, #84]	; (8024da4 <SUBGRF_SetTxParams+0x90>)
 8024d50:	f00b fd26 	bl	80307a0 <HAL_SUBGHZ_ExecSetCmd>
}
 8024d54:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 8024d56:	2004      	movs	r0, #4
 8024d58:	f7ff fdca 	bl	80248f0 <SUBGRF_SetPaConfig>
        if( power >= 14 )
 8024d5c:	1c2b      	adds	r3, r5, #0
 8024d5e:	3511      	adds	r5, #17
 8024d60:	dae6      	bge.n	8024d30 <SUBGRF_SetTxParams+0x1c>
 8024d62:	4b11      	ldr	r3, [pc, #68]	; (8024da8 <SUBGRF_SetTxParams+0x94>)
 8024d64:	781b      	ldrb	r3, [r3, #0]
 8024d66:	e7e3      	b.n	8024d30 <SUBGRF_SetTxParams+0x1c>
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 8024d68:	4810      	ldr	r0, [pc, #64]	; (8024dac <SUBGRF_SetTxParams+0x98>)
 8024d6a:	f7ff ff39 	bl	8024be0 <SUBGRF_ReadRegister>
 8024d6e:	211e      	movs	r1, #30
 8024d70:	4301      	orrs	r1, r0
 8024d72:	b2c9      	uxtb	r1, r1
 8024d74:	480d      	ldr	r0, [pc, #52]	; (8024dac <SUBGRF_SetTxParams+0x98>)
 8024d76:	f7ff fe71 	bl	8024a5c <SUBGRF_WriteRegister>
        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8024d7a:	2301      	movs	r3, #1
 8024d7c:	2200      	movs	r2, #0
 8024d7e:	2107      	movs	r1, #7
 8024d80:	2004      	movs	r0, #4
 8024d82:	f7ff fdb5 	bl	80248f0 <SUBGRF_SetPaConfig>
        if( power > 22 )
 8024d86:	1c2b      	adds	r3, r5, #0
 8024d88:	3509      	adds	r5, #9
 8024d8a:	da01      	bge.n	8024d90 <SUBGRF_SetTxParams+0x7c>
 8024d8c:	4b08      	ldr	r3, [pc, #32]	; (8024db0 <SUBGRF_SetTxParams+0x9c>)
 8024d8e:	781b      	ldrb	r3, [r3, #0]
 8024d90:	b25a      	sxtb	r2, r3
 8024d92:	2a16      	cmp	r2, #22
 8024d94:	dd00      	ble.n	8024d98 <SUBGRF_SetTxParams+0x84>
 8024d96:	2316      	movs	r3, #22
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8024d98:	2138      	movs	r1, #56	; 0x38
 8024d9a:	b25d      	sxtb	r5, r3
 8024d9c:	e7ce      	b.n	8024d3c <SUBGRF_SetTxParams+0x28>
 8024d9e:	46c0      	nop			; (mov r8, r8)
 8024da0:	000008e7 	.word	0x000008e7
 8024da4:	200087ec 	.word	0x200087ec
 8024da8:	08031dde 	.word	0x08031dde
 8024dac:	000008d8 	.word	0x000008d8
 8024db0:	08031ddf 	.word	0x08031ddf

08024db4 <SUBGRF_GetRxBufferStatus>:
{
 8024db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8024db6:	2302      	movs	r3, #2
{
 8024db8:	0004      	movs	r4, r0
 8024dba:	000d      	movs	r5, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8024dbc:	480c      	ldr	r0, [pc, #48]	; (8024df0 <SUBGRF_GetRxBufferStatus+0x3c>)
 8024dbe:	2113      	movs	r1, #19
 8024dc0:	aa01      	add	r2, sp, #4
 8024dc2:	f00b fd25 	bl	8030810 <HAL_SUBGHZ_ExecGetCmd>
    return PacketType;
 8024dc6:	4b0b      	ldr	r3, [pc, #44]	; (8024df4 <SUBGRF_GetRxBufferStatus+0x40>)
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8024dc8:	781b      	ldrb	r3, [r3, #0]
 8024dca:	2b01      	cmp	r3, #1
 8024dcc:	d10b      	bne.n	8024de6 <SUBGRF_GetRxBufferStatus+0x32>
 8024dce:	4b0a      	ldr	r3, [pc, #40]	; (8024df8 <SUBGRF_GetRxBufferStatus+0x44>)
 8024dd0:	781b      	ldrb	r3, [r3, #0]
 8024dd2:	2b01      	cmp	r3, #1
 8024dd4:	d107      	bne.n	8024de6 <SUBGRF_GetRxBufferStatus+0x32>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8024dd6:	4809      	ldr	r0, [pc, #36]	; (8024dfc <SUBGRF_GetRxBufferStatus+0x48>)
 8024dd8:	f7ff ff02 	bl	8024be0 <SUBGRF_ReadRegister>
 8024ddc:	7020      	strb	r0, [r4, #0]
    *rxStartBufferPointer = status[1];
 8024dde:	466b      	mov	r3, sp
 8024de0:	795b      	ldrb	r3, [r3, #5]
 8024de2:	702b      	strb	r3, [r5, #0]
}
 8024de4:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
        *payloadLength = status[0];
 8024de6:	466b      	mov	r3, sp
 8024de8:	791b      	ldrb	r3, [r3, #4]
 8024dea:	7023      	strb	r3, [r4, #0]
 8024dec:	e7f7      	b.n	8024dde <SUBGRF_GetRxBufferStatus+0x2a>
 8024dee:	46c0      	nop			; (mov r8, r8)
 8024df0:	200087ec 	.word	0x200087ec
 8024df4:	20009910 	.word	0x20009910
 8024df8:	2000990e 	.word	0x2000990e
 8024dfc:	00000702 	.word	0x00000702

08024e00 <SUBGRF_WriteRegisters>:
{
 8024e00:	b510      	push	{r4, lr}
 8024e02:	0013      	movs	r3, r2
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8024e04:	000a      	movs	r2, r1
 8024e06:	0001      	movs	r1, r0
 8024e08:	4801      	ldr	r0, [pc, #4]	; (8024e10 <SUBGRF_WriteRegisters+0x10>)
 8024e0a:	f00b fc57 	bl	80306bc <HAL_SUBGHZ_WriteRegisters>
}
 8024e0e:	bd10      	pop	{r4, pc}
 8024e10:	200087ec 	.word	0x200087ec

08024e14 <SUBGRF_SetCrcSeed>:
{
 8024e14:	b507      	push	{r0, r1, r2, lr}
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8024e16:	466a      	mov	r2, sp
 8024e18:	0a03      	lsrs	r3, r0, #8
 8024e1a:	7113      	strb	r3, [r2, #4]
    return PacketType;
 8024e1c:	4b05      	ldr	r3, [pc, #20]	; (8024e34 <SUBGRF_SetCrcSeed+0x20>)
    buf[1] = ( uint8_t )( seed & 0xFF );
 8024e1e:	7150      	strb	r0, [r2, #5]
    switch( SUBGRF_GetPacketType( ) )
 8024e20:	781b      	ldrb	r3, [r3, #0]
 8024e22:	2b00      	cmp	r3, #0
 8024e24:	d104      	bne.n	8024e30 <SUBGRF_SetCrcSeed+0x1c>
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8024e26:	2202      	movs	r2, #2
 8024e28:	4803      	ldr	r0, [pc, #12]	; (8024e38 <SUBGRF_SetCrcSeed+0x24>)
 8024e2a:	a901      	add	r1, sp, #4
 8024e2c:	f7ff ffe8 	bl	8024e00 <SUBGRF_WriteRegisters>
}
 8024e30:	bd07      	pop	{r0, r1, r2, pc}
 8024e32:	46c0      	nop			; (mov r8, r8)
 8024e34:	20009910 	.word	0x20009910
 8024e38:	000006bc 	.word	0x000006bc

08024e3c <SUBGRF_SetCrcPolynomial>:
{
 8024e3c:	b507      	push	{r0, r1, r2, lr}
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8024e3e:	466a      	mov	r2, sp
 8024e40:	0a03      	lsrs	r3, r0, #8
 8024e42:	7113      	strb	r3, [r2, #4]
    return PacketType;
 8024e44:	4b05      	ldr	r3, [pc, #20]	; (8024e5c <SUBGRF_SetCrcPolynomial+0x20>)
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8024e46:	7150      	strb	r0, [r2, #5]
    switch( SUBGRF_GetPacketType( ) )
 8024e48:	781b      	ldrb	r3, [r3, #0]
 8024e4a:	2b00      	cmp	r3, #0
 8024e4c:	d104      	bne.n	8024e58 <SUBGRF_SetCrcPolynomial+0x1c>
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8024e4e:	2202      	movs	r2, #2
 8024e50:	4803      	ldr	r0, [pc, #12]	; (8024e60 <SUBGRF_SetCrcPolynomial+0x24>)
 8024e52:	a901      	add	r1, sp, #4
 8024e54:	f7ff ffd4 	bl	8024e00 <SUBGRF_WriteRegisters>
}
 8024e58:	bd07      	pop	{r0, r1, r2, pc}
 8024e5a:	46c0      	nop			; (mov r8, r8)
 8024e5c:	20009910 	.word	0x20009910
 8024e60:	000006be 	.word	0x000006be

08024e64 <SUBGRF_SetPacketParams>:
{
 8024e64:	b530      	push	{r4, r5, lr}
 8024e66:	0005      	movs	r5, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8024e68:	492b      	ldr	r1, [pc, #172]	; (8024f18 <SUBGRF_SetPacketParams+0xb4>)
{
 8024e6a:	b085      	sub	sp, #20
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8024e6c:	ac01      	add	r4, sp, #4
 8024e6e:	2209      	movs	r2, #9
 8024e70:	0020      	movs	r0, r4
 8024e72:	3108      	adds	r1, #8
 8024e74:	f00b ff74 	bl	8030d60 <memcpy>
    if( PacketType != packetParams->PacketType )
 8024e78:	4b28      	ldr	r3, [pc, #160]	; (8024f1c <SUBGRF_SetPacketParams+0xb8>)
 8024e7a:	7828      	ldrb	r0, [r5, #0]
 8024e7c:	781b      	ldrb	r3, [r3, #0]
 8024e7e:	4283      	cmp	r3, r0
 8024e80:	d001      	beq.n	8024e86 <SUBGRF_SetPacketParams+0x22>
        SUBGRF_SetPacketType( packetParams->PacketType );
 8024e82:	f7ff fe2d 	bl	8024ae0 <SUBGRF_SetPacketType>
    switch( packetParams->PacketType )
 8024e86:	7828      	ldrb	r0, [r5, #0]
 8024e88:	2803      	cmp	r0, #3
 8024e8a:	d825      	bhi.n	8024ed8 <SUBGRF_SetPacketParams+0x74>
 8024e8c:	f7fb f922 	bl	80200d4 <__gnu_thumb1_case_uqi>
 8024e90:	02303402 	.word	0x02303402
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8024e94:	7a6b      	ldrb	r3, [r5, #9]
 8024e96:	2bf1      	cmp	r3, #241	; 0xf1
 8024e98:	d120      	bne.n	8024edc <SUBGRF_SetPacketParams+0x78>
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8024e9a:	4821      	ldr	r0, [pc, #132]	; (8024f20 <SUBGRF_SetPacketParams+0xbc>)
 8024e9c:	f7ff ffba 	bl	8024e14 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8024ea0:	4820      	ldr	r0, [pc, #128]	; (8024f24 <SUBGRF_SetPacketParams+0xc0>)
 8024ea2:	f7ff ffcb 	bl	8024e3c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8024ea6:	2302      	movs	r3, #2
        buf[7] = crcVal;
 8024ea8:	71e3      	strb	r3, [r4, #7]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8024eaa:	7aab      	ldrb	r3, [r5, #10]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8024eac:	886a      	ldrh	r2, [r5, #2]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8024eae:	7223      	strb	r3, [r4, #8]
        n = 9;
 8024eb0:	2309      	movs	r3, #9
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8024eb2:	0a11      	lsrs	r1, r2, #8
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8024eb4:	7062      	strb	r2, [r4, #1]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8024eb6:	792a      	ldrb	r2, [r5, #4]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8024eb8:	7021      	strb	r1, [r4, #0]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8024eba:	70a2      	strb	r2, [r4, #2]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8024ebc:	796a      	ldrb	r2, [r5, #5]
 8024ebe:	70e2      	strb	r2, [r4, #3]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8024ec0:	79aa      	ldrb	r2, [r5, #6]
 8024ec2:	7122      	strb	r2, [r4, #4]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8024ec4:	79ea      	ldrb	r2, [r5, #7]
 8024ec6:	7162      	strb	r2, [r4, #5]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8024ec8:	7a2a      	ldrb	r2, [r5, #8]
 8024eca:	71a2      	strb	r2, [r4, #6]
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8024ecc:	0022      	movs	r2, r4
 8024ece:	218c      	movs	r1, #140	; 0x8c
 8024ed0:	4815      	ldr	r0, [pc, #84]	; (8024f28 <SUBGRF_SetPacketParams+0xc4>)
 8024ed2:	b29b      	uxth	r3, r3
 8024ed4:	f00b fc64 	bl	80307a0 <HAL_SUBGHZ_ExecSetCmd>
}
 8024ed8:	b005      	add	sp, #20
 8024eda:	bd30      	pop	{r4, r5, pc}
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8024edc:	2bf2      	cmp	r3, #242	; 0xf2
 8024ede:	d1e3      	bne.n	8024ea8 <SUBGRF_SetPacketParams+0x44>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8024ee0:	4812      	ldr	r0, [pc, #72]	; (8024f2c <SUBGRF_SetPacketParams+0xc8>)
 8024ee2:	f7ff ff97 	bl	8024e14 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8024ee6:	4812      	ldr	r0, [pc, #72]	; (8024f30 <SUBGRF_SetPacketParams+0xcc>)
 8024ee8:	f7ff ffa8 	bl	8024e3c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8024eec:	2306      	movs	r3, #6
 8024eee:	e7db      	b.n	8024ea8 <SUBGRF_SetPacketParams+0x44>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8024ef0:	7b2b      	ldrb	r3, [r5, #12]
 8024ef2:	7023      	strb	r3, [r4, #0]
        n = 1;
 8024ef4:	2301      	movs	r3, #1
        break;
 8024ef6:	e7e9      	b.n	8024ecc <SUBGRF_SetPacketParams+0x68>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8024ef8:	89eb      	ldrh	r3, [r5, #14]
 8024efa:	0a1a      	lsrs	r2, r3, #8
 8024efc:	7022      	strb	r2, [r4, #0]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8024efe:	7063      	strb	r3, [r4, #1]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8024f00:	4a0c      	ldr	r2, [pc, #48]	; (8024f34 <SUBGRF_SetPacketParams+0xd0>)
 8024f02:	7c2b      	ldrb	r3, [r5, #16]
 8024f04:	7013      	strb	r3, [r2, #0]
 8024f06:	70a3      	strb	r3, [r4, #2]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8024f08:	7c6b      	ldrb	r3, [r5, #17]
 8024f0a:	70e3      	strb	r3, [r4, #3]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8024f0c:	7cab      	ldrb	r3, [r5, #18]
 8024f0e:	7123      	strb	r3, [r4, #4]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8024f10:	7ceb      	ldrb	r3, [r5, #19]
 8024f12:	7163      	strb	r3, [r4, #5]
        n = 6;
 8024f14:	2306      	movs	r3, #6
        break;
 8024f16:	e7d9      	b.n	8024ecc <SUBGRF_SetPacketParams+0x68>
 8024f18:	080312d4 	.word	0x080312d4
 8024f1c:	20009910 	.word	0x20009910
 8024f20:	0000ffff 	.word	0x0000ffff
 8024f24:	00008005 	.word	0x00008005
 8024f28:	200087ec 	.word	0x200087ec
 8024f2c:	00001d0f 	.word	0x00001d0f
 8024f30:	00001021 	.word	0x00001021
 8024f34:	2000990e 	.word	0x2000990e

08024f38 <SUBGRF_ReadRegisters>:
{
 8024f38:	b510      	push	{r4, lr}
 8024f3a:	0013      	movs	r3, r2
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8024f3c:	000a      	movs	r2, r1
 8024f3e:	0001      	movs	r1, r0
 8024f40:	4801      	ldr	r0, [pc, #4]	; (8024f48 <SUBGRF_ReadRegisters+0x10>)
 8024f42:	f00b fbf3 	bl	803072c <HAL_SUBGHZ_ReadRegisters>
}
 8024f46:	bd10      	pop	{r4, pc}
 8024f48:	200087ec 	.word	0x200087ec

08024f4c <SUBGRF_GetRandom>:
{
 8024f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t number = 0;
 8024f4e:	2700      	movs	r7, #0
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8024f50:	4e15      	ldr	r6, [pc, #84]	; (8024fa8 <SUBGRF_GetRandom+0x5c>)
{
 8024f52:	b085      	sub	sp, #20
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8024f54:	0030      	movs	r0, r6
    uint32_t number = 0;
 8024f56:	9703      	str	r7, [sp, #12]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8024f58:	f7ff fe42 	bl	8024be0 <SUBGRF_ReadRegister>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8024f5c:	21fe      	movs	r1, #254	; 0xfe
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8024f5e:	4d13      	ldr	r5, [pc, #76]	; (8024fac <SUBGRF_GetRandom+0x60>)
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8024f60:	4001      	ands	r1, r0
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8024f62:	0004      	movs	r4, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8024f64:	0030      	movs	r0, r6
 8024f66:	f7ff fd79 	bl	8024a5c <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8024f6a:	0028      	movs	r0, r5
 8024f6c:	f7ff fe38 	bl	8024be0 <SUBGRF_ReadRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8024f70:	217f      	movs	r1, #127	; 0x7f
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8024f72:	9001      	str	r0, [sp, #4]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8024f74:	4001      	ands	r1, r0
 8024f76:	0028      	movs	r0, r5
 8024f78:	f7ff fd70 	bl	8024a5c <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8024f7c:	480c      	ldr	r0, [pc, #48]	; (8024fb0 <SUBGRF_GetRandom+0x64>)
 8024f7e:	f7ff fbf5 	bl	802476c <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8024f82:	2204      	movs	r2, #4
 8024f84:	a903      	add	r1, sp, #12
 8024f86:	480b      	ldr	r0, [pc, #44]	; (8024fb4 <SUBGRF_GetRandom+0x68>)
 8024f88:	f7ff ffd6 	bl	8024f38 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 8024f8c:	0038      	movs	r0, r7
 8024f8e:	f7ff fbc3 	bl	8024718 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8024f92:	0021      	movs	r1, r4
 8024f94:	0030      	movs	r0, r6
 8024f96:	f7ff fd61 	bl	8024a5c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8024f9a:	0028      	movs	r0, r5
 8024f9c:	9901      	ldr	r1, [sp, #4]
 8024f9e:	f7ff fd5d 	bl	8024a5c <SUBGRF_WriteRegister>
}
 8024fa2:	9803      	ldr	r0, [sp, #12]
 8024fa4:	b005      	add	sp, #20
 8024fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024fa8:	000008e2 	.word	0x000008e2
 8024fac:	000008e5 	.word	0x000008e5
 8024fb0:	00ffffff 	.word	0x00ffffff
 8024fb4:	00000819 	.word	0x00000819

08024fb8 <SUBGRF_WriteBuffer>:
{
 8024fb8:	b510      	push	{r4, lr}
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8024fba:	0013      	movs	r3, r2
 8024fbc:	000a      	movs	r2, r1
 8024fbe:	0001      	movs	r1, r0
 8024fc0:	4801      	ldr	r0, [pc, #4]	; (8024fc8 <SUBGRF_WriteBuffer+0x10>)
 8024fc2:	f00b fca7 	bl	8030914 <HAL_SUBGHZ_WriteBuffer>
}
 8024fc6:	bd10      	pop	{r4, pc}
 8024fc8:	200087ec 	.word	0x200087ec

08024fcc <SUBGRF_ReadBuffer>:
{
 8024fcc:	b510      	push	{r4, lr}
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8024fce:	0013      	movs	r3, r2
 8024fd0:	000a      	movs	r2, r1
 8024fd2:	0001      	movs	r1, r0
 8024fd4:	4801      	ldr	r0, [pc, #4]	; (8024fdc <SUBGRF_ReadBuffer+0x10>)
 8024fd6:	f00b fccf 	bl	8030978 <HAL_SUBGHZ_ReadBuffer>
}
 8024fda:	bd10      	pop	{r4, pc}
 8024fdc:	200087ec 	.word	0x200087ec

08024fe0 <HAL_SUBGHZ_TxCpltCallback>:
{
 8024fe0:	b510      	push	{r4, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8024fe2:	4b02      	ldr	r3, [pc, #8]	; (8024fec <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8024fe4:	2001      	movs	r0, #1
 8024fe6:	681b      	ldr	r3, [r3, #0]
 8024fe8:	4798      	blx	r3
}
 8024fea:	bd10      	pop	{r4, pc}
 8024fec:	2000881c 	.word	0x2000881c

08024ff0 <HAL_SUBGHZ_RxCpltCallback>:
{
 8024ff0:	b510      	push	{r4, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8024ff2:	4b02      	ldr	r3, [pc, #8]	; (8024ffc <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8024ff4:	2002      	movs	r0, #2
 8024ff6:	681b      	ldr	r3, [r3, #0]
 8024ff8:	4798      	blx	r3
}
 8024ffa:	bd10      	pop	{r4, pc}
 8024ffc:	2000881c 	.word	0x2000881c

08025000 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8025000:	b510      	push	{r4, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8025002:	4b02      	ldr	r3, [pc, #8]	; (802500c <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8025004:	2040      	movs	r0, #64	; 0x40
 8025006:	681b      	ldr	r3, [r3, #0]
 8025008:	4798      	blx	r3
}
 802500a:	bd10      	pop	{r4, pc}
 802500c:	2000881c 	.word	0x2000881c

08025010 <HAL_SUBGHZ_CADStatusCallback>:
{
 8025010:	b510      	push	{r4, lr}
    switch (cadstatus)
 8025012:	2900      	cmp	r1, #0
 8025014:	d002      	beq.n	802501c <HAL_SUBGHZ_CADStatusCallback+0xc>
 8025016:	2901      	cmp	r1, #1
 8025018:	d005      	beq.n	8025026 <HAL_SUBGHZ_CADStatusCallback+0x16>
}
 802501a:	bd10      	pop	{r4, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 802501c:	2080      	movs	r0, #128	; 0x80
 802501e:	4b04      	ldr	r3, [pc, #16]	; (8025030 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8025020:	681b      	ldr	r3, [r3, #0]
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8025022:	4798      	blx	r3
}
 8025024:	e7f9      	b.n	802501a <HAL_SUBGHZ_CADStatusCallback+0xa>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8025026:	2080      	movs	r0, #128	; 0x80
 8025028:	4b01      	ldr	r3, [pc, #4]	; (8025030 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 802502a:	0040      	lsls	r0, r0, #1
 802502c:	681b      	ldr	r3, [r3, #0]
 802502e:	e7f8      	b.n	8025022 <HAL_SUBGHZ_CADStatusCallback+0x12>
 8025030:	2000881c 	.word	0x2000881c

08025034 <HAL_SUBGHZ_RxTxTimeoutCallback>:
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8025034:	2080      	movs	r0, #128	; 0x80
{
 8025036:	b510      	push	{r4, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8025038:	4b02      	ldr	r3, [pc, #8]	; (8025044 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 802503a:	0080      	lsls	r0, r0, #2
 802503c:	681b      	ldr	r3, [r3, #0]
 802503e:	4798      	blx	r3
}
 8025040:	bd10      	pop	{r4, pc}
 8025042:	46c0      	nop			; (mov r8, r8)
 8025044:	2000881c 	.word	0x2000881c

08025048 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 8025048:	b510      	push	{r4, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 802504a:	4b02      	ldr	r3, [pc, #8]	; (8025054 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 802504c:	2020      	movs	r0, #32
 802504e:	681b      	ldr	r3, [r3, #0]
 8025050:	4798      	blx	r3
}
 8025052:	bd10      	pop	{r4, pc}
 8025054:	2000881c 	.word	0x2000881c

08025058 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8025058:	b510      	push	{r4, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 802505a:	4b02      	ldr	r3, [pc, #8]	; (8025064 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 802505c:	2004      	movs	r0, #4
 802505e:	681b      	ldr	r3, [r3, #0]
 8025060:	4798      	blx	r3
}
 8025062:	bd10      	pop	{r4, pc}
 8025064:	2000881c 	.word	0x2000881c

08025068 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8025068:	b510      	push	{r4, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 802506a:	4b02      	ldr	r3, [pc, #8]	; (8025074 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 802506c:	2008      	movs	r0, #8
 802506e:	681b      	ldr	r3, [r3, #0]
 8025070:	4798      	blx	r3
}
 8025072:	bd10      	pop	{r4, pc}
 8025074:	2000881c 	.word	0x2000881c

08025078 <HAL_SUBGHZ_HeaderValidCallback>:
{
 8025078:	b510      	push	{r4, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 802507a:	4b02      	ldr	r3, [pc, #8]	; (8025084 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 802507c:	2010      	movs	r0, #16
 802507e:	681b      	ldr	r3, [r3, #0]
 8025080:	4798      	blx	r3
}
 8025082:	bd10      	pop	{r4, pc}
 8025084:	2000881c 	.word	0x2000881c

08025088 <RadioSetRxDutyCycle>:
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8025088:	b570      	push	{r4, r5, r6, lr}
 802508a:	000d      	movs	r5, r1
 802508c:	0004      	movs	r4, r0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 802508e:	4b05      	ldr	r3, [pc, #20]	; (80250a4 <RadioSetRxDutyCycle+0x1c>)
 8025090:	2100      	movs	r1, #0
 8025092:	3356      	adds	r3, #86	; 0x56
 8025094:	7818      	ldrb	r0, [r3, #0]
 8025096:	f00a fb53 	bl	802f740 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 802509a:	0029      	movs	r1, r5
 802509c:	0020      	movs	r0, r4
 802509e:	f7ff fb79 	bl	8024794 <SUBGRF_SetRxDutyCycle>
}
 80250a2:	bd70      	pop	{r4, r5, r6, pc}
 80250a4:	2000883c 	.word	0x2000883c

080250a8 <RadioOnTxTimeoutIrq>:


static void RadioOnTxTimeoutIrq( void* context )
{
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
 80250a8:	2000      	movs	r0, #0
{
 80250aa:	b510      	push	{r4, lr}
    DBG_GPIO_RADIO_TX(RST);
 80250ac:	f7ff f882 	bl	80241b4 <dbg_gpio_radio_tx>
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80250b0:	4b04      	ldr	r3, [pc, #16]	; (80250c4 <RadioOnTxTimeoutIrq+0x1c>)
 80250b2:	681b      	ldr	r3, [r3, #0]
 80250b4:	2b00      	cmp	r3, #0
 80250b6:	d003      	beq.n	80250c0 <RadioOnTxTimeoutIrq+0x18>
 80250b8:	685b      	ldr	r3, [r3, #4]
 80250ba:	2b00      	cmp	r3, #0
 80250bc:	d000      	beq.n	80250c0 <RadioOnTxTimeoutIrq+0x18>
    {
        RadioEvents->TxTimeout( );
 80250be:	4798      	blx	r3
    }
}
 80250c0:	bd10      	pop	{r4, pc}
 80250c2:	46c0      	nop			; (mov r8, r8)
 80250c4:	20008820 	.word	0x20008820

080250c8 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
 80250c8:	2000      	movs	r0, #0
{
 80250ca:	b510      	push	{r4, lr}
    DBG_GPIO_RADIO_RX(RST);
 80250cc:	f7ff f868 	bl	80241a0 <dbg_gpio_radio_rx>
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80250d0:	4b04      	ldr	r3, [pc, #16]	; (80250e4 <RadioOnRxTimeoutIrq+0x1c>)
 80250d2:	681b      	ldr	r3, [r3, #0]
 80250d4:	2b00      	cmp	r3, #0
 80250d6:	d003      	beq.n	80250e0 <RadioOnRxTimeoutIrq+0x18>
 80250d8:	68db      	ldr	r3, [r3, #12]
 80250da:	2b00      	cmp	r3, #0
 80250dc:	d000      	beq.n	80250e0 <RadioOnRxTimeoutIrq+0x18>
    {
        RadioEvents->RxTimeout( );
 80250de:	4798      	blx	r3
    }
}
 80250e0:	bd10      	pop	{r4, pc}
 80250e2:	46c0      	nop			; (mov r8, r8)
 80250e4:	20008820 	.word	0x20008820

080250e8 <RadioIrqProcess>:

  RadioIrqProcess();
}

static void RadioIrqProcess( void )
{
 80250e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t size;

  switch (SubgRf.RadioIrq)
 80250ea:	4c60      	ldr	r4, [pc, #384]	; (802526c <RadioIrqProcess+0x184>)
 80250ec:	0023      	movs	r3, r4
 80250ee:	3354      	adds	r3, #84	; 0x54
 80250f0:	881d      	ldrh	r5, [r3, #0]
 80250f2:	2d40      	cmp	r5, #64	; 0x40
 80250f4:	d100      	bne.n	80250f8 <RadioIrqProcess+0x10>
 80250f6:	e06e      	b.n	80251d6 <RadioIrqProcess+0xee>
 80250f8:	d807      	bhi.n	802510a <RadioIrqProcess+0x22>
 80250fa:	2d02      	cmp	r5, #2
 80250fc:	d02d      	beq.n	802515a <RadioIrqProcess+0x72>
 80250fe:	2d20      	cmp	r5, #32
 8025100:	d100      	bne.n	8025104 <RadioIrqProcess+0x1c>
 8025102:	e0a5      	b.n	8025250 <RadioIrqProcess+0x168>
 8025104:	2d01      	cmp	r5, #1
 8025106:	d016      	beq.n	8025136 <RadioIrqProcess+0x4e>

  default:
    break;

  }
}
 8025108:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
  switch (SubgRf.RadioIrq)
 802510a:	2380      	movs	r3, #128	; 0x80
 802510c:	005b      	lsls	r3, r3, #1
 802510e:	429d      	cmp	r5, r3
 8025110:	d06d      	beq.n	80251ee <RadioIrqProcess+0x106>
 8025112:	18db      	adds	r3, r3, r3
 8025114:	429d      	cmp	r5, r3
 8025116:	d078      	beq.n	802520a <RadioIrqProcess+0x122>
 8025118:	2d80      	cmp	r5, #128	; 0x80
 802511a:	d1f5      	bne.n	8025108 <RadioIrqProcess+0x20>
    SUBGRF_SetStandby( STDBY_RC );
 802511c:	2000      	movs	r0, #0
 802511e:	f7ff fafb 	bl	8024718 <SUBGRF_SetStandby>
    if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8025122:	4b53      	ldr	r3, [pc, #332]	; (8025270 <RadioIrqProcess+0x188>)
 8025124:	681b      	ldr	r3, [r3, #0]
 8025126:	2b00      	cmp	r3, #0
 8025128:	d0ee      	beq.n	8025108 <RadioIrqProcess+0x20>
 802512a:	699b      	ldr	r3, [r3, #24]
      RadioEvents->CadDone( false );
 802512c:	2000      	movs	r0, #0
    if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 802512e:	2b00      	cmp	r3, #0
 8025130:	d0ea      	beq.n	8025108 <RadioIrqProcess+0x20>
      RadioEvents->CadDone( true );
 8025132:	4798      	blx	r3
 8025134:	e7e8      	b.n	8025108 <RadioIrqProcess+0x20>
    DBG_GPIO_RADIO_TX(RST);
 8025136:	2000      	movs	r0, #0
 8025138:	f7ff f83c 	bl	80241b4 <dbg_gpio_radio_tx>
    TimerStop( &TxTimeoutTimer );
 802513c:	484d      	ldr	r0, [pc, #308]	; (8025274 <RadioIrqProcess+0x18c>)
 802513e:	f7fe fed1 	bl	8023ee4 <TimerStop>
    SUBGRF_SetStandby( STDBY_RC );
 8025142:	2000      	movs	r0, #0
 8025144:	f7ff fae8 	bl	8024718 <SUBGRF_SetStandby>
    if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8025148:	4b49      	ldr	r3, [pc, #292]	; (8025270 <RadioIrqProcess+0x188>)
 802514a:	681b      	ldr	r3, [r3, #0]
 802514c:	2b00      	cmp	r3, #0
 802514e:	d0db      	beq.n	8025108 <RadioIrqProcess+0x20>
 8025150:	681b      	ldr	r3, [r3, #0]
    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8025152:	2b00      	cmp	r3, #0
 8025154:	d0d8      	beq.n	8025108 <RadioIrqProcess+0x20>
      RadioEvents->RxTimeout( );
 8025156:	4798      	blx	r3
}
 8025158:	e7d6      	b.n	8025108 <RadioIrqProcess+0x20>
    DBG_GPIO_RADIO_RX(RST);
 802515a:	2000      	movs	r0, #0
 802515c:	f7ff f820 	bl	80241a0 <dbg_gpio_radio_rx>
    TimerStop( &RxTimeoutTimer );
 8025160:	4845      	ldr	r0, [pc, #276]	; (8025278 <RadioIrqProcess+0x190>)
 8025162:	f7fe febf 	bl	8023ee4 <TimerStop>
    if( SubgRf.RxContinuous == false )
 8025166:	7866      	ldrb	r6, [r4, #1]
 8025168:	2e00      	cmp	r6, #0
 802516a:	d10e      	bne.n	802518a <RadioIrqProcess+0xa2>
      SUBGRF_SetStandby( STDBY_RC );
 802516c:	0030      	movs	r0, r6
 802516e:	f7ff fad3 	bl	8024718 <SUBGRF_SetStandby>
      SUBGRF_WriteRegister( 0x0902, 0x00 );
 8025172:	0031      	movs	r1, r6
 8025174:	4841      	ldr	r0, [pc, #260]	; (802527c <RadioIrqProcess+0x194>)
 8025176:	f7ff fc71 	bl	8024a5c <SUBGRF_WriteRegister>
      SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 802517a:	4841      	ldr	r0, [pc, #260]	; (8025280 <RadioIrqProcess+0x198>)
 802517c:	f7ff fd30 	bl	8024be0 <SUBGRF_ReadRegister>
 8025180:	4305      	orrs	r5, r0
 8025182:	b2e9      	uxtb	r1, r5
 8025184:	483e      	ldr	r0, [pc, #248]	; (8025280 <RadioIrqProcess+0x198>)
 8025186:	f7ff fc69 	bl	8024a5c <SUBGRF_WriteRegister>
    SUBGRF_GetPayload( RadioRxPayload, &size , 255 );
 802518a:	466b      	mov	r3, sp
 802518c:	4e3d      	ldr	r6, [pc, #244]	; (8025284 <RadioIrqProcess+0x19c>)
 802518e:	1ddf      	adds	r7, r3, #7
 8025190:	22ff      	movs	r2, #255	; 0xff
 8025192:	0039      	movs	r1, r7
 8025194:	0030      	movs	r0, r6
 8025196:	f00a fabd 	bl	802f714 <SUBGRF_GetPayload>
    SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 802519a:	0020      	movs	r0, r4
 802519c:	3024      	adds	r0, #36	; 0x24
 802519e:	f7ff fc21 	bl	80249e4 <SUBGRF_GetPacketStatus>
    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80251a2:	4b33      	ldr	r3, [pc, #204]	; (8025270 <RadioIrqProcess+0x188>)
 80251a4:	681b      	ldr	r3, [r3, #0]
 80251a6:	2b00      	cmp	r3, #0
 80251a8:	d0ae      	beq.n	8025108 <RadioIrqProcess+0x20>
 80251aa:	689d      	ldr	r5, [r3, #8]
 80251ac:	2d00      	cmp	r5, #0
 80251ae:	d0ab      	beq.n	8025108 <RadioIrqProcess+0x20>
      switch (SubgRf.PacketStatus.packetType)
 80251b0:	1d63      	adds	r3, r4, #5
 80251b2:	7fdb      	ldrb	r3, [r3, #31]
        RadioEvents->RxDone( RadioRxPayload, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 80251b4:	7839      	ldrb	r1, [r7, #0]
 80251b6:	2b01      	cmp	r3, #1
 80251b8:	d109      	bne.n	80251ce <RadioIrqProcess+0xe6>
 80251ba:	0023      	movs	r3, r4
 80251bc:	3331      	adds	r3, #49	; 0x31
 80251be:	781b      	ldrb	r3, [r3, #0]
 80251c0:	3430      	adds	r4, #48	; 0x30
 80251c2:	b25b      	sxtb	r3, r3
        RadioEvents->RxDone( RadioRxPayload, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t)(SubgRf.PacketStatus.Params.Gfsk.FreqError) );
 80251c4:	2200      	movs	r2, #0
 80251c6:	0030      	movs	r0, r6
 80251c8:	56a2      	ldrsb	r2, [r4, r2]
 80251ca:	47a8      	blx	r5
        break;
 80251cc:	e79c      	b.n	8025108 <RadioIrqProcess+0x20>
        RadioEvents->RxDone( RadioRxPayload, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t)(SubgRf.PacketStatus.Params.Gfsk.FreqError) );
 80251ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80251d0:	3429      	adds	r4, #41	; 0x29
 80251d2:	b25b      	sxtb	r3, r3
 80251d4:	e7f6      	b.n	80251c4 <RadioIrqProcess+0xdc>
    if( SubgRf.RxContinuous == false )
 80251d6:	7860      	ldrb	r0, [r4, #1]
 80251d8:	2800      	cmp	r0, #0
 80251da:	d101      	bne.n	80251e0 <RadioIrqProcess+0xf8>
      SUBGRF_SetStandby( STDBY_RC );
 80251dc:	f7ff fa9c 	bl	8024718 <SUBGRF_SetStandby>
    if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80251e0:	4b23      	ldr	r3, [pc, #140]	; (8025270 <RadioIrqProcess+0x188>)
 80251e2:	681b      	ldr	r3, [r3, #0]
 80251e4:	2b00      	cmp	r3, #0
 80251e6:	d100      	bne.n	80251ea <RadioIrqProcess+0x102>
 80251e8:	e78e      	b.n	8025108 <RadioIrqProcess+0x20>
 80251ea:	691b      	ldr	r3, [r3, #16]
 80251ec:	e7b1      	b.n	8025152 <RadioIrqProcess+0x6a>
    SUBGRF_SetStandby( STDBY_RC );
 80251ee:	2000      	movs	r0, #0
 80251f0:	f7ff fa92 	bl	8024718 <SUBGRF_SetStandby>
    if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80251f4:	4b1e      	ldr	r3, [pc, #120]	; (8025270 <RadioIrqProcess+0x188>)
 80251f6:	681b      	ldr	r3, [r3, #0]
 80251f8:	2b00      	cmp	r3, #0
 80251fa:	d100      	bne.n	80251fe <RadioIrqProcess+0x116>
 80251fc:	e784      	b.n	8025108 <RadioIrqProcess+0x20>
 80251fe:	699b      	ldr	r3, [r3, #24]
 8025200:	2b00      	cmp	r3, #0
 8025202:	d100      	bne.n	8025206 <RadioIrqProcess+0x11e>
 8025204:	e780      	b.n	8025108 <RadioIrqProcess+0x20>
      RadioEvents->CadDone( true );
 8025206:	2001      	movs	r0, #1
 8025208:	e793      	b.n	8025132 <RadioIrqProcess+0x4a>
    if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 802520a:	f7ff fa7f 	bl	802470c <SUBGRF_GetOperatingMode>
 802520e:	2804      	cmp	r0, #4
 8025210:	d10f      	bne.n	8025232 <RadioIrqProcess+0x14a>
      DBG_GPIO_RADIO_TX(RST);
 8025212:	2000      	movs	r0, #0
 8025214:	f7fe ffce 	bl	80241b4 <dbg_gpio_radio_tx>
      TimerStop( &TxTimeoutTimer );
 8025218:	4816      	ldr	r0, [pc, #88]	; (8025274 <RadioIrqProcess+0x18c>)
 802521a:	f7fe fe63 	bl	8023ee4 <TimerStop>
      SUBGRF_SetStandby( STDBY_RC );
 802521e:	2000      	movs	r0, #0
 8025220:	f7ff fa7a 	bl	8024718 <SUBGRF_SetStandby>
      if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8025224:	4b12      	ldr	r3, [pc, #72]	; (8025270 <RadioIrqProcess+0x188>)
 8025226:	681b      	ldr	r3, [r3, #0]
 8025228:	2b00      	cmp	r3, #0
 802522a:	d100      	bne.n	802522e <RadioIrqProcess+0x146>
 802522c:	e76c      	b.n	8025108 <RadioIrqProcess+0x20>
 802522e:	685b      	ldr	r3, [r3, #4]
 8025230:	e78f      	b.n	8025152 <RadioIrqProcess+0x6a>
    else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8025232:	f7ff fa6b 	bl	802470c <SUBGRF_GetOperatingMode>
 8025236:	2805      	cmp	r0, #5
 8025238:	d000      	beq.n	802523c <RadioIrqProcess+0x154>
 802523a:	e765      	b.n	8025108 <RadioIrqProcess+0x20>
      DBG_GPIO_RADIO_RX(RST);
 802523c:	2000      	movs	r0, #0
 802523e:	f7fe ffaf 	bl	80241a0 <dbg_gpio_radio_rx>
      TimerStop( &RxTimeoutTimer );
 8025242:	480d      	ldr	r0, [pc, #52]	; (8025278 <RadioIrqProcess+0x190>)
 8025244:	f7fe fe4e 	bl	8023ee4 <TimerStop>
      SUBGRF_SetStandby( STDBY_RC );
 8025248:	2000      	movs	r0, #0
      SUBGRF_SetStandby( STDBY_RC );
 802524a:	f7ff fa65 	bl	8024718 <SUBGRF_SetStandby>
 802524e:	e005      	b.n	802525c <RadioIrqProcess+0x174>
    TimerStop( &RxTimeoutTimer );
 8025250:	4809      	ldr	r0, [pc, #36]	; (8025278 <RadioIrqProcess+0x190>)
 8025252:	f7fe fe47 	bl	8023ee4 <TimerStop>
    if( SubgRf.RxContinuous == false )
 8025256:	7860      	ldrb	r0, [r4, #1]
 8025258:	2800      	cmp	r0, #0
 802525a:	d0f6      	beq.n	802524a <RadioIrqProcess+0x162>
    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 802525c:	4b04      	ldr	r3, [pc, #16]	; (8025270 <RadioIrqProcess+0x188>)
 802525e:	681b      	ldr	r3, [r3, #0]
 8025260:	2b00      	cmp	r3, #0
 8025262:	d100      	bne.n	8025266 <RadioIrqProcess+0x17e>
 8025264:	e750      	b.n	8025108 <RadioIrqProcess+0x20>
 8025266:	68db      	ldr	r3, [r3, #12]
 8025268:	e773      	b.n	8025152 <RadioIrqProcess+0x6a>
 802526a:	46c0      	nop			; (mov r8, r8)
 802526c:	2000883c 	.word	0x2000883c
 8025270:	20008820 	.word	0x20008820
 8025274:	20008894 	.word	0x20008894
 8025278:	20008824 	.word	0x20008824
 802527c:	00000902 	.word	0x00000902
 8025280:	00000944 	.word	0x00000944
 8025284:	20009911 	.word	0x20009911

08025288 <RadioOnDioIrq>:
{
 8025288:	b510      	push	{r4, lr}
  SubgRf.RadioIrq = radioIrq;
 802528a:	4b03      	ldr	r3, [pc, #12]	; (8025298 <RadioOnDioIrq+0x10>)
 802528c:	3354      	adds	r3, #84	; 0x54
 802528e:	8018      	strh	r0, [r3, #0]
  RadioIrqProcess();
 8025290:	f7ff ff2a 	bl	80250e8 <RadioIrqProcess>
}
 8025294:	bd10      	pop	{r4, pc}
 8025296:	46c0      	nop			; (mov r8, r8)
 8025298:	2000883c 	.word	0x2000883c

0802529c <RadioGetStatus>:
{
 802529c:	b510      	push	{r4, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 802529e:	f7ff fa35 	bl	802470c <SUBGRF_GetOperatingMode>
 80252a2:	1f03      	subs	r3, r0, #4
 80252a4:	b2db      	uxtb	r3, r3
 80252a6:	2000      	movs	r0, #0
 80252a8:	2b03      	cmp	r3, #3
 80252aa:	d801      	bhi.n	80252b0 <RadioGetStatus+0x14>
 80252ac:	4a01      	ldr	r2, [pc, #4]	; (80252b4 <RadioGetStatus+0x18>)
 80252ae:	5cd0      	ldrb	r0, [r2, r3]
}
 80252b0:	bd10      	pop	{r4, pc}
 80252b2:	46c0      	nop			; (mov r8, r8)
 80252b4:	08031de3 	.word	0x08031de3

080252b8 <RadioSetTxContinuousWave>:
{
 80252b8:	b570      	push	{r4, r5, r6, lr}
 80252ba:	000d      	movs	r5, r1
 80252bc:	0014      	movs	r4, r2
    SUBGRF_SetRfFrequency( freq );
 80252be:	f7ff fb51 	bl	8024964 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 80252c2:	0028      	movs	r0, r5
 80252c4:	f00a fa50 	bl	802f768 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 80252c8:	2101      	movs	r1, #1
 80252ca:	f00a fa39 	bl	802f740 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80252ce:	f7ff fa8b 	bl	80247e8 <SUBGRF_SetTxContinuousWave>
    uint32_t timeout = (uint32_t)time * 1000;
 80252d2:	21fa      	movs	r1, #250	; 0xfa
 80252d4:	0089      	lsls	r1, r1, #2
 80252d6:	4361      	muls	r1, r4
    TimerSetValue( &TxTimeoutTimer, timeout );
 80252d8:	4c03      	ldr	r4, [pc, #12]	; (80252e8 <RadioSetTxContinuousWave+0x30>)
 80252da:	0020      	movs	r0, r4
 80252dc:	f009 fee1 	bl	802f0a2 <TimerSetValue>
    TimerStart( &TxTimeoutTimer );
 80252e0:	0020      	movs	r0, r4
 80252e2:	f7fe fd85 	bl	8023df0 <TimerStart>
}
 80252e6:	bd70      	pop	{r4, r5, r6, pc}
 80252e8:	20008894 	.word	0x20008894

080252ec <RadioRx>:
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 80252ec:	2300      	movs	r3, #0
 80252ee:	4912      	ldr	r1, [pc, #72]	; (8025338 <RadioRx+0x4c>)
{
 80252f0:	b570      	push	{r4, r5, r6, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 80252f2:	001a      	movs	r2, r3
{
 80252f4:	0004      	movs	r4, r0
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 80252f6:	0008      	movs	r0, r1
 80252f8:	f7ff fb0a 	bl	8024910 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 80252fc:	2c00      	cmp	r4, #0
 80252fe:	d007      	beq.n	8025310 <RadioRx+0x24>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8025300:	4d0e      	ldr	r5, [pc, #56]	; (802533c <RadioRx+0x50>)
 8025302:	0021      	movs	r1, r4
 8025304:	0028      	movs	r0, r5
 8025306:	f009 fecc 	bl	802f0a2 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 802530a:	0028      	movs	r0, r5
 802530c:	f7fe fd70 	bl	8023df0 <TimerStart>
    DBG_GPIO_RADIO_RX(SET);
 8025310:	2001      	movs	r0, #1
 8025312:	f7fe ff45 	bl	80241a0 <dbg_gpio_radio_rx>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8025316:	4c0a      	ldr	r4, [pc, #40]	; (8025340 <RadioRx+0x54>)
 8025318:	2100      	movs	r1, #0
 802531a:	0023      	movs	r3, r4
 802531c:	3356      	adds	r3, #86	; 0x56
 802531e:	7818      	ldrb	r0, [r3, #0]
 8025320:	f00a fa0e 	bl	802f740 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8025324:	7863      	ldrb	r3, [r4, #1]
 8025326:	2b00      	cmp	r3, #0
 8025328:	d003      	beq.n	8025332 <RadioRx+0x46>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 802532a:	4806      	ldr	r0, [pc, #24]	; (8025344 <RadioRx+0x58>)
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 802532c:	f7ff fa1e 	bl	802476c <SUBGRF_SetRx>
}
 8025330:	bd70      	pop	{r4, r5, r6, pc}
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8025332:	68a0      	ldr	r0, [r4, #8]
 8025334:	0180      	lsls	r0, r0, #6
 8025336:	e7f9      	b.n	802532c <RadioRx+0x40>
 8025338:	0000ffff 	.word	0x0000ffff
 802533c:	20008824 	.word	0x20008824
 8025340:	2000883c 	.word	0x2000883c
 8025344:	00ffffff 	.word	0x00ffffff

08025348 <RadioSend>:
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8025348:	2300      	movs	r3, #0
{
 802534a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802534c:	000c      	movs	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 802534e:	4950      	ldr	r1, [pc, #320]	; (8025490 <RadioSend+0x148>)
 8025350:	001a      	movs	r2, r3
{
 8025352:	b08d      	sub	sp, #52	; 0x34
 8025354:	0006      	movs	r6, r0
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8025356:	0008      	movs	r0, r1
 8025358:	f7ff fada 	bl	8024910 <SUBGRF_SetDioIrqParams>
    DBG_GPIO_RADIO_TX(SET);
 802535c:	2001      	movs	r0, #1
 802535e:	f7fe ff29 	bl	80241b4 <dbg_gpio_radio_tx>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 8025362:	4d4c      	ldr	r5, [pc, #304]	; (8025494 <RadioSend+0x14c>)
 8025364:	2101      	movs	r1, #1
 8025366:	002b      	movs	r3, r5
 8025368:	3356      	adds	r3, #86	; 0x56
 802536a:	7818      	ldrb	r0, [r3, #0]
 802536c:	f00a f9e8 	bl	802f740 <SUBGRF_SetSwitch>
    switch(SubgRf.Modem)
 8025370:	7828      	ldrb	r0, [r5, #0]
 8025372:	2803      	cmp	r0, #3
 8025374:	d80d      	bhi.n	8025392 <RadioSend+0x4a>
 8025376:	f7fa fead 	bl	80200d4 <__gnu_thumb1_case_uqi>
 802537a:	0216      	.short	0x0216
 802537c:	1c18      	.short	0x1c18
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 802537e:	77ec      	strb	r4, [r5, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8025380:	0028      	movs	r0, r5
 8025382:	300e      	adds	r0, #14
 8025384:	f7ff fd6e 	bl	8024e64 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8025388:	2200      	movs	r2, #0
 802538a:	0021      	movs	r1, r4
 802538c:	0030      	movs	r0, r6
            SUBGRF_SendPayload( outBuffer, size+1 , 0xFFFFFF );
 802538e:	f00a f9b9 	bl	802f704 <SUBGRF_SendPayload>
    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8025392:	4c41      	ldr	r4, [pc, #260]	; (8025498 <RadioSend+0x150>)
 8025394:	6869      	ldr	r1, [r5, #4]
 8025396:	0020      	movs	r0, r4
 8025398:	f009 fe83 	bl	802f0a2 <TimerSetValue>
    TimerStart( &TxTimeoutTimer );
 802539c:	0020      	movs	r0, r4
 802539e:	f7fe fd27 	bl	8023df0 <TimerStart>
}
 80253a2:	b00d      	add	sp, #52	; 0x34
 80253a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80253a6:	75ac      	strb	r4, [r5, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80253a8:	e7ea      	b.n	8025380 <RadioSend+0x38>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80253aa:	2302      	movs	r3, #2
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80253ac:	76ac      	strb	r4, [r5, #26]
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80253ae:	73ab      	strb	r3, [r5, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80253b0:	e7e6      	b.n	8025380 <RadioSend+0x38>
            uint8_t outBuffer[35] = {0};
 80253b2:	2700      	movs	r7, #0
 80253b4:	221f      	movs	r2, #31
 80253b6:	0039      	movs	r1, r7
 80253b8:	a804      	add	r0, sp, #16
 80253ba:	9703      	str	r7, [sp, #12]
 80253bc:	f00b fcd9 	bl	8030d72 <memset>
  for (i=0; i<size; i++)
  {
    /*reverse all inputs*/
    inBuffer[i]=~inBuffer[i];
    /*init outBuffer*/
    outBuffer[i]=0;
 80253c0:	0038      	movs	r0, r7
 80253c2:	aa03      	add	r2, sp, #12
  for (i=0; i<size; i++)
 80253c4:	42a7      	cmp	r7, r4
 80253c6:	db3b      	blt.n	8025440 <RadioSend+0xf8>
  }

  for (i=0; i<size*8; i++)
 80253c8:	2200      	movs	r2, #0
  {
    /*index to take bit in inBuffer*/
    index_bit = 7 - (i%8);
 80253ca:	2107      	movs	r1, #7
  for (i=0; i<size*8; i++)
 80253cc:	00e3      	lsls	r3, r4, #3
 80253ce:	9301      	str	r3, [sp, #4]
    index_bit = 7 - (i%8);
 80253d0:	468c      	mov	ip, r1
  uint8_t prevInt=0;
 80253d2:	0013      	movs	r3, r2
  for (i=0; i<size*8; i++)
 80253d4:	9901      	ldr	r1, [sp, #4]
 80253d6:	428a      	cmp	r2, r1
 80253d8:	d138      	bne.n	802544c <RadioSend+0x104>
    prevInt ^= currBit;
    /* write result integration in output*/
    outBuffer[index_byte_out]|= (prevInt << index_bit_out);
  }

  outBuffer[size] =(prevInt<<7) | (prevInt<<6) | (( (!prevInt) & 0x01)<<5) ;
 80253da:	0199      	lsls	r1, r3, #6
 80253dc:	01da      	lsls	r2, r3, #7
 80253de:	430a      	orrs	r2, r1
 80253e0:	4259      	negs	r1, r3
 80253e2:	414b      	adcs	r3, r1
 80253e4:	015b      	lsls	r3, r3, #5
 80253e6:	4313      	orrs	r3, r2
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80253e8:	0028      	movs	r0, r5
  outBuffer[size] =(prevInt<<7) | (prevInt<<6) | (( (!prevInt) & 0x01)<<5) ;
 80253ea:	af03      	add	r7, sp, #12
 80253ec:	553b      	strb	r3, [r7, r4]
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80253ee:	2302      	movs	r3, #2
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 80253f0:	1c66      	adds	r6, r4, #1
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80253f2:	300e      	adds	r0, #14
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 80253f4:	b2f6      	uxtb	r6, r6
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80253f6:	73ab      	strb	r3, [r5, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 80253f8:	76ae      	strb	r6, [r5, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80253fa:	f7ff fd33 	bl	8024e64 <SUBGRF_SetPacketParams>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80253fe:	6cab      	ldr	r3, [r5, #72]	; 0x48
    SUBGRF_WriteRegister(addr, data );
 8025400:	2100      	movs	r1, #0
 8025402:	20f1      	movs	r0, #241	; 0xf1
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8025404:	2b64      	cmp	r3, #100	; 0x64
 8025406:	d136      	bne.n	8025476 <RadioSend+0x12e>
    SUBGRF_WriteRegister(addr, data );
 8025408:	f7ff fb28 	bl	8024a5c <SUBGRF_WriteRegister>
 802540c:	2100      	movs	r1, #0
 802540e:	20f0      	movs	r0, #240	; 0xf0
 8025410:	f7ff fb24 	bl	8024a5c <SUBGRF_WriteRegister>
 8025414:	2170      	movs	r1, #112	; 0x70
 8025416:	20f3      	movs	r0, #243	; 0xf3
 8025418:	f7ff fb20 	bl	8024a5c <SUBGRF_WriteRegister>
 802541c:	211d      	movs	r1, #29
 802541e:	20f2      	movs	r0, #242	; 0xf2
 8025420:	f7ff fb1c 	bl	8024a5c <SUBGRF_WriteRegister>
            uint16_t bitNum = (size*8)+2;
 8025424:	00e1      	lsls	r1, r4, #3
    SUBGRF_WriteRegister(addr, data );
 8025426:	20f4      	movs	r0, #244	; 0xf4
            uint16_t bitNum = (size*8)+2;
 8025428:	1c8c      	adds	r4, r1, #2
    SUBGRF_WriteRegister(addr, data );
 802542a:	0a09      	lsrs	r1, r1, #8
 802542c:	f7ff fb16 	bl	8024a5c <SUBGRF_WriteRegister>
 8025430:	20f5      	movs	r0, #245	; 0xf5
 8025432:	b2e1      	uxtb	r1, r4
 8025434:	f7ff fb12 	bl	8024a5c <SUBGRF_WriteRegister>
            SUBGRF_SendPayload( outBuffer, size+1 , 0xFFFFFF );
 8025438:	0031      	movs	r1, r6
 802543a:	0038      	movs	r0, r7
 802543c:	4a17      	ldr	r2, [pc, #92]	; (802549c <RadioSend+0x154>)
 802543e:	e7a6      	b.n	802538e <RadioSend+0x46>
    inBuffer[i]=~inBuffer[i];
 8025440:	5df3      	ldrb	r3, [r6, r7]
    outBuffer[i]=0;
 8025442:	54b8      	strb	r0, [r7, r2]
    inBuffer[i]=~inBuffer[i];
 8025444:	43db      	mvns	r3, r3
 8025446:	55f3      	strb	r3, [r6, r7]
  for (i=0; i<size; i++)
 8025448:	3701      	adds	r7, #1
 802544a:	e7bb      	b.n	80253c4 <RadioSend+0x7c>
    index_bit = 7 - (i%8);
 802544c:	4667      	mov	r7, ip
    index_byte = i / 8;
 802544e:	10d1      	asrs	r1, r2, #3
    currBit = (inBuffer[index_byte] >> index_bit) & 0x01; 
 8025450:	5c71      	ldrb	r1, [r6, r1]
    index_bit = 7 - (i%8);
 8025452:	4397      	bics	r7, r2
    currBit = (inBuffer[index_byte] >> index_bit) & 0x01; 
 8025454:	4139      	asrs	r1, r7
 8025456:	2001      	movs	r0, #1
 8025458:	4001      	ands	r1, r0
    prevInt ^= currBit;
 802545a:	404b      	eors	r3, r1
    outBuffer[index_byte_out]|= (prevInt << index_bit_out);
 802545c:	4661      	mov	r1, ip
 802545e:	0018      	movs	r0, r3
    index_bit_out = 7 - ((i+1)%8);
 8025460:	3201      	adds	r2, #1
    outBuffer[index_byte_out]|= (prevInt << index_bit_out);
 8025462:	4391      	bics	r1, r2
 8025464:	4088      	lsls	r0, r1
 8025466:	0001      	movs	r1, r0
    index_byte_out = (i+1) / 8;
 8025468:	10d7      	asrs	r7, r2, #3
    outBuffer[index_byte_out]|= (prevInt << index_bit_out);
 802546a:	a803      	add	r0, sp, #12
 802546c:	5dc0      	ldrb	r0, [r0, r7]
 802546e:	4301      	orrs	r1, r0
 8025470:	a803      	add	r0, sp, #12
 8025472:	55c1      	strb	r1, [r0, r7]
  for (i=0; i<size*8; i++)
 8025474:	e7ae      	b.n	80253d4 <RadioSend+0x8c>
    SUBGRF_WriteRegister(addr, data );
 8025476:	f7ff faf1 	bl	8024a5c <SUBGRF_WriteRegister>
 802547a:	2100      	movs	r1, #0
 802547c:	20f0      	movs	r0, #240	; 0xf0
 802547e:	f7ff faed 	bl	8024a5c <SUBGRF_WriteRegister>
 8025482:	21e1      	movs	r1, #225	; 0xe1
 8025484:	20f3      	movs	r0, #243	; 0xf3
 8025486:	f7ff fae9 	bl	8024a5c <SUBGRF_WriteRegister>
 802548a:	2104      	movs	r1, #4
 802548c:	e7c7      	b.n	802541e <RadioSend+0xd6>
 802548e:	46c0      	nop			; (mov r8, r8)
 8025490:	00000201 	.word	0x00000201
 8025494:	2000883c 	.word	0x2000883c
 8025498:	20008894 	.word	0x20008894
 802549c:	00ffffff 	.word	0x00ffffff

080254a0 <RadioGetFskBandwidthRegValue>:
{
 80254a0:	b510      	push	{r4, lr}
    if( bandwidth == 0 )
 80254a2:	2800      	cmp	r0, #0
 80254a4:	d00c      	beq.n	80254c0 <RadioGetFskBandwidthRegValue+0x20>
 80254a6:	2300      	movs	r3, #0
        if ( bandwidth < FskBandwidths[i].bandwidth )
 80254a8:	4906      	ldr	r1, [pc, #24]	; (80254c4 <RadioGetFskBandwidthRegValue+0x24>)
 80254aa:	00da      	lsls	r2, r3, #3
 80254ac:	1852      	adds	r2, r2, r1
 80254ae:	6814      	ldr	r4, [r2, #0]
 80254b0:	42a0      	cmp	r0, r4
 80254b2:	d201      	bcs.n	80254b8 <RadioGetFskBandwidthRegValue+0x18>
            return FskBandwidths[i].RegValue;
 80254b4:	7910      	ldrb	r0, [r2, #4]
}
 80254b6:	bd10      	pop	{r4, pc}
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80254b8:	3301      	adds	r3, #1
 80254ba:	2b16      	cmp	r3, #22
 80254bc:	d1f5      	bne.n	80254aa <RadioGetFskBandwidthRegValue+0xa>
    while( 1 );
 80254be:	e7fe      	b.n	80254be <RadioGetFskBandwidthRegValue+0x1e>
        return( 0x1F );
 80254c0:	201f      	movs	r0, #31
 80254c2:	e7f8      	b.n	80254b6 <RadioGetFskBandwidthRegValue+0x16>
 80254c4:	080313d4 	.word	0x080313d4

080254c8 <RadioSetMaxPayloadLength>:
{
 80254c8:	b510      	push	{r4, lr}
 80254ca:	4b09      	ldr	r3, [pc, #36]	; (80254f0 <RadioSetMaxPayloadLength+0x28>)
    if( modem == MODEM_LORA )
 80254cc:	2801      	cmp	r0, #1
 80254ce:	d107      	bne.n	80254e0 <RadioSetMaxPayloadLength+0x18>
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80254d0:	4a08      	ldr	r2, [pc, #32]	; (80254f4 <RadioSetMaxPayloadLength+0x2c>)
 80254d2:	77d9      	strb	r1, [r3, #31]
 80254d4:	7011      	strb	r1, [r2, #0]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80254d6:	330e      	adds	r3, #14
 80254d8:	0018      	movs	r0, r3
 80254da:	f7ff fcc3 	bl	8024e64 <SUBGRF_SetPacketParams>
}
 80254de:	bd10      	pop	{r4, pc}
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80254e0:	7d5a      	ldrb	r2, [r3, #21]
 80254e2:	2a01      	cmp	r2, #1
 80254e4:	d1fb      	bne.n	80254de <RadioSetMaxPayloadLength+0x16>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80254e6:	4a03      	ldr	r2, [pc, #12]	; (80254f4 <RadioSetMaxPayloadLength+0x2c>)
 80254e8:	7599      	strb	r1, [r3, #22]
 80254ea:	7011      	strb	r1, [r2, #0]
 80254ec:	e7f3      	b.n	80254d6 <RadioSetMaxPayloadLength+0xe>
 80254ee:	46c0      	nop			; (mov r8, r8)
 80254f0:	2000883c 	.word	0x2000883c
 80254f4:	200081f4 	.word	0x200081f4

080254f8 <RadioRxBoosted>:
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 80254f8:	2300      	movs	r3, #0
 80254fa:	4911      	ldr	r1, [pc, #68]	; (8025540 <RadioRxBoosted+0x48>)
{
 80254fc:	b570      	push	{r4, r5, r6, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 80254fe:	001a      	movs	r2, r3
{
 8025500:	0004      	movs	r4, r0
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8025502:	0008      	movs	r0, r1
 8025504:	f7ff fa04 	bl	8024910 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8025508:	2c00      	cmp	r4, #0
 802550a:	d007      	beq.n	802551c <RadioRxBoosted+0x24>
         TimerSetValue( &RxTimeoutTimer, timeout );
 802550c:	4d0d      	ldr	r5, [pc, #52]	; (8025544 <RadioRxBoosted+0x4c>)
 802550e:	0021      	movs	r1, r4
 8025510:	0028      	movs	r0, r5
 8025512:	f009 fdc6 	bl	802f0a2 <TimerSetValue>
         TimerStart( &RxTimeoutTimer );
 8025516:	0028      	movs	r0, r5
 8025518:	f7fe fc6a 	bl	8023df0 <TimerStart>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 802551c:	4c0a      	ldr	r4, [pc, #40]	; (8025548 <RadioRxBoosted+0x50>)
 802551e:	2100      	movs	r1, #0
 8025520:	0023      	movs	r3, r4
 8025522:	3356      	adds	r3, #86	; 0x56
 8025524:	7818      	ldrb	r0, [r3, #0]
 8025526:	f00a f90b 	bl	802f740 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 802552a:	7863      	ldrb	r3, [r4, #1]
 802552c:	2b00      	cmp	r3, #0
 802552e:	d003      	beq.n	8025538 <RadioRxBoosted+0x40>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8025530:	4806      	ldr	r0, [pc, #24]	; (802554c <RadioRxBoosted+0x54>)
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8025532:	f7ff fa9f 	bl	8024a74 <SUBGRF_SetRxBoosted>
}
 8025536:	bd70      	pop	{r4, r5, r6, pc}
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8025538:	68a0      	ldr	r0, [r4, #8]
 802553a:	0180      	lsls	r0, r0, #6
 802553c:	e7f9      	b.n	8025532 <RadioRxBoosted+0x3a>
 802553e:	46c0      	nop			; (mov r8, r8)
 8025540:	0000ffff 	.word	0x0000ffff
 8025544:	20008824 	.word	0x20008824
 8025548:	2000883c 	.word	0x2000883c
 802554c:	00ffffff 	.word	0x00ffffff

08025550 <RadioSetPublicNetwork>:
    SubgRf.Modem = modem;
 8025550:	2201      	movs	r2, #1
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8025552:	4b0d      	ldr	r3, [pc, #52]	; (8025588 <RadioSetPublicNetwork+0x38>)
{
 8025554:	b510      	push	{r4, lr}
 8025556:	0004      	movs	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8025558:	7318      	strb	r0, [r3, #12]
 802555a:	7358      	strb	r0, [r3, #13]
    SubgRf.Modem = modem;
 802555c:	701a      	strb	r2, [r3, #0]
    switch( modem )
 802555e:	f000 f817 	bl	8025590 <RadioSetModem.part.0>
    if( enable == true )
 8025562:	2c00      	cmp	r4, #0
 8025564:	d009      	beq.n	802557a <RadioSetPublicNetwork+0x2a>
      SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8025566:	20e8      	movs	r0, #232	; 0xe8
 8025568:	2134      	movs	r1, #52	; 0x34
 802556a:	00c0      	lsls	r0, r0, #3
 802556c:	f7ff fa76 	bl	8024a5c <SUBGRF_WriteRegister>
      SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8025570:	2144      	movs	r1, #68	; 0x44
      SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8025572:	4806      	ldr	r0, [pc, #24]	; (802558c <RadioSetPublicNetwork+0x3c>)
 8025574:	f7ff fa72 	bl	8024a5c <SUBGRF_WriteRegister>
}
 8025578:	bd10      	pop	{r4, pc}
      SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 802557a:	20e8      	movs	r0, #232	; 0xe8
 802557c:	2114      	movs	r1, #20
 802557e:	00c0      	lsls	r0, r0, #3
 8025580:	f7ff fa6c 	bl	8024a5c <SUBGRF_WriteRegister>
      SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8025584:	2124      	movs	r1, #36	; 0x24
 8025586:	e7f4      	b.n	8025572 <RadioSetPublicNetwork+0x22>
 8025588:	2000883c 	.word	0x2000883c
 802558c:	00000741 	.word	0x00000741

08025590 <RadioSetModem.part.0>:
            SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8025590:	2001      	movs	r0, #1
static void RadioSetModem( RadioModems_t modem )
 8025592:	b510      	push	{r4, lr}
            SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8025594:	f7ff faa4 	bl	8024ae0 <SUBGRF_SetPacketType>
            if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8025598:	4b04      	ldr	r3, [pc, #16]	; (80255ac <RadioSetModem.part.0+0x1c>)
 802559a:	7b18      	ldrb	r0, [r3, #12]
 802559c:	7b5a      	ldrb	r2, [r3, #13]
 802559e:	4282      	cmp	r2, r0
 80255a0:	d002      	beq.n	80255a8 <RadioSetModem.part.0+0x18>
                SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80255a2:	7358      	strb	r0, [r3, #13]
                RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80255a4:	f7ff ffd4 	bl	8025550 <RadioSetPublicNetwork>
}
 80255a8:	bd10      	pop	{r4, pc}
 80255aa:	46c0      	nop			; (mov r8, r8)
 80255ac:	2000883c 	.word	0x2000883c

080255b0 <RadioSetModem>:
{
 80255b0:	b510      	push	{r4, lr}
    SubgRf.Modem = modem;
 80255b2:	4c0b      	ldr	r4, [pc, #44]	; (80255e0 <RadioSetModem+0x30>)
 80255b4:	7020      	strb	r0, [r4, #0]
    switch( modem )
 80255b6:	2803      	cmp	r0, #3
 80255b8:	d00c      	beq.n	80255d4 <RadioSetModem+0x24>
 80255ba:	2804      	cmp	r0, #4
 80255bc:	d00e      	beq.n	80255dc <RadioSetModem+0x2c>
 80255be:	2801      	cmp	r0, #1
 80255c0:	d005      	beq.n	80255ce <RadioSetModem+0x1e>
            SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80255c2:	2000      	movs	r0, #0
 80255c4:	f7ff fa8c 	bl	8024ae0 <SUBGRF_SetPacketType>
            SubgRf.PublicNetwork.Current = false;
 80255c8:	2300      	movs	r3, #0
 80255ca:	7363      	strb	r3, [r4, #13]
}
 80255cc:	bd10      	pop	{r4, pc}
 80255ce:	f7ff ffdf 	bl	8025590 <RadioSetModem.part.0>
 80255d2:	e7fb      	b.n	80255cc <RadioSetModem+0x1c>
            SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80255d4:	2002      	movs	r0, #2
            SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80255d6:	f7ff fa83 	bl	8024ae0 <SUBGRF_SetPacketType>
}
 80255da:	e7f7      	b.n	80255cc <RadioSetModem+0x1c>
            SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80255dc:	2000      	movs	r0, #0
 80255de:	e7fa      	b.n	80255d6 <RadioSetModem+0x26>
 80255e0:	2000883c 	.word	0x2000883c

080255e4 <RadioSetTxConfig>:
{
 80255e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80255e6:	b087      	sub	sp, #28
 80255e8:	0017      	movs	r7, r2
 80255ea:	aa0e      	add	r2, sp, #56	; 0x38
 80255ec:	8812      	ldrh	r2, [r2, #0]
 80255ee:	0006      	movs	r6, r0
 80255f0:	9200      	str	r2, [sp, #0]
 80255f2:	aa0f      	add	r2, sp, #60	; 0x3c
 80255f4:	7812      	ldrb	r2, [r2, #0]
 80255f6:	0018      	movs	r0, r3
 80255f8:	9201      	str	r2, [sp, #4]
 80255fa:	aa10      	add	r2, sp, #64	; 0x40
 80255fc:	7812      	ldrb	r2, [r2, #0]
 80255fe:	ab0c      	add	r3, sp, #48	; 0x30
 8025600:	9202      	str	r2, [sp, #8]
 8025602:	aa13      	add	r2, sp, #76	; 0x4c
 8025604:	cb20      	ldmia	r3!, {r5}
 8025606:	7812      	ldrb	r2, [r2, #0]
 8025608:	781b      	ldrb	r3, [r3, #0]
 802560a:	4694      	mov	ip, r2
 802560c:	4c5c      	ldr	r4, [pc, #368]	; (8025780 <RadioSetTxConfig+0x19c>)
 802560e:	9103      	str	r1, [sp, #12]
    switch( modem )
 8025610:	2e01      	cmp	r6, #1
 8025612:	d054      	beq.n	80256be <RadioSetTxConfig+0xda>
 8025614:	2e03      	cmp	r6, #3
 8025616:	d03e      	beq.n	8025696 <RadioSetTxConfig+0xb2>
 8025618:	2e00      	cmp	r6, #0
 802561a:	d149      	bne.n	80256b0 <RadioSetTxConfig+0xcc>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 802561c:	0023      	movs	r3, r4
 802561e:	3338      	adds	r3, #56	; 0x38
 8025620:	701e      	strb	r6, [r3, #0]
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8025622:	0023      	movs	r3, r4
 8025624:	220b      	movs	r2, #11
 8025626:	3344      	adds	r3, #68	; 0x44
 8025628:	701a      	strb	r2, [r3, #0]
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 802562a:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth );
 802562c:	f7ff ff38 	bl	80254a0 <RadioGetFskBandwidthRegValue>
 8025630:	0023      	movs	r3, r4
 8025632:	3345      	adds	r3, #69	; 0x45
 8025634:	7018      	strb	r0, [r3, #0]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8025636:	9b00      	ldr	r3, [sp, #0]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8025638:	9a01      	ldr	r2, [sp, #4]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 802563a:	00db      	lsls	r3, r3, #3
 802563c:	8223      	strh	r3, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 802563e:	4b51      	ldr	r3, [pc, #324]	; (8025784 <RadioSetTxConfig+0x1a0>)
            if( crcOn == true )
 8025640:	9902      	ldr	r1, [sp, #8]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8025642:	8263      	strh	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8025644:	2301      	movs	r3, #1
 8025646:	405a      	eors	r2, r3
 8025648:	7562      	strb	r2, [r4, #21]
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 802564a:	6427      	str	r7, [r4, #64]	; 0x40
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 802564c:	22f2      	movs	r2, #242	; 0xf2
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 802564e:	73a6      	strb	r6, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8025650:	7526      	strb	r6, [r4, #20]
            if( crcOn == true )
 8025652:	2900      	cmp	r1, #0
 8025654:	d100      	bne.n	8025658 <RadioSetTxConfig+0x74>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8025656:	001a      	movs	r2, r3
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8025658:	0025      	movs	r5, r4
 802565a:	3538      	adds	r5, #56	; 0x38
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 802565c:	7623      	strb	r3, [r4, #24]
 802565e:	75e2      	strb	r2, [r4, #23]
            RadioStandby( );
 8025660:	f00a f8af 	bl	802f7c2 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8025664:	7828      	ldrb	r0, [r5, #0]
 8025666:	1e43      	subs	r3, r0, #1
 8025668:	4198      	sbcs	r0, r3
 802566a:	b2c0      	uxtb	r0, r0
 802566c:	f7ff ffa0 	bl	80255b0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8025670:	0028      	movs	r0, r5
 8025672:	f7ff fa4d 	bl	8024b10 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8025676:	0020      	movs	r0, r4
 8025678:	300e      	adds	r0, #14
 802567a:	f7ff fbf3 	bl	8024e64 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 802567e:	2208      	movs	r2, #8
 8025680:	4941      	ldr	r1, [pc, #260]	; (8025788 <RadioSetTxConfig+0x1a4>)
 8025682:	a804      	add	r0, sp, #16
 8025684:	f00b fb6c 	bl	8030d60 <memcpy>
 8025688:	a804      	add	r0, sp, #16
 802568a:	f00a f82b 	bl	802f6e4 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 802568e:	483f      	ldr	r0, [pc, #252]	; (802578c <RadioSetTxConfig+0x1a8>)
 8025690:	f7ff fb22 	bl	8024cd8 <SUBGRF_SetWhiteningSeed>
            break;
 8025694:	e00c      	b.n	80256b0 <RadioSetTxConfig+0xcc>
            RadioSetModem(MODEM_SIGFOX_TX);
 8025696:	0030      	movs	r0, r6
 8025698:	f7ff ff8a 	bl	80255b0 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 802569c:	0020      	movs	r0, r4
 802569e:	2302      	movs	r3, #2
 80256a0:	3038      	adds	r0, #56	; 0x38
 80256a2:	7003      	strb	r3, [r0, #0]
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80256a4:	64a5      	str	r5, [r4, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80256a6:	3314      	adds	r3, #20
 80256a8:	344c      	adds	r4, #76	; 0x4c
 80256aa:	7023      	strb	r3, [r4, #0]
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80256ac:	f7ff fa30 	bl	8024b10 <SUBGRF_SetModulationParams>
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 80256b0:	4837      	ldr	r0, [pc, #220]	; (8025790 <RadioSetTxConfig+0x1ac>)
 80256b2:	f7ff fa95 	bl	8024be0 <SUBGRF_ReadRegister>
 80256b6:	2104      	movs	r1, #4
 80256b8:	4301      	orrs	r1, r0
 80256ba:	b2c9      	uxtb	r1, r1
 80256bc:	e047      	b.n	802574e <RadioSetTxConfig+0x16a>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80256be:	0022      	movs	r2, r4
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80256c0:	0021      	movs	r1, r4
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80256c2:	3238      	adds	r2, #56	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80256c4:	3150      	adds	r1, #80	; 0x50
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80256c6:	7016      	strb	r6, [r2, #0]
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80256c8:	b2ea      	uxtb	r2, r5
 80256ca:	700a      	strb	r2, [r1, #0]
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80256cc:	0021      	movs	r1, r4
 80256ce:	4f31      	ldr	r7, [pc, #196]	; (8025794 <RadioSetTxConfig+0x1b0>)
 80256d0:	3151      	adds	r1, #81	; 0x51
 80256d2:	5c3f      	ldrb	r7, [r7, r0]
 80256d4:	700f      	strb	r7, [r1, #0]
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80256d6:	0021      	movs	r1, r4
 80256d8:	3152      	adds	r1, #82	; 0x52
 80256da:	700b      	strb	r3, [r1, #0]
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80256dc:	2800      	cmp	r0, #0
 80256de:	d144      	bne.n	802576a <RadioSetTxConfig+0x186>
 80256e0:	3d0b      	subs	r5, #11
 80256e2:	42ae      	cmp	r6, r5
 80256e4:	4140      	adcs	r0, r0
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80256e6:	b2c3      	uxtb	r3, r0
 80256e8:	4925      	ldr	r1, [pc, #148]	; (8025780 <RadioSetTxConfig+0x19c>)
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80256ea:	3a05      	subs	r2, #5
 80256ec:	0008      	movs	r0, r1
 80256ee:	3053      	adds	r0, #83	; 0x53
 80256f0:	7003      	strb	r3, [r0, #0]
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80256f2:	2301      	movs	r3, #1
 80256f4:	738b      	strb	r3, [r1, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80256f6:	429a      	cmp	r2, r3
 80256f8:	d83f      	bhi.n	802577a <RadioSetTxConfig+0x196>
                if( preambleLen < 12 )
 80256fa:	9b00      	ldr	r3, [sp, #0]
 80256fc:	2b0b      	cmp	r3, #11
 80256fe:	d83c      	bhi.n	802577a <RadioSetTxConfig+0x196>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8025700:	230c      	movs	r3, #12
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8025702:	838b      	strh	r3, [r1, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8025704:	9b01      	ldr	r3, [sp, #4]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8025706:	9a02      	ldr	r2, [sp, #8]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8025708:	77a3      	strb	r3, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 802570a:	4b23      	ldr	r3, [pc, #140]	; (8025798 <RadioSetTxConfig+0x1b4>)
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 802570c:	0025      	movs	r5, r4
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 802570e:	781b      	ldrb	r3, [r3, #0]
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8025710:	3538      	adds	r5, #56	; 0x38
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8025712:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8025714:	1c63      	adds	r3, r4, #1
 8025716:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8025718:	4662      	mov	r2, ip
 802571a:	1ca3      	adds	r3, r4, #2
 802571c:	77da      	strb	r2, [r3, #31]
            RadioStandby( );
 802571e:	f00a f850 	bl	802f7c2 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8025722:	7828      	ldrb	r0, [r5, #0]
 8025724:	1e43      	subs	r3, r0, #1
 8025726:	4198      	sbcs	r0, r3
 8025728:	b2c0      	uxtb	r0, r0
 802572a:	f7ff ff41 	bl	80255b0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 802572e:	0028      	movs	r0, r5
 8025730:	f7ff f9ee 	bl	8024b10 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8025734:	0020      	movs	r0, r4
    if( ( modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8025736:	3451      	adds	r4, #81	; 0x51
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8025738:	300e      	adds	r0, #14
 802573a:	f7ff fb93 	bl	8024e64 <SUBGRF_SetPacketParams>
    if( ( modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 802573e:	7823      	ldrb	r3, [r4, #0]
 8025740:	2b06      	cmp	r3, #6
 8025742:	d1b5      	bne.n	80256b0 <RadioSetTxConfig+0xcc>
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8025744:	4812      	ldr	r0, [pc, #72]	; (8025790 <RadioSetTxConfig+0x1ac>)
 8025746:	f7ff fa4b 	bl	8024be0 <SUBGRF_ReadRegister>
 802574a:	21fb      	movs	r1, #251	; 0xfb
 802574c:	4001      	ands	r1, r0
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 802574e:	4810      	ldr	r0, [pc, #64]	; (8025790 <RadioSetTxConfig+0x1ac>)
 8025750:	f7ff f984 	bl	8024a5c <SUBGRF_WriteRegister>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8025754:	9803      	ldr	r0, [sp, #12]
 8025756:	f00a f807 	bl	802f768 <SUBGRF_SetRfTxPower>
 802575a:	4b09      	ldr	r3, [pc, #36]	; (8025780 <RadioSetTxConfig+0x19c>)
 802575c:	001a      	movs	r2, r3
 802575e:	3256      	adds	r2, #86	; 0x56
 8025760:	7010      	strb	r0, [r2, #0]
    SubgRf.TxTimeout = timeout;
 8025762:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025764:	605a      	str	r2, [r3, #4]
}
 8025766:	b007      	add	sp, #28
 8025768:	bdf0      	pop	{r4, r5, r6, r7, pc}
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 802576a:	2300      	movs	r3, #0
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 802576c:	2801      	cmp	r0, #1
 802576e:	d1bb      	bne.n	80256e8 <RadioSetTxConfig+0x104>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8025770:	3d0c      	subs	r5, #12
 8025772:	426b      	negs	r3, r5
 8025774:	415d      	adcs	r5, r3
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8025776:	b2eb      	uxtb	r3, r5
 8025778:	e7b6      	b.n	80256e8 <RadioSetTxConfig+0x104>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 802577a:	9b00      	ldr	r3, [sp, #0]
 802577c:	e7c1      	b.n	8025702 <RadioSetTxConfig+0x11e>
 802577e:	46c0      	nop			; (mov r8, r8)
 8025780:	2000883c 	.word	0x2000883c
 8025784:	00001804 	.word	0x00001804
 8025788:	080312e5 	.word	0x080312e5
 802578c:	000001ff 	.word	0x000001ff
 8025790:	00000889 	.word	0x00000889
 8025794:	08031de0 	.word	0x08031de0
 8025798:	200081f4 	.word	0x200081f4

0802579c <RadioSetRxConfig>:
{
 802579c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802579e:	b089      	sub	sp, #36	; 0x24
 80257a0:	001e      	movs	r6, r3
 80257a2:	ab0f      	add	r3, sp, #60	; 0x3c
 80257a4:	881b      	ldrh	r3, [r3, #0]
 80257a6:	9200      	str	r2, [sp, #0]
 80257a8:	9302      	str	r3, [sp, #8]
 80257aa:	ab10      	add	r3, sp, #64	; 0x40
 80257ac:	881b      	ldrh	r3, [r3, #0]
 80257ae:	000f      	movs	r7, r1
 80257b0:	9301      	str	r3, [sp, #4]
 80257b2:	ab11      	add	r3, sp, #68	; 0x44
 80257b4:	781b      	ldrb	r3, [r3, #0]
 80257b6:	a906      	add	r1, sp, #24
 80257b8:	9303      	str	r3, [sp, #12]
 80257ba:	ab12      	add	r3, sp, #72	; 0x48
 80257bc:	781a      	ldrb	r2, [r3, #0]
 80257be:	ab13      	add	r3, sp, #76	; 0x4c
 80257c0:	781b      	ldrb	r3, [r3, #0]
    SubgRf.RxContinuous = rxContinuous;
 80257c2:	4c9e      	ldr	r4, [pc, #632]	; (8025a3c <RadioSetRxConfig+0x2a0>)
{
 80257c4:	9304      	str	r3, [sp, #16]
 80257c6:	2321      	movs	r3, #33	; 0x21
 80257c8:	185b      	adds	r3, r3, r1
 80257ca:	7fdb      	ldrb	r3, [r3, #31]
 80257cc:	0005      	movs	r5, r0
 80257ce:	9305      	str	r3, [sp, #20]
 80257d0:	2325      	movs	r3, #37	; 0x25
 80257d2:	185b      	adds	r3, r3, r1
 80257d4:	7fdb      	ldrb	r3, [r3, #31]
    SubgRf.RxContinuous = rxContinuous;
 80257d6:	7063      	strb	r3, [r4, #1]
        symbTimeout = 0;
 80257d8:	4259      	negs	r1, r3
 80257da:	414b      	adcs	r3, r1
 80257dc:	9901      	ldr	r1, [sp, #4]
 80257de:	425b      	negs	r3, r3
 80257e0:	4019      	ands	r1, r3
    if( fixLen == true )
 80257e2:	9b03      	ldr	r3, [sp, #12]
        symbTimeout = 0;
 80257e4:	9101      	str	r1, [sp, #4]
    if( fixLen == true )
 80257e6:	2b00      	cmp	r3, #0
 80257e8:	d100      	bne.n	80257ec <RadioSetRxConfig+0x50>
        MaxPayloadLength = 0xFF;
 80257ea:	22ff      	movs	r2, #255	; 0xff
 80257ec:	4b94      	ldr	r3, [pc, #592]	; (8025a40 <RadioSetRxConfig+0x2a4>)
 80257ee:	701a      	strb	r2, [r3, #0]
    switch( modem )
 80257f0:	2d01      	cmp	r5, #1
 80257f2:	d100      	bne.n	80257f6 <RadioSetRxConfig+0x5a>
 80257f4:	e0b9      	b.n	802596a <RadioSetRxConfig+0x1ce>
 80257f6:	2d04      	cmp	r5, #4
 80257f8:	d047      	beq.n	802588a <RadioSetRxConfig+0xee>
 80257fa:	2d00      	cmp	r5, #0
 80257fc:	d000      	beq.n	8025800 <RadioSetRxConfig+0x64>
 80257fe:	e0b2      	b.n	8025966 <RadioSetRxConfig+0x1ca>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8025800:	0028      	movs	r0, r5
 8025802:	f7ff f805 	bl	8024810 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8025806:	4e8d      	ldr	r6, [pc, #564]	; (8025a3c <RadioSetRxConfig+0x2a0>)
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8025808:	220b      	movs	r2, #11
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 802580a:	0033      	movs	r3, r6
 802580c:	3338      	adds	r3, #56	; 0x38
 802580e:	701d      	strb	r5, [r3, #0]
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8025810:	9b00      	ldr	r3, [sp, #0]
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth );
 8025812:	0038      	movs	r0, r7
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8025814:	63f3      	str	r3, [r6, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8025816:	0033      	movs	r3, r6
 8025818:	3344      	adds	r3, #68	; 0x44
 802581a:	701a      	strb	r2, [r3, #0]
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth );
 802581c:	f7ff fe40 	bl	80254a0 <RadioGetFskBandwidthRegValue>
 8025820:	0033      	movs	r3, r6
 8025822:	3345      	adds	r3, #69	; 0x45
 8025824:	7018      	strb	r0, [r3, #0]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8025826:	9b02      	ldr	r3, [sp, #8]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8025828:	4a85      	ldr	r2, [pc, #532]	; (8025a40 <RadioSetRxConfig+0x2a4>)
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 802582a:	00db      	lsls	r3, r3, #3
 802582c:	8233      	strh	r3, [r6, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 802582e:	4b85      	ldr	r3, [pc, #532]	; (8025a44 <RadioSetRxConfig+0x2a8>)
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8025830:	9f03      	ldr	r7, [sp, #12]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8025832:	8273      	strh	r3, [r6, #18]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8025834:	2301      	movs	r3, #1
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8025836:	7812      	ldrb	r2, [r2, #0]
            if( crcOn == true )
 8025838:	9904      	ldr	r1, [sp, #16]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 802583a:	405f      	eors	r7, r3
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 802583c:	75b2      	strb	r2, [r6, #22]
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 802583e:	73b5      	strb	r5, [r6, #14]
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8025840:	22f2      	movs	r2, #242	; 0xf2
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8025842:	7535      	strb	r5, [r6, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8025844:	7577      	strb	r7, [r6, #21]
            if( crcOn == true )
 8025846:	2900      	cmp	r1, #0
 8025848:	d100      	bne.n	802584c <RadioSetRxConfig+0xb0>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 802584a:	001a      	movs	r2, r3
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 802584c:	0025      	movs	r5, r4
 802584e:	3538      	adds	r5, #56	; 0x38
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8025850:	7623      	strb	r3, [r4, #24]
 8025852:	75e2      	strb	r2, [r4, #23]
            RadioStandby( );
 8025854:	f009 ffb5 	bl	802f7c2 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8025858:	7828      	ldrb	r0, [r5, #0]
 802585a:	1e43      	subs	r3, r0, #1
 802585c:	4198      	sbcs	r0, r3
 802585e:	b2c0      	uxtb	r0, r0
 8025860:	f7ff fea6 	bl	80255b0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8025864:	0028      	movs	r0, r5
 8025866:	f7ff f953 	bl	8024b10 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 802586a:	0020      	movs	r0, r4
 802586c:	300e      	adds	r0, #14
 802586e:	f7ff faf9 	bl	8024e64 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8025872:	2208      	movs	r2, #8
 8025874:	4974      	ldr	r1, [pc, #464]	; (8025a48 <RadioSetRxConfig+0x2ac>)
 8025876:	a806      	add	r0, sp, #24
 8025878:	f00b fa72 	bl	8030d60 <memcpy>
 802587c:	a806      	add	r0, sp, #24
 802587e:	f009 ff31 	bl	802f6e4 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8025882:	4872      	ldr	r0, [pc, #456]	; (8025a4c <RadioSetRxConfig+0x2b0>)
 8025884:	f7ff fa28 	bl	8024cd8 <SUBGRF_SetWhiteningSeed>
 8025888:	e065      	b.n	8025956 <RadioSetRxConfig+0x1ba>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 802588a:	2600      	movs	r6, #0
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 802588c:	2001      	movs	r0, #1
 802588e:	f7fe ffbf 	bl	8024810 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8025892:	4b6f      	ldr	r3, [pc, #444]	; (8025a50 <RadioSetRxConfig+0x2b4>)
 8025894:	4c69      	ldr	r4, [pc, #420]	; (8025a3c <RadioSetRxConfig+0x2a0>)
 8025896:	701e      	strb	r6, [r3, #0]
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8025898:	9b00      	ldr	r3, [sp, #0]
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 802589a:	2209      	movs	r2, #9
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 802589c:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 802589e:	0023      	movs	r3, r4
 80258a0:	3344      	adds	r3, #68	; 0x44
 80258a2:	701a      	strb	r2, [r3, #0]
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80258a4:	23c8      	movs	r3, #200	; 0xc8
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth );
 80258a6:	0038      	movs	r0, r7
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80258a8:	009b      	lsls	r3, r3, #2
 80258aa:	6423      	str	r3, [r4, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth );
 80258ac:	f7ff fdf8 	bl	80254a0 <RadioGetFskBandwidthRegValue>
 80258b0:	0023      	movs	r3, r4
 80258b2:	3345      	adds	r3, #69	; 0x45
 80258b4:	7018      	strb	r0, [r3, #0]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80258b6:	9b02      	ldr	r3, [sp, #8]
            RadioSetModem( MODEM_SIGFOX_RX );
 80258b8:	0028      	movs	r0, r5
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80258ba:	00db      	lsls	r3, r3, #3
 80258bc:	8223      	strh	r3, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80258be:	2380      	movs	r3, #128	; 0x80
 80258c0:	015b      	lsls	r3, r3, #5
 80258c2:	8263      	strh	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80258c4:	4b5e      	ldr	r3, [pc, #376]	; (8025a40 <RadioSetRxConfig+0x2a4>)
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80258c6:	82a6      	strh	r6, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80258c8:	781b      	ldrb	r3, [r3, #0]
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80258ca:	73a6      	strb	r6, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80258cc:	75a3      	strb	r3, [r4, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80258ce:	2301      	movs	r3, #1
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80258d0:	7626      	strb	r6, [r4, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80258d2:	75e3      	strb	r3, [r4, #23]
            RadioSetModem( MODEM_SIGFOX_RX );
 80258d4:	f7ff fe6c 	bl	80255b0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80258d8:	485d      	ldr	r0, [pc, #372]	; (8025a50 <RadioSetRxConfig+0x2b4>)
 80258da:	f7ff f919 	bl	8024b10 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80258de:	0020      	movs	r0, r4
 80258e0:	300e      	adds	r0, #14
 80258e2:	f7ff fabf 	bl	8024e64 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80258e6:	4958      	ldr	r1, [pc, #352]	; (8025a48 <RadioSetRxConfig+0x2ac>)
 80258e8:	3608      	adds	r6, #8
 80258ea:	0032      	movs	r2, r6
 80258ec:	1989      	adds	r1, r1, r6
 80258ee:	a806      	add	r0, sp, #24
 80258f0:	f00b fa36 	bl	8030d60 <memcpy>
 80258f4:	a806      	add	r0, sp, #24
 80258f6:	f009 fef5 	bl	802f6e4 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80258fa:	4854      	ldr	r0, [pc, #336]	; (8025a4c <RadioSetRxConfig+0x2b0>)
 80258fc:	f7ff f9ec 	bl	8024cd8 <SUBGRF_SetWhiteningSeed>
    return SUBGRF_ReadRegister(addr);
 8025900:	4854      	ldr	r0, [pc, #336]	; (8025a54 <RadioSetRxConfig+0x2b8>)
 8025902:	f7ff f96d 	bl	8024be0 <SUBGRF_ReadRegister>
            modReg&=RADIO_BIT_MASK(4);
 8025906:	21ef      	movs	r1, #239	; 0xef
    SUBGRF_WriteRegister(addr, data );
 8025908:	4001      	ands	r1, r0
 802590a:	4852      	ldr	r0, [pc, #328]	; (8025a54 <RadioSetRxConfig+0x2b8>)
 802590c:	f7ff f8a6 	bl	8024a5c <SUBGRF_WriteRegister>
 8025910:	0029      	movs	r1, r5
 8025912:	4851      	ldr	r0, [pc, #324]	; (8025a58 <RadioSetRxConfig+0x2bc>)
 8025914:	f7ff f8a2 	bl	8024a5c <SUBGRF_WriteRegister>
    return SUBGRF_ReadRegister(addr);
 8025918:	4850      	ldr	r0, [pc, #320]	; (8025a5c <RadioSetRxConfig+0x2c0>)
 802591a:	f7ff f961 	bl	8024be0 <SUBGRF_ReadRegister>
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 802591e:	231c      	movs	r3, #28
 8025920:	0001      	movs	r1, r0
 8025922:	4399      	bics	r1, r3
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8025924:	4331      	orrs	r1, r6
    SUBGRF_WriteRegister(addr, data );
 8025926:	b2c9      	uxtb	r1, r1
 8025928:	484c      	ldr	r0, [pc, #304]	; (8025a5c <RadioSetRxConfig+0x2c0>)
 802592a:	f7ff f897 	bl	8024a5c <SUBGRF_WriteRegister>
    return SUBGRF_ReadRegister(addr);
 802592e:	484c      	ldr	r0, [pc, #304]	; (8025a60 <RadioSetRxConfig+0x2c4>)
 8025930:	f7ff f956 	bl	8024be0 <SUBGRF_ReadRegister>
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8025934:	2118      	movs	r1, #24
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 8025936:	4301      	orrs	r1, r0
    SUBGRF_WriteRegister(addr, data );
 8025938:	b2c9      	uxtb	r1, r1
 802593a:	4849      	ldr	r0, [pc, #292]	; (8025a60 <RadioSetRxConfig+0x2c4>)
 802593c:	f7ff f88e 	bl	8024a5c <SUBGRF_WriteRegister>
    return SUBGRF_ReadRegister(addr);
 8025940:	4848      	ldr	r0, [pc, #288]	; (8025a64 <RadioSetRxConfig+0x2c8>)
 8025942:	f7ff f94d 	bl	8024be0 <SUBGRF_ReadRegister>
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8025946:	2370      	movs	r3, #112	; 0x70
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 8025948:	2150      	movs	r1, #80	; 0x50
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 802594a:	4398      	bics	r0, r3
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 802594c:	4301      	orrs	r1, r0
    SUBGRF_WriteRegister(addr, data );
 802594e:	b2c9      	uxtb	r1, r1
 8025950:	4844      	ldr	r0, [pc, #272]	; (8025a64 <RadioSetRxConfig+0x2c8>)
 8025952:	f7ff f883 	bl	8024a5c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8025956:	20fa      	movs	r0, #250	; 0xfa
 8025958:	9b01      	ldr	r3, [sp, #4]
 802595a:	0140      	lsls	r0, r0, #5
 802595c:	4358      	muls	r0, r3
 802595e:	9900      	ldr	r1, [sp, #0]
 8025960:	f7fa fbd6 	bl	8020110 <__udivsi3>
 8025964:	60a0      	str	r0, [r4, #8]
}
 8025966:	b009      	add	sp, #36	; 0x24
 8025968:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 802596a:	2000      	movs	r0, #0
 802596c:	f7fe ff50 	bl	8024810 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8025970:	4b32      	ldr	r3, [pc, #200]	; (8025a3c <RadioSetRxConfig+0x2a0>)
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8025972:	493d      	ldr	r1, [pc, #244]	; (8025a68 <RadioSetRxConfig+0x2cc>)
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8025974:	001a      	movs	r2, r3
 8025976:	3238      	adds	r2, #56	; 0x38
 8025978:	7015      	strb	r5, [r2, #0]
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 802597a:	466a      	mov	r2, sp
 802597c:	7810      	ldrb	r0, [r2, #0]
 802597e:	001a      	movs	r2, r3
 8025980:	3250      	adds	r2, #80	; 0x50
 8025982:	7010      	strb	r0, [r2, #0]
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8025984:	001a      	movs	r2, r3
 8025986:	5dc9      	ldrb	r1, [r1, r7]
 8025988:	3251      	adds	r2, #81	; 0x51
 802598a:	7011      	strb	r1, [r2, #0]
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 802598c:	001a      	movs	r2, r3
 802598e:	3252      	adds	r2, #82	; 0x52
 8025990:	7016      	strb	r6, [r2, #0]
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8025992:	2f00      	cmp	r7, #0
 8025994:	d141      	bne.n	8025a1a <RadioSetRxConfig+0x27e>
 8025996:	9a00      	ldr	r2, [sp, #0]
 8025998:	3a0b      	subs	r2, #11
 802599a:	4295      	cmp	r5, r2
 802599c:	417f      	adcs	r7, r7
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 802599e:	b2fa      	uxtb	r2, r7
 80259a0:	0019      	movs	r1, r3
 80259a2:	3153      	adds	r1, #83	; 0x53
 80259a4:	700a      	strb	r2, [r1, #0]
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80259a6:	2201      	movs	r2, #1
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80259a8:	3805      	subs	r0, #5
 80259aa:	4d24      	ldr	r5, [pc, #144]	; (8025a3c <RadioSetRxConfig+0x2a0>)
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80259ac:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80259ae:	4290      	cmp	r0, r2
 80259b0:	d83c      	bhi.n	8025a2c <RadioSetRxConfig+0x290>
                if( preambleLen < 12 )
 80259b2:	9a02      	ldr	r2, [sp, #8]
 80259b4:	2a0b      	cmp	r2, #11
 80259b6:	d839      	bhi.n	8025a2c <RadioSetRxConfig+0x290>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80259b8:	220c      	movs	r2, #12
 80259ba:	839a      	strh	r2, [r3, #28]
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80259bc:	0027      	movs	r7, r4
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80259be:	9b03      	ldr	r3, [sp, #12]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80259c0:	9a04      	ldr	r2, [sp, #16]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80259c2:	77a3      	strb	r3, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80259c4:	4b1e      	ldr	r3, [pc, #120]	; (8025a40 <RadioSetRxConfig+0x2a4>)
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80259c6:	1ca6      	adds	r6, r4, #2
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80259c8:	781b      	ldrb	r3, [r3, #0]
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80259ca:	3738      	adds	r7, #56	; 0x38
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80259cc:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80259ce:	1c63      	adds	r3, r4, #1
 80259d0:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80259d2:	9b05      	ldr	r3, [sp, #20]
 80259d4:	77f3      	strb	r3, [r6, #31]
            RadioStandby( );
 80259d6:	f009 fef4 	bl	802f7c2 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80259da:	7838      	ldrb	r0, [r7, #0]
 80259dc:	1e43      	subs	r3, r0, #1
 80259de:	4198      	sbcs	r0, r3
 80259e0:	b2c0      	uxtb	r0, r0
 80259e2:	f7ff fde5 	bl	80255b0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80259e6:	0038      	movs	r0, r7
 80259e8:	f7ff f892 	bl	8024b10 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80259ec:	0020      	movs	r0, r4
 80259ee:	300e      	adds	r0, #14
 80259f0:	f7ff fa38 	bl	8024e64 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80259f4:	466b      	mov	r3, sp
 80259f6:	7918      	ldrb	r0, [r3, #4]
 80259f8:	f7ff f858 	bl	8024aac <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80259fc:	7ff3      	ldrb	r3, [r6, #31]
 80259fe:	2404      	movs	r4, #4
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8025a00:	481a      	ldr	r0, [pc, #104]	; (8025a6c <RadioSetRxConfig+0x2d0>)
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8025a02:	2b01      	cmp	r3, #1
 8025a04:	d115      	bne.n	8025a32 <RadioSetRxConfig+0x296>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8025a06:	f7ff f8eb 	bl	8024be0 <SUBGRF_ReadRegister>
 8025a0a:	43a0      	bics	r0, r4
 8025a0c:	b2c1      	uxtb	r1, r0
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8025a0e:	4817      	ldr	r0, [pc, #92]	; (8025a6c <RadioSetRxConfig+0x2d0>)
 8025a10:	f7ff f824 	bl	8024a5c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8025a14:	4b16      	ldr	r3, [pc, #88]	; (8025a70 <RadioSetRxConfig+0x2d4>)
 8025a16:	60ab      	str	r3, [r5, #8]
}
 8025a18:	e7a5      	b.n	8025966 <RadioSetRxConfig+0x1ca>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8025a1a:	2200      	movs	r2, #0
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8025a1c:	2f01      	cmp	r7, #1
 8025a1e:	d1bf      	bne.n	80259a0 <RadioSetRxConfig+0x204>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8025a20:	9a00      	ldr	r2, [sp, #0]
 8025a22:	3a0c      	subs	r2, #12
 8025a24:	4251      	negs	r1, r2
 8025a26:	414a      	adcs	r2, r1
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8025a28:	b2d2      	uxtb	r2, r2
 8025a2a:	e7b9      	b.n	80259a0 <RadioSetRxConfig+0x204>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8025a2c:	9b02      	ldr	r3, [sp, #8]
 8025a2e:	83ab      	strh	r3, [r5, #28]
 8025a30:	e7c4      	b.n	80259bc <RadioSetRxConfig+0x220>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8025a32:	f7ff f8d5 	bl	8024be0 <SUBGRF_ReadRegister>
 8025a36:	4304      	orrs	r4, r0
 8025a38:	b2e1      	uxtb	r1, r4
 8025a3a:	e7e8      	b.n	8025a0e <RadioSetRxConfig+0x272>
 8025a3c:	2000883c 	.word	0x2000883c
 8025a40:	200081f4 	.word	0x200081f4
 8025a44:	00001804 	.word	0x00001804
 8025a48:	080312e5 	.word	0x080312e5
 8025a4c:	000001ff 	.word	0x000001ff
 8025a50:	20008874 	.word	0x20008874
 8025a54:	000008b8 	.word	0x000008b8
 8025a58:	000008b9 	.word	0x000008b9
 8025a5c:	0000089b 	.word	0x0000089b
 8025a60:	000006d1 	.word	0x000006d1
 8025a64:	000006ac 	.word	0x000006ac
 8025a68:	08031de0 	.word	0x08031de0
 8025a6c:	00000736 	.word	0x00000736
 8025a70:	0000ffff 	.word	0x0000ffff

08025a74 <RadioSetTxGenericConfig>:
{
 8025a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025a76:	b087      	sub	sp, #28
 8025a78:	9202      	str	r2, [sp, #8]
  uint8_t syncword[8]={0};
 8025a7a:	2200      	movs	r2, #0
{
 8025a7c:	9303      	str	r3, [sp, #12]
 8025a7e:	0005      	movs	r5, r0
  uint8_t syncword[8]={0};
 8025a80:	ab04      	add	r3, sp, #16
{
 8025a82:	000c      	movs	r4, r1
  uint8_t syncword[8]={0};
 8025a84:	9204      	str	r2, [sp, #16]
 8025a86:	605a      	str	r2, [r3, #4]
    switch( modem )
 8025a88:	2801      	cmp	r0, #1
 8025a8a:	d05a      	beq.n	8025b42 <RadioSetTxGenericConfig+0xce>
 8025a8c:	2802      	cmp	r0, #2
 8025a8e:	d100      	bne.n	8025a92 <RadioSetTxGenericConfig+0x1e>
 8025a90:	e0a0      	b.n	8025bd4 <RadioSetTxGenericConfig+0x160>
 8025a92:	4290      	cmp	r0, r2
 8025a94:	d144      	bne.n	8025b20 <RadioSetTxGenericConfig+0xac>
            if ((config->fsk.BitRate== 0) || (config->fsk.PreambleLen== 0))
 8025a96:	688a      	ldr	r2, [r1, #8]
 8025a98:	2a00      	cmp	r2, #0
 8025a9a:	d100      	bne.n	8025a9e <RadioSetTxGenericConfig+0x2a>
 8025a9c:	e0ae      	b.n	8025bfc <RadioSetTxGenericConfig+0x188>
 8025a9e:	6909      	ldr	r1, [r1, #16]
 8025aa0:	9101      	str	r1, [sp, #4]
 8025aa2:	2900      	cmp	r1, #0
 8025aa4:	d100      	bne.n	8025aa8 <RadioSetTxGenericConfig+0x34>
 8025aa6:	e0a9      	b.n	8025bfc <RadioSetTxGenericConfig+0x188>
            if ( config->fsk.SyncWordLength>8)
 8025aa8:	7d27      	ldrb	r7, [r4, #20]
 8025aaa:	2f08      	cmp	r7, #8
 8025aac:	d900      	bls.n	8025ab0 <RadioSetTxGenericConfig+0x3c>
 8025aae:	e0a5      	b.n	8025bfc <RadioSetTxGenericConfig+0x188>
                for(int i =0; i<config->fsk.SyncWordLength; i++)
 8025ab0:	42af      	cmp	r7, r5
 8025ab2:	dc41      	bgt.n	8025b38 <RadioSetTxGenericConfig+0xc4>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8025ab4:	2600      	movs	r6, #0
 8025ab6:	4d53      	ldr	r5, [pc, #332]	; (8025c04 <RadioSetTxGenericConfig+0x190>)
 8025ab8:	4b53      	ldr	r3, [pc, #332]	; (8025c08 <RadioSetTxGenericConfig+0x194>)
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8025aba:	63ea      	str	r2, [r5, #60]	; 0x3c
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8025abc:	701e      	strb	r6, [r3, #0]
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8025abe:	002b      	movs	r3, r5
 8025ac0:	7822      	ldrb	r2, [r4, #0]
 8025ac2:	3344      	adds	r3, #68	; 0x44
 8025ac4:	701a      	strb	r2, [r3, #0]
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( config->fsk.Bandwidth );
 8025ac6:	6860      	ldr	r0, [r4, #4]
 8025ac8:	f7ff fcea 	bl	80254a0 <RadioGetFskBandwidthRegValue>
 8025acc:	002b      	movs	r3, r5
 8025ace:	3345      	adds	r3, #69	; 0x45
 8025ad0:	7018      	strb	r0, [r3, #0]
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8025ad2:	68e3      	ldr	r3, [r4, #12]
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8025ad4:	73ae      	strb	r6, [r5, #14]
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8025ad6:	642b      	str	r3, [r5, #64]	; 0x40
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen << 3 ); // convert byte into bit
 8025ad8:	9b01      	ldr	r3, [sp, #4]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; /*don't care in tx*/
 8025ada:	752e      	strb	r6, [r5, #20]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen << 3 ); // convert byte into bit
 8025adc:	00db      	lsls	r3, r3, #3
 8025ade:	822b      	strh	r3, [r5, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; //don't care in tx
 8025ae0:	2304      	movs	r3, #4
 8025ae2:	74ab      	strb	r3, [r5, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = (config->fsk.SyncWordLength ) << 3 ; // convert byte into bit
 8025ae4:	00fb      	lsls	r3, r7, #3
 8025ae6:	74eb      	strb	r3, [r5, #19]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = (RadioPacketLengthModes_t) config->fsk.HeaderType;
 8025ae8:	7fa3      	ldrb	r3, [r4, #30]
 8025aea:	756b      	strb	r3, [r5, #21]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) config->fsk.CrcLength;
 8025aec:	7fe3      	ldrb	r3, [r4, #31]
 8025aee:	75eb      	strb	r3, [r5, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = (RadioDcFree_t) config->fsk.Whitening;
 8025af0:	1ce3      	adds	r3, r4, #3
 8025af2:	7fdb      	ldrb	r3, [r3, #31]
 8025af4:	762b      	strb	r3, [r5, #24]
            RadioStandby( );
 8025af6:	f009 fe64 	bl	802f7c2 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8025afa:	0030      	movs	r0, r6
 8025afc:	f7ff fd58 	bl	80255b0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8025b00:	4841      	ldr	r0, [pc, #260]	; (8025c08 <RadioSetTxGenericConfig+0x194>)
 8025b02:	f7ff f805 	bl	8024b10 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8025b06:	0028      	movs	r0, r5
 8025b08:	300e      	adds	r0, #14
 8025b0a:	f7ff f9ab 	bl	8024e64 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( syncword );
 8025b0e:	a804      	add	r0, sp, #16
 8025b10:	f009 fde8 	bl	802f6e4 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8025b14:	8ba0      	ldrh	r0, [r4, #28]
 8025b16:	f7ff f8df 	bl	8024cd8 <SUBGRF_SetWhiteningSeed>
            SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8025b1a:	8c20      	ldrh	r0, [r4, #32]
 8025b1c:	f7ff f98e 	bl	8024e3c <SUBGRF_SetCrcPolynomial>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8025b20:	9802      	ldr	r0, [sp, #8]
 8025b22:	f009 fe21 	bl	802f768 <SUBGRF_SetRfTxPower>
 8025b26:	4b37      	ldr	r3, [pc, #220]	; (8025c04 <RadioSetTxGenericConfig+0x190>)
 8025b28:	001a      	movs	r2, r3
 8025b2a:	3256      	adds	r2, #86	; 0x56
 8025b2c:	7010      	strb	r0, [r2, #0]
    return 0;
 8025b2e:	2000      	movs	r0, #0
    SubgRf.TxTimeout = timeout;
 8025b30:	9a03      	ldr	r2, [sp, #12]
 8025b32:	605a      	str	r2, [r3, #4]
}
 8025b34:	b007      	add	sp, #28
 8025b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    syncword[i]=config->fsk.SyncWord[i];
 8025b38:	69a1      	ldr	r1, [r4, #24]
 8025b3a:	5d49      	ldrb	r1, [r1, r5]
 8025b3c:	54e9      	strb	r1, [r5, r3]
                for(int i =0; i<config->fsk.SyncWordLength; i++)
 8025b3e:	3501      	adds	r5, #1
 8025b40:	e7b6      	b.n	8025ab0 <RadioSetTxGenericConfig+0x3c>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8025b42:	4e30      	ldr	r6, [pc, #192]	; (8025c04 <RadioSetTxGenericConfig+0x190>)
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8025b44:	1d4a      	adds	r2, r1, #5
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8025b46:	0037      	movs	r7, r6
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8025b48:	0033      	movs	r3, r6
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8025b4a:	3738      	adds	r7, #56	; 0x38
 8025b4c:	7038      	strb	r0, [r7, #0]
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8025b4e:	7fd2      	ldrb	r2, [r2, #31]
 8025b50:	3350      	adds	r3, #80	; 0x50
 8025b52:	701a      	strb	r2, [r3, #0]
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = (RadioLoRaBandwidths_t) config->lora.Bandwidth;
 8025b54:	1d8b      	adds	r3, r1, #6
 8025b56:	7fdb      	ldrb	r3, [r3, #31]
 8025b58:	4a2c      	ldr	r2, [pc, #176]	; (8025c0c <RadioSetTxGenericConfig+0x198>)
            SubgRf.PacketParams.Params.LoRa.InvertIQ = (RadioLoRaIQModes_t) config->lora.IqInverted;
 8025b5a:	342c      	adds	r4, #44	; 0x2c
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = (RadioLoRaBandwidths_t) config->lora.Bandwidth;
 8025b5c:	7013      	strb	r3, [r2, #0]
            SubgRf.ModulationParams.Params.LoRa.CodingRate = (RadioLoRaCodingRates_t) config->lora.Coderate;
 8025b5e:	0033      	movs	r3, r6
 8025b60:	1dca      	adds	r2, r1, #7
 8025b62:	7fd2      	ldrb	r2, [r2, #31]
 8025b64:	3352      	adds	r3, #82	; 0x52
 8025b66:	701a      	strb	r2, [r3, #0]
            switch (config->lora.LowDatarateOptimize)
 8025b68:	000b      	movs	r3, r1
 8025b6a:	3308      	adds	r3, #8
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = (config->lora.LowDatarateOptimize==0)?0:1;
 8025b6c:	7fdb      	ldrb	r3, [r3, #31]
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8025b6e:	73b0      	strb	r0, [r6, #14]
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = (config->lora.LowDatarateOptimize==0)?0:1;
 8025b70:	1e5a      	subs	r2, r3, #1
 8025b72:	4193      	sbcs	r3, r2
 8025b74:	0032      	movs	r2, r6
 8025b76:	3253      	adds	r2, #83	; 0x53
 8025b78:	7013      	strb	r3, [r2, #0]
            SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8025b7a:	8d0b      	ldrh	r3, [r1, #40]	; 0x28
            SubgRf.PacketParams.Params.LoRa.CrcMode = (RadioLoRaCrcModes_t) config->lora.CrcMode;
 8025b7c:	000a      	movs	r2, r1
            SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8025b7e:	83b3      	strh	r3, [r6, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = (RadioLoRaPacketLengthsMode_t) config->lora.LengthMode;
 8025b80:	000b      	movs	r3, r1
 8025b82:	332a      	adds	r3, #42	; 0x2a
 8025b84:	781b      	ldrb	r3, [r3, #0]
            SubgRf.PacketParams.Params.LoRa.CrcMode = (RadioLoRaCrcModes_t) config->lora.CrcMode;
 8025b86:	322b      	adds	r2, #43	; 0x2b
            SubgRf.PacketParams.Params.LoRa.HeaderType = (RadioLoRaPacketLengthsMode_t) config->lora.LengthMode;
 8025b88:	77b3      	strb	r3, [r6, #30]
            SubgRf.PacketParams.Params.LoRa.CrcMode = (RadioLoRaCrcModes_t) config->lora.CrcMode;
 8025b8a:	7812      	ldrb	r2, [r2, #0]
 8025b8c:	1c73      	adds	r3, r6, #1
 8025b8e:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = (RadioLoRaIQModes_t) config->lora.IqInverted;
 8025b90:	7822      	ldrb	r2, [r4, #0]
 8025b92:	1cb3      	adds	r3, r6, #2
 8025b94:	77da      	strb	r2, [r3, #31]
            RadioStandby( );
 8025b96:	f009 fe14 	bl	802f7c2 <RadioStandby>
    SubgRf.Modem = modem;
 8025b9a:	7035      	strb	r5, [r6, #0]
    switch( modem )
 8025b9c:	f7ff fcf8 	bl	8025590 <RadioSetModem.part.0>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8025ba0:	0038      	movs	r0, r7
 8025ba2:	f7fe ffb5 	bl	8024b10 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8025ba6:	0030      	movs	r0, r6
 8025ba8:	300e      	adds	r0, #14
 8025baa:	f7ff f95b 	bl	8024e64 <SUBGRF_SetPacketParams>
            if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8025bae:	4b17      	ldr	r3, [pc, #92]	; (8025c0c <RadioSetTxGenericConfig+0x198>)
 8025bb0:	2404      	movs	r4, #4
 8025bb2:	781b      	ldrb	r3, [r3, #0]
                SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8025bb4:	4816      	ldr	r0, [pc, #88]	; (8025c10 <RadioSetTxGenericConfig+0x19c>)
            if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8025bb6:	2b06      	cmp	r3, #6
 8025bb8:	d107      	bne.n	8025bca <RadioSetTxGenericConfig+0x156>
                SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8025bba:	f7ff f811 	bl	8024be0 <SUBGRF_ReadRegister>
 8025bbe:	43a0      	bics	r0, r4
 8025bc0:	b2c1      	uxtb	r1, r0
                SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8025bc2:	4813      	ldr	r0, [pc, #76]	; (8025c10 <RadioSetTxGenericConfig+0x19c>)
 8025bc4:	f7fe ff4a 	bl	8024a5c <SUBGRF_WriteRegister>
 8025bc8:	e7aa      	b.n	8025b20 <RadioSetTxGenericConfig+0xac>
 8025bca:	f7ff f809 	bl	8024be0 <SUBGRF_ReadRegister>
 8025bce:	4304      	orrs	r4, r0
 8025bd0:	b2e1      	uxtb	r1, r4
 8025bd2:	e7f6      	b.n	8025bc2 <RadioSetTxGenericConfig+0x14e>
            if ((config->fsk.BitRate== 0) || (config->fsk.BitRate> 1000))
 8025bd4:	22fa      	movs	r2, #250	; 0xfa
 8025bd6:	688b      	ldr	r3, [r1, #8]
 8025bd8:	0092      	lsls	r2, r2, #2
 8025bda:	3b01      	subs	r3, #1
 8025bdc:	4293      	cmp	r3, r2
 8025bde:	d20d      	bcs.n	8025bfc <RadioSetTxGenericConfig+0x188>
            RadioSetModem( MODEM_BPSK );
 8025be0:	f7ff fce6 	bl	80255b0 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8025be4:	4b07      	ldr	r3, [pc, #28]	; (8025c04 <RadioSetTxGenericConfig+0x190>)
 8025be6:	0018      	movs	r0, r3
 8025be8:	3038      	adds	r0, #56	; 0x38
 8025bea:	7005      	strb	r5, [r0, #0]
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = config->bpsk.BitRate;
 8025bec:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8025bee:	649a      	str	r2, [r3, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8025bf0:	2216      	movs	r2, #22
 8025bf2:	334c      	adds	r3, #76	; 0x4c
 8025bf4:	701a      	strb	r2, [r3, #0]
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8025bf6:	f7fe ff8b 	bl	8024b10 <SUBGRF_SetModulationParams>
            break;
 8025bfa:	e791      	b.n	8025b20 <RadioSetTxGenericConfig+0xac>
                return -1;
 8025bfc:	2001      	movs	r0, #1
 8025bfe:	4240      	negs	r0, r0
 8025c00:	e798      	b.n	8025b34 <RadioSetTxGenericConfig+0xc0>
 8025c02:	46c0      	nop			; (mov r8, r8)
 8025c04:	2000883c 	.word	0x2000883c
 8025c08:	20008874 	.word	0x20008874
 8025c0c:	2000888d 	.word	0x2000888d
 8025c10:	00000889 	.word	0x00000889

08025c14 <RadioSetRxGenericConfig>:
{
 8025c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025c16:	000c      	movs	r4, r1
        symbTimeout = 0;
 8025c18:	4251      	negs	r1, r2
 8025c1a:	4151      	adcs	r1, r2
 8025c1c:	4249      	negs	r1, r1
{
 8025c1e:	b085      	sub	sp, #20
        symbTimeout = 0;
 8025c20:	400b      	ands	r3, r1
    uint8_t syncword[8]={0};
 8025c22:	2500      	movs	r5, #0
        symbTimeout = 0;
 8025c24:	9301      	str	r3, [sp, #4]
    SubgRf.RxContinuous = (rxContinuous==0)? false :true;
 8025c26:	1e53      	subs	r3, r2, #1
 8025c28:	419a      	sbcs	r2, r3
 8025c2a:	4e71      	ldr	r6, [pc, #452]	; (8025df0 <RadioSetRxGenericConfig+0x1dc>)
    uint8_t syncword[8]={0};
 8025c2c:	9502      	str	r5, [sp, #8]
 8025c2e:	9503      	str	r5, [sp, #12]
    SubgRf.RxContinuous = (rxContinuous==0)? false :true;
 8025c30:	7072      	strb	r2, [r6, #1]
    switch( modem )
 8025c32:	42a8      	cmp	r0, r5
 8025c34:	d005      	beq.n	8025c42 <RadioSetRxGenericConfig+0x2e>
 8025c36:	2801      	cmp	r0, #1
 8025c38:	d100      	bne.n	8025c3c <RadioSetRxGenericConfig+0x28>
 8025c3a:	e068      	b.n	8025d0e <RadioSetRxGenericConfig+0xfa>
    return status;
 8025c3c:	2000      	movs	r0, #0
}
 8025c3e:	b005      	add	sp, #20
 8025c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if ((config->fsk.BitRate== 0) || (config->fsk.PreambleLen== 0))
 8025c42:	68e3      	ldr	r3, [r4, #12]
 8025c44:	2b00      	cmp	r3, #0
 8025c46:	d100      	bne.n	8025c4a <RadioSetRxGenericConfig+0x36>
 8025c48:	e0cf      	b.n	8025dea <RadioSetRxGenericConfig+0x1d6>
 8025c4a:	6923      	ldr	r3, [r4, #16]
 8025c4c:	2b00      	cmp	r3, #0
 8025c4e:	d100      	bne.n	8025c52 <RadioSetRxGenericConfig+0x3e>
 8025c50:	e0cb      	b.n	8025dea <RadioSetRxGenericConfig+0x1d6>
            if ( config->fsk.SyncWordLength>8)
 8025c52:	7d63      	ldrb	r3, [r4, #21]
 8025c54:	2b08      	cmp	r3, #8
 8025c56:	d900      	bls.n	8025c5a <RadioSetRxGenericConfig+0x46>
 8025c58:	e0c7      	b.n	8025dea <RadioSetRxGenericConfig+0x1d6>
                for(int i =0; i<config->fsk.SyncWordLength; i++)
 8025c5a:	4283      	cmp	r3, r0
 8025c5c:	dc51      	bgt.n	8025d02 <RadioSetRxGenericConfig+0xee>
                MaxPayloadLength = 0xFF;
 8025c5e:	22ff      	movs	r2, #255	; 0xff
            if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8025c60:	1d23      	adds	r3, r4, #4
 8025c62:	7fdb      	ldrb	r3, [r3, #31]
                MaxPayloadLength = 0xFF;
 8025c64:	9200      	str	r2, [sp, #0]
            if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8025c66:	2b00      	cmp	r3, #0
 8025c68:	d102      	bne.n	8025c70 <RadioSetRxGenericConfig+0x5c>
                MaxPayloadLength = config->fsk.MaxPayloadLength;
 8025c6a:	69e3      	ldr	r3, [r4, #28]
 8025c6c:	b2db      	uxtb	r3, r3
 8025c6e:	9300      	str	r3, [sp, #0]
            SUBGRF_SetStopRxTimerOnPreambleDetect( (config->fsk.StopTimerOnPreambleDetect==0)? false:true );
 8025c70:	6820      	ldr	r0, [r4, #0]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8025c72:	2500      	movs	r5, #0
            SUBGRF_SetStopRxTimerOnPreambleDetect( (config->fsk.StopTimerOnPreambleDetect==0)? false:true );
 8025c74:	1e43      	subs	r3, r0, #1
 8025c76:	4198      	sbcs	r0, r3
 8025c78:	b2c0      	uxtb	r0, r0
 8025c7a:	f7fe fdc9 	bl	8024810 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8025c7e:	4e5c      	ldr	r6, [pc, #368]	; (8025df0 <RadioSetRxGenericConfig+0x1dc>)
 8025c80:	0037      	movs	r7, r6
 8025c82:	3738      	adds	r7, #56	; 0x38
 8025c84:	703d      	strb	r5, [r7, #0]
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8025c86:	68e3      	ldr	r3, [r4, #12]
 8025c88:	63f3      	str	r3, [r6, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8025c8a:	0033      	movs	r3, r6
 8025c8c:	7922      	ldrb	r2, [r4, #4]
 8025c8e:	3344      	adds	r3, #68	; 0x44
 8025c90:	701a      	strb	r2, [r3, #0]
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue(config->fsk.Bandwidth);
 8025c92:	68a0      	ldr	r0, [r4, #8]
 8025c94:	f7ff fc04 	bl	80254a0 <RadioGetFskBandwidthRegValue>
 8025c98:	0033      	movs	r3, r6
 8025c9a:	3345      	adds	r3, #69	; 0x45
 8025c9c:	7018      	strb	r0, [r3, #0]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen) << 3 ; // convert byte into bit
 8025c9e:	6923      	ldr	r3, [r4, #16]
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8025ca0:	73b5      	strb	r5, [r6, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen) << 3 ; // convert byte into bit
 8025ca2:	00db      	lsls	r3, r3, #3
 8025ca4:	8233      	strh	r3, [r6, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = (RadioPreambleDetection_t) config->fsk.PreambleMinDetect;
 8025ca6:	7d23      	ldrb	r3, [r4, #20]
 8025ca8:	74b3      	strb	r3, [r6, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = (config->fsk.SyncWordLength) << 3; // convert byte into bit
 8025caa:	7d63      	ldrb	r3, [r4, #21]
 8025cac:	00db      	lsls	r3, r3, #3
 8025cae:	74f3      	strb	r3, [r6, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = (RadioAddressComp_t)config->fsk.AddrComp;
 8025cb0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8025cb2:	82b3      	strh	r3, [r6, #20]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8025cb4:	9b00      	ldr	r3, [sp, #0]
 8025cb6:	75b3      	strb	r3, [r6, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) config->fsk.CrcLength;
 8025cb8:	1d63      	adds	r3, r4, #5
 8025cba:	7fdb      	ldrb	r3, [r3, #31]
 8025cbc:	75f3      	strb	r3, [r6, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = (RadioDcFree_t) config->fsk.Whitening;
 8025cbe:	0023      	movs	r3, r4
 8025cc0:	3328      	adds	r3, #40	; 0x28
 8025cc2:	781b      	ldrb	r3, [r3, #0]
 8025cc4:	7633      	strb	r3, [r6, #24]
            RadioStandby( );
 8025cc6:	f009 fd7c 	bl	802f7c2 <RadioStandby>
            RadioSetModem(  MODEM_FSK );
 8025cca:	0028      	movs	r0, r5
 8025ccc:	f7ff fc70 	bl	80255b0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8025cd0:	0038      	movs	r0, r7
 8025cd2:	f7fe ff1d 	bl	8024b10 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8025cd6:	0030      	movs	r0, r6
 8025cd8:	300e      	adds	r0, #14
 8025cda:	f7ff f8c3 	bl	8024e64 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( syncword );
 8025cde:	a802      	add	r0, sp, #8
 8025ce0:	f009 fd00 	bl	802f6e4 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8025ce4:	8c20      	ldrh	r0, [r4, #32]
 8025ce6:	f7fe fff7 	bl	8024cd8 <SUBGRF_SetWhiteningSeed>
            SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8025cea:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8025cec:	f7ff f8a6 	bl	8024e3c <SUBGRF_SetCrcPolynomial>
            SubgRf.RxTimeout = ( uint32_t )( (symbTimeout * 1000* 8 )/config->fsk.BitRate );
 8025cf0:	20fa      	movs	r0, #250	; 0xfa
 8025cf2:	9b01      	ldr	r3, [sp, #4]
 8025cf4:	0140      	lsls	r0, r0, #5
 8025cf6:	4358      	muls	r0, r3
 8025cf8:	68e1      	ldr	r1, [r4, #12]
 8025cfa:	f7fa fa09 	bl	8020110 <__udivsi3>
 8025cfe:	60b0      	str	r0, [r6, #8]
            break;
 8025d00:	e79c      	b.n	8025c3c <RadioSetRxGenericConfig+0x28>
                    syncword[i]=config->fsk.SyncWord[i];
 8025d02:	69a2      	ldr	r2, [r4, #24]
 8025d04:	a902      	add	r1, sp, #8
 8025d06:	5c12      	ldrb	r2, [r2, r0]
 8025d08:	540a      	strb	r2, [r1, r0]
                for(int i =0; i<config->fsk.SyncWordLength; i++)
 8025d0a:	3001      	adds	r0, #1
 8025d0c:	e7a5      	b.n	8025c5a <RadioSetRxGenericConfig+0x46>
            if  (config->lora.PreambleLen== 0)
 8025d0e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8025d10:	2b00      	cmp	r3, #0
 8025d12:	d06a      	beq.n	8025dea <RadioSetRxGenericConfig+0x1d6>
            if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8025d14:	0025      	movs	r5, r4
 8025d16:	3536      	adds	r5, #54	; 0x36
 8025d18:	782b      	ldrb	r3, [r5, #0]
                MaxPayloadLength = 0xFF;
 8025d1a:	27ff      	movs	r7, #255	; 0xff
            if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8025d1c:	2b01      	cmp	r3, #1
 8025d1e:	d101      	bne.n	8025d24 <RadioSetRxGenericConfig+0x110>
                MaxPayloadLength = config->fsk.MaxPayloadLength;
 8025d20:	69e3      	ldr	r3, [r4, #28]
 8025d22:	b2df      	uxtb	r7, r3
            SUBGRF_SetStopRxTimerOnPreambleDetect(  (config->lora.StopTimerOnPreambleDetect==0)? false:true  );
 8025d24:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8025d26:	1e43      	subs	r3, r0, #1
 8025d28:	4198      	sbcs	r0, r3
 8025d2a:	b2c0      	uxtb	r0, r0
 8025d2c:	f7fe fd70 	bl	8024810 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8025d30:	466b      	mov	r3, sp
 8025d32:	7918      	ldrb	r0, [r3, #4]
 8025d34:	f7fe feba 	bl	8024aac <SUBGRF_SetLoRaSymbNumTimeout>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8025d38:	0033      	movs	r3, r6
 8025d3a:	2101      	movs	r1, #1
 8025d3c:	3338      	adds	r3, #56	; 0x38
 8025d3e:	7019      	strb	r1, [r3, #0]
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = (RadioLoRaSpreadingFactors_t) config->lora.SpreadingFactor;
 8025d40:	0023      	movs	r3, r4
 8025d42:	3330      	adds	r3, #48	; 0x30
 8025d44:	781a      	ldrb	r2, [r3, #0]
 8025d46:	0033      	movs	r3, r6
 8025d48:	3350      	adds	r3, #80	; 0x50
 8025d4a:	701a      	strb	r2, [r3, #0]
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = (RadioLoRaBandwidths_t) config->lora.Bandwidth;
 8025d4c:	0023      	movs	r3, r4
 8025d4e:	0030      	movs	r0, r6
 8025d50:	3331      	adds	r3, #49	; 0x31
 8025d52:	781b      	ldrb	r3, [r3, #0]
 8025d54:	3051      	adds	r0, #81	; 0x51
 8025d56:	7003      	strb	r3, [r0, #0]
            SubgRf.ModulationParams.Params.LoRa.CodingRate = (RadioLoRaCodingRates_t) config->lora.Coderate;
 8025d58:	0023      	movs	r3, r4
 8025d5a:	0030      	movs	r0, r6
 8025d5c:	3332      	adds	r3, #50	; 0x32
 8025d5e:	781b      	ldrb	r3, [r3, #0]
 8025d60:	3052      	adds	r0, #82	; 0x52
 8025d62:	7003      	strb	r3, [r0, #0]
            switch (config->lora.LowDatarateOptimize)
 8025d64:	0023      	movs	r3, r4
 8025d66:	3333      	adds	r3, #51	; 0x33
 8025d68:	781b      	ldrb	r3, [r3, #0]
 8025d6a:	428b      	cmp	r3, r1
 8025d6c:	d003      	beq.n	8025d76 <RadioSetRxGenericConfig+0x162>
 8025d6e:	2b02      	cmp	r3, #2
 8025d70:	d005      	beq.n	8025d7e <RadioSetRxGenericConfig+0x16a>
 8025d72:	2b00      	cmp	r3, #0
 8025d74:	d10a      	bne.n	8025d8c <RadioSetRxGenericConfig+0x178>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8025d76:	0032      	movs	r2, r6
 8025d78:	3253      	adds	r2, #83	; 0x53
                  SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8025d7a:	7013      	strb	r3, [r2, #0]
 8025d7c:	e006      	b.n	8025d8c <RadioSetRxGenericConfig+0x178>
                if ((config->lora.SpreadingFactor==RADIO_LORA_SF11) || (config->lora.SpreadingFactor==RADIO_LORA_SF12))
 8025d7e:	0013      	movs	r3, r2
 8025d80:	0032      	movs	r2, r6
 8025d82:	3b0b      	subs	r3, #11
 8025d84:	3253      	adds	r2, #83	; 0x53
 8025d86:	2b01      	cmp	r3, #1
 8025d88:	d828      	bhi.n	8025ddc <RadioSetRxGenericConfig+0x1c8>
                  SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8025d8a:	7011      	strb	r1, [r2, #0]
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8025d8c:	2301      	movs	r3, #1
 8025d8e:	73b3      	strb	r3, [r6, #14]
            SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8025d90:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8025d92:	83b3      	strh	r3, [r6, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = (RadioLoRaPacketLengthsMode_t) config->lora.LengthMode;
 8025d94:	782b      	ldrb	r3, [r5, #0]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8025d96:	77f7      	strb	r7, [r6, #31]
            SubgRf.PacketParams.Params.LoRa.HeaderType = (RadioLoRaPacketLengthsMode_t) config->lora.LengthMode;
 8025d98:	77b3      	strb	r3, [r6, #30]
            SubgRf.PacketParams.Params.LoRa.CrcMode = (RadioLoRaCrcModes_t) config->lora.CrcMode;
 8025d9a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8025d9c:	0034      	movs	r4, r6
            SubgRf.PacketParams.Params.LoRa.CrcMode = (RadioLoRaCrcModes_t) config->lora.CrcMode;
 8025d9e:	8433      	strh	r3, [r6, #32]
            RadioStandby( );
 8025da0:	f009 fd0f 	bl	802f7c2 <RadioStandby>
    SubgRf.Modem = modem;
 8025da4:	2301      	movs	r3, #1
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8025da6:	3438      	adds	r4, #56	; 0x38
    SubgRf.Modem = modem;
 8025da8:	7033      	strb	r3, [r6, #0]
    switch( modem )
 8025daa:	f7ff fbf1 	bl	8025590 <RadioSetModem.part.0>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8025dae:	0020      	movs	r0, r4
 8025db0:	f7fe feae 	bl	8024b10 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8025db4:	0020      	movs	r0, r4
 8025db6:	382a      	subs	r0, #42	; 0x2a
 8025db8:	f7ff f854 	bl	8024e64 <SUBGRF_SetPacketParams>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8025dbc:	1cb3      	adds	r3, r6, #2
 8025dbe:	7fdb      	ldrb	r3, [r3, #31]
 8025dc0:	2404      	movs	r4, #4
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8025dc2:	480c      	ldr	r0, [pc, #48]	; (8025df4 <RadioSetRxGenericConfig+0x1e0>)
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8025dc4:	2b01      	cmp	r3, #1
 8025dc6:	d10b      	bne.n	8025de0 <RadioSetRxGenericConfig+0x1cc>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8025dc8:	f7fe ff0a 	bl	8024be0 <SUBGRF_ReadRegister>
 8025dcc:	43a0      	bics	r0, r4
 8025dce:	b2c1      	uxtb	r1, r0
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8025dd0:	4808      	ldr	r0, [pc, #32]	; (8025df4 <RadioSetRxGenericConfig+0x1e0>)
 8025dd2:	f7fe fe43 	bl	8024a5c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8025dd6:	4b08      	ldr	r3, [pc, #32]	; (8025df8 <RadioSetRxGenericConfig+0x1e4>)
 8025dd8:	60b3      	str	r3, [r6, #8]
 8025dda:	e72f      	b.n	8025c3c <RadioSetRxGenericConfig+0x28>
                  SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8025ddc:	2300      	movs	r3, #0
 8025dde:	e7cc      	b.n	8025d7a <RadioSetRxGenericConfig+0x166>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8025de0:	f7fe fefe 	bl	8024be0 <SUBGRF_ReadRegister>
 8025de4:	4304      	orrs	r4, r0
 8025de6:	b2e1      	uxtb	r1, r4
 8025de8:	e7f2      	b.n	8025dd0 <RadioSetRxGenericConfig+0x1bc>
                return -1;
 8025dea:	2001      	movs	r0, #1
 8025dec:	4240      	negs	r0, r0
 8025dee:	e726      	b.n	8025c3e <RadioSetRxGenericConfig+0x2a>
 8025df0:	2000883c 	.word	0x2000883c
 8025df4:	00000736 	.word	0x00000736
 8025df8:	0000ffff 	.word	0x0000ffff

08025dfc <RadioRandom>:
    SubgRf.Modem = modem;
 8025dfc:	2201      	movs	r2, #1
 8025dfe:	4b07      	ldr	r3, [pc, #28]	; (8025e1c <RadioRandom+0x20>)
{
 8025e00:	b510      	push	{r4, lr}
    SubgRf.Modem = modem;
 8025e02:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8025e04:	f7ff fbc4 	bl	8025590 <RadioSetModem.part.0>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8025e08:	2300      	movs	r3, #0
 8025e0a:	001a      	movs	r2, r3
 8025e0c:	0019      	movs	r1, r3
 8025e0e:	0018      	movs	r0, r3
 8025e10:	f7fe fd7e 	bl	8024910 <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 8025e14:	f7ff f89a 	bl	8024f4c <SUBGRF_GetRandom>
}
 8025e18:	bd10      	pop	{r4, pc}
 8025e1a:	46c0      	nop			; (mov r8, r8)
 8025e1c:	2000883c 	.word	0x2000883c

08025e20 <RadioTimeOnAir>:
{
 8025e20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025e22:	0014      	movs	r4, r2
 8025e24:	aa08      	add	r2, sp, #32
 8025e26:	8815      	ldrh	r5, [r2, #0]
 8025e28:	aa09      	add	r2, sp, #36	; 0x24
 8025e2a:	7817      	ldrb	r7, [r2, #0]
 8025e2c:	aa0a      	add	r2, sp, #40	; 0x28
 8025e2e:	000e      	movs	r6, r1
 8025e30:	7811      	ldrb	r1, [r2, #0]
 8025e32:	aa0b      	add	r2, sp, #44	; 0x2c
 8025e34:	7812      	ldrb	r2, [r2, #0]
 8025e36:	4694      	mov	ip, r2
    switch( modem )
 8025e38:	2800      	cmp	r0, #0
 8025e3a:	d009      	beq.n	8025e50 <RadioTimeOnAir+0x30>
 8025e3c:	2801      	cmp	r0, #1
 8025e3e:	d017      	beq.n	8025e70 <RadioTimeOnAir+0x50>
 8025e40:	2401      	movs	r4, #1
 8025e42:	2000      	movs	r0, #0
    return DIVC(numerator, denominator);
 8025e44:	1900      	adds	r0, r0, r4
 8025e46:	0021      	movs	r1, r4
 8025e48:	3801      	subs	r0, #1
 8025e4a:	f7fa f961 	bl	8020110 <__udivsi3>
}
 8025e4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8025e50:	1e53      	subs	r3, r2, #1
 8025e52:	419a      	sbcs	r2, r3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8025e54:	427b      	negs	r3, r7
 8025e56:	415f      	adcs	r7, r3
    return ( preambleLen << 3 ) +
 8025e58:	00ed      	lsls	r5, r5, #3
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8025e5a:	0050      	lsls	r0, r2, #1
 8025e5c:	1808      	adds	r0, r1, r0
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8025e5e:	00ff      	lsls	r7, r7, #3
 8025e60:	3518      	adds	r5, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8025e62:	00c0      	lsls	r0, r0, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8025e64:	19e9      	adds	r1, r5, r7
 8025e66:	1841      	adds	r1, r0, r1
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8025e68:	20fa      	movs	r0, #250	; 0xfa
 8025e6a:	0080      	lsls	r0, r0, #2
 8025e6c:	4348      	muls	r0, r1
        break;
 8025e6e:	e7e9      	b.n	8025e44 <RadioTimeOnAir+0x24>
    int32_t crDenom           = coderate + 4;
 8025e70:	3304      	adds	r3, #4
 8025e72:	9301      	str	r3, [sp, #4]
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8025e74:	1f63      	subs	r3, r4, #5
 8025e76:	2b01      	cmp	r3, #1
 8025e78:	d804      	bhi.n	8025e84 <RadioTimeOnAir+0x64>
        if( preambleLen < 12 )
 8025e7a:	1c2b      	adds	r3, r5, #0
 8025e7c:	2d0c      	cmp	r5, #12
 8025e7e:	d200      	bcs.n	8025e82 <RadioTimeOnAir+0x62>
 8025e80:	230c      	movs	r3, #12
 8025e82:	b29d      	uxth	r5, r3
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8025e84:	2e00      	cmp	r6, #0
 8025e86:	d139      	bne.n	8025efc <RadioTimeOnAir+0xdc>
 8025e88:	0023      	movs	r3, r4
 8025e8a:	2001      	movs	r0, #1
 8025e8c:	0032      	movs	r2, r6
 8025e8e:	3b0b      	subs	r3, #11
 8025e90:	4298      	cmp	r0, r3
 8025e92:	4172      	adcs	r2, r6
 8025e94:	0013      	movs	r3, r2
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8025e96:	b2db      	uxtb	r3, r3
                            ( crcOn ? 16 : 0 ) -
 8025e98:	4662      	mov	r2, ip
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8025e9a:	00c8      	lsls	r0, r1, #3
                            ( crcOn ? 16 : 0 ) -
 8025e9c:	1e51      	subs	r1, r2, #1
 8025e9e:	418a      	sbcs	r2, r1
 8025ea0:	0111      	lsls	r1, r2, #4
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8025ea2:	1840      	adds	r0, r0, r1
                            ( fixLen ? 0 : 20 );
 8025ea4:	2100      	movs	r1, #0
                            ( 4 * datarate ) +
 8025ea6:	00a2      	lsls	r2, r4, #2
                            ( crcOn ? 16 : 0 ) -
 8025ea8:	1a80      	subs	r0, r0, r2
                            ( fixLen ? 0 : 20 );
 8025eaa:	428f      	cmp	r7, r1
 8025eac:	d100      	bne.n	8025eb0 <RadioTimeOnAir+0x90>
 8025eae:	3114      	adds	r1, #20
                            ( 4 * datarate ) +
 8025eb0:	1840      	adds	r0, r0, r1
            ceilDenominator = 4 * ( datarate - 2 );
 8025eb2:	1ea7      	subs	r7, r4, #2
        ceilDenominator = 4 * datarate;
 8025eb4:	0011      	movs	r1, r2
    if( datarate <= 6 )
 8025eb6:	2c06      	cmp	r4, #6
 8025eb8:	d903      	bls.n	8025ec2 <RadioTimeOnAir+0xa2>
        ceilNumerator += 8;
 8025eba:	3008      	adds	r0, #8
        if( lowDatareOptimize == true )
 8025ebc:	2b00      	cmp	r3, #0
 8025ebe:	d000      	beq.n	8025ec2 <RadioTimeOnAir+0xa2>
            ceilDenominator = 4 * ( datarate - 2 );
 8025ec0:	00b9      	lsls	r1, r7, #2
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8025ec2:	43c2      	mvns	r2, r0
 8025ec4:	17d2      	asrs	r2, r2, #31
 8025ec6:	4010      	ands	r0, r2
 8025ec8:	1e4b      	subs	r3, r1, #1
 8025eca:	18c0      	adds	r0, r0, r3
 8025ecc:	f7fa f9aa 	bl	8020224 <__divsi3>
 8025ed0:	9b01      	ldr	r3, [sp, #4]
 8025ed2:	4343      	muls	r3, r0
 8025ed4:	195d      	adds	r5, r3, r5
        intermediate += 2;
 8025ed6:	002a      	movs	r2, r5
 8025ed8:	320e      	adds	r2, #14
    if( datarate <= 6 )
 8025eda:	2c06      	cmp	r4, #6
 8025edc:	d900      	bls.n	8025ee0 <RadioTimeOnAir+0xc0>
    int32_t intermediate =
 8025ede:	3a02      	subs	r2, #2
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8025ee0:	4b0b      	ldr	r3, [pc, #44]	; (8025f10 <RadioTimeOnAir+0xf0>)
 8025ee2:	5d9b      	ldrb	r3, [r3, r6]
    switch( bw )
 8025ee4:	2b0a      	cmp	r3, #10
 8025ee6:	d811      	bhi.n	8025f0c <RadioTimeOnAir+0xec>
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8025ee8:	0092      	lsls	r2, r2, #2
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8025eea:	20fa      	movs	r0, #250	; 0xfa
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8025eec:	3201      	adds	r2, #1
 8025eee:	40ba      	lsls	r2, r7
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8025ef0:	0080      	lsls	r0, r0, #2
 8025ef2:	4350      	muls	r0, r2
 8025ef4:	4a07      	ldr	r2, [pc, #28]	; (8025f14 <RadioTimeOnAir+0xf4>)
 8025ef6:	009b      	lsls	r3, r3, #2
 8025ef8:	589c      	ldr	r4, [r3, r2]
 8025efa:	e7a3      	b.n	8025e44 <RadioTimeOnAir+0x24>
    bool    lowDatareOptimize = false;
 8025efc:	2300      	movs	r3, #0
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8025efe:	2e01      	cmp	r6, #1
 8025f00:	d1ca      	bne.n	8025e98 <RadioTimeOnAir+0x78>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8025f02:	0023      	movs	r3, r4
 8025f04:	3b0c      	subs	r3, #12
 8025f06:	4258      	negs	r0, r3
 8025f08:	4143      	adcs	r3, r0
 8025f0a:	e7c4      	b.n	8025e96 <RadioTimeOnAir+0x76>
    return DIVC(numerator, denominator);
 8025f0c:	deff      	udf	#255	; 0xff
 8025f0e:	46c0      	nop			; (mov r8, r8)
 8025f10:	08031de0 	.word	0x08031de0
 8025f14:	080313a8 	.word	0x080313a8

08025f18 <RadioIsChannelFree>:
{
 8025f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025f1a:	0004      	movs	r4, r0
 8025f1c:	b08b      	sub	sp, #44	; 0x2c
 8025f1e:	000d      	movs	r5, r1
 8025f20:	0016      	movs	r6, r2
 8025f22:	001f      	movs	r7, r3
    RadioStandby( );
 8025f24:	f009 fc4d 	bl	802f7c2 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 8025f28:	2000      	movs	r0, #0
 8025f2a:	f7ff fb41 	bl	80255b0 <RadioSetModem>
    SUBGRF_SetRfFrequency( freq );
 8025f2e:	0020      	movs	r0, r4
 8025f30:	f7fe fd18 	bl	8024964 <SUBGRF_SetRfFrequency>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8025f34:	2301      	movs	r3, #1
 8025f36:	2400      	movs	r4, #0
 8025f38:	2296      	movs	r2, #150	; 0x96
 8025f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8025f3c:	3302      	adds	r3, #2
 8025f3e:	0029      	movs	r1, r5
 8025f40:	0092      	lsls	r2, r2, #2
 8025f42:	0020      	movs	r0, r4
 8025f44:	9408      	str	r4, [sp, #32]
 8025f46:	9407      	str	r4, [sp, #28]
 8025f48:	9406      	str	r4, [sp, #24]
 8025f4a:	9405      	str	r4, [sp, #20]
 8025f4c:	9404      	str	r4, [sp, #16]
 8025f4e:	9403      	str	r4, [sp, #12]
 8025f50:	9402      	str	r4, [sp, #8]
 8025f52:	9301      	str	r3, [sp, #4]
 8025f54:	9500      	str	r5, [sp, #0]
 8025f56:	0023      	movs	r3, r4
 8025f58:	f7ff fc20 	bl	802579c <RadioSetRxConfig>
    RadioRx( 0 );
 8025f5c:	0020      	movs	r0, r4
 8025f5e:	f7ff f9c5 	bl	80252ec <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8025f62:	f009 fc33 	bl	802f7cc <RadioGetWakeupTime>
 8025f66:	43c3      	mvns	r3, r0
 8025f68:	17db      	asrs	r3, r3, #31
 8025f6a:	4018      	ands	r0, r3
 8025f6c:	17c2      	asrs	r2, r0, #31
 8025f6e:	0315      	lsls	r5, r2, #12
 8025f70:	2100      	movs	r1, #0
 8025f72:	22fa      	movs	r2, #250	; 0xfa
 8025f74:	0d03      	lsrs	r3, r0, #20
 8025f76:	0304      	lsls	r4, r0, #12
 8025f78:	480f      	ldr	r0, [pc, #60]	; (8025fb8 <RadioIsChannelFree+0xa0>)
 8025f7a:	431d      	orrs	r5, r3
 8025f7c:	1900      	adds	r0, r0, r4
 8025f7e:	4169      	adcs	r1, r5
 8025f80:	2300      	movs	r3, #0
 8025f82:	0092      	lsls	r2, r2, #2
 8025f84:	f7fa fa92 	bl	80204ac <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
 8025f88:	f007 f97e 	bl	802d288 <z_impl_k_sleep>
    carrierSenseTime = TimerGetCurrentTime( );
 8025f8c:	f009 f89a 	bl	802f0c4 <TimerGetCurrentTime>
 8025f90:	0004      	movs	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8025f92:	0020      	movs	r0, r4
 8025f94:	f009 f89c 	bl	802f0d0 <TimerGetElapsedTime>
 8025f98:	42b8      	cmp	r0, r7
 8025f9a:	d305      	bcc.n	8025fa8 <RadioIsChannelFree+0x90>
    bool status = true;
 8025f9c:	2401      	movs	r4, #1
    RadioStandby( );
 8025f9e:	f009 fc10 	bl	802f7c2 <RadioStandby>
}
 8025fa2:	0020      	movs	r0, r4
 8025fa4:	b00b      	add	sp, #44	; 0x2c
 8025fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return SUBGRF_GetRssiInst( );
 8025fa8:	f7fe fd0e 	bl	80249c8 <SUBGRF_GetRssiInst>
        if( rssi > rssiThresh )
 8025fac:	b200      	sxth	r0, r0
 8025fae:	4286      	cmp	r6, r0
 8025fb0:	daef      	bge.n	8025f92 <RadioIsChannelFree+0x7a>
            status = false;
 8025fb2:	2400      	movs	r4, #0
 8025fb4:	e7f3      	b.n	8025f9e <RadioIsChannelFree+0x86>
 8025fb6:	46c0      	nop			; (mov r8, r8)
 8025fb8:	000003e7 	.word	0x000003e7

08025fbc <RadioTxPrbs>:
{
 8025fbc:	b510      	push	{r4, lr}
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 8025fbe:	4b08      	ldr	r3, [pc, #32]	; (8025fe0 <RadioTxPrbs+0x24>)
 8025fc0:	2101      	movs	r1, #1
 8025fc2:	3356      	adds	r3, #86	; 0x56
 8025fc4:	7818      	ldrb	r0, [r3, #0]
 8025fc6:	f009 fbbb 	bl	802f740 <SUBGRF_SetSwitch>
    SUBGRF_WriteRegister(addr, data );
 8025fca:	20d7      	movs	r0, #215	; 0xd7
 8025fcc:	212d      	movs	r1, #45	; 0x2d
 8025fce:	00c0      	lsls	r0, r0, #3
 8025fd0:	f7fe fd44 	bl	8024a5c <SUBGRF_WriteRegister>
    SUBGRF_SetTxInfinitePreamble();
 8025fd4:	f7fe fc12 	bl	80247fc <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx(0x0fffff);
 8025fd8:	4802      	ldr	r0, [pc, #8]	; (8025fe4 <RadioTxPrbs+0x28>)
 8025fda:	f7fe fbb3 	bl	8024744 <SUBGRF_SetTx>
}
 8025fde:	bd10      	pop	{r4, pc}
 8025fe0:	2000883c 	.word	0x2000883c
 8025fe4:	000fffff 	.word	0x000fffff

08025fe8 <RadioInit>:
{
 8025fe8:	b570      	push	{r4, r5, r6, lr}
    SubgRf.RxContinuous = false;
 8025fea:	2400      	movs	r4, #0
    RadioEvents = events;
 8025fec:	4b17      	ldr	r3, [pc, #92]	; (802604c <RadioInit+0x64>)
 8025fee:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8025ff0:	4b17      	ldr	r3, [pc, #92]	; (8026050 <RadioInit+0x68>)
    SUBGRF_Init( RadioOnDioIrq );
 8025ff2:	4818      	ldr	r0, [pc, #96]	; (8026054 <RadioInit+0x6c>)
    SubgRf.RxContinuous = false;
 8025ff4:	705c      	strb	r4, [r3, #1]
    SubgRf.TxTimeout = 0;
 8025ff6:	605c      	str	r4, [r3, #4]
    SubgRf.RxTimeout = 0;
 8025ff8:	609c      	str	r4, [r3, #8]
    SUBGRF_Init( RadioOnDioIrq );
 8025ffa:	f7fe fe13 	bl	8024c24 <SUBGRF_Init>
    RadioSetPublicNetwork( false );
 8025ffe:	0020      	movs	r0, r4
 8026000:	f7ff faa6 	bl	8025550 <RadioSetPublicNetwork>
    SUBGRF_SetRegulatorMode(  );
 8026004:	f7fe fc10 	bl	8024828 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8026008:	0021      	movs	r1, r4
 802600a:	0020      	movs	r0, r4
 802600c:	f7fe fcce 	bl	80249ac <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 8026010:	0021      	movs	r1, r4
 8026012:	2204      	movs	r2, #4
 8026014:	2001      	movs	r0, #1
 8026016:	f7fe fe7d 	bl	8024d14 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 802601a:	480f      	ldr	r0, [pc, #60]	; (8026058 <RadioInit+0x70>)
 802601c:	0023      	movs	r3, r4
 802601e:	0022      	movs	r2, r4
 8026020:	0001      	movs	r1, r0
 8026022:	f7fe fc75 	bl	8024910 <SUBGRF_SetDioIrqParams>
    RadioSleep();
 8026026:	f009 fbf2 	bl	802f80e <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 802602a:	4d0c      	ldr	r5, [pc, #48]	; (802605c <RadioInit+0x74>)
 802602c:	490c      	ldr	r1, [pc, #48]	; (8026060 <RadioInit+0x78>)
 802602e:	0028      	movs	r0, r5
 8026030:	f009 f82f 	bl	802f092 <TimerInit>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8026034:	4c0b      	ldr	r4, [pc, #44]	; (8026064 <RadioInit+0x7c>)
 8026036:	490c      	ldr	r1, [pc, #48]	; (8026068 <RadioInit+0x80>)
 8026038:	0020      	movs	r0, r4
 802603a:	f009 f82a 	bl	802f092 <TimerInit>
    TimerStop( &TxTimeoutTimer );
 802603e:	0028      	movs	r0, r5
 8026040:	f7fd ff50 	bl	8023ee4 <TimerStop>
    TimerStop( &RxTimeoutTimer );
 8026044:	0020      	movs	r0, r4
 8026046:	f7fd ff4d 	bl	8023ee4 <TimerStop>
}
 802604a:	bd70      	pop	{r4, r5, r6, pc}
 802604c:	20008820 	.word	0x20008820
 8026050:	2000883c 	.word	0x2000883c
 8026054:	08025289 	.word	0x08025289
 8026058:	0000ffff 	.word	0x0000ffff
 802605c:	20008894 	.word	0x20008894
 8026060:	080250a9 	.word	0x080250a9
 8026064:	20008824 	.word	0x20008824
 8026068:	080250c9 	.word	0x080250c9

0802606c <OnRadioTxTimeout>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
}

static void OnRadioTxTimeout( void )
{
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 802606c:	2304      	movs	r3, #4
 802606e:	4a08      	ldr	r2, [pc, #32]	; (8026090 <OnRadioTxTimeout+0x24>)
{
 8026070:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8026072:	7811      	ldrb	r1, [r2, #0]
 8026074:	430b      	orrs	r3, r1
 8026076:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8026078:	23d2      	movs	r3, #210	; 0xd2
 802607a:	4a06      	ldr	r2, [pc, #24]	; (8026094 <OnRadioTxTimeout+0x28>)
 802607c:	009b      	lsls	r3, r3, #2
 802607e:	58d3      	ldr	r3, [r2, r3]
 8026080:	2b00      	cmp	r3, #0
 8026082:	d003      	beq.n	802608c <OnRadioTxTimeout+0x20>
 8026084:	68db      	ldr	r3, [r3, #12]
 8026086:	2b00      	cmp	r3, #0
 8026088:	d000      	beq.n	802608c <OnRadioTxTimeout+0x20>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 802608a:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}
 802608c:	bd10      	pop	{r4, pc}
 802608e:	46c0      	nop			; (mov r8, r8)
 8026090:	200088e4 	.word	0x200088e4
 8026094:	200088e8 	.word	0x200088e8

08026098 <OnRadioRxError>:

static void OnRadioRxError( void )
{
    LoRaMacRadioEvents.Events.RxError = 1;
 8026098:	2302      	movs	r3, #2
 802609a:	4a08      	ldr	r2, [pc, #32]	; (80260bc <OnRadioRxError+0x24>)
{
 802609c:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 802609e:	7811      	ldrb	r1, [r2, #0]
 80260a0:	430b      	orrs	r3, r1
 80260a2:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80260a4:	23d2      	movs	r3, #210	; 0xd2
 80260a6:	4a06      	ldr	r2, [pc, #24]	; (80260c0 <OnRadioRxError+0x28>)
 80260a8:	009b      	lsls	r3, r3, #2
 80260aa:	58d3      	ldr	r3, [r2, r3]
 80260ac:	2b00      	cmp	r3, #0
 80260ae:	d003      	beq.n	80260b8 <OnRadioRxError+0x20>
 80260b0:	68db      	ldr	r3, [r3, #12]
 80260b2:	2b00      	cmp	r3, #0
 80260b4:	d000      	beq.n	80260b8 <OnRadioRxError+0x20>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80260b6:	4798      	blx	r3
    }
}
 80260b8:	bd10      	pop	{r4, pc}
 80260ba:	46c0      	nop			; (mov r8, r8)
 80260bc:	200088e4 	.word	0x200088e4
 80260c0:	200088e8 	.word	0x200088e8

080260c4 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 80260c4:	2301      	movs	r3, #1
 80260c6:	4a08      	ldr	r2, [pc, #32]	; (80260e8 <OnRadioRxTimeout+0x24>)
{
 80260c8:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 80260ca:	7811      	ldrb	r1, [r2, #0]
 80260cc:	430b      	orrs	r3, r1
 80260ce:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80260d0:	23d2      	movs	r3, #210	; 0xd2
 80260d2:	4a06      	ldr	r2, [pc, #24]	; (80260ec <OnRadioRxTimeout+0x28>)
 80260d4:	009b      	lsls	r3, r3, #2
 80260d6:	58d3      	ldr	r3, [r2, r3]
 80260d8:	2b00      	cmp	r3, #0
 80260da:	d003      	beq.n	80260e4 <OnRadioRxTimeout+0x20>
 80260dc:	68db      	ldr	r3, [r3, #12]
 80260de:	2b00      	cmp	r3, #0
 80260e0:	d000      	beq.n	80260e4 <OnRadioRxTimeout+0x20>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80260e2:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}
 80260e4:	bd10      	pop	{r4, pc}
 80260e6:	46c0      	nop			; (mov r8, r8)
 80260e8:	200088e4 	.word	0x200088e4
 80260ec:	200088e8 	.word	0x200088e8

080260f0 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80260f0:	4a05      	ldr	r2, [pc, #20]	; (8026108 <UpdateRxSlotIdleState+0x18>)
 80260f2:	4b06      	ldr	r3, [pc, #24]	; (802610c <UpdateRxSlotIdleState+0x1c>)
 80260f4:	58d3      	ldr	r3, [r2, r3]
 80260f6:	337c      	adds	r3, #124	; 0x7c
 80260f8:	781b      	ldrb	r3, [r3, #0]
 80260fa:	2b02      	cmp	r3, #2
 80260fc:	d000      	beq.n	8026100 <UpdateRxSlotIdleState+0x10>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 80260fe:	2306      	movs	r3, #6
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 8026100:	2190      	movs	r1, #144	; 0x90
 8026102:	00c9      	lsls	r1, r1, #3
 8026104:	5453      	strb	r3, [r2, r1]
 8026106:	4770      	bx	lr
 8026108:	200088e8 	.word	0x200088e8
 802610c:	00000484 	.word	0x00000484

08026110 <CallNvmCtxCallback>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 8026110:	23d2      	movs	r3, #210	; 0xd2
 8026112:	4a05      	ldr	r2, [pc, #20]	; (8026128 <CallNvmCtxCallback+0x18>)
 8026114:	009b      	lsls	r3, r3, #2
 8026116:	58d3      	ldr	r3, [r2, r3]
{
 8026118:	b510      	push	{r4, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 802611a:	2b00      	cmp	r3, #0
 802611c:	d003      	beq.n	8026126 <CallNvmCtxCallback+0x16>
 802611e:	689b      	ldr	r3, [r3, #8]
 8026120:	2b00      	cmp	r3, #0
 8026122:	d000      	beq.n	8026126 <CallNvmCtxCallback+0x16>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 8026124:	4798      	blx	r3
    }
}
 8026126:	bd10      	pop	{r4, pc}
 8026128:	200088e8 	.word	0x200088e8

0802612c <GetMaxAppPayloadWithoutFOptsLength>:
{
 802612c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 802612e:	4a0c      	ldr	r2, [pc, #48]	; (8026160 <GetMaxAppPayloadWithoutFOptsLength+0x34>)
 8026130:	4b0c      	ldr	r3, [pc, #48]	; (8026164 <GetMaxAppPayloadWithoutFOptsLength+0x38>)
 8026132:	a902      	add	r1, sp, #8
 8026134:	58d3      	ldr	r3, [r2, r3]
 8026136:	001a      	movs	r2, r3
 8026138:	32b8      	adds	r2, #184	; 0xb8
 802613a:	7812      	ldrb	r2, [r2, #0]
    getPhy.Datarate = datarate;
 802613c:	7048      	strb	r0, [r1, #1]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 802613e:	708a      	strb	r2, [r1, #2]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8026140:	220d      	movs	r2, #13
 8026142:	700a      	strb	r2, [r1, #0]
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 8026144:	001a      	movs	r2, r3
 8026146:	32ca      	adds	r2, #202	; 0xca
 8026148:	7812      	ldrb	r2, [r2, #0]
 802614a:	2a00      	cmp	r2, #0
 802614c:	d001      	beq.n	8026152 <GetMaxAppPayloadWithoutFOptsLength+0x26>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 802614e:	220e      	movs	r2, #14
 8026150:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8026152:	7818      	ldrb	r0, [r3, #0]
 8026154:	f009 fe2a 	bl	802fdac <RegionGetPhyParam>
    return phyParam.Value;
 8026158:	b2c0      	uxtb	r0, r0
}
 802615a:	b005      	add	sp, #20
 802615c:	bd00      	pop	{pc}
 802615e:	46c0      	nop			; (mov r8, r8)
 8026160:	200088e8 	.word	0x200088e8
 8026164:	00000484 	.word	0x00000484

08026168 <OnAckTimeoutTimerEvent>:
{
 8026168:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 802616a:	4810      	ldr	r0, [pc, #64]	; (80261ac <OnAckTimeoutTimerEvent+0x44>)
 802616c:	f7fd feba 	bl	8023ee4 <TimerStop>
    if( MacCtx.NodeAckRequested == true )
 8026170:	4b0f      	ldr	r3, [pc, #60]	; (80261b0 <OnAckTimeoutTimerEvent+0x48>)
 8026172:	4a10      	ldr	r2, [pc, #64]	; (80261b4 <OnAckTimeoutTimerEvent+0x4c>)
 8026174:	5c9a      	ldrb	r2, [r3, r2]
 8026176:	2a00      	cmp	r2, #0
 8026178:	d002      	beq.n	8026180 <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 802617a:	2101      	movs	r1, #1
 802617c:	4a0e      	ldr	r2, [pc, #56]	; (80261b8 <OnAckTimeoutTimerEvent+0x50>)
 802617e:	5499      	strb	r1, [r3, r2]
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8026180:	4a0e      	ldr	r2, [pc, #56]	; (80261bc <OnAckTimeoutTimerEvent+0x54>)
 8026182:	589a      	ldr	r2, [r3, r2]
 8026184:	327c      	adds	r2, #124	; 0x7c
 8026186:	7812      	ldrb	r2, [r2, #0]
 8026188:	2a02      	cmp	r2, #2
 802618a:	d104      	bne.n	8026196 <OnAckTimeoutTimerEvent+0x2e>
        MacCtx.MacFlags.Bits.MacDone = 1;
 802618c:	490c      	ldr	r1, [pc, #48]	; (80261c0 <OnAckTimeoutTimerEvent+0x58>)
 802618e:	321e      	adds	r2, #30
 8026190:	5c58      	ldrb	r0, [r3, r1]
 8026192:	4302      	orrs	r2, r0
 8026194:	545a      	strb	r2, [r3, r1]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8026196:	22d2      	movs	r2, #210	; 0xd2
 8026198:	0092      	lsls	r2, r2, #2
 802619a:	589b      	ldr	r3, [r3, r2]
 802619c:	2b00      	cmp	r3, #0
 802619e:	d003      	beq.n	80261a8 <OnAckTimeoutTimerEvent+0x40>
 80261a0:	68db      	ldr	r3, [r3, #12]
 80261a2:	2b00      	cmp	r3, #0
 80261a4:	d000      	beq.n	80261a8 <OnAckTimeoutTimerEvent+0x40>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80261a6:	4798      	blx	r3
}
 80261a8:	bd10      	pop	{r4, pc}
 80261aa:	46c0      	nop			; (mov r8, r8)
 80261ac:	20008ce0 	.word	0x20008ce0
 80261b0:	200088e8 	.word	0x200088e8
 80261b4:	00000414 	.word	0x00000414
 80261b8:	00000413 	.word	0x00000413
 80261bc:	00000484 	.word	0x00000484
 80261c0:	00000481 	.word	0x00000481

080261c4 <PrepareRxDoneAbort>:
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80261c4:	22d0      	movs	r2, #208	; 0xd0
 80261c6:	2380      	movs	r3, #128	; 0x80
{
 80261c8:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80261ca:	4c0a      	ldr	r4, [pc, #40]	; (80261f4 <PrepareRxDoneAbort+0x30>)
 80261cc:	0092      	lsls	r2, r2, #2
 80261ce:	58a1      	ldr	r1, [r4, r2]
 80261d0:	430b      	orrs	r3, r1
 80261d2:	50a3      	str	r3, [r4, r2]
    if( MacCtx.NodeAckRequested == true )
 80261d4:	4b08      	ldr	r3, [pc, #32]	; (80261f8 <PrepareRxDoneAbort+0x34>)
 80261d6:	5ce3      	ldrb	r3, [r4, r3]
 80261d8:	2b00      	cmp	r3, #0
 80261da:	d002      	beq.n	80261e2 <PrepareRxDoneAbort+0x1e>
        OnAckTimeoutTimerEvent( NULL );
 80261dc:	2000      	movs	r0, #0
 80261de:	f7ff ffc3 	bl	8026168 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 80261e2:	2322      	movs	r3, #34	; 0x22
 80261e4:	4905      	ldr	r1, [pc, #20]	; (80261fc <PrepareRxDoneAbort+0x38>)
 80261e6:	5c62      	ldrb	r2, [r4, r1]
 80261e8:	439a      	bics	r2, r3
 80261ea:	4313      	orrs	r3, r2
 80261ec:	5463      	strb	r3, [r4, r1]
    UpdateRxSlotIdleState( );
 80261ee:	f7ff ff7f 	bl	80260f0 <UpdateRxSlotIdleState>
}
 80261f2:	bd10      	pop	{r4, pc}
 80261f4:	200088e8 	.word	0x200088e8
 80261f8:	00000414 	.word	0x00000414
 80261fc:	00000481 	.word	0x00000481

08026200 <HandleRadioRxErrorTimeout>:
{
 8026200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8026202:	4c33      	ldr	r4, [pc, #204]	; (80262d0 <HandleRadioRxErrorTimeout+0xd0>)
 8026204:	4d33      	ldr	r5, [pc, #204]	; (80262d4 <HandleRadioRxErrorTimeout+0xd4>)
{
 8026206:	9000      	str	r0, [sp, #0]
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8026208:	5963      	ldr	r3, [r4, r5]
{
 802620a:	000f      	movs	r7, r1
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 802620c:	337c      	adds	r3, #124	; 0x7c
 802620e:	781b      	ldrb	r3, [r3, #0]
 8026210:	2b02      	cmp	r3, #2
 8026212:	d003      	beq.n	802621c <HandleRadioRxErrorTimeout+0x1c>
        Radio.Sleep( );
 8026214:	4b30      	ldr	r3, [pc, #192]	; (80262d8 <HandleRadioRxErrorTimeout+0xd8>)
 8026216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026218:	9301      	str	r3, [sp, #4]
 802621a:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 802621c:	f002 fff4 	bl	8029208 <LoRaMacClassBIsBeaconExpected>
 8026220:	1e06      	subs	r6, r0, #0
 8026222:	d005      	beq.n	8026230 <HandleRadioRxErrorTimeout+0x30>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8026224:	2002      	movs	r0, #2
 8026226:	f003 f819 	bl	802925c <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 802622a:	2000      	movs	r0, #0
 802622c:	f002 fd14 	bl	8028c58 <LoRaMacClassBBeaconTimerEvent>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8026230:	5963      	ldr	r3, [r4, r5]
 8026232:	337c      	adds	r3, #124	; 0x7c
 8026234:	781b      	ldrb	r3, [r3, #0]
 8026236:	2b01      	cmp	r3, #1
 8026238:	d118      	bne.n	802626c <HandleRadioRxErrorTimeout+0x6c>
        if( LoRaMacClassBIsPingExpected( ) == true )
 802623a:	f002 fff3 	bl	8029224 <LoRaMacClassBIsPingExpected>
 802623e:	9001      	str	r0, [sp, #4]
 8026240:	2800      	cmp	r0, #0
 8026242:	d006      	beq.n	8026252 <HandleRadioRxErrorTimeout+0x52>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8026244:	2000      	movs	r0, #0
 8026246:	f002 feef 	bl	8029028 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 802624a:	2000      	movs	r0, #0
 802624c:	f002 fccc 	bl	8028be8 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8026250:	9e01      	ldr	r6, [sp, #4]
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8026252:	f002 fff1 	bl	8029238 <LoRaMacClassBIsMulticastExpected>
 8026256:	2800      	cmp	r0, #0
 8026258:	d008      	beq.n	802626c <HandleRadioRxErrorTimeout+0x6c>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 802625a:	2000      	movs	r0, #0
 802625c:	f002 feea 	bl	8029034 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8026260:	2000      	movs	r0, #0
 8026262:	f002 fcd3 	bl	8028c0c <LoRaMacClassBMulticastSlotTimerEvent>
    UpdateRxSlotIdleState( );
 8026266:	f7ff ff43 	bl	80260f0 <UpdateRxSlotIdleState>
}
 802626a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    if( classBRx == false )
 802626c:	2e00      	cmp	r6, #0
 802626e:	d1fa      	bne.n	8026266 <HandleRadioRxErrorTimeout+0x66>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8026270:	2290      	movs	r2, #144	; 0x90
 8026272:	00d2      	lsls	r2, r2, #3
            if( MacCtx.NodeAckRequested == true )
 8026274:	4b19      	ldr	r3, [pc, #100]	; (80262dc <HandleRadioRxErrorTimeout+0xdc>)
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8026276:	5ca2      	ldrb	r2, [r4, r2]
            if( MacCtx.NodeAckRequested == true )
 8026278:	5ce3      	ldrb	r3, [r4, r3]
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 802627a:	2a00      	cmp	r2, #0
 802627c:	d11a      	bne.n	80262b4 <HandleRadioRxErrorTimeout+0xb4>
            if( MacCtx.NodeAckRequested == true )
 802627e:	2b00      	cmp	r3, #0
 8026280:	d002      	beq.n	8026288 <HandleRadioRxErrorTimeout+0x88>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8026282:	4b17      	ldr	r3, [pc, #92]	; (80262e0 <HandleRadioRxErrorTimeout+0xe0>)
 8026284:	9a00      	ldr	r2, [sp, #0]
 8026286:	54e2      	strb	r2, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8026288:	9800      	ldr	r0, [sp, #0]
 802628a:	f003 fef7 	bl	802a07c <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( MacCtx.NvmCtx->LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 802628e:	5963      	ldr	r3, [r4, r5]
 8026290:	33fc      	adds	r3, #252	; 0xfc
 8026292:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8026294:	f008 ff1c 	bl	802f0d0 <TimerGetElapsedTime>
 8026298:	23ed      	movs	r3, #237	; 0xed
 802629a:	009b      	lsls	r3, r3, #2
 802629c:	58e3      	ldr	r3, [r4, r3]
 802629e:	4298      	cmp	r0, r3
 80262a0:	d3e1      	bcc.n	8026266 <HandleRadioRxErrorTimeout+0x66>
                TimerStop( &MacCtx.RxWindowTimer2 );
 80262a2:	4810      	ldr	r0, [pc, #64]	; (80262e4 <HandleRadioRxErrorTimeout+0xe4>)
 80262a4:	f7fd fe1e 	bl	8023ee4 <TimerStop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 80262a8:	2320      	movs	r3, #32
 80262aa:	4a0f      	ldr	r2, [pc, #60]	; (80262e8 <HandleRadioRxErrorTimeout+0xe8>)
 80262ac:	5ca1      	ldrb	r1, [r4, r2]
 80262ae:	430b      	orrs	r3, r1
 80262b0:	54a3      	strb	r3, [r4, r2]
 80262b2:	e7d8      	b.n	8026266 <HandleRadioRxErrorTimeout+0x66>
            if( MacCtx.NodeAckRequested == true )
 80262b4:	2b00      	cmp	r3, #0
 80262b6:	d001      	beq.n	80262bc <HandleRadioRxErrorTimeout+0xbc>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 80262b8:	4b09      	ldr	r3, [pc, #36]	; (80262e0 <HandleRadioRxErrorTimeout+0xe0>)
 80262ba:	54e7      	strb	r7, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 80262bc:	0038      	movs	r0, r7
 80262be:	f003 fedd 	bl	802a07c <LoRaMacConfirmQueueSetStatusCmn>
            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80262c2:	5963      	ldr	r3, [r4, r5]
 80262c4:	337c      	adds	r3, #124	; 0x7c
 80262c6:	781b      	ldrb	r3, [r3, #0]
 80262c8:	2b02      	cmp	r3, #2
 80262ca:	d1ed      	bne.n	80262a8 <HandleRadioRxErrorTimeout+0xa8>
 80262cc:	e7cb      	b.n	8026266 <HandleRadioRxErrorTimeout+0x66>
 80262ce:	46c0      	nop			; (mov r8, r8)
 80262d0:	200088e8 	.word	0x200088e8
 80262d4:	00000484 	.word	0x00000484
 80262d8:	08031484 	.word	0x08031484
 80262dc:	00000414 	.word	0x00000414
 80262e0:	0000043d 	.word	0x0000043d
 80262e4:	20008c80 	.word	0x20008c80
 80262e8:	00000481 	.word	0x00000481

080262ec <ResetMacParameters>:
{
 80262ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 80262ee:	22b2      	movs	r2, #178	; 0xb2
 80262f0:	2500      	movs	r5, #0
 80262f2:	4c2e      	ldr	r4, [pc, #184]	; (80263ac <ResetMacParameters+0xc0>)
 80262f4:	4e2e      	ldr	r6, [pc, #184]	; (80263b0 <ResetMacParameters+0xc4>)
 80262f6:	0052      	lsls	r2, r2, #1
 80262f8:	59a3      	ldr	r3, [r4, r6]
    MacCtx.ChannelsNbTransCounter = 0;
 80262fa:	492e      	ldr	r1, [pc, #184]	; (80263b4 <ResetMacParameters+0xc8>)
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 80262fc:	549d      	strb	r5, [r3, r2]
    MacCtx.NvmCtx->AdrAckCounter = 0;
 80262fe:	1d1a      	adds	r2, r3, #4
 8026300:	67d5      	str	r5, [r2, #124]	; 0x7c
    MacCtx.ChannelsNbTransCounter = 0;
 8026302:	2282      	movs	r2, #130	; 0x82
 8026304:	00d2      	lsls	r2, r2, #3
 8026306:	50a1      	str	r1, [r4, r2]
    MacCtx.NvmCtx->MaxDCycle = 0;
 8026308:	001a      	movs	r2, r3
 802630a:	32c8      	adds	r2, #200	; 0xc8
 802630c:	7015      	strb	r5, [r2, #0]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 802630e:	2201      	movs	r2, #1
 8026310:	4694      	mov	ip, r2
 8026312:	4661      	mov	r1, ip
 8026314:	324c      	adds	r2, #76	; 0x4c
 8026316:	32ff      	adds	r2, #255	; 0xff
 8026318:	5299      	strh	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 802631a:	001a      	movs	r2, r3
 802631c:	8899      	ldrh	r1, [r3, #4]
 802631e:	3284      	adds	r2, #132	; 0x84
 8026320:	8011      	strh	r1, [r2, #0]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 8026322:	1d99      	adds	r1, r3, #6
 8026324:	7fc9      	ldrb	r1, [r1, #31]
 8026326:	3221      	adds	r2, #33	; 0x21
 8026328:	7011      	strb	r1, [r2, #0]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 802632a:	0019      	movs	r1, r3
 802632c:	3a7d      	subs	r2, #125	; 0x7d
 802632e:	31a8      	adds	r1, #168	; 0xa8
 8026330:	ca81      	ldmia	r2!, {r0, r7}
 8026332:	c181      	stmia	r1!, {r0, r7}
    MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8026334:	ca81      	ldmia	r2!, {r0, r7}
 8026336:	c181      	stmia	r1!, {r0, r7}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 8026338:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 802633a:	3280      	adds	r2, #128	; 0x80
 802633c:	8011      	strh	r1, [r2, #0]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 802633e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    params.NvmCtx = NULL;
 8026340:	9500      	str	r5, [sp, #0]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 8026342:	6051      	str	r1, [r2, #4]
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8026344:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8026346:	6091      	str	r1, [r2, #8]
    MacCtx.NodeAckRequested = false;
 8026348:	4a1b      	ldr	r2, [pc, #108]	; (80263b8 <ResetMacParameters+0xcc>)
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 802634a:	4661      	mov	r1, ip
    MacCtx.NodeAckRequested = false;
 802634c:	54a5      	strb	r5, [r4, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
 802634e:	224c      	movs	r2, #76	; 0x4c
 8026350:	32ff      	adds	r2, #255	; 0xff
 8026352:	549d      	strb	r5, [r3, r2]
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8026354:	466a      	mov	r2, sp
 8026356:	7111      	strb	r1, [r2, #4]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8026358:	7818      	ldrb	r0, [r3, #0]
 802635a:	4669      	mov	r1, sp
 802635c:	f009 fd39 	bl	802fdd2 <RegionInitDefaults>
    MacCtx.Channel = 0;
 8026360:	4b16      	ldr	r3, [pc, #88]	; (80263bc <ResetMacParameters+0xd0>)
 8026362:	54e5      	strb	r5, [r4, r3]
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8026364:	3b49      	subs	r3, #73	; 0x49
 8026366:	54e5      	strb	r5, [r4, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 8026368:	59a3      	ldr	r3, [r4, r6]
 802636a:	001a      	movs	r2, r3
 802636c:	32a8      	adds	r2, #168	; 0xa8
 802636e:	6811      	ldr	r1, [r2, #0]
 8026370:	22f4      	movs	r2, #244	; 0xf4
 8026372:	0092      	lsls	r2, r2, #2
 8026374:	50a1      	str	r1, [r4, r2]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8026376:	001a      	movs	r2, r3
 8026378:	32b9      	adds	r2, #185	; 0xb9
 802637a:	7811      	ldrb	r1, [r2, #0]
 802637c:	22f7      	movs	r2, #247	; 0xf7
 802637e:	0092      	lsls	r2, r2, #2
 8026380:	54a1      	strb	r1, [r4, r2]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8026382:	33ca      	adds	r3, #202	; 0xca
 8026384:	781a      	ldrb	r2, [r3, #0]
 8026386:	4b0e      	ldr	r3, [pc, #56]	; (80263c0 <ResetMacParameters+0xd4>)
 8026388:	54e2      	strb	r2, [r4, r3]
    MacCtx.RxWindow2Config.RxContinuous = false;
 802638a:	2280      	movs	r2, #128	; 0x80
 802638c:	4b0d      	ldr	r3, [pc, #52]	; (80263c4 <ResetMacParameters+0xd8>)
 802638e:	0052      	lsls	r2, r2, #1
 8026390:	52e2      	strh	r2, [r4, r3]
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8026392:	22f3      	movs	r2, #243	; 0xf3
 8026394:	3302      	adds	r3, #2
 8026396:	0092      	lsls	r2, r2, #2
 8026398:	18e3      	adds	r3, r4, r3
 802639a:	18a2      	adds	r2, r4, r2
 802639c:	ca23      	ldmia	r2!, {r0, r1, r5}
 802639e:	c323      	stmia	r3!, {r0, r1, r5}
 80263a0:	ca03      	ldmia	r2!, {r0, r1}
 80263a2:	c303      	stmia	r3!, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80263a4:	4b08      	ldr	r3, [pc, #32]	; (80263c8 <ResetMacParameters+0xdc>)
 80263a6:	4a09      	ldr	r2, [pc, #36]	; (80263cc <ResetMacParameters+0xe0>)
 80263a8:	52e2      	strh	r2, [r4, r3]
}
 80263aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80263ac:	200088e8 	.word	0x200088e8
 80263b0:	00000484 	.word	0x00000484
 80263b4:	00010100 	.word	0x00010100
 80263b8:	00000414 	.word	0x00000414
 80263bc:	00000415 	.word	0x00000415
 80263c0:	000003dd 	.word	0x000003dd
 80263c4:	000003de 	.word	0x000003de
 80263c8:	000003f2 	.word	0x000003f2
 80263cc:	00000201 	.word	0x00000201

080263d0 <OpenContinuousRxCWindow>:
{
 80263d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80263d2:	4c14      	ldr	r4, [pc, #80]	; (8026424 <OpenContinuousRxCWindow+0x54>)
 80263d4:	4e14      	ldr	r6, [pc, #80]	; (8026428 <OpenContinuousRxCWindow+0x58>)
 80263d6:	4d15      	ldr	r5, [pc, #84]	; (802642c <OpenContinuousRxCWindow+0x5c>)
 80263d8:	59a3      	ldr	r3, [r4, r6]
{
 80263da:	b085      	sub	sp, #20
                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 80263dc:	0019      	movs	r1, r3
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80263de:	001a      	movs	r2, r3
 80263e0:	001f      	movs	r7, r3
                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 80263e2:	31b4      	adds	r1, #180	; 0xb4
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80263e4:	7809      	ldrb	r1, [r1, #0]
 80263e6:	328c      	adds	r2, #140	; 0x8c
 80263e8:	7818      	ldrb	r0, [r3, #0]
 80263ea:	7812      	ldrb	r2, [r2, #0]
 80263ec:	3788      	adds	r7, #136	; 0x88
 80263ee:	9500      	str	r5, [sp, #0]
 80263f0:	683b      	ldr	r3, [r7, #0]
 80263f2:	b249      	sxtb	r1, r1
 80263f4:	f009 fd1b 	bl	802fe2e <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80263f8:	4b0d      	ldr	r3, [pc, #52]	; (8026430 <OpenContinuousRxCWindow+0x60>)
 80263fa:	4a0e      	ldr	r2, [pc, #56]	; (8026434 <OpenContinuousRxCWindow+0x64>)
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80263fc:	0029      	movs	r1, r5
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80263fe:	52e2      	strh	r2, [r4, r3]
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8026400:	59a3      	ldr	r3, [r4, r6]
 8026402:	4a0d      	ldr	r2, [pc, #52]	; (8026438 <OpenContinuousRxCWindow+0x68>)
 8026404:	7818      	ldrb	r0, [r3, #0]
 8026406:	f009 fd1d 	bl	802fe44 <RegionRxConfig>
 802640a:	2800      	cmp	r0, #0
 802640c:	d008      	beq.n	8026420 <OpenContinuousRxCWindow+0x50>
        Radio.Rx( 0 ); // Continuous mode
 802640e:	4b0b      	ldr	r3, [pc, #44]	; (802643c <OpenContinuousRxCWindow+0x6c>)
 8026410:	2000      	movs	r0, #0
 8026412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8026414:	9303      	str	r3, [sp, #12]
 8026416:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8026418:	4b09      	ldr	r3, [pc, #36]	; (8026440 <OpenContinuousRxCWindow+0x70>)
 802641a:	5ce2      	ldrb	r2, [r4, r3]
 802641c:	338d      	adds	r3, #141	; 0x8d
 802641e:	54e2      	strb	r2, [r4, r3]
}
 8026420:	b005      	add	sp, #20
 8026422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026424:	200088e8 	.word	0x200088e8
 8026428:	00000484 	.word	0x00000484
 802642c:	20008cc8 	.word	0x20008cc8
 8026430:	000003f2 	.word	0x000003f2
 8026434:	00000201 	.word	0x00000201
 8026438:	20008d08 	.word	0x20008d08
 802643c:	08031484 	.word	0x08031484
 8026440:	000003f3 	.word	0x000003f3

08026444 <OnRadioRxDone>:
{
 8026444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026446:	000e      	movs	r6, r1
 8026448:	0015      	movs	r5, r2
 802644a:	001c      	movs	r4, r3
 802644c:	0007      	movs	r7, r0
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 802644e:	f008 fe39 	bl	802f0c4 <TimerGetCurrentTime>
 8026452:	4b0b      	ldr	r3, [pc, #44]	; (8026480 <OnRadioRxDone+0x3c>)
    LoRaMacRadioEvents.Events.RxDone = 1;
 8026454:	4a0b      	ldr	r2, [pc, #44]	; (8026484 <OnRadioRxDone+0x40>)
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8026456:	6018      	str	r0, [r3, #0]
    RxDoneParams.Payload = payload;
 8026458:	605f      	str	r7, [r3, #4]
    RxDoneParams.Size = size;
 802645a:	811e      	strh	r6, [r3, #8]
    RxDoneParams.Rssi = rssi;
 802645c:	815d      	strh	r5, [r3, #10]
    RxDoneParams.Snr = snr;
 802645e:	731c      	strb	r4, [r3, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 8026460:	2308      	movs	r3, #8
 8026462:	7811      	ldrb	r1, [r2, #0]
 8026464:	430b      	orrs	r3, r1
 8026466:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8026468:	23d2      	movs	r3, #210	; 0xd2
 802646a:	4a07      	ldr	r2, [pc, #28]	; (8026488 <OnRadioRxDone+0x44>)
 802646c:	009b      	lsls	r3, r3, #2
 802646e:	58d3      	ldr	r3, [r2, r3]
 8026470:	2b00      	cmp	r3, #0
 8026472:	d003      	beq.n	802647c <OnRadioRxDone+0x38>
 8026474:	68db      	ldr	r3, [r3, #12]
 8026476:	2b00      	cmp	r3, #0
 8026478:	d000      	beq.n	802647c <OnRadioRxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 802647a:	4798      	blx	r3
}
 802647c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802647e:	46c0      	nop			; (mov r8, r8)
 8026480:	20008ee0 	.word	0x20008ee0
 8026484:	200088e4 	.word	0x200088e4
 8026488:	200088e8 	.word	0x200088e8

0802648c <OnRadioTxDone>:
{
 802648c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 802648e:	f008 fe19 	bl	802f0c4 <TimerGetCurrentTime>
    MacCtx.LastTxSysTime = SysTimeGet( );
 8026492:	466c      	mov	r4, sp
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8026494:	4b0c      	ldr	r3, [pc, #48]	; (80264c8 <OnRadioTxDone+0x3c>)
    MacCtx.LastTxSysTime = SysTimeGet( );
 8026496:	4d0d      	ldr	r5, [pc, #52]	; (80264cc <OnRadioTxDone+0x40>)
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8026498:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 802649a:	0020      	movs	r0, r4
 802649c:	f7fd fc4a 	bl	8023d34 <SysTimeGet>
 80264a0:	23ce      	movs	r3, #206	; 0xce
 80264a2:	009b      	lsls	r3, r3, #2
 80264a4:	18eb      	adds	r3, r5, r3
 80264a6:	cc06      	ldmia	r4!, {r1, r2}
 80264a8:	c306      	stmia	r3!, {r1, r2}
    LoRaMacRadioEvents.Events.TxDone = 1;
 80264aa:	2310      	movs	r3, #16
 80264ac:	4a08      	ldr	r2, [pc, #32]	; (80264d0 <OnRadioTxDone+0x44>)
 80264ae:	7811      	ldrb	r1, [r2, #0]
 80264b0:	430b      	orrs	r3, r1
 80264b2:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80264b4:	23d2      	movs	r3, #210	; 0xd2
 80264b6:	009b      	lsls	r3, r3, #2
 80264b8:	58eb      	ldr	r3, [r5, r3]
 80264ba:	2b00      	cmp	r3, #0
 80264bc:	d003      	beq.n	80264c6 <OnRadioTxDone+0x3a>
 80264be:	68db      	ldr	r3, [r3, #12]
 80264c0:	2b00      	cmp	r3, #0
 80264c2:	d000      	beq.n	80264c6 <OnRadioTxDone+0x3a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80264c4:	4798      	blx	r3
}
 80264c6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 80264c8:	20008ef0 	.word	0x20008ef0
 80264cc:	200088e8 	.word	0x200088e8
 80264d0:	200088e4 	.word	0x200088e4

080264d4 <SwitchClass>:
{
 80264d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch( MacCtx.NvmCtx->DeviceClass )
 80264d6:	4e34      	ldr	r6, [pc, #208]	; (80265a8 <SwitchClass+0xd4>)
 80264d8:	4f34      	ldr	r7, [pc, #208]	; (80265ac <SwitchClass+0xd8>)
{
 80264da:	0005      	movs	r5, r0
    switch( MacCtx.NvmCtx->DeviceClass )
 80264dc:	59f3      	ldr	r3, [r6, r7]
 80264de:	001a      	movs	r2, r3
 80264e0:	327c      	adds	r2, #124	; 0x7c
 80264e2:	7814      	ldrb	r4, [r2, #0]
 80264e4:	469c      	mov	ip, r3
 80264e6:	2c01      	cmp	r4, #1
 80264e8:	d04a      	beq.n	8026580 <SwitchClass+0xac>
 80264ea:	2c02      	cmp	r4, #2
 80264ec:	d051      	beq.n	8026592 <SwitchClass+0xbe>
 80264ee:	2c00      	cmp	r4, #0
 80264f0:	d10c      	bne.n	802650c <SwitchClass+0x38>
            if( deviceClass == CLASS_A )
 80264f2:	2800      	cmp	r0, #0
 80264f4:	d106      	bne.n	8026504 <SwitchClass+0x30>
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 80264f6:	3234      	adds	r2, #52	; 0x34
 80264f8:	33a8      	adds	r3, #168	; 0xa8
 80264fa:	cb03      	ldmia	r3!, {r0, r1}
 80264fc:	c203      	stmia	r2!, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80264fe:	3403      	adds	r4, #3
}
 8026500:	0020      	movs	r0, r4
 8026502:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_B )
 8026504:	2801      	cmp	r0, #1
 8026506:	d03b      	beq.n	8026580 <SwitchClass+0xac>
            if( deviceClass == CLASS_C )
 8026508:	2802      	cmp	r0, #2
 802650a:	d001      	beq.n	8026510 <SwitchClass+0x3c>
    switch( MacCtx.NvmCtx->DeviceClass )
 802650c:	2403      	movs	r4, #3
 802650e:	e7f7      	b.n	8026500 <SwitchClass+0x2c>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8026510:	7010      	strb	r0, [r2, #0]
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8026512:	21f3      	movs	r1, #243	; 0xf3
 8026514:	22f8      	movs	r2, #248	; 0xf8
 8026516:	0089      	lsls	r1, r1, #2
 8026518:	0092      	lsls	r2, r2, #2
 802651a:	18b2      	adds	r2, r6, r2
 802651c:	1871      	adds	r1, r6, r1
 802651e:	c989      	ldmia	r1!, {r0, r3, r7}
 8026520:	c289      	stmia	r2!, {r0, r3, r7}
 8026522:	c909      	ldmia	r1!, {r0, r3}
 8026524:	c209      	stmia	r2!, {r0, r3}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8026526:	4a22      	ldr	r2, [pc, #136]	; (80265b0 <SwitchClass+0xdc>)
 8026528:	54b5      	strb	r5, [r6, r2]
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 802652a:	4662      	mov	r2, ip
 802652c:	3252      	adds	r2, #82	; 0x52
 802652e:	7812      	ldrb	r2, [r2, #0]
 8026530:	2a00      	cmp	r2, #0
 8026532:	d01b      	beq.n	802656c <SwitchClass+0x98>
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8026534:	4663      	mov	r3, ip
 8026536:	4661      	mov	r1, ip
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8026538:	4660      	mov	r0, ip
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 802653a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 802653c:	31b0      	adds	r1, #176	; 0xb0
 802653e:	600a      	str	r2, [r1, #0]
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8026540:	306c      	adds	r0, #108	; 0x6c
 8026542:	7800      	ldrb	r0, [r0, #0]
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8026544:	33ca      	adds	r3, #202	; 0xca
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8026546:	7108      	strb	r0, [r1, #4]
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8026548:	491a      	ldr	r1, [pc, #104]	; (80265b4 <SwitchClass+0xe0>)
 802654a:	5c70      	ldrb	r0, [r6, r1]
 802654c:	3935      	subs	r1, #53	; 0x35
 802654e:	5470      	strb	r0, [r6, r1]
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 8026550:	3104      	adds	r1, #4
 8026552:	5072      	str	r2, [r6, r1]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8026554:	4662      	mov	r2, ip
 8026556:	32b9      	adds	r2, #185	; 0xb9
 8026558:	7811      	ldrb	r1, [r2, #0]
 802655a:	22fc      	movs	r2, #252	; 0xfc
 802655c:	0092      	lsls	r2, r2, #2
 802655e:	54b1      	strb	r1, [r6, r2]
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8026560:	781a      	ldrb	r2, [r3, #0]
 8026562:	4b15      	ldr	r3, [pc, #84]	; (80265b8 <SwitchClass+0xe4>)
 8026564:	54f2      	strb	r2, [r6, r3]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8026566:	4b15      	ldr	r3, [pc, #84]	; (80265bc <SwitchClass+0xe8>)
 8026568:	4a15      	ldr	r2, [pc, #84]	; (80265c0 <SwitchClass+0xec>)
 802656a:	52f2      	strh	r2, [r6, r3]
                MacCtx.NodeAckRequested = false;
 802656c:	2200      	movs	r2, #0
 802656e:	4b15      	ldr	r3, [pc, #84]	; (80265c4 <SwitchClass+0xf0>)
 8026570:	54f2      	strb	r2, [r6, r3]
                Radio.Sleep( );
 8026572:	4b15      	ldr	r3, [pc, #84]	; (80265c8 <SwitchClass+0xf4>)
 8026574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026576:	9301      	str	r3, [sp, #4]
 8026578:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 802657a:	f7ff ff29 	bl	80263d0 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 802657e:	e7bf      	b.n	8026500 <SwitchClass+0x2c>
            status = LoRaMacClassBSwitchClass( deviceClass );
 8026580:	0028      	movs	r0, r5
 8026582:	f003 f879 	bl	8029678 <LoRaMacClassBSwitchClass>
 8026586:	1e04      	subs	r4, r0, #0
            if( status == LORAMAC_STATUS_OK )
 8026588:	d1ba      	bne.n	8026500 <SwitchClass+0x2c>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 802658a:	59f3      	ldr	r3, [r6, r7]
 802658c:	337c      	adds	r3, #124	; 0x7c
 802658e:	701d      	strb	r5, [r3, #0]
 8026590:	e7b6      	b.n	8026500 <SwitchClass+0x2c>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8026592:	2403      	movs	r4, #3
            if( deviceClass == CLASS_A )
 8026594:	2800      	cmp	r0, #0
 8026596:	d1b3      	bne.n	8026500 <SwitchClass+0x2c>
                Radio.Sleep( );
 8026598:	4b0b      	ldr	r3, [pc, #44]	; (80265c8 <SwitchClass+0xf4>)
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 802659a:	7010      	strb	r0, [r2, #0]
                Radio.Sleep( );
 802659c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                status = LORAMAC_STATUS_OK;
 802659e:	002c      	movs	r4, r5
                Radio.Sleep( );
 80265a0:	9301      	str	r3, [sp, #4]
 80265a2:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 80265a4:	e7ac      	b.n	8026500 <SwitchClass+0x2c>
 80265a6:	46c0      	nop			; (mov r8, r8)
 80265a8:	200088e8 	.word	0x200088e8
 80265ac:	00000484 	.word	0x00000484
 80265b0:	000003f3 	.word	0x000003f3
 80265b4:	00000415 	.word	0x00000415
 80265b8:	000003f1 	.word	0x000003f1
 80265bc:	000003f2 	.word	0x000003f2
 80265c0:	00000301 	.word	0x00000301
 80265c4:	00000414 	.word	0x00000414
 80265c8:	08031484 	.word	0x08031484

080265cc <ScheduleTx>:
{
 80265cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80265ce:	b095      	sub	sp, #84	; 0x54
 80265d0:	9003      	str	r0, [sp, #12]
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80265d2:	f002 fe19 	bl	8029208 <LoRaMacClassBIsBeaconExpected>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 80265d6:	250e      	movs	r5, #14
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80265d8:	2800      	cmp	r0, #0
 80265da:	d11b      	bne.n	8026614 <ScheduleTx+0x48>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 80265dc:	4cce      	ldr	r4, [pc, #824]	; (8026918 <ScheduleTx+0x34c>)
 80265de:	4ecf      	ldr	r6, [pc, #828]	; (802691c <ScheduleTx+0x350>)
 80265e0:	59a3      	ldr	r3, [r4, r6]
 80265e2:	337c      	adds	r3, #124	; 0x7c
 80265e4:	781b      	ldrb	r3, [r3, #0]
 80265e6:	2b01      	cmp	r3, #1
 80265e8:	d00f      	beq.n	802660a <ScheduleTx+0x3e>
    if( MacCtx.NvmCtx->AggregatedTimeOff == 0 )
 80265ea:	59a3      	ldr	r3, [r4, r6]
 80265ec:	0019      	movs	r1, r3
 80265ee:	31fc      	adds	r1, #252	; 0xfc
 80265f0:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80265f2:	2a00      	cmp	r2, #0
 80265f4:	d016      	beq.n	8026624 <ScheduleTx+0x58>
    switch( MacCtx.TxMsg.Type )
 80265f6:	0025      	movs	r5, r4
 80265f8:	35ff      	adds	r5, #255	; 0xff
 80265fa:	796b      	ldrb	r3, [r5, #5]
 80265fc:	2b00      	cmp	r3, #0
 80265fe:	d01b      	beq.n	8026638 <ScheduleTx+0x6c>
 8026600:	2b04      	cmp	r3, #4
 8026602:	d100      	bne.n	8026606 <ScheduleTx+0x3a>
 8026604:	e079      	b.n	80266fa <ScheduleTx+0x12e>
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8026606:	2503      	movs	r5, #3
 8026608:	e004      	b.n	8026614 <ScheduleTx+0x48>
        if( LoRaMacClassBIsPingExpected( ) == true )
 802660a:	f002 fe0b 	bl	8029224 <LoRaMacClassBIsPingExpected>
 802660e:	2800      	cmp	r0, #0
 8026610:	d003      	beq.n	802661a <ScheduleTx+0x4e>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8026612:	250f      	movs	r5, #15
}
 8026614:	0028      	movs	r0, r5
 8026616:	b015      	add	sp, #84	; 0x54
 8026618:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 802661a:	f002 fe0d 	bl	8029238 <LoRaMacClassBIsMulticastExpected>
 802661e:	2800      	cmp	r0, #0
 8026620:	d0e3      	beq.n	80265ea <ScheduleTx+0x1e>
 8026622:	e7f6      	b.n	8026612 <ScheduleTx+0x46>
        MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 8026624:	22a6      	movs	r2, #166	; 0xa6
 8026626:	0052      	lsls	r2, r2, #1
 8026628:	5a9a      	ldrh	r2, [r3, r2]
 802662a:	2383      	movs	r3, #131	; 0x83
 802662c:	00db      	lsls	r3, r3, #3
 802662e:	58e3      	ldr	r3, [r4, r3]
 8026630:	3a01      	subs	r2, #1
 8026632:	4353      	muls	r3, r2
 8026634:	658b      	str	r3, [r1, #88]	; 0x58
 8026636:	e7de      	b.n	80265f6 <ScheduleTx+0x2a>
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8026638:	48b9      	ldr	r0, [pc, #740]	; (8026920 <ScheduleTx+0x354>)
 802663a:	f009 fb0e 	bl	802fc5a <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 802663e:	2800      	cmp	r0, #0
 8026640:	d000      	beq.n	8026644 <ScheduleTx+0x78>
 8026642:	e164      	b.n	802690e <ScheduleTx+0x342>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8026644:	7b6b      	ldrb	r3, [r5, #13]
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8026646:	ad0e      	add	r5, sp, #56	; 0x38
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8026648:	8023      	strh	r3, [r4, #0]
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 802664a:	59a3      	ldr	r3, [r4, r6]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 802664c:	a808      	add	r0, sp, #32
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 802664e:	001a      	movs	r2, r3
 8026650:	32fc      	adds	r2, #252	; 0xfc
 8026652:	6d92      	ldr	r2, [r2, #88]	; 0x58
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 8026654:	af04      	add	r7, sp, #16
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8026656:	920e      	str	r2, [sp, #56]	; 0x38
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8026658:	001a      	movs	r2, r3
 802665a:	3285      	adds	r2, #133	; 0x85
 802665c:	7812      	ldrb	r2, [r2, #0]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 802665e:	33c9      	adds	r3, #201	; 0xc9
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8026660:	722a      	strb	r2, [r5, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8026662:	781b      	ldrb	r3, [r3, #0]
 8026664:	72ab      	strb	r3, [r5, #10]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 8026666:	f008 fcd3 	bl	802f010 <SysTimeGetMcuTime>
 802666a:	59a3      	ldr	r3, [r4, r6]
 802666c:	9908      	ldr	r1, [sp, #32]
 802666e:	001a      	movs	r2, r3
 8026670:	325d      	adds	r2, #93	; 0x5d
 8026672:	32ff      	adds	r2, #255	; 0xff
 8026674:	6812      	ldr	r2, [r2, #0]
 8026676:	0038      	movs	r0, r7
 8026678:	9200      	str	r2, [sp, #0]
 802667a:	22ac      	movs	r2, #172	; 0xac
 802667c:	0052      	lsls	r2, r2, #1
 802667e:	589b      	ldr	r3, [r3, r2]
 8026680:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026682:	f008 fc94 	bl	802efae <SysTimeSub>
 8026686:	ab11      	add	r3, sp, #68	; 0x44
 8026688:	cf06      	ldmia	r7!, {r1, r2}
 802668a:	c306      	stmia	r3!, {r1, r2}
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 802668c:	59a3      	ldr	r3, [r4, r6]
    nextChan.Joined = true;
 802668e:	2101      	movs	r1, #1
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 8026690:	001a      	movs	r2, r3
 8026692:	32fc      	adds	r2, #252	; 0xfc
 8026694:	6d52      	ldr	r2, [r2, #84]	; 0x54
    nextChan.Joined = true;
 8026696:	7269      	strb	r1, [r5, #9]
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 8026698:	606a      	str	r2, [r5, #4]
    nextChan.LastTxIsJoinRequest = false;
 802669a:	2200      	movs	r2, #0
 802669c:	752a      	strb	r2, [r5, #20]
    nextChan.PktLen = MacCtx.PktBufferLen;
 802669e:	8822      	ldrh	r2, [r4, #0]
 80266a0:	82ea      	strh	r2, [r5, #22]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 80266a2:	22b2      	movs	r2, #178	; 0xb2
 80266a4:	0052      	lsls	r2, r2, #1
 80266a6:	5c9a      	ldrb	r2, [r3, r2]
 80266a8:	2a00      	cmp	r2, #0
 80266aa:	d101      	bne.n	80266b0 <ScheduleTx+0xe4>
        nextChan.LastTxIsJoinRequest = true;
 80266ac:	7529      	strb	r1, [r5, #20]
        nextChan.Joined = false;
 80266ae:	726a      	strb	r2, [r5, #9]
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &MacCtx.NvmCtx->AggregatedTimeOff );
 80266b0:	7818      	ldrb	r0, [r3, #0]
 80266b2:	3355      	adds	r3, #85	; 0x55
 80266b4:	33ff      	adds	r3, #255	; 0xff
 80266b6:	0029      	movs	r1, r5
 80266b8:	9300      	str	r3, [sp, #0]
 80266ba:	4a9a      	ldr	r2, [pc, #616]	; (8026924 <ScheduleTx+0x358>)
 80266bc:	4b9a      	ldr	r3, [pc, #616]	; (8026928 <ScheduleTx+0x35c>)
 80266be:	f009 fc1e 	bl	802fefe <RegionNextChannel>
 80266c2:	1e05      	subs	r5, r0, #0
    if( status != LORAMAC_STATUS_OK )
 80266c4:	d01d      	beq.n	8026702 <ScheduleTx+0x136>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 80266c6:	280b      	cmp	r0, #11
 80266c8:	d1a4      	bne.n	8026614 <ScheduleTx+0x48>
 80266ca:	9b03      	ldr	r3, [sp, #12]
 80266cc:	2b00      	cmp	r3, #0
 80266ce:	d0a1      	beq.n	8026614 <ScheduleTx+0x48>
            if( MacCtx.DutyCycleWaitTime != 0 )
 80266d0:	2291      	movs	r2, #145	; 0x91
            return LORAMAC_STATUS_OK;
 80266d2:	2500      	movs	r5, #0
            if( MacCtx.DutyCycleWaitTime != 0 )
 80266d4:	4b90      	ldr	r3, [pc, #576]	; (8026918 <ScheduleTx+0x34c>)
 80266d6:	00d2      	lsls	r2, r2, #3
 80266d8:	5899      	ldr	r1, [r3, r2]
 80266da:	42a9      	cmp	r1, r5
 80266dc:	d09a      	beq.n	8026614 <ScheduleTx+0x48>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80266de:	20d0      	movs	r0, #208	; 0xd0
 80266e0:	2220      	movs	r2, #32
 80266e2:	0080      	lsls	r0, r0, #2
 80266e4:	581c      	ldr	r4, [r3, r0]
 80266e6:	4322      	orrs	r2, r4
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 80266e8:	4c90      	ldr	r4, [pc, #576]	; (802692c <ScheduleTx+0x360>)
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80266ea:	501a      	str	r2, [r3, r0]
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 80266ec:	0020      	movs	r0, r4
 80266ee:	f008 fcd8 	bl	802f0a2 <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
 80266f2:	0020      	movs	r0, r4
 80266f4:	f7fd fb7c 	bl	8023df0 <TimerStart>
 80266f8:	e78c      	b.n	8026614 <ScheduleTx+0x48>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80266fa:	4889      	ldr	r0, [pc, #548]	; (8026920 <ScheduleTx+0x354>)
 80266fc:	f009 fae2 	bl	802fcc4 <LoRaMacSerializerData>
 8026700:	e79d      	b.n	802663e <ScheduleTx+0x72>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8026702:	59a1      	ldr	r1, [r4, r6]
                                                          MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 8026704:	000b      	movs	r3, r1
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8026706:	000a      	movs	r2, r1
                                                          MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 8026708:	33a5      	adds	r3, #165	; 0xa5
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 802670a:	3285      	adds	r2, #133	; 0x85
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 802670c:	780f      	ldrb	r7, [r1, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 802670e:	781b      	ldrb	r3, [r3, #0]
 8026710:	7812      	ldrb	r2, [r2, #0]
 8026712:	31b9      	adds	r1, #185	; 0xb9
 8026714:	0038      	movs	r0, r7
 8026716:	7809      	ldrb	r1, [r1, #0]
 8026718:	b25b      	sxtb	r3, r3
 802671a:	b252      	sxtb	r2, r2
 802671c:	f009 fc04 	bl	802ff28 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8026720:	2288      	movs	r2, #136	; 0x88
 8026722:	4694      	mov	ip, r2
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8026724:	59a3      	ldr	r3, [r4, r6]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8026726:	b241      	sxtb	r1, r0
 8026728:	449c      	add	ip, r3
 802672a:	338c      	adds	r3, #140	; 0x8c
 802672c:	781a      	ldrb	r2, [r3, #0]
 802672e:	4b80      	ldr	r3, [pc, #512]	; (8026930 <ScheduleTx+0x364>)
 8026730:	0038      	movs	r0, r7
 8026732:	9300      	str	r3, [sp, #0]
 8026734:	4663      	mov	r3, ip
 8026736:	681b      	ldr	r3, [r3, #0]
 8026738:	f009 fb79 	bl	802fe2e <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 802673c:	59a3      	ldr	r3, [r4, r6]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 802673e:	0019      	movs	r1, r3
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8026740:	001a      	movs	r2, r3
 8026742:	001f      	movs	r7, r3
 8026744:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 8026746:	31ac      	adds	r1, #172	; 0xac
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8026748:	4b7a      	ldr	r3, [pc, #488]	; (8026934 <ScheduleTx+0x368>)
 802674a:	7809      	ldrb	r1, [r1, #0]
 802674c:	328c      	adds	r2, #140	; 0x8c
 802674e:	7812      	ldrb	r2, [r2, #0]
 8026750:	3788      	adds	r7, #136	; 0x88
 8026752:	9300      	str	r3, [sp, #0]
 8026754:	683b      	ldr	r3, [r7, #0]
 8026756:	b249      	sxtb	r1, r1
 8026758:	f009 fb69 	bl	802fe2e <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 802675c:	22f1      	movs	r2, #241	; 0xf1
 802675e:	0092      	lsls	r2, r2, #2
 8026760:	59a3      	ldr	r3, [r4, r6]
 8026762:	58a2      	ldr	r2, [r4, r2]
 8026764:	27ec      	movs	r7, #236	; 0xec
 8026766:	4694      	mov	ip, r2
 8026768:	001a      	movs	r2, r3
 802676a:	3294      	adds	r2, #148	; 0x94
 802676c:	6812      	ldr	r2, [r2, #0]
 802676e:	00bf      	lsls	r7, r7, #2
 8026770:	4462      	add	r2, ip
 8026772:	51e2      	str	r2, [r4, r7]
    MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8026774:	22f6      	movs	r2, #246	; 0xf6
 8026776:	0092      	lsls	r2, r2, #2
 8026778:	58a0      	ldr	r0, [r4, r2]
 802677a:	001a      	movs	r2, r3
 802677c:	21ed      	movs	r1, #237	; 0xed
 802677e:	3298      	adds	r2, #152	; 0x98
 8026780:	6812      	ldr	r2, [r2, #0]
 8026782:	0089      	lsls	r1, r1, #2
 8026784:	1812      	adds	r2, r2, r0
 8026786:	5062      	str	r2, [r4, r1]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8026788:	22b2      	movs	r2, #178	; 0xb2
 802678a:	0052      	lsls	r2, r2, #1
 802678c:	5c9a      	ldrb	r2, [r3, r2]
 802678e:	9203      	str	r2, [sp, #12]
 8026790:	2a00      	cmp	r2, #0
 8026792:	d108      	bne.n	80267a6 <ScheduleTx+0x1da>
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8026794:	001a      	movs	r2, r3
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8026796:	33a0      	adds	r3, #160	; 0xa0
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8026798:	329c      	adds	r2, #156	; 0x9c
 802679a:	6812      	ldr	r2, [r2, #0]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 802679c:	681b      	ldr	r3, [r3, #0]
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 802679e:	4462      	add	r2, ip
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80267a0:	1818      	adds	r0, r3, r0
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80267a2:	51e2      	str	r2, [r4, r7]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80267a4:	5060      	str	r0, [r4, r1]
    size_t macCmdsSize = 0;
 80267a6:	2300      	movs	r3, #0
 80267a8:	930a      	str	r3, [sp, #40]	; 0x28
    if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 80267aa:	9b03      	ldr	r3, [sp, #12]
 80267ac:	2b00      	cmp	r3, #0
 80267ae:	d012      	beq.n	80267d6 <ScheduleTx+0x20a>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80267b0:	a80a      	add	r0, sp, #40	; 0x28
 80267b2:	f003 fb63 	bl	8029e7c <LoRaMacCommandsGetSizeSerializedCmds>
 80267b6:	2800      	cmp	r0, #0
 80267b8:	d153      	bne.n	8026862 <ScheduleTx+0x296>
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80267ba:	2085      	movs	r0, #133	; 0x85
        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 80267bc:	4b56      	ldr	r3, [pc, #344]	; (8026918 <ScheduleTx+0x34c>)
 80267be:	4a5e      	ldr	r2, [pc, #376]	; (8026938 <ScheduleTx+0x36c>)
 80267c0:	5c9c      	ldrb	r4, [r3, r2]
 80267c2:	599b      	ldr	r3, [r3, r6]
 80267c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80267c6:	5618      	ldrsb	r0, [r3, r0]
        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 80267c8:	b2d7      	uxtb	r7, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80267ca:	f7ff fcaf 	bl	802612c <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 80267ce:	19e4      	adds	r4, r4, r7
 80267d0:	b280      	uxth	r0, r0
 80267d2:	42a0      	cmp	r0, r4
 80267d4:	d343      	bcc.n	802685e <ScheduleTx+0x292>
    return SendFrameOnChannel( MacCtx.Channel );
 80267d6:	4c50      	ldr	r4, [pc, #320]	; (8026918 <ScheduleTx+0x34c>)
 80267d8:	4b58      	ldr	r3, [pc, #352]	; (802693c <ScheduleTx+0x370>)
    int8_t txPower = 0;
 80267da:	aa02      	add	r2, sp, #8
    return SendFrameOnChannel( MacCtx.Channel );
 80267dc:	5ce7      	ldrb	r7, [r4, r3]
    int8_t txPower = 0;
 80267de:	2300      	movs	r3, #0
 80267e0:	74d3      	strb	r3, [r2, #19]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80267e2:	59a3      	ldr	r3, [r4, r6]
    txConfig.Channel = channel;
 80267e4:	a90a      	add	r1, sp, #40	; 0x28
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80267e6:	001a      	movs	r2, r3
    txConfig.Channel = channel;
 80267e8:	700f      	strb	r7, [r1, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80267ea:	3285      	adds	r2, #133	; 0x85
 80267ec:	7812      	ldrb	r2, [r2, #0]
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80267ee:	a802      	add	r0, sp, #8
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80267f0:	704a      	strb	r2, [r1, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 80267f2:	001a      	movs	r2, r3
 80267f4:	3284      	adds	r2, #132	; 0x84
 80267f6:	7812      	ldrb	r2, [r2, #0]
 80267f8:	708a      	strb	r2, [r1, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 80267fa:	001a      	movs	r2, r3
 80267fc:	32bc      	adds	r2, #188	; 0xbc
 80267fe:	6812      	ldr	r2, [r2, #0]
 8026800:	604a      	str	r2, [r1, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8026802:	001a      	movs	r2, r3
 8026804:	32c0      	adds	r2, #192	; 0xc0
 8026806:	6812      	ldr	r2, [r2, #0]
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8026808:	781b      	ldrb	r3, [r3, #0]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 802680a:	608a      	str	r2, [r1, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 802680c:	8822      	ldrh	r2, [r4, #0]
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 802680e:	469c      	mov	ip, r3
    txConfig.PktLen = MacCtx.PktBufferLen;
 8026810:	818a      	strh	r2, [r1, #12]
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8026812:	2213      	movs	r2, #19
 8026814:	4b4a      	ldr	r3, [pc, #296]	; (8026940 <ScheduleTx+0x374>)
 8026816:	1812      	adds	r2, r2, r0
 8026818:	4660      	mov	r0, ip
 802681a:	f009 fb1f 	bl	802fe5c <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 802681e:	2201      	movs	r2, #1
 8026820:	4b48      	ldr	r3, [pc, #288]	; (8026944 <ScheduleTx+0x378>)
 8026822:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8026824:	59a3      	ldr	r3, [r4, r6]
 8026826:	3385      	adds	r3, #133	; 0x85
 8026828:	781a      	ldrb	r2, [r3, #0]
 802682a:	4b47      	ldr	r3, [pc, #284]	; (8026948 <ScheduleTx+0x37c>)
 802682c:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.TxPower = txPower;
 802682e:	ab02      	add	r3, sp, #8
 8026830:	7cda      	ldrb	r2, [r3, #19]
 8026832:	4b46      	ldr	r3, [pc, #280]	; (802694c <ScheduleTx+0x380>)
 8026834:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Channel = channel;
 8026836:	4b46      	ldr	r3, [pc, #280]	; (8026950 <ScheduleTx+0x384>)
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8026838:	4a46      	ldr	r2, [pc, #280]	; (8026954 <ScheduleTx+0x388>)
    MacCtx.McpsConfirm.Channel = channel;
 802683a:	50e7      	str	r7, [r4, r3]
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 802683c:	2783      	movs	r7, #131	; 0x83
 802683e:	00ff      	lsls	r7, r7, #3
 8026840:	59e3      	ldr	r3, [r4, r7]
 8026842:	50a3      	str	r3, [r4, r2]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8026844:	4a44      	ldr	r2, [pc, #272]	; (8026958 <ScheduleTx+0x38c>)
 8026846:	50a3      	str	r3, [r4, r2]
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8026848:	f002 fd38 	bl	80292bc <LoRaMacClassBIsBeaconModeActive>
 802684c:	2800      	cmp	r0, #0
 802684e:	d00a      	beq.n	8026866 <ScheduleTx+0x29a>
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8026850:	59e0      	ldr	r0, [r4, r7]
 8026852:	f002 fe9d 	bl	8029590 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 8026856:	2800      	cmp	r0, #0
 8026858:	d005      	beq.n	8026866 <ScheduleTx+0x29a>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 802685a:	2510      	movs	r5, #16
    return SendFrameOnChannel( MacCtx.Channel );
 802685c:	e6da      	b.n	8026614 <ScheduleTx+0x48>
            return LORAMAC_STATUS_LENGTH_ERROR;
 802685e:	2508      	movs	r5, #8
 8026860:	e6d8      	b.n	8026614 <ScheduleTx+0x48>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8026862:	2513      	movs	r5, #19
 8026864:	e6d6      	b.n	8026614 <ScheduleTx+0x48>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8026866:	59a3      	ldr	r3, [r4, r6]
 8026868:	337c      	adds	r3, #124	; 0x7c
 802686a:	781b      	ldrb	r3, [r3, #0]
 802686c:	2b01      	cmp	r3, #1
 802686e:	d101      	bne.n	8026874 <ScheduleTx+0x2a8>
        LoRaMacClassBStopRxSlots( );
 8026870:	f002 feb6 	bl	80295e0 <LoRaMacClassBStopRxSlots>
    LoRaMacClassBHaltBeaconing( );
 8026874:	f002 fed0 	bl	8029618 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8026878:	59a3      	ldr	r3, [r4, r6]
    switch( MacCtx.TxMsg.Type )
 802687a:	0026      	movs	r6, r4
    status = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 802687c:	3385      	adds	r3, #133	; 0x85
 802687e:	781b      	ldrb	r3, [r3, #0]
    switch( MacCtx.TxMsg.Type )
 8026880:	36ff      	adds	r6, #255	; 0xff
    status = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8026882:	b25b      	sxtb	r3, r3
 8026884:	9303      	str	r3, [sp, #12]
 8026886:	4b2d      	ldr	r3, [pc, #180]	; (802693c <ScheduleTx+0x370>)
 8026888:	5ce7      	ldrb	r7, [r4, r3]
    uint32_t fCntUp = 0;
 802688a:	2300      	movs	r3, #0
 802688c:	9307      	str	r3, [sp, #28]
    switch( MacCtx.TxMsg.Type )
 802688e:	7973      	ldrb	r3, [r6, #5]
 8026890:	2b00      	cmp	r3, #0
 8026892:	d020      	beq.n	80268d6 <ScheduleTx+0x30a>
 8026894:	2b04      	cmp	r3, #4
 8026896:	d000      	beq.n	802689a <ScheduleTx+0x2ce>
 8026898:	e6b5      	b.n	8026606 <ScheduleTx+0x3a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 802689a:	a807      	add	r0, sp, #28
 802689c:	f003 fd02 	bl	802a2a4 <LoRaMacCryptoGetFCntUp>
 80268a0:	2800      	cmp	r0, #0
 80268a2:	d136      	bne.n	8026912 <ScheduleTx+0x346>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 80268a4:	2382      	movs	r3, #130	; 0x82
 80268a6:	00db      	lsls	r3, r3, #3
 80268a8:	5ce3      	ldrb	r3, [r4, r3]
 80268aa:	2b00      	cmp	r3, #0
 80268ac:	d103      	bne.n	80268b6 <ScheduleTx+0x2ea>
 80268ae:	4b2b      	ldr	r3, [pc, #172]	; (802695c <ScheduleTx+0x390>)
 80268b0:	5ce3      	ldrb	r3, [r4, r3]
 80268b2:	2b01      	cmp	r3, #1
 80268b4:	d902      	bls.n	80268bc <ScheduleTx+0x2f0>
                fCntUp -= 1;
 80268b6:	9b07      	ldr	r3, [sp, #28]
 80268b8:	3b01      	subs	r3, #1
 80268ba:	9307      	str	r3, [sp, #28]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80268bc:	466b      	mov	r3, sp
 80268be:	003a      	movs	r2, r7
 80268c0:	7b19      	ldrb	r1, [r3, #12]
 80268c2:	9807      	ldr	r0, [sp, #28]
 80268c4:	4b16      	ldr	r3, [pc, #88]	; (8026920 <ScheduleTx+0x354>)
 80268c6:	f003 fd75 	bl	802a3b4 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80268ca:	2800      	cmp	r0, #0
 80268cc:	d11f      	bne.n	802690e <ScheduleTx+0x342>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80268ce:	0023      	movs	r3, r4
 80268d0:	33ff      	adds	r3, #255	; 0xff
 80268d2:	7b5b      	ldrb	r3, [r3, #13]
 80268d4:	e005      	b.n	80268e2 <ScheduleTx+0x316>
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80268d6:	4812      	ldr	r0, [pc, #72]	; (8026920 <ScheduleTx+0x354>)
 80268d8:	f003 fd3c 	bl	802a354 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80268dc:	2800      	cmp	r0, #0
 80268de:	d116      	bne.n	802690e <ScheduleTx+0x342>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80268e0:	7b73      	ldrb	r3, [r6, #13]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80268e2:	22d0      	movs	r2, #208	; 0xd0
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80268e4:	8023      	strh	r3, [r4, #0]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80268e6:	2302      	movs	r3, #2
 80268e8:	0092      	lsls	r2, r2, #2
 80268ea:	58a1      	ldr	r1, [r4, r2]
 80268ec:	430b      	orrs	r3, r1
 80268ee:	50a3      	str	r3, [r4, r2]
    if( MacCtx.NodeAckRequested == false )
 80268f0:	4b1b      	ldr	r3, [pc, #108]	; (8026960 <ScheduleTx+0x394>)
 80268f2:	5ce3      	ldrb	r3, [r4, r3]
 80268f4:	2b00      	cmp	r3, #0
 80268f6:	d103      	bne.n	8026900 <ScheduleTx+0x334>
        MacCtx.ChannelsNbTransCounter++;
 80268f8:	32d0      	adds	r2, #208	; 0xd0
 80268fa:	5ca3      	ldrb	r3, [r4, r2]
 80268fc:	3301      	adds	r3, #1
 80268fe:	54a3      	strb	r3, [r4, r2]
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8026900:	4b18      	ldr	r3, [pc, #96]	; (8026964 <ScheduleTx+0x398>)
 8026902:	7821      	ldrb	r1, [r4, #0]
 8026904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026906:	4818      	ldr	r0, [pc, #96]	; (8026968 <ScheduleTx+0x39c>)
 8026908:	9303      	str	r3, [sp, #12]
 802690a:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 802690c:	e682      	b.n	8026614 <ScheduleTx+0x48>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 802690e:	2511      	movs	r5, #17
 8026910:	e680      	b.n	8026614 <ScheduleTx+0x48>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8026912:	2512      	movs	r5, #18
 8026914:	e67e      	b.n	8026614 <ScheduleTx+0x48>
 8026916:	46c0      	nop			; (mov r8, r8)
 8026918:	200088e8 	.word	0x200088e8
 802691c:	00000484 	.word	0x00000484
 8026920:	200089f0 	.word	0x200089f0
 8026924:	20008cfd 	.word	0x20008cfd
 8026928:	20008d70 	.word	0x20008d70
 802692c:	20008c50 	.word	0x20008c50
 8026930:	20008ca0 	.word	0x20008ca0
 8026934:	20008cb4 	.word	0x20008cb4
 8026938:	00000237 	.word	0x00000237
 802693c:	00000415 	.word	0x00000415
 8026940:	20008d00 	.word	0x20008d00
 8026944:	0000043d 	.word	0x0000043d
 8026948:	0000043e 	.word	0x0000043e
 802694c:	0000043f 	.word	0x0000043f
 8026950:	0000044c 	.word	0x0000044c
 8026954:	00000444 	.word	0x00000444
 8026958:	00000454 	.word	0x00000454
 802695c:	00000412 	.word	0x00000412
 8026960:	00000414 	.word	0x00000414
 8026964:	08031484 	.word	0x08031484
 8026968:	200088ea 	.word	0x200088ea

0802696c <RxWindowSetup.constprop.0>:
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 802696c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802696e:	000c      	movs	r4, r1
    TimerStop( rxTimer );
 8026970:	f7fd fab8 	bl	8023ee4 <TimerStop>
    Radio.Standby( );
 8026974:	4e0c      	ldr	r6, [pc, #48]	; (80269a8 <RxWindowSetup.constprop.0+0x3c>)
    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8026976:	4f0d      	ldr	r7, [pc, #52]	; (80269ac <RxWindowSetup.constprop.0+0x40>)
    Radio.Standby( );
 8026978:	6b33      	ldr	r3, [r6, #48]	; 0x30
 802697a:	9301      	str	r3, [sp, #4]
 802697c:	4798      	blx	r3
    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 802697e:	4d0c      	ldr	r5, [pc, #48]	; (80269b0 <RxWindowSetup.constprop.0+0x44>)
 8026980:	0021      	movs	r1, r4
 8026982:	59eb      	ldr	r3, [r5, r7]
 8026984:	4a0b      	ldr	r2, [pc, #44]	; (80269b4 <RxWindowSetup.constprop.0+0x48>)
 8026986:	7818      	ldrb	r0, [r3, #0]
 8026988:	f009 fa5c 	bl	802fe44 <RegionRxConfig>
 802698c:	2800      	cmp	r0, #0
 802698e:	d009      	beq.n	80269a4 <RxWindowSetup.constprop.0+0x38>
        Radio.Rx( MacCtx.NvmCtx->MacParams.MaxRxWindow );
 8026990:	59eb      	ldr	r3, [r5, r7]
 8026992:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8026994:	3390      	adds	r3, #144	; 0x90
 8026996:	6818      	ldr	r0, [r3, #0]
 8026998:	9201      	str	r2, [sp, #4]
 802699a:	4790      	blx	r2
        MacCtx.RxSlot = rxConfig->RxSlot;
 802699c:	2390      	movs	r3, #144	; 0x90
 802699e:	7ce2      	ldrb	r2, [r4, #19]
 80269a0:	00db      	lsls	r3, r3, #3
 80269a2:	54ea      	strb	r2, [r5, r3]
}
 80269a4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80269a6:	46c0      	nop			; (mov r8, r8)
 80269a8:	08031484 	.word	0x08031484
 80269ac:	00000484 	.word	0x00000484
 80269b0:	200088e8 	.word	0x200088e8
 80269b4:	20008d08 	.word	0x20008d08

080269b8 <OnRxWindow1TimerEvent>:
{
 80269b8:	b510      	push	{r4, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80269ba:	4b0f      	ldr	r3, [pc, #60]	; (80269f8 <OnRxWindow1TimerEvent+0x40>)
 80269bc:	4a0f      	ldr	r2, [pc, #60]	; (80269fc <OnRxWindow1TimerEvent+0x44>)
 80269be:	5c99      	ldrb	r1, [r3, r2]
 80269c0:	3a5d      	subs	r2, #93	; 0x5d
 80269c2:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 80269c4:	4a0e      	ldr	r2, [pc, #56]	; (8026a00 <OnRxWindow1TimerEvent+0x48>)
 80269c6:	589a      	ldr	r2, [r3, r2]
 80269c8:	0011      	movs	r1, r2
 80269ca:	31a5      	adds	r1, #165	; 0xa5
 80269cc:	7808      	ldrb	r0, [r1, #0]
 80269ce:	490d      	ldr	r1, [pc, #52]	; (8026a04 <OnRxWindow1TimerEvent+0x4c>)
 80269d0:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80269d2:	0011      	movs	r1, r2
 80269d4:	31b9      	adds	r1, #185	; 0xb9
 80269d6:	7808      	ldrb	r0, [r1, #0]
 80269d8:	21f2      	movs	r1, #242	; 0xf2
 80269da:	0089      	lsls	r1, r1, #2
 80269dc:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80269de:	32ca      	adds	r2, #202	; 0xca
 80269e0:	7811      	ldrb	r1, [r2, #0]
 80269e2:	4a09      	ldr	r2, [pc, #36]	; (8026a08 <OnRxWindow1TimerEvent+0x50>)
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80269e4:	4809      	ldr	r0, [pc, #36]	; (8026a0c <OnRxWindow1TimerEvent+0x54>)
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80269e6:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 80269e8:	2100      	movs	r1, #0
 80269ea:	4a09      	ldr	r2, [pc, #36]	; (8026a10 <OnRxWindow1TimerEvent+0x58>)
 80269ec:	5299      	strh	r1, [r3, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80269ee:	4909      	ldr	r1, [pc, #36]	; (8026a14 <OnRxWindow1TimerEvent+0x5c>)
 80269f0:	f7ff ffbc 	bl	802696c <RxWindowSetup.constprop.0>
}
 80269f4:	bd10      	pop	{r4, pc}
 80269f6:	46c0      	nop			; (mov r8, r8)
 80269f8:	200088e8 	.word	0x200088e8
 80269fc:	00000415 	.word	0x00000415
 8026a00:	00000484 	.word	0x00000484
 8026a04:	000003bb 	.word	0x000003bb
 8026a08:	000003c9 	.word	0x000003c9
 8026a0c:	20008c68 	.word	0x20008c68
 8026a10:	000003ca 	.word	0x000003ca
 8026a14:	20008ca0 	.word	0x20008ca0

08026a18 <OnRxWindow2TimerEvent>:
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8026a18:	2290      	movs	r2, #144	; 0x90
{
 8026a1a:	b510      	push	{r4, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8026a1c:	4b11      	ldr	r3, [pc, #68]	; (8026a64 <OnRxWindow2TimerEvent+0x4c>)
 8026a1e:	00d2      	lsls	r2, r2, #3
 8026a20:	5c9a      	ldrb	r2, [r3, r2]
 8026a22:	2a00      	cmp	r2, #0
 8026a24:	d01d      	beq.n	8026a62 <OnRxWindow2TimerEvent+0x4a>
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8026a26:	4a10      	ldr	r2, [pc, #64]	; (8026a68 <OnRxWindow2TimerEvent+0x50>)
 8026a28:	5c99      	ldrb	r1, [r3, r2]
 8026a2a:	3a49      	subs	r2, #73	; 0x49
 8026a2c:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 8026a2e:	4a0f      	ldr	r2, [pc, #60]	; (8026a6c <OnRxWindow2TimerEvent+0x54>)
 8026a30:	589a      	ldr	r2, [r3, r2]
 8026a32:	0011      	movs	r1, r2
 8026a34:	31a8      	adds	r1, #168	; 0xa8
 8026a36:	6808      	ldr	r0, [r1, #0]
 8026a38:	21f4      	movs	r1, #244	; 0xf4
 8026a3a:	0089      	lsls	r1, r1, #2
 8026a3c:	5058      	str	r0, [r3, r1]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8026a3e:	0011      	movs	r1, r2
 8026a40:	31b9      	adds	r1, #185	; 0xb9
 8026a42:	7808      	ldrb	r0, [r1, #0]
 8026a44:	21f7      	movs	r1, #247	; 0xf7
 8026a46:	0089      	lsls	r1, r1, #2
 8026a48:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8026a4a:	32ca      	adds	r2, #202	; 0xca
 8026a4c:	7811      	ldrb	r1, [r2, #0]
 8026a4e:	4a08      	ldr	r2, [pc, #32]	; (8026a70 <OnRxWindow2TimerEvent+0x58>)
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8026a50:	4808      	ldr	r0, [pc, #32]	; (8026a74 <OnRxWindow2TimerEvent+0x5c>)
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8026a52:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 8026a54:	2180      	movs	r1, #128	; 0x80
 8026a56:	4a08      	ldr	r2, [pc, #32]	; (8026a78 <OnRxWindow2TimerEvent+0x60>)
 8026a58:	0049      	lsls	r1, r1, #1
 8026a5a:	5299      	strh	r1, [r3, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8026a5c:	4907      	ldr	r1, [pc, #28]	; (8026a7c <OnRxWindow2TimerEvent+0x64>)
 8026a5e:	f7ff ff85 	bl	802696c <RxWindowSetup.constprop.0>
}
 8026a62:	bd10      	pop	{r4, pc}
 8026a64:	200088e8 	.word	0x200088e8
 8026a68:	00000415 	.word	0x00000415
 8026a6c:	00000484 	.word	0x00000484
 8026a70:	000003dd 	.word	0x000003dd
 8026a74:	20008c80 	.word	0x20008c80
 8026a78:	000003de 	.word	0x000003de
 8026a7c:	20008cb4 	.word	0x20008cb4

08026a80 <ProcessMacCommands.constprop.0>:
    uint8_t status = 0;
 8026a80:	2300      	movs	r3, #0
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8026a82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026a84:	b095      	sub	sp, #84	; 0x54
 8026a86:	9206      	str	r2, [sp, #24]
    uint8_t status = 0;
 8026a88:	220d      	movs	r2, #13
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8026a8a:	0007      	movs	r7, r0
    while( macIndex < commandsSize )
 8026a8c:	001c      	movs	r4, r3
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8026a8e:	9103      	str	r1, [sp, #12]
    uint8_t status = 0;
 8026a90:	a906      	add	r1, sp, #24
 8026a92:	1852      	adds	r2, r2, r1
 8026a94:	7013      	strb	r3, [r2, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8026a96:	aa0a      	add	r2, sp, #40	; 0x28
 8026a98:	8013      	strh	r3, [r2, #0]
    bool adrBlockFound = false;
 8026a9a:	9302      	str	r3, [sp, #8]
    while( macIndex < commandsSize )
 8026a9c:	9b03      	ldr	r3, [sp, #12]
 8026a9e:	429c      	cmp	r4, r3
 8026aa0:	d301      	bcc.n	8026aa6 <ProcessMacCommands.constprop.0+0x26>
}
 8026aa2:	b015      	add	sp, #84	; 0x54
 8026aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8026aa6:	5d38      	ldrb	r0, [r7, r4]
 8026aa8:	f003 fa3c 	bl	8029f24 <LoRaMacCommandsGetCmdSize>
 8026aac:	9b03      	ldr	r3, [sp, #12]
 8026aae:	1900      	adds	r0, r0, r4
 8026ab0:	193e      	adds	r6, r7, r4
 8026ab2:	4298      	cmp	r0, r3
 8026ab4:	dcf5      	bgt.n	8026aa2 <ProcessMacCommands.constprop.0+0x22>
        switch( payload[macIndex++] )
 8026ab6:	7830      	ldrb	r0, [r6, #0]
 8026ab8:	1c65      	adds	r5, r4, #1
 8026aba:	3802      	subs	r0, #2
 8026abc:	b2ed      	uxtb	r5, r5
 8026abe:	2811      	cmp	r0, #17
 8026ac0:	d8ef      	bhi.n	8026aa2 <ProcessMacCommands.constprop.0+0x22>
 8026ac2:	f7f9 fb11 	bl	80200e8 <__gnu_thumb1_case_shi>
 8026ac6:	0012      	.short	0x0012
 8026ac8:	00920029 	.word	0x00920029
 8026acc:	00f000aa 	.word	0x00f000aa
 8026ad0:	01360108 	.word	0x01360108
 8026ad4:	01b0015a 	.word	0x01b0015a
 8026ad8:	ffeeffee 	.word	0xffeeffee
 8026adc:	ffee01e7 	.word	0xffee01e7
 8026ae0:	0237ffee 	.word	0x0237ffee
 8026ae4:	0267024c 	.word	0x0267024c
 8026ae8:	0281      	.short	0x0281
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8026aea:	2004      	movs	r0, #4
 8026aec:	f003 fae2 	bl	802a0b4 <LoRaMacConfirmQueueIsCmdActive>
 8026af0:	2800      	cmp	r0, #0
 8026af2:	d00f      	beq.n	8026b14 <ProcessMacCommands.constprop.0+0x94>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8026af4:	2104      	movs	r1, #4
 8026af6:	2000      	movs	r0, #0
 8026af8:	f003 fa9a 	bl	802a030 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8026afc:	228b      	movs	r2, #139	; 0x8b
 8026afe:	5d79      	ldrb	r1, [r7, r5]
 8026b00:	4bdf      	ldr	r3, [pc, #892]	; (8026e80 <ProcessMacCommands.constprop.0+0x400>)
 8026b02:	00d2      	lsls	r2, r2, #3
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8026b04:	1ce5      	adds	r5, r4, #3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8026b06:	3402      	adds	r4, #2
 8026b08:	5499      	strb	r1, [r3, r2]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8026b0a:	b2e4      	uxtb	r4, r4
 8026b0c:	5d39      	ldrb	r1, [r7, r4]
 8026b0e:	4add      	ldr	r2, [pc, #884]	; (8026e84 <ProcessMacCommands.constprop.0+0x404>)
 8026b10:	b2ed      	uxtb	r5, r5
 8026b12:	5499      	strb	r1, [r3, r2]
                uint8_t eirpDwellTime = payload[macIndex++];
 8026b14:	002c      	movs	r4, r5
 8026b16:	e7c1      	b.n	8026a9c <ProcessMacCommands.constprop.0+0x1c>
                int8_t linkAdrDatarate = DR_0;
 8026b18:	2300      	movs	r3, #0
 8026b1a:	aa06      	add	r2, sp, #24
 8026b1c:	7393      	strb	r3, [r2, #14]
                int8_t linkAdrTxPower = TX_POWER_0;
 8026b1e:	73d3      	strb	r3, [r2, #15]
                uint8_t linkAdrNbRep = 0;
 8026b20:	ac0b      	add	r4, sp, #44	; 0x2c
                uint8_t linkAdrNbBytesParsed = 0;
 8026b22:	aa0c      	add	r2, sp, #48	; 0x30
                uint8_t linkAdrNbRep = 0;
 8026b24:	7023      	strb	r3, [r4, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 8026b26:	7013      	strb	r3, [r2, #0]
                if( adrBlockFound == false )
 8026b28:	9b02      	ldr	r3, [sp, #8]
 8026b2a:	2b00      	cmp	r3, #0
 8026b2c:	d15a      	bne.n	8026be4 <ProcessMacCommands.constprop.0+0x164>
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8026b2e:	1e6b      	subs	r3, r5, #1
 8026b30:	a910      	add	r1, sp, #64	; 0x40
 8026b32:	18fb      	adds	r3, r7, r3
 8026b34:	604b      	str	r3, [r1, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8026b36:	9b03      	ldr	r3, [sp, #12]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8026b38:	4ed3      	ldr	r6, [pc, #844]	; (8026e88 <ProcessMacCommands.constprop.0+0x408>)
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8026b3a:	1b5b      	subs	r3, r3, r5
 8026b3c:	3301      	adds	r3, #1
 8026b3e:	720b      	strb	r3, [r1, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8026b40:	4bcf      	ldr	r3, [pc, #828]	; (8026e80 <ProcessMacCommands.constprop.0+0x400>)
 8026b42:	599b      	ldr	r3, [r3, r6]
 8026b44:	0018      	movs	r0, r3
 8026b46:	307e      	adds	r0, #126	; 0x7e
 8026b48:	7800      	ldrb	r0, [r0, #0]
 8026b4a:	7288      	strb	r0, [r1, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8026b4c:	0018      	movs	r0, r3
 8026b4e:	30b8      	adds	r0, #184	; 0xb8
 8026b50:	7800      	ldrb	r0, [r0, #0]
 8026b52:	7248      	strb	r0, [r1, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8026b54:	0018      	movs	r0, r3
 8026b56:	3085      	adds	r0, #133	; 0x85
 8026b58:	7800      	ldrb	r0, [r0, #0]
 8026b5a:	72c8      	strb	r0, [r1, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8026b5c:	0018      	movs	r0, r3
 8026b5e:	3084      	adds	r0, #132	; 0x84
 8026b60:	7800      	ldrb	r0, [r0, #0]
 8026b62:	7308      	strb	r0, [r1, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8026b64:	0018      	movs	r0, r3
 8026b66:	30a4      	adds	r0, #164	; 0xa4
 8026b68:	7800      	ldrb	r0, [r0, #0]
 8026b6a:	7348      	strb	r0, [r1, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8026b6c:	0018      	movs	r0, r3
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8026b6e:	781b      	ldrb	r3, [r3, #0]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8026b70:	30fc      	adds	r0, #252	; 0xfc
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8026b72:	469c      	mov	ip, r3
 8026b74:	230f      	movs	r3, #15
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8026b76:	6e40      	ldr	r0, [r0, #100]	; 0x64
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8026b78:	9201      	str	r2, [sp, #4]
 8026b7a:	aa06      	add	r2, sp, #24
 8026b7c:	189b      	adds	r3, r3, r2
 8026b7e:	220e      	movs	r2, #14
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8026b80:	9010      	str	r0, [sp, #64]	; 0x40
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8026b82:	a806      	add	r0, sp, #24
 8026b84:	1812      	adds	r2, r2, r0
 8026b86:	9400      	str	r4, [sp, #0]
 8026b88:	4660      	mov	r0, ip
 8026b8a:	f009 f974 	bl	802fe76 <RegionLinkAdrReq>
 8026b8e:	ab06      	add	r3, sp, #24
 8026b90:	7358      	strb	r0, [r3, #13]
                    if( ( status & 0x07 ) == 0x07 )
 8026b92:	43c0      	mvns	r0, r0
 8026b94:	0743      	lsls	r3, r0, #29
 8026b96:	d10d      	bne.n	8026bb4 <ProcessMacCommands.constprop.0+0x134>
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 8026b98:	4bb9      	ldr	r3, [pc, #740]	; (8026e80 <ProcessMacCommands.constprop.0+0x400>)
 8026b9a:	a906      	add	r1, sp, #24
 8026b9c:	599b      	ldr	r3, [r3, r6]
 8026b9e:	7b89      	ldrb	r1, [r1, #14]
 8026ba0:	001a      	movs	r2, r3
 8026ba2:	3285      	adds	r2, #133	; 0x85
 8026ba4:	7011      	strb	r1, [r2, #0]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 8026ba6:	a906      	add	r1, sp, #24
 8026ba8:	7bc9      	ldrb	r1, [r1, #15]
 8026baa:	3a01      	subs	r2, #1
 8026bac:	7011      	strb	r1, [r2, #0]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 8026bae:	7822      	ldrb	r2, [r4, #0]
 8026bb0:	33a4      	adds	r3, #164	; 0xa4
 8026bb2:	701a      	strb	r2, [r3, #0]
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8026bb4:	2600      	movs	r6, #0
 8026bb6:	e009      	b.n	8026bcc <ProcessMacCommands.constprop.0+0x14c>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8026bb8:	230d      	movs	r3, #13
 8026bba:	a906      	add	r1, sp, #24
 8026bbc:	185b      	adds	r3, r3, r1
 8026bbe:	2201      	movs	r2, #1
 8026bc0:	0019      	movs	r1, r3
 8026bc2:	2003      	movs	r0, #3
 8026bc4:	f003 f8b4 	bl	8029d30 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8026bc8:	3601      	adds	r6, #1
 8026bca:	b2f6      	uxtb	r6, r6
 8026bcc:	ab0c      	add	r3, sp, #48	; 0x30
 8026bce:	781c      	ldrb	r4, [r3, #0]
 8026bd0:	2105      	movs	r1, #5
 8026bd2:	0020      	movs	r0, r4
 8026bd4:	f7f9 fa9c 	bl	8020110 <__udivsi3>
 8026bd8:	b2c0      	uxtb	r0, r0
 8026bda:	4286      	cmp	r6, r0
 8026bdc:	d3ec      	bcc.n	8026bb8 <ProcessMacCommands.constprop.0+0x138>
                    macIndex += linkAdrNbBytesParsed - 1;
 8026bde:	192d      	adds	r5, r5, r4
 8026be0:	3d01      	subs	r5, #1
 8026be2:	b2ed      	uxtb	r5, r5
                break;
 8026be4:	2301      	movs	r3, #1
 8026be6:	9302      	str	r3, [sp, #8]
 8026be8:	e794      	b.n	8026b14 <ProcessMacCommands.constprop.0+0x94>
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8026bea:	4aa5      	ldr	r2, [pc, #660]	; (8026e80 <ProcessMacCommands.constprop.0+0x400>)
 8026bec:	4ba6      	ldr	r3, [pc, #664]	; (8026e88 <ProcessMacCommands.constprop.0+0x408>)
 8026bee:	3402      	adds	r4, #2
 8026bf0:	58d1      	ldr	r1, [r2, r3]
 8026bf2:	220f      	movs	r2, #15
 8026bf4:	5d7b      	ldrb	r3, [r7, r5]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8026bf6:	2004      	movs	r0, #4
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8026bf8:	4013      	ands	r3, r2
 8026bfa:	000a      	movs	r2, r1
 8026bfc:	32c8      	adds	r2, #200	; 0xc8
 8026bfe:	7013      	strb	r3, [r2, #0]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 8026c00:	2201      	movs	r2, #1
 8026c02:	409a      	lsls	r2, r3
 8026c04:	0013      	movs	r3, r2
 8026c06:	22a6      	movs	r2, #166	; 0xa6
 8026c08:	0052      	lsls	r2, r2, #1
 8026c0a:	528b      	strh	r3, [r1, r2]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8026c0c:	2200      	movs	r2, #0
 8026c0e:	a90a      	add	r1, sp, #40	; 0x28
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8026c10:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8026c12:	f003 f88d 	bl	8029d30 <LoRaMacCommandsAddCmd>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8026c16:	0025      	movs	r5, r4
}
 8026c18:	e77c      	b.n	8026b14 <ProcessMacCommands.constprop.0+0x94>
                status = 0x07;
 8026c1a:	2107      	movs	r1, #7
 8026c1c:	ab06      	add	r3, sp, #24
 8026c1e:	7359      	strb	r1, [r3, #13]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8026c20:	5d7b      	ldrb	r3, [r7, r5]
 8026c22:	ae10      	add	r6, sp, #64	; 0x40
 8026c24:	091a      	lsrs	r2, r3, #4
 8026c26:	400a      	ands	r2, r1
 8026c28:	7072      	strb	r2, [r6, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8026c2a:	220f      	movs	r2, #15
 8026c2c:	4013      	ands	r3, r2
 8026c2e:	7033      	strb	r3, [r6, #0]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8026c30:	1d22      	adds	r2, r4, #4
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8026c32:	1ce3      	adds	r3, r4, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8026c34:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8026c36:	b2d2      	uxtb	r2, r2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8026c38:	5cfb      	ldrb	r3, [r7, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8026c3a:	5cba      	ldrb	r2, [r7, r2]
 8026c3c:	1d65      	adds	r5, r4, #5
                macIndex++;
 8026c3e:	3402      	adds	r4, #2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8026c40:	0412      	lsls	r2, r2, #16
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8026c42:	b2e4      	uxtb	r4, r4
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8026c44:	021b      	lsls	r3, r3, #8
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8026c46:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8026c48:	5d3a      	ldrb	r2, [r7, r4]
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8026c4a:	4c8f      	ldr	r4, [pc, #572]	; (8026e88 <ProcessMacCommands.constprop.0+0x408>)
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8026c4c:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
 8026c4e:	2264      	movs	r2, #100	; 0x64
 8026c50:	4353      	muls	r3, r2
 8026c52:	9311      	str	r3, [sp, #68]	; 0x44
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8026c54:	4b8a      	ldr	r3, [pc, #552]	; (8026e80 <ProcessMacCommands.constprop.0+0x400>)
 8026c56:	0031      	movs	r1, r6
 8026c58:	591b      	ldr	r3, [r3, r4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8026c5a:	b2ed      	uxtb	r5, r5
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8026c5c:	7818      	ldrb	r0, [r3, #0]
 8026c5e:	9304      	str	r3, [sp, #16]
 8026c60:	f009 f919 	bl	802fe96 <RegionRxParamSetupReq>
 8026c64:	ab06      	add	r3, sp, #24
 8026c66:	7358      	strb	r0, [r3, #13]
                if( ( status & 0x07 ) == 0x07 )
 8026c68:	2307      	movs	r3, #7
 8026c6a:	4003      	ands	r3, r0
 8026c6c:	2b07      	cmp	r3, #7
 8026c6e:	d10d      	bne.n	8026c8c <ProcessMacCommands.constprop.0+0x20c>
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8026c70:	4b83      	ldr	r3, [pc, #524]	; (8026e80 <ProcessMacCommands.constprop.0+0x400>)
 8026c72:	7832      	ldrb	r2, [r6, #0]
 8026c74:	591b      	ldr	r3, [r3, r4]
 8026c76:	0019      	movs	r1, r3
 8026c78:	31ac      	adds	r1, #172	; 0xac
 8026c7a:	700a      	strb	r2, [r1, #0]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8026c7c:	720a      	strb	r2, [r1, #8]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8026c7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8026c80:	3904      	subs	r1, #4
 8026c82:	600a      	str	r2, [r1, #0]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8026c84:	608a      	str	r2, [r1, #8]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8026c86:	7872      	ldrb	r2, [r6, #1]
 8026c88:	33a5      	adds	r3, #165	; 0xa5
 8026c8a:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
 8026c8c:	a90a      	add	r1, sp, #40	; 0x28
 8026c8e:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8026c90:	2201      	movs	r2, #1
 8026c92:	2005      	movs	r0, #5
 8026c94:	f003 f84c 	bl	8029d30 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8026c98:	2310      	movs	r3, #16
 8026c9a:	4979      	ldr	r1, [pc, #484]	; (8026e80 <ProcessMacCommands.constprop.0+0x400>)
 8026c9c:	4a7b      	ldr	r2, [pc, #492]	; (8026e8c <ProcessMacCommands.constprop.0+0x40c>)
 8026c9e:	5c88      	ldrb	r0, [r1, r2]
 8026ca0:	4303      	orrs	r3, r0
 8026ca2:	548b      	strb	r3, [r1, r2]
                break;
 8026ca4:	e736      	b.n	8026b14 <ProcessMacCommands.constprop.0+0x94>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8026ca6:	23d2      	movs	r3, #210	; 0xd2
 8026ca8:	4a75      	ldr	r2, [pc, #468]	; (8026e80 <ProcessMacCommands.constprop.0+0x400>)
 8026caa:	009b      	lsls	r3, r3, #2
 8026cac:	58d3      	ldr	r3, [r2, r3]
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8026cae:	20ff      	movs	r0, #255	; 0xff
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8026cb0:	2b00      	cmp	r3, #0
 8026cb2:	d003      	beq.n	8026cbc <ProcessMacCommands.constprop.0+0x23c>
 8026cb4:	681b      	ldr	r3, [r3, #0]
 8026cb6:	2b00      	cmp	r3, #0
 8026cb8:	d000      	beq.n	8026cbc <ProcessMacCommands.constprop.0+0x23c>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8026cba:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 8026cbc:	ab06      	add	r3, sp, #24
 8026cbe:	7418      	strb	r0, [r3, #16]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8026cc0:	233f      	movs	r3, #63	; 0x3f
 8026cc2:	9a06      	ldr	r2, [sp, #24]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8026cc4:	2006      	movs	r0, #6
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8026cc6:	4013      	ands	r3, r2
 8026cc8:	aa06      	add	r2, sp, #24
 8026cca:	7453      	strb	r3, [r2, #17]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8026ccc:	2202      	movs	r2, #2
 8026cce:	a90a      	add	r1, sp, #40	; 0x28
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8026cd0:	f003 f82e 	bl	8029d30 <LoRaMacCommandsAddCmd>
                break;
 8026cd4:	e71e      	b.n	8026b14 <ProcessMacCommands.constprop.0+0x94>
                status = 0x03;
 8026cd6:	260d      	movs	r6, #13
 8026cd8:	ab06      	add	r3, sp, #24
 8026cda:	18f6      	adds	r6, r6, r3
 8026cdc:	2303      	movs	r3, #3
 8026cde:	7033      	strb	r3, [r6, #0]
                newChannelReq.ChannelId = payload[macIndex++];
 8026ce0:	5d7b      	ldrb	r3, [r7, r5]
 8026ce2:	a90c      	add	r1, sp, #48	; 0x30
 8026ce4:	710b      	strb	r3, [r1, #4]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8026ce6:	1ce3      	adds	r3, r4, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8026ce8:	b2db      	uxtb	r3, r3
 8026cea:	5cfd      	ldrb	r5, [r7, r3]
 8026cec:	1d23      	adds	r3, r4, #4
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8026cee:	b2db      	uxtb	r3, r3
 8026cf0:	5cfb      	ldrb	r3, [r7, r3]
                newChannelReq.ChannelId = payload[macIndex++];
 8026cf2:	1ca0      	adds	r0, r4, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8026cf4:	b2c0      	uxtb	r0, r0
 8026cf6:	5c38      	ldrb	r0, [r7, r0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8026cf8:	022d      	lsls	r5, r5, #8
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8026cfa:	041b      	lsls	r3, r3, #16
 8026cfc:	432b      	orrs	r3, r5
 8026cfe:	4303      	orrs	r3, r0
                chParam.Frequency *= 100;
 8026d00:	2064      	movs	r0, #100	; 0x64
 8026d02:	4343      	muls	r3, r0
 8026d04:	9310      	str	r3, [sp, #64]	; 0x40
                chParam.Rx1Frequency = 0;
 8026d06:	2300      	movs	r3, #0
                chParam.DrRange.Value = payload[macIndex++];
 8026d08:	1da5      	adds	r5, r4, #6
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8026d0a:	3405      	adds	r4, #5
                chParam.DrRange.Value = payload[macIndex++];
 8026d0c:	b2e4      	uxtb	r4, r4
                chParam.Rx1Frequency = 0;
 8026d0e:	9311      	str	r3, [sp, #68]	; 0x44
                chParam.DrRange.Value = payload[macIndex++];
 8026d10:	5d3b      	ldrb	r3, [r7, r4]
                newChannelReq.NewChannel = &chParam;
 8026d12:	aa10      	add	r2, sp, #64	; 0x40
                chParam.DrRange.Value = payload[macIndex++];
 8026d14:	7213      	strb	r3, [r2, #8]
                newChannelReq.NewChannel = &chParam;
 8026d16:	920c      	str	r2, [sp, #48]	; 0x30
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8026d18:	4b5b      	ldr	r3, [pc, #364]	; (8026e88 <ProcessMacCommands.constprop.0+0x408>)
 8026d1a:	4a59      	ldr	r2, [pc, #356]	; (8026e80 <ProcessMacCommands.constprop.0+0x400>)
                chParam.DrRange.Value = payload[macIndex++];
 8026d1c:	b2ed      	uxtb	r5, r5
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8026d1e:	58d3      	ldr	r3, [r2, r3]
 8026d20:	7818      	ldrb	r0, [r3, #0]
 8026d22:	f009 f8c2 	bl	802feaa <RegionNewChannelReq>
                macCmdPayload[0] = status;
 8026d26:	a90a      	add	r1, sp, #40	; 0x28
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8026d28:	7030      	strb	r0, [r6, #0]
                macCmdPayload[0] = status;
 8026d2a:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8026d2c:	2201      	movs	r2, #1
 8026d2e:	2007      	movs	r0, #7
 8026d30:	e7ce      	b.n	8026cd0 <ProcessMacCommands.constprop.0+0x250>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8026d32:	230f      	movs	r3, #15
 8026d34:	5d79      	ldrb	r1, [r7, r5]
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8026d36:	4a52      	ldr	r2, [pc, #328]	; (8026e80 <ProcessMacCommands.constprop.0+0x400>)
                uint8_t delay = payload[macIndex++] & 0x0F;
 8026d38:	4019      	ands	r1, r3
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8026d3a:	4b53      	ldr	r3, [pc, #332]	; (8026e88 <ProcessMacCommands.constprop.0+0x408>)
                uint8_t delay = payload[macIndex++] & 0x0F;
 8026d3c:	3402      	adds	r4, #2
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8026d3e:	58d2      	ldr	r2, [r2, r3]
                uint8_t delay = payload[macIndex++] & 0x0F;
 8026d40:	b2e4      	uxtb	r4, r4
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8026d42:	1c0b      	adds	r3, r1, #0
 8026d44:	2900      	cmp	r1, #0
 8026d46:	d100      	bne.n	8026d4a <ProcessMacCommands.constprop.0+0x2ca>
 8026d48:	2301      	movs	r3, #1
 8026d4a:	b2d9      	uxtb	r1, r3
 8026d4c:	23fa      	movs	r3, #250	; 0xfa
 8026d4e:	009b      	lsls	r3, r3, #2
 8026d50:	434b      	muls	r3, r1
 8026d52:	0011      	movs	r1, r2
 8026d54:	3194      	adds	r1, #148	; 0x94
 8026d56:	600b      	str	r3, [r1, #0]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8026d58:	21fa      	movs	r1, #250	; 0xfa
 8026d5a:	0089      	lsls	r1, r1, #2
 8026d5c:	185b      	adds	r3, r3, r1
 8026d5e:	3298      	adds	r2, #152	; 0x98
 8026d60:	6013      	str	r3, [r2, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8026d62:	a90a      	add	r1, sp, #40	; 0x28
 8026d64:	2200      	movs	r2, #0
 8026d66:	2008      	movs	r0, #8
 8026d68:	f002 ffe2 	bl	8029d30 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8026d6c:	2310      	movs	r3, #16
 8026d6e:	4944      	ldr	r1, [pc, #272]	; (8026e80 <ProcessMacCommands.constprop.0+0x400>)
 8026d70:	4a46      	ldr	r2, [pc, #280]	; (8026e8c <ProcessMacCommands.constprop.0+0x40c>)
 8026d72:	5c88      	ldrb	r0, [r1, r2]
 8026d74:	4303      	orrs	r3, r0
 8026d76:	548b      	strb	r3, [r1, r2]
 8026d78:	e74d      	b.n	8026c16 <ProcessMacCommands.constprop.0+0x196>
                uint8_t eirpDwellTime = payload[macIndex++];
 8026d7a:	3402      	adds	r4, #2
 8026d7c:	b2e3      	uxtb	r3, r4
 8026d7e:	9305      	str	r3, [sp, #20]
 8026d80:	5d7b      	ldrb	r3, [r7, r5]
                txParamSetupReq.UplinkDwellTime = 0;
 8026d82:	2200      	movs	r2, #0
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8026d84:	0019      	movs	r1, r3
                txParamSetupReq.UplinkDwellTime = 0;
 8026d86:	ac0b      	add	r4, sp, #44	; 0x2c
 8026d88:	7022      	strb	r2, [r4, #0]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8026d8a:	3220      	adds	r2, #32
 8026d8c:	4011      	ands	r1, r2
 8026d8e:	4213      	tst	r3, r2
 8026d90:	d146      	bne.n	8026e20 <ProcessMacCommands.constprop.0+0x3a0>
                txParamSetupReq.DownlinkDwellTime = 0;
 8026d92:	7061      	strb	r1, [r4, #1]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8026d94:	06da      	lsls	r2, r3, #27
 8026d96:	d501      	bpl.n	8026d9c <ProcessMacCommands.constprop.0+0x31c>
                    txParamSetupReq.UplinkDwellTime = 1;
 8026d98:	2201      	movs	r2, #1
 8026d9a:	7022      	strb	r2, [r4, #0]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8026d9c:	220f      	movs	r2, #15
 8026d9e:	4013      	ands	r3, r2
 8026da0:	70a3      	strb	r3, [r4, #2]
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8026da2:	4e39      	ldr	r6, [pc, #228]	; (8026e88 <ProcessMacCommands.constprop.0+0x408>)
 8026da4:	4b36      	ldr	r3, [pc, #216]	; (8026e80 <ProcessMacCommands.constprop.0+0x400>)
 8026da6:	0021      	movs	r1, r4
 8026da8:	599b      	ldr	r3, [r3, r6]
 8026daa:	7818      	ldrb	r0, [r3, #0]
 8026dac:	9304      	str	r3, [sp, #16]
 8026dae:	f009 f886 	bl	802febe <RegionTxParamSetupReq>
 8026db2:	1c43      	adds	r3, r0, #1
 8026db4:	d032      	beq.n	8026e1c <ProcessMacCommands.constprop.0+0x39c>
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8026db6:	4b32      	ldr	r3, [pc, #200]	; (8026e80 <ProcessMacCommands.constprop.0+0x400>)
 8026db8:	599d      	ldr	r5, [r3, r6]
 8026dba:	7823      	ldrb	r3, [r4, #0]
 8026dbc:	9304      	str	r3, [sp, #16]
 8026dbe:	002b      	movs	r3, r5
 8026dc0:	9a04      	ldr	r2, [sp, #16]
 8026dc2:	33b8      	adds	r3, #184	; 0xb8
 8026dc4:	701a      	strb	r2, [r3, #0]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8026dc6:	7862      	ldrb	r2, [r4, #1]
 8026dc8:	705a      	strb	r2, [r3, #1]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8026dca:	3304      	adds	r3, #4
 8026dcc:	9307      	str	r3, [sp, #28]
 8026dce:	78a3      	ldrb	r3, [r4, #2]
 8026dd0:	4a2f      	ldr	r2, [pc, #188]	; (8026e90 <ProcessMacCommands.constprop.0+0x410>)
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 8026dd2:	2400      	movs	r4, #0
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8026dd4:	5cd0      	ldrb	r0, [r2, r3]
 8026dd6:	f7fa faf5 	bl	80213c4 <__aeabi_ui2f>
 8026dda:	9b07      	ldr	r3, [sp, #28]
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8026ddc:	2128      	movs	r1, #40	; 0x28
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8026dde:	6018      	str	r0, [r3, #0]
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8026de0:	2302      	movs	r3, #2
 8026de2:	aa06      	add	r2, sp, #24
 8026de4:	1852      	adds	r2, r2, r1
 8026de6:	7013      	strb	r3, [r2, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8026de8:	222a      	movs	r2, #42	; 0x2a
 8026dea:	ab06      	add	r3, sp, #24
 8026dec:	189b      	adds	r3, r3, r2
 8026dee:	9a04      	ldr	r2, [sp, #16]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8026df0:	a910      	add	r1, sp, #64	; 0x40
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8026df2:	701a      	strb	r2, [r3, #0]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8026df4:	7828      	ldrb	r0, [r5, #0]
 8026df6:	f008 ffd9 	bl	802fdac <RegionGetPhyParam>
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 8026dfa:	4b21      	ldr	r3, [pc, #132]	; (8026e80 <ProcessMacCommands.constprop.0+0x400>)
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8026dfc:	900c      	str	r0, [sp, #48]	; 0x30
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 8026dfe:	599b      	ldr	r3, [r3, r6]
 8026e00:	1c02      	adds	r2, r0, #0
 8026e02:	3385      	adds	r3, #133	; 0x85
 8026e04:	571c      	ldrsb	r4, [r3, r4]
 8026e06:	b240      	sxtb	r0, r0
 8026e08:	7819      	ldrb	r1, [r3, #0]
 8026e0a:	42a0      	cmp	r0, r4
 8026e0c:	da00      	bge.n	8026e10 <ProcessMacCommands.constprop.0+0x390>
 8026e0e:	1c0a      	adds	r2, r1, #0
 8026e10:	701a      	strb	r2, [r3, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8026e12:	2009      	movs	r0, #9
 8026e14:	2200      	movs	r2, #0
 8026e16:	a90a      	add	r1, sp, #40	; 0x28
 8026e18:	f002 ff8a 	bl	8029d30 <LoRaMacCommandsAddCmd>
                uint8_t eirpDwellTime = payload[macIndex++];
 8026e1c:	9d05      	ldr	r5, [sp, #20]
 8026e1e:	e679      	b.n	8026b14 <ProcessMacCommands.constprop.0+0x94>
                    txParamSetupReq.DownlinkDwellTime = 1;
 8026e20:	2201      	movs	r2, #1
 8026e22:	7062      	strb	r2, [r4, #1]
 8026e24:	e7b6      	b.n	8026d94 <ProcessMacCommands.constprop.0+0x314>
                status = 0x03;
 8026e26:	260d      	movs	r6, #13
 8026e28:	ab06      	add	r3, sp, #24
 8026e2a:	18f6      	adds	r6, r6, r3
 8026e2c:	2303      	movs	r3, #3
 8026e2e:	7033      	strb	r3, [r6, #0]
                dlChannelReq.ChannelId = payload[macIndex++];
 8026e30:	5d7b      	ldrb	r3, [r7, r5]
 8026e32:	a910      	add	r1, sp, #64	; 0x40
 8026e34:	700b      	strb	r3, [r1, #0]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8026e36:	1d22      	adds	r2, r4, #4
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8026e38:	1ce3      	adds	r3, r4, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8026e3a:	b2db      	uxtb	r3, r3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8026e3c:	b2d2      	uxtb	r2, r2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8026e3e:	5cfb      	ldrb	r3, [r7, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8026e40:	5cba      	ldrb	r2, [r7, r2]
 8026e42:	1d65      	adds	r5, r4, #5
                dlChannelReq.ChannelId = payload[macIndex++];
 8026e44:	3402      	adds	r4, #2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8026e46:	0412      	lsls	r2, r2, #16
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8026e48:	b2e4      	uxtb	r4, r4
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8026e4a:	021b      	lsls	r3, r3, #8
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8026e4c:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8026e4e:	5d3a      	ldrb	r2, [r7, r4]
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8026e50:	4c0b      	ldr	r4, [pc, #44]	; (8026e80 <ProcessMacCommands.constprop.0+0x400>)
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8026e52:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
 8026e54:	2264      	movs	r2, #100	; 0x64
 8026e56:	4353      	muls	r3, r2
 8026e58:	604b      	str	r3, [r1, #4]
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8026e5a:	4b0b      	ldr	r3, [pc, #44]	; (8026e88 <ProcessMacCommands.constprop.0+0x408>)
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8026e5c:	b2ed      	uxtb	r5, r5
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8026e5e:	58e3      	ldr	r3, [r4, r3]
 8026e60:	7818      	ldrb	r0, [r3, #0]
 8026e62:	f009 f836 	bl	802fed2 <RegionDlChannelReq>
                macCmdPayload[0] = status;
 8026e66:	a90a      	add	r1, sp, #40	; 0x28
 8026e68:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8026e6a:	2201      	movs	r2, #1
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8026e6c:	7030      	strb	r0, [r6, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8026e6e:	200a      	movs	r0, #10
 8026e70:	f002 ff5e 	bl	8029d30 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8026e74:	2310      	movs	r3, #16
 8026e76:	4a05      	ldr	r2, [pc, #20]	; (8026e8c <ProcessMacCommands.constprop.0+0x40c>)
 8026e78:	5ca1      	ldrb	r1, [r4, r2]
 8026e7a:	430b      	orrs	r3, r1
 8026e7c:	54a3      	strb	r3, [r4, r2]
                break;
 8026e7e:	e649      	b.n	8026b14 <ProcessMacCommands.constprop.0+0x94>
 8026e80:	200088e8 	.word	0x200088e8
 8026e84:	00000459 	.word	0x00000459
 8026e88:	00000484 	.word	0x00000484
 8026e8c:	00000481 	.word	0x00000481
 8026e90:	08031de7 	.word	0x08031de7
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8026e94:	200a      	movs	r0, #10
 8026e96:	f003 f90d 	bl	802a0b4 <LoRaMacConfirmQueueIsCmdActive>
 8026e9a:	2800      	cmp	r0, #0
 8026e9c:	d100      	bne.n	8026ea0 <ProcessMacCommands.constprop.0+0x420>
 8026e9e:	e639      	b.n	8026b14 <ProcessMacCommands.constprop.0+0x94>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8026ea0:	210a      	movs	r1, #10
 8026ea2:	2000      	movs	r0, #0
 8026ea4:	f003 f8c4 	bl	802a030 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t sysTime = { 0 };
 8026ea8:	231e      	movs	r3, #30
 8026eaa:	aa06      	add	r2, sp, #24
 8026eac:	189b      	adds	r3, r3, r2
 8026eae:	2200      	movs	r2, #0
 8026eb0:	801a      	strh	r2, [r3, #0]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8026eb2:	1ca3      	adds	r3, r4, #2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8026eb4:	b2db      	uxtb	r3, r3
 8026eb6:	5cfe      	ldrb	r6, [r7, r3]
 8026eb8:	1ce3      	adds	r3, r4, #3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8026eba:	b2db      	uxtb	r3, r3
 8026ebc:	5cf9      	ldrb	r1, [r7, r3]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8026ebe:	0236      	lsls	r6, r6, #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8026ec0:	0409      	lsls	r1, r1, #16
 8026ec2:	430e      	orrs	r6, r1
 8026ec4:	1d23      	adds	r3, r4, #4
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8026ec6:	5d79      	ldrb	r1, [r7, r5]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8026ec8:	b2db      	uxtb	r3, r3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8026eca:	430e      	orrs	r6, r1
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8026ecc:	5cf9      	ldrb	r1, [r7, r3]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8026ece:	23fa      	movs	r3, #250	; 0xfa
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8026ed0:	1da5      	adds	r5, r4, #6
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8026ed2:	3405      	adds	r4, #5
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8026ed4:	b2e4      	uxtb	r4, r4
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8026ed6:	5d3a      	ldrb	r2, [r7, r4]
 8026ed8:	009b      	lsls	r3, r3, #2
 8026eda:	4353      	muls	r3, r2
                    sysTime = gpsEpochTime;
 8026edc:	aa06      	add	r2, sp, #24
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8026ede:	121b      	asrs	r3, r3, #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8026ee0:	0609      	lsls	r1, r1, #24
                    sysTime = gpsEpochTime;
 8026ee2:	8393      	strh	r3, [r2, #28]
                    sysTimeCurrent = SysTimeGet( );
 8026ee4:	a810      	add	r0, sp, #64	; 0x40
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8026ee6:	430e      	orrs	r6, r1
                    sysTimeCurrent = SysTimeGet( );
 8026ee8:	f7fc ff24 	bl	8023d34 <SysTimeGet>
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8026eec:	4b41      	ldr	r3, [pc, #260]	; (8026ff4 <ProcessMacCommands.constprop.0+0x574>)
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8026eee:	4c42      	ldr	r4, [pc, #264]	; (8026ff8 <ProcessMacCommands.constprop.0+0x578>)
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8026ef0:	18f1      	adds	r1, r6, r3
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8026ef2:	23cf      	movs	r3, #207	; 0xcf
 8026ef4:	009b      	lsls	r3, r3, #2
 8026ef6:	18e3      	adds	r3, r4, r3
 8026ef8:	681b      	ldr	r3, [r3, #0]
 8026efa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8026efc:	9300      	str	r3, [sp, #0]
 8026efe:	23ce      	movs	r3, #206	; 0xce
 8026f00:	009b      	lsls	r3, r3, #2
 8026f02:	58e3      	ldr	r3, [r4, r3]
 8026f04:	a80e      	add	r0, sp, #56	; 0x38
 8026f06:	910c      	str	r1, [sp, #48]	; 0x30
 8026f08:	f008 f851 	bl	802efae <SysTimeSub>
 8026f0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026f0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8026f10:	9910      	ldr	r1, [sp, #64]	; 0x40
 8026f12:	9300      	str	r3, [sp, #0]
 8026f14:	a80c      	add	r0, sp, #48	; 0x30
 8026f16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026f18:	f7fc fef4 	bl	8023d04 <SysTimeAdd>
                    SysTimeSet( sysTime );
 8026f1c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8026f1e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8026f20:	f008 f85a 	bl	802efd8 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8026f24:	f002 fabc 	bl	80294a0 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8026f28:	2387      	movs	r3, #135	; 0x87
 8026f2a:	2201      	movs	r2, #1
 8026f2c:	00db      	lsls	r3, r3, #3
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8026f2e:	b2ed      	uxtb	r5, r5
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8026f30:	54e2      	strb	r2, [r4, r3]
 8026f32:	e5ef      	b.n	8026b14 <ProcessMacCommands.constprop.0+0x94>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8026f34:	200d      	movs	r0, #13
 8026f36:	f003 f8bd 	bl	802a0b4 <LoRaMacConfirmQueueIsCmdActive>
 8026f3a:	2800      	cmp	r0, #0
 8026f3c:	d100      	bne.n	8026f40 <ProcessMacCommands.constprop.0+0x4c0>
 8026f3e:	e5e9      	b.n	8026b14 <ProcessMacCommands.constprop.0+0x94>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8026f40:	210d      	movs	r1, #13
 8026f42:	2000      	movs	r0, #0
 8026f44:	f003 f874 	bl	802a030 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8026f48:	2390      	movs	r3, #144	; 0x90
 8026f4a:	4a2b      	ldr	r2, [pc, #172]	; (8026ff8 <ProcessMacCommands.constprop.0+0x578>)
 8026f4c:	00db      	lsls	r3, r3, #3
 8026f4e:	5cd3      	ldrb	r3, [r2, r3]
 8026f50:	3b04      	subs	r3, #4
 8026f52:	2b01      	cmp	r3, #1
 8026f54:	d800      	bhi.n	8026f58 <ProcessMacCommands.constprop.0+0x4d8>
 8026f56:	e5dd      	b.n	8026b14 <ProcessMacCommands.constprop.0+0x94>
                        LoRaMacClassBPingSlotInfoAns( );
 8026f58:	f002 fa0c 	bl	8029374 <LoRaMacClassBPingSlotInfoAns>
 8026f5c:	e5da      	b.n	8026b14 <ProcessMacCommands.constprop.0+0x94>
                frequency = ( uint32_t )payload[macIndex++];
 8026f5e:	1ca3      	adds	r3, r4, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8026f60:	b2db      	uxtb	r3, r3
 8026f62:	5cf9      	ldrb	r1, [r7, r3]
 8026f64:	1ce3      	adds	r3, r4, #3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8026f66:	b2db      	uxtb	r3, r3
 8026f68:	5cfb      	ldrb	r3, [r7, r3]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8026f6a:	0209      	lsls	r1, r1, #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8026f6c:	041b      	lsls	r3, r3, #16
 8026f6e:	4319      	orrs	r1, r3
                frequency *= 100;
 8026f70:	2364      	movs	r3, #100	; 0x64
                frequency = ( uint32_t )payload[macIndex++];
 8026f72:	5d7a      	ldrb	r2, [r7, r5]
                datarate = payload[macIndex++] & 0x0F;
 8026f74:	1d65      	adds	r5, r4, #5
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8026f76:	3404      	adds	r4, #4
                datarate = payload[macIndex++] & 0x0F;
 8026f78:	b2e4      	uxtb	r4, r4
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8026f7a:	4311      	orrs	r1, r2
                datarate = payload[macIndex++] & 0x0F;
 8026f7c:	5d38      	ldrb	r0, [r7, r4]
                frequency *= 100;
 8026f7e:	4359      	muls	r1, r3
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8026f80:	3b55      	subs	r3, #85	; 0x55
 8026f82:	4018      	ands	r0, r3
 8026f84:	f002 fa0c 	bl	80293a0 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8026f88:	a90a      	add	r1, sp, #40	; 0x28
 8026f8a:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8026f8c:	2201      	movs	r2, #1
 8026f8e:	2011      	movs	r0, #17
                datarate = payload[macIndex++] & 0x0F;
 8026f90:	b2ed      	uxtb	r5, r5
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8026f92:	e69d      	b.n	8026cd0 <ProcessMacCommands.constprop.0+0x250>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8026f94:	200e      	movs	r0, #14
 8026f96:	f003 f88d 	bl	802a0b4 <LoRaMacConfirmQueueIsCmdActive>
 8026f9a:	2800      	cmp	r0, #0
 8026f9c:	d100      	bne.n	8026fa0 <ProcessMacCommands.constprop.0+0x520>
 8026f9e:	e5b9      	b.n	8026b14 <ProcessMacCommands.constprop.0+0x94>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8026fa0:	210e      	movs	r1, #14
 8026fa2:	2000      	movs	r0, #0
 8026fa4:	f003 f844 	bl	802a030 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8026fa8:	1ca3      	adds	r3, r4, #2
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8026faa:	b2db      	uxtb	r3, r3
 8026fac:	5cf8      	ldrb	r0, [r7, r3]
 8026fae:	5d7b      	ldrb	r3, [r7, r5]
 8026fb0:	0200      	lsls	r0, r0, #8
 8026fb2:	4318      	orrs	r0, r3
                    beaconTimingChannel = payload[macIndex++];
 8026fb4:	1d25      	adds	r5, r4, #4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8026fb6:	4b11      	ldr	r3, [pc, #68]	; (8026ffc <ProcessMacCommands.constprop.0+0x57c>)
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8026fb8:	3403      	adds	r4, #3
                    beaconTimingChannel = payload[macIndex++];
 8026fba:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8026fbc:	5d39      	ldrb	r1, [r7, r4]
 8026fbe:	681a      	ldr	r2, [r3, #0]
                    beaconTimingChannel = payload[macIndex++];
 8026fc0:	b2ed      	uxtb	r5, r5
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8026fc2:	f002 fa37 	bl	8029434 <LoRaMacClassBBeaconTimingAns>
 8026fc6:	e5a5      	b.n	8026b14 <ProcessMacCommands.constprop.0+0x94>
                    frequency = ( uint32_t )payload[macIndex++];
 8026fc8:	5d7a      	ldrb	r2, [r7, r5]
 8026fca:	1ca3      	adds	r3, r4, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8026fcc:	1d25      	adds	r5, r4, #4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8026fce:	3403      	adds	r4, #3
 8026fd0:	b2db      	uxtb	r3, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8026fd2:	b2e4      	uxtb	r4, r4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8026fd4:	5cf8      	ldrb	r0, [r7, r3]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8026fd6:	5d3b      	ldrb	r3, [r7, r4]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8026fd8:	0200      	lsls	r0, r0, #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8026fda:	041b      	lsls	r3, r3, #16
 8026fdc:	4318      	orrs	r0, r3
                    frequency *= 100;
 8026fde:	2364      	movs	r3, #100	; 0x64
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8026fe0:	4310      	orrs	r0, r2
                    frequency *= 100;
 8026fe2:	4358      	muls	r0, r3
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8026fe4:	f002 fab0 	bl	8029548 <LoRaMacClassBBeaconFreqReq>
 8026fe8:	a90a      	add	r1, sp, #40	; 0x28
 8026fea:	7008      	strb	r0, [r1, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8026fec:	2201      	movs	r2, #1
 8026fee:	2013      	movs	r0, #19
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8026ff0:	b2ed      	uxtb	r5, r5
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8026ff2:	e66d      	b.n	8026cd0 <ProcessMacCommands.constprop.0+0x250>
 8026ff4:	12d53d80 	.word	0x12d53d80
 8026ff8:	200088e8 	.word	0x200088e8
 8026ffc:	20008ee0 	.word	0x20008ee0

08027000 <StopRetransmission.isra.0>:
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8027000:	4b10      	ldr	r3, [pc, #64]	; (8027044 <StopRetransmission.isra.0+0x44>)
 8027002:	4a11      	ldr	r2, [pc, #68]	; (8027048 <StopRetransmission.isra.0+0x48>)
 8027004:	5c9a      	ldrb	r2, [r3, r2]
 8027006:	0792      	lsls	r2, r2, #30
 8027008:	d503      	bpl.n	8027012 <StopRetransmission.isra.0+0x12>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 802700a:	4a10      	ldr	r2, [pc, #64]	; (802704c <StopRetransmission.isra.0+0x4c>)
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 802700c:	5c9a      	ldrb	r2, [r3, r2]
 802700e:	2a01      	cmp	r2, #1
 8027010:	d90a      	bls.n	8027028 <StopRetransmission.isra.0+0x28>
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 8027012:	4a0f      	ldr	r2, [pc, #60]	; (8027050 <StopRetransmission.isra.0+0x50>)
 8027014:	589a      	ldr	r2, [r3, r2]
 8027016:	0011      	movs	r1, r2
 8027018:	317e      	adds	r1, #126	; 0x7e
 802701a:	7809      	ldrb	r1, [r1, #0]
 802701c:	2900      	cmp	r1, #0
 802701e:	d003      	beq.n	8027028 <StopRetransmission.isra.0+0x28>
            MacCtx.NvmCtx->AdrAckCounter++;
 8027020:	3204      	adds	r2, #4
 8027022:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
 8027024:	3101      	adds	r1, #1
 8027026:	67d1      	str	r1, [r2, #124]	; 0x7c
    MacCtx.ChannelsNbTransCounter = 0;
 8027028:	2182      	movs	r1, #130	; 0x82
 802702a:	2200      	movs	r2, #0
 802702c:	00c9      	lsls	r1, r1, #3
 802702e:	545a      	strb	r2, [r3, r1]
    MacCtx.NodeAckRequested = false;
 8027030:	4908      	ldr	r1, [pc, #32]	; (8027054 <StopRetransmission.isra.0+0x54>)
 8027032:	545a      	strb	r2, [r3, r1]
    MacCtx.AckTimeoutRetry = false;
 8027034:	4908      	ldr	r1, [pc, #32]	; (8027058 <StopRetransmission.isra.0+0x58>)
 8027036:	545a      	strb	r2, [r3, r1]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8027038:	39d3      	subs	r1, #211	; 0xd3
 802703a:	5858      	ldr	r0, [r3, r1]
 802703c:	3202      	adds	r2, #2
 802703e:	4390      	bics	r0, r2
 8027040:	5058      	str	r0, [r3, r1]
}
 8027042:	4770      	bx	lr
 8027044:	200088e8 	.word	0x200088e8
 8027048:	00000481 	.word	0x00000481
 802704c:	0000042d 	.word	0x0000042d
 8027050:	00000484 	.word	0x00000484
 8027054:	00000414 	.word	0x00000414
 8027058:	00000413 	.word	0x00000413

0802705c <OnTxDelayedTimerEvent>:
{
 802705c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 802705e:	4811      	ldr	r0, [pc, #68]	; (80270a4 <OnTxDelayedTimerEvent+0x48>)
 8027060:	f7fc ff40 	bl	8023ee4 <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8027064:	22d0      	movs	r2, #208	; 0xd0
 8027066:	2320      	movs	r3, #32
 8027068:	4c0f      	ldr	r4, [pc, #60]	; (80270a8 <OnTxDelayedTimerEvent+0x4c>)
 802706a:	0092      	lsls	r2, r2, #2
 802706c:	58a1      	ldr	r1, [r4, r2]
    switch( ScheduleTx( true ) )
 802706e:	2001      	movs	r0, #1
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8027070:	4399      	bics	r1, r3
 8027072:	50a1      	str	r1, [r4, r2]
    switch( ScheduleTx( true ) )
 8027074:	f7ff faaa 	bl	80265cc <ScheduleTx>
 8027078:	2800      	cmp	r0, #0
 802707a:	d012      	beq.n	80270a2 <OnTxDelayedTimerEvent+0x46>
 802707c:	280b      	cmp	r0, #11
 802707e:	d010      	beq.n	80270a2 <OnTxDelayedTimerEvent+0x46>
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8027080:	2009      	movs	r0, #9
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8027082:	4b0a      	ldr	r3, [pc, #40]	; (80270ac <OnTxDelayedTimerEvent+0x50>)
 8027084:	58e3      	ldr	r3, [r4, r3]
 8027086:	3385      	adds	r3, #133	; 0x85
 8027088:	781a      	ldrb	r2, [r3, #0]
 802708a:	4b09      	ldr	r3, [pc, #36]	; (80270b0 <OnTxDelayedTimerEvent+0x54>)
 802708c:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 802708e:	4b09      	ldr	r3, [pc, #36]	; (80270b4 <OnTxDelayedTimerEvent+0x58>)
 8027090:	5ce2      	ldrb	r2, [r4, r3]
 8027092:	4b09      	ldr	r3, [pc, #36]	; (80270b8 <OnTxDelayedTimerEvent+0x5c>)
 8027094:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8027096:	4b09      	ldr	r3, [pc, #36]	; (80270bc <OnTxDelayedTimerEvent+0x60>)
 8027098:	54e0      	strb	r0, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 802709a:	f002 ffef 	bl	802a07c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 802709e:	f7ff ffaf 	bl	8027000 <StopRetransmission.isra.0>
}
 80270a2:	bd10      	pop	{r4, pc}
 80270a4:	20008c50 	.word	0x20008c50
 80270a8:	200088e8 	.word	0x200088e8
 80270ac:	00000484 	.word	0x00000484
 80270b0:	0000043e 	.word	0x0000043e
 80270b4:	00000412 	.word	0x00000412
 80270b8:	00000441 	.word	0x00000441
 80270bc:	0000043d 	.word	0x0000043d

080270c0 <LoRaMacIsBusy>:
}

/* Exported functions ---------------------------------------------------------*/
bool LoRaMacIsBusy( void )
{
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80270c0:	22d0      	movs	r2, #208	; 0xd0
 80270c2:	4b06      	ldr	r3, [pc, #24]	; (80270dc <LoRaMacIsBusy+0x1c>)
 80270c4:	0092      	lsls	r2, r2, #2
 80270c6:	589a      	ldr	r2, [r3, r2]
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
    {
        return false;
    }
    return true;
 80270c8:	2001      	movs	r0, #1
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80270ca:	2a00      	cmp	r2, #0
 80270cc:	d105      	bne.n	80270da <LoRaMacIsBusy+0x1a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 80270ce:	4a04      	ldr	r2, [pc, #16]	; (80270e0 <LoRaMacIsBusy+0x20>)
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80270d0:	5c98      	ldrb	r0, [r3, r2]
 80270d2:	3801      	subs	r0, #1
 80270d4:	1e43      	subs	r3, r0, #1
 80270d6:	4198      	sbcs	r0, r3
 80270d8:	b2c0      	uxtb	r0, r0
}
 80270da:	4770      	bx	lr
 80270dc:	200088e8 	.word	0x200088e8
 80270e0:	00000482 	.word	0x00000482

080270e4 <LoRaMacProcess>:

void LoRaMacProcess( void )
{
 80270e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80270e6:	b0ab      	sub	sp, #172	; 0xac
	__asm__ volatile("mrs %0, PRIMASK;"
 80270e8:	f3ef 8110 	mrs	r1, PRIMASK
 80270ec:	b672      	cpsid	i
    LoRaMacRadioEvents.Value = 0;
 80270ee:	2000      	movs	r0, #0
    events = LoRaMacRadioEvents;
 80270f0:	4acf      	ldr	r2, [pc, #828]	; (8027430 <LoRaMacProcess+0x34c>)
 80270f2:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 80270f4:	6010      	str	r0, [r2, #0]
	if (key != 0U) {
 80270f6:	4281      	cmp	r1, r0
 80270f8:	d102      	bne.n	8027100 <LoRaMacProcess+0x1c>
	__asm__ volatile(
 80270fa:	b662      	cpsie	i
 80270fc:	f3bf 8f6f 	isb	sy
    if( events.Value != 0 )
 8027100:	2b00      	cmp	r3, #0
 8027102:	d100      	bne.n	8027106 <LoRaMacProcess+0x22>
 8027104:	e0e9      	b.n	80272da <LoRaMacProcess+0x1f6>
        if( events.Events.TxDone == 1 )
 8027106:	b2da      	uxtb	r2, r3
 8027108:	9206      	str	r2, [sp, #24]
 802710a:	06db      	lsls	r3, r3, #27
 802710c:	d571      	bpl.n	80271f2 <LoRaMacProcess+0x10e>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 802710e:	4cc9      	ldr	r4, [pc, #804]	; (8027434 <LoRaMacProcess+0x350>)
 8027110:	4ec9      	ldr	r6, [pc, #804]	; (8027438 <LoRaMacProcess+0x354>)
 8027112:	59a3      	ldr	r3, [r4, r6]
 8027114:	337c      	adds	r3, #124	; 0x7c
 8027116:	781b      	ldrb	r3, [r3, #0]
 8027118:	2b02      	cmp	r3, #2
 802711a:	d003      	beq.n	8027124 <LoRaMacProcess+0x40>
        Radio.Sleep( );
 802711c:	4bc7      	ldr	r3, [pc, #796]	; (802743c <LoRaMacProcess+0x358>)
 802711e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027120:	9303      	str	r3, [sp, #12]
 8027122:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8027124:	23ec      	movs	r3, #236	; 0xec
 8027126:	4dc6      	ldr	r5, [pc, #792]	; (8027440 <LoRaMacProcess+0x35c>)
 8027128:	009b      	lsls	r3, r3, #2
 802712a:	58e1      	ldr	r1, [r4, r3]
 802712c:	0028      	movs	r0, r5
 802712e:	f007 ffb8 	bl	802f0a2 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8027132:	0028      	movs	r0, r5
 8027134:	f7fc fe5c 	bl	8023df0 <TimerStart>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 8027138:	23ed      	movs	r3, #237	; 0xed
 802713a:	4dc2      	ldr	r5, [pc, #776]	; (8027444 <LoRaMacProcess+0x360>)
 802713c:	009b      	lsls	r3, r3, #2
 802713e:	58e1      	ldr	r1, [r4, r3]
 8027140:	0028      	movs	r0, r5
 8027142:	f007 ffae 	bl	802f0a2 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8027146:	0028      	movs	r0, r5
 8027148:	f7fc fe52 	bl	8023df0 <TimerStart>
    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 802714c:	59a3      	ldr	r3, [r4, r6]
 802714e:	001a      	movs	r2, r3
 8027150:	327c      	adds	r2, #124	; 0x7c
 8027152:	7812      	ldrb	r2, [r2, #0]
 8027154:	2a02      	cmp	r2, #2
 8027156:	d003      	beq.n	8027160 <LoRaMacProcess+0x7c>
 8027158:	4abb      	ldr	r2, [pc, #748]	; (8027448 <LoRaMacProcess+0x364>)
 802715a:	5ca2      	ldrb	r2, [r4, r2]
 802715c:	2a00      	cmp	r2, #0
 802715e:	d011      	beq.n	8027184 <LoRaMacProcess+0xa0>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8027160:	2216      	movs	r2, #22
 8027162:	a914      	add	r1, sp, #80	; 0x50
 8027164:	700a      	strb	r2, [r1, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027166:	7818      	ldrb	r0, [r3, #0]
 8027168:	f008 fe20 	bl	802fdac <RegionGetPhyParam>
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 802716c:	23ed      	movs	r3, #237	; 0xed
 802716e:	009b      	lsls	r3, r3, #2
 8027170:	4db6      	ldr	r5, [pc, #728]	; (802744c <LoRaMacProcess+0x368>)
 8027172:	58e1      	ldr	r1, [r4, r3]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027174:	9012      	str	r0, [sp, #72]	; 0x48
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8027176:	1809      	adds	r1, r1, r0
 8027178:	0028      	movs	r0, r5
 802717a:	f007 ff92 	bl	802f0a2 <TimerSetValue>
        TimerStart( &MacCtx.AckTimeoutTimer );
 802717e:	0028      	movs	r0, r5
 8027180:	f7fc fe36 	bl	8023df0 <TimerStart>
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 8027184:	4bb2      	ldr	r3, [pc, #712]	; (8027450 <LoRaMacProcess+0x36c>)
    txDone.Channel = MacCtx.Channel;
 8027186:	ad1e      	add	r5, sp, #120	; 0x78
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 8027188:	681a      	ldr	r2, [r3, #0]
 802718a:	59a3      	ldr	r3, [r4, r6]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 802718c:	a810      	add	r0, sp, #64	; 0x40
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 802718e:	33fc      	adds	r3, #252	; 0xfc
 8027190:	655a      	str	r2, [r3, #84]	; 0x54
    txDone.Channel = MacCtx.Channel;
 8027192:	4bb0      	ldr	r3, [pc, #704]	; (8027454 <LoRaMacProcess+0x370>)
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 8027194:	af0a      	add	r7, sp, #40	; 0x28
    txDone.Channel = MacCtx.Channel;
 8027196:	5ce3      	ldrb	r3, [r4, r3]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8027198:	606a      	str	r2, [r5, #4]
    txDone.Channel = MacCtx.Channel;
 802719a:	702b      	strb	r3, [r5, #0]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 802719c:	f007 ff38 	bl	802f010 <SysTimeGetMcuTime>
 80271a0:	59a3      	ldr	r3, [r4, r6]
 80271a2:	0038      	movs	r0, r7
 80271a4:	001a      	movs	r2, r3
 80271a6:	325d      	adds	r2, #93	; 0x5d
 80271a8:	32ff      	adds	r2, #255	; 0xff
 80271aa:	6812      	ldr	r2, [r2, #0]
 80271ac:	9910      	ldr	r1, [sp, #64]	; 0x40
 80271ae:	9200      	str	r2, [sp, #0]
 80271b0:	22ac      	movs	r2, #172	; 0xac
 80271b2:	0052      	lsls	r2, r2, #1
 80271b4:	589b      	ldr	r3, [r3, r2]
 80271b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80271b8:	f007 fef9 	bl	802efae <SysTimeSub>
 80271bc:	ab21      	add	r3, sp, #132	; 0x84
 80271be:	cf06      	ldmia	r7!, {r1, r2}
 80271c0:	c306      	stmia	r3!, {r1, r2}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 80271c2:	2383      	movs	r3, #131	; 0x83
 80271c4:	00db      	lsls	r3, r3, #3
 80271c6:	58e3      	ldr	r3, [r4, r3]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 80271c8:	22b2      	movs	r2, #178	; 0xb2
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 80271ca:	60ab      	str	r3, [r5, #8]
    txDone.Joined  = true;
 80271cc:	2301      	movs	r3, #1
 80271ce:	706b      	strb	r3, [r5, #1]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 80271d0:	59a3      	ldr	r3, [r4, r6]
 80271d2:	0052      	lsls	r2, r2, #1
 80271d4:	5c9a      	ldrb	r2, [r3, r2]
 80271d6:	2a00      	cmp	r2, #0
 80271d8:	d100      	bne.n	80271dc <LoRaMacProcess+0xf8>
        txDone.Joined  = false;
 80271da:	706a      	strb	r2, [r5, #1]
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 80271dc:	7818      	ldrb	r0, [r3, #0]
 80271de:	0029      	movs	r1, r5
 80271e0:	f008 fdf0 	bl	802fdc4 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 80271e4:	4b93      	ldr	r3, [pc, #588]	; (8027434 <LoRaMacProcess+0x350>)
 80271e6:	4a98      	ldr	r2, [pc, #608]	; (8027448 <LoRaMacProcess+0x364>)
 80271e8:	5c9a      	ldrb	r2, [r3, r2]
 80271ea:	2a00      	cmp	r2, #0
 80271ec:	d101      	bne.n	80271f2 <LoRaMacProcess+0x10e>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80271ee:	499a      	ldr	r1, [pc, #616]	; (8027458 <LoRaMacProcess+0x374>)
 80271f0:	545a      	strb	r2, [r3, r1]
        if( events.Events.RxDone == 1 )
 80271f2:	9b06      	ldr	r3, [sp, #24]
 80271f4:	071b      	lsls	r3, r3, #28
 80271f6:	d541      	bpl.n	802727c <LoRaMacProcess+0x198>
    uint8_t *payload = RxDoneParams.Payload;
 80271f8:	4b98      	ldr	r3, [pc, #608]	; (802745c <LoRaMacProcess+0x378>)
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 80271fa:	4c8e      	ldr	r4, [pc, #568]	; (8027434 <LoRaMacProcess+0x350>)
    uint8_t *payload = RxDoneParams.Payload;
 80271fc:	685a      	ldr	r2, [r3, #4]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 80271fe:	4e8e      	ldr	r6, [pc, #568]	; (8027438 <LoRaMacProcess+0x354>)
    uint8_t *payload = RxDoneParams.Payload;
 8027200:	9203      	str	r2, [sp, #12]
    int16_t rssi = RxDoneParams.Rssi;
 8027202:	220a      	movs	r2, #10
 8027204:	5e9d      	ldrsh	r5, [r3, r2]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8027206:	59a2      	ldr	r2, [r4, r6]
    uint16_t size = RxDoneParams.Size;
 8027208:	891f      	ldrh	r7, [r3, #8]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 802720a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    int8_t snr = RxDoneParams.Snr;
 802720c:	7b1b      	ldrb	r3, [r3, #12]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 802720e:	9208      	str	r2, [sp, #32]
    int8_t snr = RxDoneParams.Snr;
 8027210:	b25b      	sxtb	r3, r3
    MacCtx.McpsConfirm.AckReceived = false;
 8027212:	2288      	movs	r2, #136	; 0x88
    int8_t snr = RxDoneParams.Snr;
 8027214:	9304      	str	r3, [sp, #16]
    uint32_t downLinkCounter = 0;
 8027216:	2300      	movs	r3, #0
    MacCtx.McpsConfirm.AckReceived = false;
 8027218:	00d2      	lsls	r2, r2, #3
 802721a:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.Rssi = rssi;
 802721c:	4a90      	ldr	r2, [pc, #576]	; (8027460 <LoRaMacProcess+0x37c>)
    MacCtx.McpsIndication.Snr = snr;
 802721e:	9904      	ldr	r1, [sp, #16]
    MacCtx.McpsIndication.Rssi = rssi;
 8027220:	52a5      	strh	r5, [r4, r2]
    MacCtx.McpsIndication.Snr = snr;
 8027222:	4a90      	ldr	r2, [pc, #576]	; (8027464 <LoRaMacProcess+0x380>)
    uint32_t downLinkCounter = 0;
 8027224:	930d      	str	r3, [sp, #52]	; 0x34
    MacCtx.McpsIndication.Snr = snr;
 8027226:	54a1      	strb	r1, [r4, r2]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 8027228:	3254      	adds	r2, #84	; 0x54
 802722a:	5ca2      	ldrb	r2, [r4, r2]
 802722c:	498e      	ldr	r1, [pc, #568]	; (8027468 <LoRaMacProcess+0x384>)
 802722e:	5462      	strb	r2, [r4, r1]
    MacCtx.McpsIndication.Multicast = 0;
 8027230:	4a8e      	ldr	r2, [pc, #568]	; (802746c <LoRaMacProcess+0x388>)
 8027232:	52a3      	strh	r3, [r4, r2]
    MacCtx.McpsIndication.FramePending = 0;
 8027234:	4a8e      	ldr	r2, [pc, #568]	; (8027470 <LoRaMacProcess+0x38c>)
 8027236:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 8027238:	4a8e      	ldr	r2, [pc, #568]	; (8027474 <LoRaMacProcess+0x390>)
 802723a:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.BufferSize = 0;
 802723c:	3204      	adds	r2, #4
 802723e:	52a3      	strh	r3, [r4, r2]
    MacCtx.McpsIndication.AckReceived = false;
 8027240:	4a8d      	ldr	r2, [pc, #564]	; (8027478 <LoRaMacProcess+0x394>)
 8027242:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8027244:	3202      	adds	r2, #2
 8027246:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8027248:	4a8c      	ldr	r2, [pc, #560]	; (802747c <LoRaMacProcess+0x398>)
 802724a:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.DevAddress = 0;
 802724c:	4a8c      	ldr	r2, [pc, #560]	; (8027480 <LoRaMacProcess+0x39c>)
 802724e:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8027250:	3204      	adds	r2, #4
 8027252:	54a3      	strb	r3, [r4, r2]
    Radio.Sleep( );
 8027254:	4b79      	ldr	r3, [pc, #484]	; (802743c <LoRaMacProcess+0x358>)
 8027256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027258:	9305      	str	r3, [sp, #20]
 802725a:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 802725c:	4879      	ldr	r0, [pc, #484]	; (8027444 <LoRaMacProcess+0x360>)
 802725e:	f7fc fe41 	bl	8023ee4 <TimerStop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8027262:	0039      	movs	r1, r7
 8027264:	9803      	ldr	r0, [sp, #12]
 8027266:	f001 feeb 	bl	8029040 <LoRaMacClassBRxBeacon>
 802726a:	9005      	str	r0, [sp, #20]
 802726c:	2800      	cmp	r0, #0
 802726e:	d100      	bne.n	8027272 <LoRaMacProcess+0x18e>
 8027270:	e118      	b.n	80274a4 <LoRaMacProcess+0x3c0>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8027272:	4b84      	ldr	r3, [pc, #528]	; (8027484 <LoRaMacProcess+0x3a0>)
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8027274:	9a04      	ldr	r2, [sp, #16]
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8027276:	52e5      	strh	r5, [r4, r3]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8027278:	3302      	adds	r3, #2
 802727a:	54e2      	strb	r2, [r4, r3]
        if( events.Events.TxTimeout == 1 )
 802727c:	9b06      	ldr	r3, [sp, #24]
 802727e:	075b      	lsls	r3, r3, #29
 8027280:	d51d      	bpl.n	80272be <LoRaMacProcess+0x1da>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8027282:	4c6c      	ldr	r4, [pc, #432]	; (8027434 <LoRaMacProcess+0x350>)
 8027284:	4b6c      	ldr	r3, [pc, #432]	; (8027438 <LoRaMacProcess+0x354>)
 8027286:	58e3      	ldr	r3, [r4, r3]
 8027288:	337c      	adds	r3, #124	; 0x7c
 802728a:	781b      	ldrb	r3, [r3, #0]
 802728c:	2b02      	cmp	r3, #2
 802728e:	d003      	beq.n	8027298 <LoRaMacProcess+0x1b4>
        Radio.Sleep( );
 8027290:	4b6a      	ldr	r3, [pc, #424]	; (802743c <LoRaMacProcess+0x358>)
 8027292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027294:	9303      	str	r3, [sp, #12]
 8027296:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8027298:	f7fe ff2a 	bl	80260f0 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 802729c:	2002      	movs	r0, #2
 802729e:	4b6e      	ldr	r3, [pc, #440]	; (8027458 <LoRaMacProcess+0x374>)
 80272a0:	54e0      	strb	r0, [r4, r3]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 80272a2:	f002 feeb 	bl	802a07c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 80272a6:	4b68      	ldr	r3, [pc, #416]	; (8027448 <LoRaMacProcess+0x364>)
 80272a8:	5ce3      	ldrb	r3, [r4, r3]
 80272aa:	2b00      	cmp	r3, #0
 80272ac:	d002      	beq.n	80272b4 <LoRaMacProcess+0x1d0>
        MacCtx.AckTimeoutRetry = true;
 80272ae:	2201      	movs	r2, #1
 80272b0:	4b75      	ldr	r3, [pc, #468]	; (8027488 <LoRaMacProcess+0x3a4>)
 80272b2:	54e2      	strb	r2, [r4, r3]
    MacCtx.MacFlags.Bits.MacDone = 1;
 80272b4:	2320      	movs	r3, #32
 80272b6:	4975      	ldr	r1, [pc, #468]	; (802748c <LoRaMacProcess+0x3a8>)
 80272b8:	5c62      	ldrb	r2, [r4, r1]
 80272ba:	4313      	orrs	r3, r2
 80272bc:	5463      	strb	r3, [r4, r1]
        if( events.Events.RxError == 1 )
 80272be:	9b06      	ldr	r3, [sp, #24]
 80272c0:	079b      	lsls	r3, r3, #30
 80272c2:	d503      	bpl.n	80272cc <LoRaMacProcess+0x1e8>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 80272c4:	2106      	movs	r1, #6
 80272c6:	2005      	movs	r0, #5
 80272c8:	f7fe ff9a 	bl	8026200 <HandleRadioRxErrorTimeout>
        if( events.Events.RxTimeout == 1 )
 80272cc:	9b06      	ldr	r3, [sp, #24]
 80272ce:	07db      	lsls	r3, r3, #31
 80272d0:	d503      	bpl.n	80272da <LoRaMacProcess+0x1f6>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 80272d2:	2104      	movs	r1, #4
 80272d4:	2003      	movs	r0, #3
 80272d6:	f7fe ff93 	bl	8026200 <HandleRadioRxErrorTimeout>
    uint8_t noTx = 0x00;

    LoRaMacHandleIrqEvents( );
    LoRaMacClassBProcess( );
 80272da:	f002 fa5b 	bl	8029794 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 80272de:	4c55      	ldr	r4, [pc, #340]	; (8027434 <LoRaMacProcess+0x350>)
 80272e0:	4b6a      	ldr	r3, [pc, #424]	; (802748c <LoRaMacProcess+0x3a8>)
 80272e2:	5ce2      	ldrb	r2, [r4, r3]
 80272e4:	0693      	lsls	r3, r2, #26
 80272e6:	d570      	bpl.n	80273ca <LoRaMacProcess+0x2e6>
    MacCtx.AllowRequests = requestState;
 80272e8:	2300      	movs	r3, #0
 80272ea:	4969      	ldr	r1, [pc, #420]	; (8027490 <LoRaMacProcess+0x3ac>)
 80272ec:	5463      	strb	r3, [r4, r1]
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 80272ee:	3943      	subs	r1, #67	; 0x43
 80272f0:	39ff      	subs	r1, #255	; 0xff
 80272f2:	5863      	ldr	r3, [r4, r1]
 80272f4:	0618      	lsls	r0, r3, #24
 80272f6:	d502      	bpl.n	80272fe <LoRaMacProcess+0x21a>
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80272f8:	2082      	movs	r0, #130	; 0x82
 80272fa:	4383      	bics	r3, r0
 80272fc:	5063      	str	r3, [r4, r1]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80272fe:	2305      	movs	r3, #5
 8027300:	421a      	tst	r2, r3
 8027302:	d100      	bne.n	8027306 <LoRaMacProcess+0x222>
 8027304:	e317      	b.n	8027936 <LoRaMacProcess+0x852>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8027306:	200c      	movs	r0, #12
 8027308:	f002 fed4 	bl	802a0b4 <LoRaMacConfirmQueueIsCmdActive>
 802730c:	2800      	cmp	r0, #0
 802730e:	d100      	bne.n	8027312 <LoRaMacProcess+0x22e>
 8027310:	e311      	b.n	8027936 <LoRaMacProcess+0x852>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8027312:	4b5e      	ldr	r3, [pc, #376]	; (802748c <LoRaMacProcess+0x3a8>)
 8027314:	5ce3      	ldrb	r3, [r4, r3]
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8027316:	07da      	lsls	r2, r3, #31
 8027318:	d500      	bpl.n	802731c <LoRaMacProcess+0x238>
 802731a:	e30c      	b.n	8027936 <LoRaMacProcess+0x852>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 802731c:	075b      	lsls	r3, r3, #29
 802731e:	d400      	bmi.n	8027322 <LoRaMacProcess+0x23e>
 8027320:	e320      	b.n	8027964 <LoRaMacProcess+0x880>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8027322:	22d0      	movs	r2, #208	; 0xd0
 8027324:	2302      	movs	r3, #2
 8027326:	0092      	lsls	r2, r2, #2
 8027328:	58a1      	ldr	r1, [r4, r2]
 802732a:	4399      	bics	r1, r3
 802732c:	50a1      	str	r1, [r4, r2]
    if( MacCtx.MacState == LORAMAC_IDLE )
 802732e:	23d0      	movs	r3, #208	; 0xd0
 8027330:	009b      	lsls	r3, r3, #2
 8027332:	58e3      	ldr	r3, [r4, r3]
 8027334:	2b00      	cmp	r3, #0
 8027336:	d145      	bne.n	80273c4 <LoRaMacProcess+0x2e0>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8027338:	4a54      	ldr	r2, [pc, #336]	; (802748c <LoRaMacProcess+0x3a8>)
 802733a:	3301      	adds	r3, #1
 802733c:	5ca6      	ldrb	r6, [r4, r2]
 802733e:	0031      	movs	r1, r6
 8027340:	4019      	ands	r1, r3
 8027342:	421e      	tst	r6, r3
 8027344:	d002      	beq.n	802734c <LoRaMacProcess+0x268>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8027346:	0030      	movs	r0, r6
 8027348:	4398      	bics	r0, r3
 802734a:	54a0      	strb	r0, [r4, r2]
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 802734c:	2204      	movs	r2, #4
 802734e:	484f      	ldr	r0, [pc, #316]	; (802748c <LoRaMacProcess+0x3a8>)
 8027350:	5c23      	ldrb	r3, [r4, r0]
 8027352:	4213      	tst	r3, r2
 8027354:	d001      	beq.n	802735a <LoRaMacProcess+0x276>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8027356:	4393      	bics	r3, r2
 8027358:	5423      	strb	r3, [r4, r0]
    MacCtx.AllowRequests = requestState;
 802735a:	2301      	movs	r3, #1
 802735c:	4a4c      	ldr	r2, [pc, #304]	; (8027490 <LoRaMacProcess+0x3ac>)
 802735e:	54a3      	strb	r3, [r4, r2]
        if( reqEvents.Bits.McpsReq == 1 )
 8027360:	2900      	cmp	r1, #0
 8027362:	d005      	beq.n	8027370 <LoRaMacProcess+0x28c>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8027364:	23d1      	movs	r3, #209	; 0xd1
 8027366:	009b      	lsls	r3, r3, #2
 8027368:	58e3      	ldr	r3, [r4, r3]
 802736a:	484a      	ldr	r0, [pc, #296]	; (8027494 <LoRaMacProcess+0x3b0>)
 802736c:	681b      	ldr	r3, [r3, #0]
 802736e:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 8027370:	2504      	movs	r5, #4
 8027372:	422e      	tst	r6, r5
 8027374:	d00a      	beq.n	802738c <LoRaMacProcess+0x2a8>
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8027376:	4848      	ldr	r0, [pc, #288]	; (8027498 <LoRaMacProcess+0x3b4>)
 8027378:	f002 fea8 	bl	802a0cc <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 802737c:	f002 fed2 	bl	802a124 <LoRaMacConfirmQueueGetCnt>
 8027380:	2800      	cmp	r0, #0
 8027382:	d003      	beq.n	802738c <LoRaMacProcess+0x2a8>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8027384:	4a41      	ldr	r2, [pc, #260]	; (802748c <LoRaMacProcess+0x3a8>)
 8027386:	5ca3      	ldrb	r3, [r4, r2]
 8027388:	431d      	orrs	r5, r3
 802738a:	54a5      	strb	r5, [r4, r2]
        LoRaMacClassBResumeBeaconing( );
 802738c:	f001 ffb8 	bl	8029300 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 8027390:	2220      	movs	r2, #32
 8027392:	4d3e      	ldr	r5, [pc, #248]	; (802748c <LoRaMacProcess+0x3a8>)
 8027394:	5d63      	ldrb	r3, [r4, r5]
 8027396:	4393      	bics	r3, r2
 8027398:	5563      	strb	r3, [r4, r5]
    if( MacCtx.MacState == LORAMAC_IDLE )
 802739a:	23d0      	movs	r3, #208	; 0xd0
 802739c:	009b      	lsls	r3, r3, #2
 802739e:	58e3      	ldr	r3, [r4, r3]
 80273a0:	2b00      	cmp	r3, #0
 80273a2:	d10f      	bne.n	80273c4 <LoRaMacProcess+0x2e0>
        bool isStickyMacCommandPending = false;
 80273a4:	2658      	movs	r6, #88	; 0x58
 80273a6:	aa08      	add	r2, sp, #32
 80273a8:	1992      	adds	r2, r2, r6
 80273aa:	7013      	strb	r3, [r2, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 80273ac:	a81e      	add	r0, sp, #120	; 0x78
 80273ae:	f002 fda3 	bl	8029ef8 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 80273b2:	ab08      	add	r3, sp, #32
 80273b4:	199b      	adds	r3, r3, r6
 80273b6:	781b      	ldrb	r3, [r3, #0]
 80273b8:	2b00      	cmp	r3, #0
 80273ba:	d003      	beq.n	80273c4 <LoRaMacProcess+0x2e0>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 80273bc:	2310      	movs	r3, #16
 80273be:	5d62      	ldrb	r2, [r4, r5]
 80273c0:	4313      	orrs	r3, r2
 80273c2:	5563      	strb	r3, [r4, r5]
    MacCtx.AllowRequests = requestState;
 80273c4:	2301      	movs	r3, #1
 80273c6:	4a32      	ldr	r2, [pc, #200]	; (8027490 <LoRaMacProcess+0x3ac>)
 80273c8:	54a3      	strb	r3, [r4, r2]
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 80273ca:	2208      	movs	r2, #8
 80273cc:	492f      	ldr	r1, [pc, #188]	; (802748c <LoRaMacProcess+0x3a8>)
 80273ce:	5c63      	ldrb	r3, [r4, r1]
 80273d0:	4213      	tst	r3, r2
 80273d2:	d007      	beq.n	80273e4 <LoRaMacProcess+0x300>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 80273d4:	4393      	bics	r3, r2
 80273d6:	5463      	strb	r3, [r4, r1]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 80273d8:	23d1      	movs	r3, #209	; 0xd1
 80273da:	009b      	lsls	r3, r3, #2
 80273dc:	58e3      	ldr	r3, [r4, r3]
 80273de:	482f      	ldr	r0, [pc, #188]	; (802749c <LoRaMacProcess+0x3b8>)
 80273e0:	68db      	ldr	r3, [r3, #12]
 80273e2:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 80273e4:	2510      	movs	r5, #16
 80273e6:	4e29      	ldr	r6, [pc, #164]	; (802748c <LoRaMacProcess+0x3a8>)
 80273e8:	5da3      	ldrb	r3, [r4, r6]
 80273ea:	422b      	tst	r3, r5
 80273ec:	d00a      	beq.n	8027404 <LoRaMacProcess+0x320>
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 80273ee:	2307      	movs	r3, #7
 80273f0:	a81e      	add	r0, sp, #120	; 0x78
 80273f2:	8003      	strh	r3, [r0, #0]
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 80273f4:	23d1      	movs	r3, #209	; 0xd1
 80273f6:	009b      	lsls	r3, r3, #2
 80273f8:	58e3      	ldr	r3, [r4, r3]
 80273fa:	68db      	ldr	r3, [r3, #12]
 80273fc:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 80273fe:	5da3      	ldrb	r3, [r4, r6]
 8027400:	43ab      	bics	r3, r5
 8027402:	55a3      	strb	r3, [r4, r6]
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8027404:	2202      	movs	r2, #2
 8027406:	4921      	ldr	r1, [pc, #132]	; (802748c <LoRaMacProcess+0x3a8>)
 8027408:	5c63      	ldrb	r3, [r4, r1]
 802740a:	4213      	tst	r3, r2
 802740c:	d007      	beq.n	802741e <LoRaMacProcess+0x33a>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 802740e:	4393      	bics	r3, r2
 8027410:	5463      	strb	r3, [r4, r1]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 8027412:	23d1      	movs	r3, #209	; 0xd1
 8027414:	009b      	lsls	r3, r3, #2
 8027416:	58e3      	ldr	r3, [r4, r3]
 8027418:	4821      	ldr	r0, [pc, #132]	; (80274a0 <LoRaMacProcess+0x3bc>)
 802741a:	685b      	ldr	r3, [r3, #4]
 802741c:	4798      	blx	r3
        LoRaMacHandleRequestEvents( );
        LoRaMacHandleScheduleUplinkEvent( );
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
    }
    LoRaMacHandleIndicationEvents( );
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 802741e:	2390      	movs	r3, #144	; 0x90
 8027420:	00db      	lsls	r3, r3, #3
 8027422:	5ce3      	ldrb	r3, [r4, r3]
 8027424:	2b02      	cmp	r3, #2
 8027426:	d101      	bne.n	802742c <LoRaMacProcess+0x348>
    {
        OpenContinuousRxCWindow( );
 8027428:	f7fe ffd2 	bl	80263d0 <OpenContinuousRxCWindow>
    }
}
 802742c:	b02b      	add	sp, #172	; 0xac
 802742e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027430:	200088e4 	.word	0x200088e4
 8027434:	200088e8 	.word	0x200088e8
 8027438:	00000484 	.word	0x00000484
 802743c:	08031484 	.word	0x08031484
 8027440:	20008c68 	.word	0x20008c68
 8027444:	20008c80 	.word	0x20008c80
 8027448:	00000414 	.word	0x00000414
 802744c:	20008ce0 	.word	0x20008ce0
 8027450:	20008ef0 	.word	0x20008ef0
 8027454:	00000415 	.word	0x00000415
 8027458:	0000043d 	.word	0x0000043d
 802745c:	20008ee0 	.word	0x20008ee0
 8027460:	0000042a 	.word	0x0000042a
 8027464:	0000042c 	.word	0x0000042c
 8027468:	0000042d 	.word	0x0000042d
 802746c:	0000041e 	.word	0x0000041e
 8027470:	00000421 	.word	0x00000421
 8027474:	00000424 	.word	0x00000424
 8027478:	0000042e 	.word	0x0000042e
 802747c:	0000041c 	.word	0x0000041c
 8027480:	00000434 	.word	0x00000434
 8027484:	00000476 	.word	0x00000476
 8027488:	00000413 	.word	0x00000413
 802748c:	00000481 	.word	0x00000481
 8027490:	00000482 	.word	0x00000482
 8027494:	20008d24 	.word	0x20008d24
 8027498:	20008d38 	.word	0x20008d38
 802749c:	20008d4c 	.word	0x20008d4c
 80274a0:	20008d04 	.word	0x20008d04
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 80274a4:	59a3      	ldr	r3, [r4, r6]
 80274a6:	337c      	adds	r3, #124	; 0x7c
 80274a8:	781b      	ldrb	r3, [r3, #0]
 80274aa:	2b01      	cmp	r3, #1
 80274ac:	d10c      	bne.n	80274c8 <LoRaMacProcess+0x3e4>
        if( LoRaMacClassBIsPingExpected( ) == true )
 80274ae:	f001 feb9 	bl	8029224 <LoRaMacClassBIsPingExpected>
 80274b2:	1e05      	subs	r5, r0, #0
 80274b4:	d019      	beq.n	80274ea <LoRaMacProcess+0x406>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80274b6:	9805      	ldr	r0, [sp, #20]
 80274b8:	f001 fdb6 	bl	8029028 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80274bc:	9805      	ldr	r0, [sp, #20]
 80274be:	f001 fb93 	bl	8028be8 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 80274c2:	2304      	movs	r3, #4
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80274c4:	4ac5      	ldr	r2, [pc, #788]	; (80277dc <LoRaMacProcess+0x6f8>)
 80274c6:	54a3      	strb	r3, [r4, r2]
    macHdr.Value = payload[pktHeaderLen++];
 80274c8:	9b03      	ldr	r3, [sp, #12]
 80274ca:	781b      	ldrb	r3, [r3, #0]
 80274cc:	0958      	lsrs	r0, r3, #5
 80274ce:	3801      	subs	r0, #1
 80274d0:	9307      	str	r3, [sp, #28]
    switch( macHdr.Bits.MType )
 80274d2:	2806      	cmp	r0, #6
 80274d4:	d900      	bls.n	80274d8 <LoRaMacProcess+0x3f4>
 80274d6:	e221      	b.n	802791c <LoRaMacProcess+0x838>
 80274d8:	f7f8 fe10 	bl	80200fc <__gnu_thumb1_case_uhi>
 80274dc:	02200013 	.word	0x02200013
 80274e0:	02200095 	.word	0x02200095
 80274e4:	02200092 	.word	0x02200092
 80274e8:	0210      	.short	0x0210
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80274ea:	f001 fea5 	bl	8029238 <LoRaMacClassBIsMulticastExpected>
 80274ee:	2800      	cmp	r0, #0
 80274f0:	d0ea      	beq.n	80274c8 <LoRaMacProcess+0x3e4>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80274f2:	0028      	movs	r0, r5
 80274f4:	f001 fd9e 	bl	8029034 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80274f8:	0028      	movs	r0, r5
 80274fa:	f001 fb87 	bl	8028c0c <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80274fe:	2305      	movs	r3, #5
 8027500:	e7e0      	b.n	80274c4 <LoRaMacProcess+0x3e0>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8027502:	2f10      	cmp	r7, #16
 8027504:	d806      	bhi.n	8027514 <LoRaMacProcess+0x430>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8027506:	2101      	movs	r1, #1
 8027508:	4ab5      	ldr	r2, [pc, #724]	; (80277e0 <LoRaMacProcess+0x6fc>)
 802750a:	4bb6      	ldr	r3, [pc, #728]	; (80277e4 <LoRaMacProcess+0x700>)
 802750c:	54d1      	strb	r1, [r2, r3]
                PrepareRxDoneAbort( );
 802750e:	f7fe fe59 	bl	80261c4 <PrepareRxDoneAbort>
                return;
 8027512:	e6b3      	b.n	802727c <LoRaMacProcess+0x198>
            macMsgJoinAccept.Buffer = payload;
 8027514:	9b03      	ldr	r3, [sp, #12]
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8027516:	59a2      	ldr	r2, [r4, r6]
            macMsgJoinAccept.Buffer = payload;
 8027518:	9314      	str	r3, [sp, #80]	; 0x50
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 802751a:	23b2      	movs	r3, #178	; 0xb2
            macMsgJoinAccept.Buffer = payload;
 802751c:	ad14      	add	r5, sp, #80	; 0x50
            macMsgJoinAccept.BufSize = size;
 802751e:	712f      	strb	r7, [r5, #4]
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8027520:	005b      	lsls	r3, r3, #1
 8027522:	5cd3      	ldrb	r3, [r2, r3]
 8027524:	2b00      	cmp	r3, #0
 8027526:	d1ee      	bne.n	8027506 <LoRaMacProcess+0x422>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 8027528:	f7fd f8ec 	bl	8024704 <SecureElementGetJoinEui>
 802752c:	002a      	movs	r2, r5
 802752e:	0001      	movs	r1, r0
 8027530:	20ff      	movs	r0, #255	; 0xff
 8027532:	f003 f839 	bl	802a5a8 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 8027536:	2800      	cmp	r0, #0
 8027538:	d15a      	bne.n	80275f0 <LoRaMacProcess+0x50c>
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 802753a:	7aaa      	ldrb	r2, [r5, #10]
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 802753c:	7ae9      	ldrb	r1, [r5, #11]
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 802753e:	0212      	lsls	r2, r2, #8
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8027540:	0409      	lsls	r1, r1, #16
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8027542:	59a3      	ldr	r3, [r4, r6]
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8027544:	430a      	orrs	r2, r1
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8027546:	7a69      	ldrb	r1, [r5, #9]
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8027548:	430a      	orrs	r2, r1
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 802754a:	0019      	movs	r1, r3
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 802754c:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 802754e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8027550:	31a5      	adds	r1, #165	; 0xa5
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 8027552:	64da      	str	r2, [r3, #76]	; 0x4c
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8027554:	7c2a      	ldrb	r2, [r5, #16]
 8027556:	0652      	lsls	r2, r2, #25
 8027558:	0f52      	lsrs	r2, r2, #29
 802755a:	700a      	strb	r2, [r1, #0]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 802755c:	7c2a      	ldrb	r2, [r5, #16]
 802755e:	0712      	lsls	r2, r2, #28
 8027560:	0f12      	lsrs	r2, r2, #28
 8027562:	71ca      	strb	r2, [r1, #7]
                MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8027564:	73ca      	strb	r2, [r1, #15]
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8027566:	7c6a      	ldrb	r2, [r5, #17]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 8027568:	3911      	subs	r1, #17
 802756a:	2a00      	cmp	r2, #0
 802756c:	d03e      	beq.n	80275ec <LoRaMacProcess+0x508>
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 802756e:	600a      	str	r2, [r1, #0]
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 8027570:	22fa      	movs	r2, #250	; 0xfa
 8027572:	6808      	ldr	r0, [r1, #0]
 8027574:	0092      	lsls	r2, r2, #2
 8027576:	4342      	muls	r2, r0
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8027578:	20fa      	movs	r0, #250	; 0xfa
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 802757a:	600a      	str	r2, [r1, #0]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 802757c:	0019      	movs	r1, r3
 802757e:	0080      	lsls	r0, r0, #2
 8027580:	1812      	adds	r2, r2, r0
 8027582:	3198      	adds	r1, #152	; 0x98
 8027584:	600a      	str	r2, [r1, #0]
                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 8027586:	22b1      	movs	r2, #177	; 0xb1
 8027588:	2500      	movs	r5, #0
 802758a:	0052      	lsls	r2, r2, #1
 802758c:	549d      	strb	r5, [r3, r2]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 802758e:	3a21      	subs	r2, #33	; 0x21
 8027590:	a808      	add	r0, sp, #32
 8027592:	3aff      	subs	r2, #255	; 0xff
 8027594:	1812      	adds	r2, r2, r0
 8027596:	a912      	add	r1, sp, #72	; 0x48
                applyCFList.Size = size - 17;
 8027598:	3f11      	subs	r7, #17
                applyCFList.Payload = macMsgJoinAccept.CFList;
 802759a:	9212      	str	r2, [sp, #72]	; 0x48
                applyCFList.Size = size - 17;
 802759c:	710f      	strb	r7, [r1, #4]
                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 802759e:	7818      	ldrb	r0, [r3, #0]
 80275a0:	f008 fc34 	bl	802fe0c <RegionApplyCFList>
                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 80275a4:	23b2      	movs	r3, #178	; 0xb2
 80275a6:	2102      	movs	r1, #2
 80275a8:	59a2      	ldr	r2, [r4, r6]
 80275aa:	005b      	lsls	r3, r3, #1
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80275ac:	2001      	movs	r0, #1
                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 80275ae:	54d1      	strb	r1, [r2, r3]
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80275b0:	f002 fd80 	bl	802a0b4 <LoRaMacConfirmQueueIsCmdActive>
 80275b4:	42a8      	cmp	r0, r5
 80275b6:	d003      	beq.n	80275c0 <LoRaMacProcess+0x4dc>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 80275b8:	2101      	movs	r1, #1
 80275ba:	0028      	movs	r0, r5
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 80275bc:	f002 fd38 	bl	802a030 <LoRaMacConfirmQueueSetStatus>
    if( MacCtx.NodeAckRequested == true )
 80275c0:	4c87      	ldr	r4, [pc, #540]	; (80277e0 <LoRaMacProcess+0x6fc>)
 80275c2:	4b89      	ldr	r3, [pc, #548]	; (80277e8 <LoRaMacProcess+0x704>)
 80275c4:	5ce3      	ldrb	r3, [r4, r3]
 80275c6:	2b00      	cmp	r3, #0
 80275c8:	d100      	bne.n	80275cc <LoRaMacProcess+0x4e8>
 80275ca:	e1ad      	b.n	8027928 <LoRaMacProcess+0x844>
        if( MacCtx.McpsConfirm.AckReceived == true )
 80275cc:	2388      	movs	r3, #136	; 0x88
 80275ce:	00db      	lsls	r3, r3, #3
 80275d0:	5ce3      	ldrb	r3, [r4, r3]
 80275d2:	2b00      	cmp	r3, #0
 80275d4:	d002      	beq.n	80275dc <LoRaMacProcess+0x4f8>
            OnAckTimeoutTimerEvent( NULL );
 80275d6:	2000      	movs	r0, #0
 80275d8:	f7fe fdc6 	bl	8026168 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.MacDone = 1;
 80275dc:	2320      	movs	r3, #32
 80275de:	4983      	ldr	r1, [pc, #524]	; (80277ec <LoRaMacProcess+0x708>)
 80275e0:	5c62      	ldrb	r2, [r4, r1]
 80275e2:	4313      	orrs	r3, r2
 80275e4:	5463      	strb	r3, [r4, r1]
    UpdateRxSlotIdleState( );
 80275e6:	f7fe fd83 	bl	80260f0 <UpdateRxSlotIdleState>
 80275ea:	e647      	b.n	802727c <LoRaMacProcess+0x198>
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 80275ec:	2201      	movs	r2, #1
 80275ee:	e7be      	b.n	802756e <LoRaMacProcess+0x48a>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80275f0:	2001      	movs	r0, #1
 80275f2:	f002 fd5f 	bl	802a0b4 <LoRaMacConfirmQueueIsCmdActive>
 80275f6:	2800      	cmp	r0, #0
 80275f8:	d0e2      	beq.n	80275c0 <LoRaMacProcess+0x4dc>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 80275fa:	2101      	movs	r1, #1
 80275fc:	2007      	movs	r0, #7
 80275fe:	e7dd      	b.n	80275bc <LoRaMacProcess+0x4d8>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8027600:	2301      	movs	r3, #1
 8027602:	4a7b      	ldr	r2, [pc, #492]	; (80277f0 <LoRaMacProcess+0x70c>)
 8027604:	54a3      	strb	r3, [r4, r2]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8027606:	4c76      	ldr	r4, [pc, #472]	; (80277e0 <LoRaMacProcess+0x6fc>)
 8027608:	a90e      	add	r1, sp, #56	; 0x38
 802760a:	59a3      	ldr	r3, [r4, r6]
 802760c:	001a      	movs	r2, r3
 802760e:	32b9      	adds	r2, #185	; 0xb9
 8027610:	7812      	ldrb	r2, [r2, #0]
 8027612:	708a      	strb	r2, [r1, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8027614:	2284      	movs	r2, #132	; 0x84
 8027616:	00d2      	lsls	r2, r2, #3
 8027618:	5ca2      	ldrb	r2, [r4, r2]
 802761a:	704a      	strb	r2, [r1, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 802761c:	220d      	movs	r2, #13
 802761e:	700a      	strb	r2, [r1, #0]
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 8027620:	001a      	movs	r2, r3
 8027622:	32ca      	adds	r2, #202	; 0xca
 8027624:	7812      	ldrb	r2, [r2, #0]
 8027626:	2a00      	cmp	r2, #0
 8027628:	d001      	beq.n	802762e <LoRaMacProcess+0x54a>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 802762a:	220e      	movs	r2, #14
 802762c:	700a      	strb	r2, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 802762e:	7818      	ldrb	r0, [r3, #0]
 8027630:	f008 fbbc 	bl	802fdac <RegionGetPhyParam>
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8027634:	003a      	movs	r2, r7
 8027636:	3a0d      	subs	r2, #13
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027638:	900c      	str	r0, [sp, #48]	; 0x30
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 802763a:	1c13      	adds	r3, r2, #0
 802763c:	0412      	lsls	r2, r2, #16
 802763e:	d500      	bpl.n	8027642 <LoRaMacProcess+0x55e>
 8027640:	2300      	movs	r3, #0
 8027642:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027644:	b21b      	sxth	r3, r3
 8027646:	b212      	sxth	r2, r2
 8027648:	4293      	cmp	r3, r2
 802764a:	dd00      	ble.n	802764e <LoRaMacProcess+0x56a>
 802764c:	e75b      	b.n	8027506 <LoRaMacProcess+0x422>
 802764e:	2f0b      	cmp	r7, #11
 8027650:	d800      	bhi.n	8027654 <LoRaMacProcess+0x570>
 8027652:	e758      	b.n	8027506 <LoRaMacProcess+0x422>
            macMsgData.BufSize = size;
 8027654:	225c      	movs	r2, #92	; 0x5c
            macMsgData.Buffer = payload;
 8027656:	9b03      	ldr	r3, [sp, #12]
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8027658:	a81e      	add	r0, sp, #120	; 0x78
            macMsgData.Buffer = payload;
 802765a:	931e      	str	r3, [sp, #120]	; 0x78
            macMsgData.BufSize = size;
 802765c:	ab08      	add	r3, sp, #32
 802765e:	189b      	adds	r3, r3, r2
 8027660:	701f      	strb	r7, [r3, #0]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8027662:	4b64      	ldr	r3, [pc, #400]	; (80277f4 <LoRaMacProcess+0x710>)
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8027664:	32a3      	adds	r2, #163	; 0xa3
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8027666:	9327      	str	r3, [sp, #156]	; 0x9c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8027668:	ab28      	add	r3, sp, #160	; 0xa0
 802766a:	701a      	strb	r2, [r3, #0]
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 802766c:	f008 fa99 	bl	802fba2 <LoRaMacParserData>
 8027670:	9005      	str	r0, [sp, #20]
 8027672:	2800      	cmp	r0, #0
 8027674:	d000      	beq.n	8027678 <LoRaMacProcess+0x594>
 8027676:	e746      	b.n	8027506 <LoRaMacProcess+0x422>
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8027678:	2264      	movs	r2, #100	; 0x64
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 802767a:	4b5f      	ldr	r3, [pc, #380]	; (80277f8 <LoRaMacProcess+0x714>)
 802767c:	9920      	ldr	r1, [sp, #128]	; 0x80
 802767e:	50e1      	str	r1, [r4, r3]
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8027680:	ab08      	add	r3, sp, #32
 8027682:	189b      	adds	r3, r3, r2
 8027684:	781a      	ldrb	r2, [r3, #0]
 8027686:	230f      	movs	r3, #15
 8027688:	0010      	movs	r0, r2
 802768a:	4018      	ands	r0, r3
 802768c:	421a      	tst	r2, r3
 802768e:	d005      	beq.n	802769c <LoRaMacProcess+0x5b8>
 8027690:	334a      	adds	r3, #74	; 0x4a
 8027692:	ac08      	add	r4, sp, #32
 8027694:	191b      	adds	r3, r3, r4
 8027696:	7fdb      	ldrb	r3, [r3, #31]
 8027698:	2b00      	cmp	r3, #0
 802769a:	d150      	bne.n	802773e <LoRaMacProcess+0x65a>
    else if( macMsg->FRMPayloadSize == 0 )
 802769c:	ab28      	add	r3, sp, #160	; 0xa0
 802769e:	781b      	ldrb	r3, [r3, #0]
 80276a0:	2b00      	cmp	r3, #0
 80276a2:	d04e      	beq.n	8027742 <LoRaMacProcess+0x65e>
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80276a4:	2800      	cmp	r0, #0
 80276a6:	d000      	beq.n	80276aa <LoRaMacProcess+0x5c6>
 80276a8:	e72d      	b.n	8027506 <LoRaMacProcess+0x422>
 80276aa:	2359      	movs	r3, #89	; 0x59
 80276ac:	a808      	add	r0, sp, #32
 80276ae:	181b      	adds	r3, r3, r0
 80276b0:	7fdb      	ldrb	r3, [r3, #31]
        *fType = FRAME_TYPE_D;
 80276b2:	1e58      	subs	r0, r3, #1
 80276b4:	4183      	sbcs	r3, r0
 80276b6:	3302      	adds	r3, #2
        *fType = FRAME_TYPE_B;
 80276b8:	9303      	str	r3, [sp, #12]
            downLinkCounter = 0;
 80276ba:	2300      	movs	r3, #0
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80276bc:	4c48      	ldr	r4, [pc, #288]	; (80277e0 <LoRaMacProcess+0x6fc>)
            downLinkCounter = 0;
 80276be:	930d      	str	r3, [sp, #52]	; 0x34
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80276c0:	59a3      	ldr	r3, [r4, r6]
 80276c2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80276c4:	4281      	cmp	r1, r0
 80276c6:	d13e      	bne.n	8027746 <LoRaMacProcess+0x662>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 80276c8:	0019      	movs	r1, r3
 80276ca:	3152      	adds	r1, #82	; 0x52
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80276cc:	7809      	ldrb	r1, [r1, #0]
 80276ce:	2701      	movs	r7, #1
 80276d0:	2900      	cmp	r1, #0
 80276d2:	d018      	beq.n	8027706 <LoRaMacProcess+0x622>
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 80276d4:	0019      	movs	r1, r3
 80276d6:	3153      	adds	r1, #83	; 0x53
 80276d8:	780f      	ldrb	r7, [r1, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 80276da:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80276dc:	6809      	ldr	r1, [r1, #0]
 80276de:	910d      	str	r1, [sp, #52]	; 0x34
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 80276e0:	0019      	movs	r1, r3
 80276e2:	317c      	adds	r1, #124	; 0x7c
 80276e4:	7809      	ldrb	r1, [r1, #0]
 80276e6:	2902      	cmp	r1, #2
 80276e8:	d102      	bne.n	80276f0 <LoRaMacProcess+0x60c>
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80276ea:	4d3c      	ldr	r5, [pc, #240]	; (80277dc <LoRaMacProcess+0x6f8>)
 80276ec:	3101      	adds	r1, #1
 80276ee:	5561      	strb	r1, [r4, r5]
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 80276f0:	9903      	ldr	r1, [sp, #12]
 80276f2:	2903      	cmp	r1, #3
 80276f4:	d000      	beq.n	80276f8 <LoRaMacProcess+0x614>
 80276f6:	e706      	b.n	8027506 <LoRaMacProcess+0x422>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 80276f8:	2160      	movs	r1, #96	; 0x60
 80276fa:	420a      	tst	r2, r1
 80276fc:	d000      	beq.n	8027700 <LoRaMacProcess+0x61c>
 80276fe:	e702      	b.n	8027506 <LoRaMacProcess+0x422>
 8027700:	2201      	movs	r2, #1
 8027702:	9008      	str	r0, [sp, #32]
 8027704:	9205      	str	r2, [sp, #20]
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8027706:	2215      	movs	r2, #21
 8027708:	a90e      	add	r1, sp, #56	; 0x38
 802770a:	700a      	strb	r2, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 802770c:	7818      	ldrb	r0, [r3, #0]
 802770e:	f008 fb4d 	bl	802fdac <RegionGetPhyParam>
 8027712:	4b33      	ldr	r3, [pc, #204]	; (80277e0 <LoRaMacProcess+0x6fc>)
 8027714:	4d33      	ldr	r5, [pc, #204]	; (80277e4 <LoRaMacProcess+0x700>)
 8027716:	599b      	ldr	r3, [r3, r6]
 8027718:	900c      	str	r0, [sp, #48]	; 0x30
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 802771a:	9309      	str	r3, [sp, #36]	; 0x24
 802771c:	23b1      	movs	r3, #177	; 0xb1
 802771e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027720:	005b      	lsls	r3, r3, #1
 8027722:	5cd4      	ldrb	r4, [r2, r3]
    switch( addrID )
 8027724:	2f00      	cmp	r7, #0
 8027726:	d010      	beq.n	802774a <LoRaMacProcess+0x666>
 8027728:	2f01      	cmp	r7, #1
 802772a:	d143      	bne.n	80277b4 <LoRaMacProcess+0x6d0>
            if( lrWanVersion.Fields.Minor == 1 )
 802772c:	2c01      	cmp	r4, #1
 802772e:	d139      	bne.n	80277a4 <LoRaMacProcess+0x6c0>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8027730:	9b03      	ldr	r3, [sp, #12]
 8027732:	2b00      	cmp	r3, #0
 8027734:	d001      	beq.n	802773a <LoRaMacProcess+0x656>
 8027736:	2b03      	cmp	r3, #3
 8027738:	d108      	bne.n	802774c <LoRaMacProcess+0x668>
                    *fCntID = A_FCNT_DOWN;
 802773a:	2402      	movs	r4, #2
 802773c:	e006      	b.n	802774c <LoRaMacProcess+0x668>
        *fType = FRAME_TYPE_A;
 802773e:	9b05      	ldr	r3, [sp, #20]
 8027740:	e7ba      	b.n	80276b8 <LoRaMacProcess+0x5d4>
        *fType = FRAME_TYPE_B;
 8027742:	2301      	movs	r3, #1
 8027744:	e7b8      	b.n	80276b8 <LoRaMacProcess+0x5d4>
 8027746:	2701      	movs	r7, #1
 8027748:	e7dd      	b.n	8027706 <LoRaMacProcess+0x622>
    switch( addrID )
 802774a:	2404      	movs	r4, #4
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 802774c:	2266      	movs	r2, #102	; 0x66
 802774e:	ab08      	add	r3, sp, #32
 8027750:	189b      	adds	r3, r3, r2
 8027752:	881a      	ldrh	r2, [r3, #0]
 8027754:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027756:	0020      	movs	r0, r4
 8027758:	b299      	uxth	r1, r3
 802775a:	ab0d      	add	r3, sp, #52	; 0x34
 802775c:	f002 fdb0 	bl	802a2c0 <LoRaMacCryptoGetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8027760:	2800      	cmp	r0, #0
 8027762:	d02a      	beq.n	80277ba <LoRaMacProcess+0x6d6>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8027764:	2807      	cmp	r0, #7
 8027766:	d11f      	bne.n	80277a8 <LoRaMacProcess+0x6c4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8027768:	2308      	movs	r3, #8
 802776a:	4a1d      	ldr	r2, [pc, #116]	; (80277e0 <LoRaMacProcess+0x6fc>)
 802776c:	5553      	strb	r3, [r2, r5]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 802776e:	5993      	ldr	r3, [r2, r6]
 8027770:	22b1      	movs	r2, #177	; 0xb1
 8027772:	0052      	lsls	r2, r2, #1
 8027774:	5c9a      	ldrb	r2, [r3, r2]
 8027776:	2a00      	cmp	r2, #0
 8027778:	d10e      	bne.n	8027798 <LoRaMacProcess+0x6b4>
 802777a:	9907      	ldr	r1, [sp, #28]
 802777c:	321f      	adds	r2, #31
 802777e:	4391      	bics	r1, r2
 8027780:	29a0      	cmp	r1, #160	; 0xa0
 8027782:	d109      	bne.n	8027798 <LoRaMacProcess+0x6b4>
 8027784:	001a      	movs	r2, r3
 8027786:	32fc      	adds	r2, #252	; 0xfc
 8027788:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
 802778a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802778c:	4291      	cmp	r1, r2
 802778e:	d103      	bne.n	8027798 <LoRaMacProcess+0x6b4>
                        MacCtx.NvmCtx->SrvAckRequested = true;
 8027790:	224c      	movs	r2, #76	; 0x4c
 8027792:	2101      	movs	r1, #1
 8027794:	32ff      	adds	r2, #255	; 0xff
 8027796:	5499      	strb	r1, [r3, r2]
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8027798:	2386      	movs	r3, #134	; 0x86
 802779a:	4a11      	ldr	r2, [pc, #68]	; (80277e0 <LoRaMacProcess+0x6fc>)
 802779c:	990d      	ldr	r1, [sp, #52]	; 0x34
 802779e:	00db      	lsls	r3, r3, #3
 80277a0:	50d1      	str	r1, [r2, r3]
                PrepareRxDoneAbort( );
 80277a2:	e6b4      	b.n	802750e <LoRaMacProcess+0x42a>
                *fCntID = FCNT_DOWN;
 80277a4:	2403      	movs	r4, #3
 80277a6:	e7d1      	b.n	802774c <LoRaMacProcess+0x668>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 80277a8:	2808      	cmp	r0, #8
 80277aa:	d103      	bne.n	80277b4 <LoRaMacProcess+0x6d0>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 80277ac:	220a      	movs	r2, #10
 80277ae:	4b0c      	ldr	r3, [pc, #48]	; (80277e0 <LoRaMacProcess+0x6fc>)
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80277b0:	555a      	strb	r2, [r3, r5]
 80277b2:	e7f1      	b.n	8027798 <LoRaMacProcess+0x6b4>
 80277b4:	2201      	movs	r2, #1
 80277b6:	4b0a      	ldr	r3, [pc, #40]	; (80277e0 <LoRaMacProcess+0x6fc>)
 80277b8:	e7fa      	b.n	80277b0 <LoRaMacProcess+0x6cc>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 80277ba:	ab1e      	add	r3, sp, #120	; 0x78
 80277bc:	9300      	str	r3, [sp, #0]
 80277be:	0022      	movs	r2, r4
 80277c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80277c2:	0038      	movs	r0, r7
 80277c4:	9908      	ldr	r1, [sp, #32]
 80277c6:	f002 fe63 	bl	802a490 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80277ca:	4b05      	ldr	r3, [pc, #20]	; (80277e0 <LoRaMacProcess+0x6fc>)
 80277cc:	2800      	cmp	r0, #0
 80277ce:	d015      	beq.n	80277fc <LoRaMacProcess+0x718>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 80277d0:	3802      	subs	r0, #2
 80277d2:	1e42      	subs	r2, r0, #1
 80277d4:	4190      	sbcs	r0, r2
 80277d6:	300b      	adds	r0, #11
 80277d8:	5558      	strb	r0, [r3, r5]
 80277da:	e698      	b.n	802750e <LoRaMacProcess+0x42a>
 80277dc:	0000042d 	.word	0x0000042d
 80277e0:	200088e8 	.word	0x200088e8
 80277e4:	0000041d 	.word	0x0000041d
 80277e8:	00000414 	.word	0x00000414
 80277ec:	00000481 	.word	0x00000481
 80277f0:	0000041c 	.word	0x0000041c
 80277f4:	20008b20 	.word	0x20008b20
 80277f8:	00000434 	.word	0x00000434
            MacCtx.McpsIndication.Multicast = multicast;
 80277fc:	4aa0      	ldr	r2, [pc, #640]	; (8027a80 <LoRaMacProcess+0x99c>)
 80277fe:	9905      	ldr	r1, [sp, #20]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8027800:	4ca0      	ldr	r4, [pc, #640]	; (8027a84 <LoRaMacProcess+0x9a0>)
            MacCtx.McpsIndication.Multicast = multicast;
 8027802:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8027804:	2164      	movs	r1, #100	; 0x64
 8027806:	aa08      	add	r2, sp, #32
 8027808:	1852      	adds	r2, r2, r1
 802780a:	7812      	ldrb	r2, [r2, #0]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 802780c:	5558      	strb	r0, [r3, r5]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 802780e:	06d1      	lsls	r1, r2, #27
 8027810:	0fc9      	lsrs	r1, r1, #31
 8027812:	5519      	strb	r1, [r3, r4]
            MacCtx.McpsIndication.Buffer = NULL;
 8027814:	499c      	ldr	r1, [pc, #624]	; (8027a88 <LoRaMacProcess+0x9a4>)
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8027816:	9c0d      	ldr	r4, [sp, #52]	; 0x34
            MacCtx.McpsIndication.Buffer = NULL;
 8027818:	5058      	str	r0, [r3, r1]
            MacCtx.McpsIndication.BufferSize = 0;
 802781a:	3104      	adds	r1, #4
 802781c:	5458      	strb	r0, [r3, r1]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 802781e:	3108      	adds	r1, #8
 8027820:	505c      	str	r4, [r3, r1]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8027822:	0692      	lsls	r2, r2, #26
 8027824:	4999      	ldr	r1, [pc, #612]	; (8027a8c <LoRaMacProcess+0x9a8>)
 8027826:	0fd2      	lsrs	r2, r2, #31
 8027828:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 802782a:	4999      	ldr	r1, [pc, #612]	; (8027a90 <LoRaMacProcess+0x9ac>)
 802782c:	5458      	strb	r0, [r3, r1]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 802782e:	3103      	adds	r1, #3
 8027830:	545a      	strb	r2, [r3, r1]
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 8027832:	4a98      	ldr	r2, [pc, #608]	; (8027a94 <LoRaMacProcess+0x9b0>)
 8027834:	5c9a      	ldrb	r2, [r3, r2]
 8027836:	2a01      	cmp	r2, #1
 8027838:	d802      	bhi.n	8027840 <LoRaMacProcess+0x75c>
                MacCtx.NvmCtx->AdrAckCounter = 0;
 802783a:	599b      	ldr	r3, [r3, r6]
 802783c:	3304      	adds	r3, #4
 802783e:	67d8      	str	r0, [r3, #124]	; 0x7c
            if( multicast == 1 )
 8027840:	9b05      	ldr	r3, [sp, #20]
 8027842:	4c95      	ldr	r4, [pc, #596]	; (8027a98 <LoRaMacProcess+0x9b4>)
 8027844:	2b01      	cmp	r3, #1
 8027846:	d130      	bne.n	80278aa <LoRaMacProcess+0x7c6>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8027848:	3301      	adds	r3, #1
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 802784a:	4994      	ldr	r1, [pc, #592]	; (8027a9c <LoRaMacProcess+0x9b8>)
 802784c:	5463      	strb	r3, [r4, r1]
            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 802784e:	4b94      	ldr	r3, [pc, #592]	; (8027aa0 <LoRaMacProcess+0x9bc>)
 8027850:	ad1e      	add	r5, sp, #120	; 0x78
 8027852:	5ce1      	ldrb	r1, [r4, r3]
 8027854:	7b2b      	ldrb	r3, [r5, #12]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8027856:	2a01      	cmp	r2, #1
 8027858:	d805      	bhi.n	8027866 <LoRaMacProcess+0x782>
        if( request == MCPS_CONFIRMED )
 802785a:	2901      	cmp	r1, #1
 802785c:	d101      	bne.n	8027862 <LoRaMacProcess+0x77e>
            if( fCtrl.Bits.Ack == 1 )
 802785e:	069b      	lsls	r3, r3, #26
 8027860:	d501      	bpl.n	8027866 <LoRaMacProcess+0x782>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8027862:	f002 faf3 	bl	8029e4c <LoRaMacCommandsRemoveStickyAnsCmds>
            switch( fType )
 8027866:	2759      	movs	r7, #89	; 0x59
 8027868:	ab08      	add	r3, sp, #32
 802786a:	18ff      	adds	r7, r7, r3
 802786c:	9b03      	ldr	r3, [sp, #12]
 802786e:	2b02      	cmp	r3, #2
 8027870:	d035      	beq.n	80278de <LoRaMacProcess+0x7fa>
 8027872:	2b03      	cmp	r3, #3
 8027874:	d008      	beq.n	8027888 <LoRaMacProcess+0x7a4>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 8027876:	7b29      	ldrb	r1, [r5, #12]
 8027878:	9a04      	ldr	r2, [sp, #16]
 802787a:	0709      	lsls	r1, r1, #28
 802787c:	0f09      	lsrs	r1, r1, #28
 802787e:	a822      	add	r0, sp, #136	; 0x88
 8027880:	2b01      	cmp	r3, #1
 8027882:	d030      	beq.n	80278e6 <LoRaMacProcess+0x802>
 8027884:	f7ff f8fc 	bl	8026a80 <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8027888:	7ffb      	ldrb	r3, [r7, #31]
 802788a:	4a86      	ldr	r2, [pc, #536]	; (8027aa4 <LoRaMacProcess+0x9c0>)
 802788c:	54a3      	strb	r3, [r4, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 802788e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8027890:	9303      	str	r3, [sp, #12]
 8027892:	9a03      	ldr	r2, [sp, #12]
 8027894:	4b7c      	ldr	r3, [pc, #496]	; (8027a88 <LoRaMacProcess+0x9a4>)
 8027896:	50e2      	str	r2, [r4, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8027898:	ab28      	add	r3, sp, #160	; 0xa0
 802789a:	781a      	ldrb	r2, [r3, #0]
 802789c:	2385      	movs	r3, #133	; 0x85
 802789e:	00db      	lsls	r3, r3, #3
 80278a0:	54e2      	strb	r2, [r4, r3]
                    MacCtx.McpsIndication.RxData = true;
 80278a2:	2201      	movs	r2, #1
 80278a4:	4b80      	ldr	r3, [pc, #512]	; (8027aa8 <LoRaMacProcess+0x9c4>)
 80278a6:	54e2      	strb	r2, [r4, r3]
                    break;
 80278a8:	e022      	b.n	80278f0 <LoRaMacProcess+0x80c>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 80278aa:	211f      	movs	r1, #31
 80278ac:	9807      	ldr	r0, [sp, #28]
                MacCtx.NvmCtx->AdrAckCounter = 0;
 80278ae:	59a3      	ldr	r3, [r4, r6]
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 80278b0:	4388      	bics	r0, r1
 80278b2:	0001      	movs	r1, r0
 80278b4:	204c      	movs	r0, #76	; 0x4c
 80278b6:	30ff      	adds	r0, #255	; 0xff
 80278b8:	29a0      	cmp	r1, #160	; 0xa0
 80278ba:	d10b      	bne.n	80278d4 <LoRaMacProcess+0x7f0>
                    MacCtx.NvmCtx->SrvAckRequested = true;
 80278bc:	399f      	subs	r1, #159	; 0x9f
 80278be:	5419      	strb	r1, [r3, r0]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 80278c0:	3162      	adds	r1, #98	; 0x62
 80278c2:	31ff      	adds	r1, #255	; 0xff
 80278c4:	5c59      	ldrb	r1, [r3, r1]
 80278c6:	2900      	cmp	r1, #0
 80278c8:	d102      	bne.n	80278d0 <LoRaMacProcess+0x7ec>
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 80278ca:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80278cc:	33fc      	adds	r3, #252	; 0xfc
 80278ce:	66d9      	str	r1, [r3, #108]	; 0x6c
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80278d0:	2301      	movs	r3, #1
 80278d2:	e7ba      	b.n	802784a <LoRaMacProcess+0x766>
                    MacCtx.NvmCtx->SrvAckRequested = false;
 80278d4:	2100      	movs	r1, #0
 80278d6:	5419      	strb	r1, [r3, r0]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80278d8:	4b70      	ldr	r3, [pc, #448]	; (8027a9c <LoRaMacProcess+0x9b8>)
 80278da:	54e1      	strb	r1, [r4, r3]
 80278dc:	e7b7      	b.n	802784e <LoRaMacProcess+0x76a>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 80278de:	ab28      	add	r3, sp, #160	; 0xa0
 80278e0:	7819      	ldrb	r1, [r3, #0]
 80278e2:	9a04      	ldr	r2, [sp, #16]
 80278e4:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80278e6:	f7ff f8cb 	bl	8026a80 <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80278ea:	7ffb      	ldrb	r3, [r7, #31]
 80278ec:	4a6d      	ldr	r2, [pc, #436]	; (8027aa4 <LoRaMacProcess+0x9c0>)
 80278ee:	54a3      	strb	r3, [r4, r2]
            MacCtx.MacFlags.Bits.McpsInd = 1;
 80278f0:	2302      	movs	r3, #2
 80278f2:	496e      	ldr	r1, [pc, #440]	; (8027aac <LoRaMacProcess+0x9c8>)
 80278f4:	5c62      	ldrb	r2, [r4, r1]
 80278f6:	4313      	orrs	r3, r2
 80278f8:	5463      	strb	r3, [r4, r1]
            break;
 80278fa:	e661      	b.n	80275c0 <LoRaMacProcess+0x4dc>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 80278fc:	4d6c      	ldr	r5, [pc, #432]	; (8027ab0 <LoRaMacProcess+0x9cc>)
 80278fe:	9903      	ldr	r1, [sp, #12]
 8027900:	3f01      	subs	r7, #1
 8027902:	b2ba      	uxth	r2, r7
 8027904:	0028      	movs	r0, r5
 8027906:	3101      	adds	r1, #1
 8027908:	f007 fc13 	bl	802f132 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 802790c:	2303      	movs	r3, #3
 802790e:	4a63      	ldr	r2, [pc, #396]	; (8027a9c <LoRaMacProcess+0x9b8>)
 8027910:	52a3      	strh	r3, [r4, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8027912:	4b5d      	ldr	r3, [pc, #372]	; (8027a88 <LoRaMacProcess+0x9a4>)
 8027914:	50e5      	str	r5, [r4, r3]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8027916:	3304      	adds	r3, #4
 8027918:	54e7      	strb	r7, [r4, r3]
 802791a:	e7e9      	b.n	80278f0 <LoRaMacProcess+0x80c>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 802791c:	2201      	movs	r2, #1
 802791e:	4b65      	ldr	r3, [pc, #404]	; (8027ab4 <LoRaMacProcess+0x9d0>)
 8027920:	54e2      	strb	r2, [r4, r3]
            PrepareRxDoneAbort( );
 8027922:	f7fe fc4f 	bl	80261c4 <PrepareRxDoneAbort>
            break;
 8027926:	e64b      	b.n	80275c0 <LoRaMacProcess+0x4dc>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8027928:	59a3      	ldr	r3, [r4, r6]
 802792a:	337c      	adds	r3, #124	; 0x7c
 802792c:	781b      	ldrb	r3, [r3, #0]
 802792e:	2b02      	cmp	r3, #2
 8027930:	d000      	beq.n	8027934 <LoRaMacProcess+0x850>
 8027932:	e653      	b.n	80275dc <LoRaMacProcess+0x4f8>
 8027934:	e64f      	b.n	80275d6 <LoRaMacProcess+0x4f2>
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8027936:	4b5d      	ldr	r3, [pc, #372]	; (8027aac <LoRaMacProcess+0x9c8>)
 8027938:	5ce3      	ldrb	r3, [r4, r3]
 802793a:	075b      	lsls	r3, r3, #29
 802793c:	d512      	bpl.n	8027964 <LoRaMacProcess+0x880>
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 802793e:	2001      	movs	r0, #1
 8027940:	25d0      	movs	r5, #208	; 0xd0
 8027942:	f002 fbb7 	bl	802a0b4 <LoRaMacConfirmQueueIsCmdActive>
 8027946:	00ad      	lsls	r5, r5, #2
 8027948:	2800      	cmp	r0, #0
 802794a:	d036      	beq.n	80279ba <LoRaMacProcess+0x8d6>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 802794c:	2001      	movs	r0, #1
 802794e:	f002 fb83 	bl	802a058 <LoRaMacConfirmQueueGetStatus>
 8027952:	2800      	cmp	r0, #0
 8027954:	d102      	bne.n	802795c <LoRaMacProcess+0x878>
                MacCtx.ChannelsNbTransCounter = 0;
 8027956:	2382      	movs	r3, #130	; 0x82
 8027958:	00db      	lsls	r3, r3, #3
 802795a:	54e0      	strb	r0, [r4, r3]
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 802795c:	2302      	movs	r3, #2
 802795e:	5962      	ldr	r2, [r4, r5]
 8027960:	439a      	bics	r2, r3
 8027962:	5162      	str	r2, [r4, r5]
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8027964:	4b51      	ldr	r3, [pc, #324]	; (8027aac <LoRaMacProcess+0x9c8>)
 8027966:	5ce1      	ldrb	r1, [r4, r3]
 8027968:	07cb      	lsls	r3, r1, #31
 802796a:	d400      	bmi.n	802796e <LoRaMacProcess+0x88a>
 802796c:	e4df      	b.n	802732e <LoRaMacProcess+0x24a>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 802796e:	4b4c      	ldr	r3, [pc, #304]	; (8027aa0 <LoRaMacProcess+0x9bc>)
 8027970:	5ce3      	ldrb	r3, [r4, r3]
 8027972:	2b00      	cmp	r3, #0
 8027974:	d001      	beq.n	802797a <LoRaMacProcess+0x896>
 8027976:	2b03      	cmp	r3, #3
 8027978:	d12a      	bne.n	80279d0 <LoRaMacProcess+0x8ec>
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 802797a:	4b4f      	ldr	r3, [pc, #316]	; (8027ab8 <LoRaMacProcess+0x9d4>)
    if( MacCtx.ChannelsNbTransCounter >=
 802797c:	2082      	movs	r0, #130	; 0x82
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 802797e:	58e3      	ldr	r3, [r4, r3]
    if( MacCtx.ChannelsNbTransCounter >=
 8027980:	00c0      	lsls	r0, r0, #3
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 8027982:	001a      	movs	r2, r3
 8027984:	32a4      	adds	r2, #164	; 0xa4
    if( MacCtx.ChannelsNbTransCounter >=
 8027986:	5c20      	ldrb	r0, [r4, r0]
 8027988:	7812      	ldrb	r2, [r2, #0]
 802798a:	4290      	cmp	r0, r2
 802798c:	d209      	bcs.n	80279a2 <LoRaMacProcess+0x8be>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 802798e:	078a      	lsls	r2, r1, #30
 8027990:	d553      	bpl.n	8027a3a <LoRaMacProcess+0x956>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 8027992:	337c      	adds	r3, #124	; 0x7c
 8027994:	781b      	ldrb	r3, [r3, #0]
 8027996:	2b00      	cmp	r3, #0
 8027998:	d003      	beq.n	80279a2 <LoRaMacProcess+0x8be>
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 802799a:	4b3e      	ldr	r3, [pc, #248]	; (8027a94 <LoRaMacProcess+0x9b0>)
 802799c:	5ce3      	ldrb	r3, [r4, r3]
 802799e:	2b00      	cmp	r3, #0
 80279a0:	d14b      	bne.n	8027a3a <LoRaMacProcess+0x956>
            TimerStop( &MacCtx.TxDelayedTimer );
 80279a2:	4846      	ldr	r0, [pc, #280]	; (8027abc <LoRaMacProcess+0x9d8>)
 80279a4:	f7fc fa9e 	bl	8023ee4 <TimerStop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80279a8:	22d0      	movs	r2, #208	; 0xd0
 80279aa:	2320      	movs	r3, #32
 80279ac:	0092      	lsls	r2, r2, #2
 80279ae:	58a1      	ldr	r1, [r4, r2]
 80279b0:	4399      	bics	r1, r3
 80279b2:	50a1      	str	r1, [r4, r2]
            StopRetransmission( );
 80279b4:	f7ff fb24 	bl	8027000 <StopRetransmission.isra.0>
 80279b8:	e4b9      	b.n	802732e <LoRaMacProcess+0x24a>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 80279ba:	2005      	movs	r0, #5
 80279bc:	f002 fb7a 	bl	802a0b4 <LoRaMacConfirmQueueIsCmdActive>
 80279c0:	2800      	cmp	r0, #0
 80279c2:	d1cb      	bne.n	802795c <LoRaMacProcess+0x878>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 80279c4:	2006      	movs	r0, #6
 80279c6:	f002 fb75 	bl	802a0b4 <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 80279ca:	2800      	cmp	r0, #0
 80279cc:	d1c6      	bne.n	802795c <LoRaMacProcess+0x878>
 80279ce:	e7c9      	b.n	8027964 <LoRaMacProcess+0x880>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 80279d0:	2b01      	cmp	r3, #1
 80279d2:	d132      	bne.n	8027a3a <LoRaMacProcess+0x956>
            if( MacCtx.AckTimeoutRetry == true )
 80279d4:	4b3a      	ldr	r3, [pc, #232]	; (8027ac0 <LoRaMacProcess+0x9dc>)
 80279d6:	5ce2      	ldrb	r2, [r4, r3]
 80279d8:	2a00      	cmp	r2, #0
 80279da:	d100      	bne.n	80279de <LoRaMacProcess+0x8fa>
 80279dc:	e4a7      	b.n	802732e <LoRaMacProcess+0x24a>
    if( MacCtx.AckTimeoutRetriesCounter >=
 80279de:	4d39      	ldr	r5, [pc, #228]	; (8027ac4 <LoRaMacProcess+0x9e0>)
        MacCtx.AckTimeoutRetries )
 80279e0:	4839      	ldr	r0, [pc, #228]	; (8027ac8 <LoRaMacProcess+0x9e4>)
    if( MacCtx.AckTimeoutRetriesCounter >=
 80279e2:	5d63      	ldrb	r3, [r4, r5]
        MacCtx.AckTimeoutRetries )
 80279e4:	5c27      	ldrb	r7, [r4, r0]
    if( MacCtx.AckTimeoutRetriesCounter >=
 80279e6:	42bb      	cmp	r3, r7
 80279e8:	d205      	bcs.n	80279f6 <LoRaMacProcess+0x912>
    return false;
 80279ea:	2200      	movs	r2, #0
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80279ec:	0789      	lsls	r1, r1, #30
 80279ee:	d502      	bpl.n	80279f6 <LoRaMacProcess+0x912>
        if( MacCtx.McpsConfirm.AckReceived == true )
 80279f0:	2288      	movs	r2, #136	; 0x88
 80279f2:	00d2      	lsls	r2, r2, #3
 80279f4:	5ca2      	ldrb	r2, [r4, r2]
                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 80279f6:	21b1      	movs	r1, #177	; 0xb1
 80279f8:	4e2f      	ldr	r6, [pc, #188]	; (8027ab8 <LoRaMacProcess+0x9d4>)
 80279fa:	0049      	lsls	r1, r1, #1
 80279fc:	59a0      	ldr	r0, [r4, r6]
 80279fe:	5c41      	ldrb	r1, [r0, r1]
 8027a00:	2900      	cmp	r1, #0
 8027a02:	d13a      	bne.n	8027a7a <LoRaMacProcess+0x996>
                    if( stopRetransmission == false )
 8027a04:	2a00      	cmp	r2, #0
 8027a06:	d123      	bne.n	8027a50 <LoRaMacProcess+0x96c>
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8027a08:	42bb      	cmp	r3, r7
 8027a0a:	d216      	bcs.n	8027a3a <LoRaMacProcess+0x956>
        MacCtx.AckTimeoutRetriesCounter++;
 8027a0c:	3301      	adds	r3, #1
 8027a0e:	b2db      	uxtb	r3, r3
 8027a10:	5563      	strb	r3, [r4, r5]
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8027a12:	07db      	lsls	r3, r3, #31
 8027a14:	d511      	bpl.n	8027a3a <LoRaMacProcess+0x956>
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8027a16:	2322      	movs	r3, #34	; 0x22
 8027a18:	a91e      	add	r1, sp, #120	; 0x78
 8027a1a:	700b      	strb	r3, [r1, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8027a1c:	0003      	movs	r3, r0
 8027a1e:	33b8      	adds	r3, #184	; 0xb8
 8027a20:	781b      	ldrb	r3, [r3, #0]
 8027a22:	708b      	strb	r3, [r1, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8027a24:	0003      	movs	r3, r0
 8027a26:	3385      	adds	r3, #133	; 0x85
 8027a28:	781b      	ldrb	r3, [r3, #0]
 8027a2a:	704b      	strb	r3, [r1, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027a2c:	7800      	ldrb	r0, [r0, #0]
 8027a2e:	f008 f9bd 	bl	802fdac <RegionGetPhyParam>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 8027a32:	59a3      	ldr	r3, [r4, r6]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027a34:	9014      	str	r0, [sp, #80]	; 0x50
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 8027a36:	3385      	adds	r3, #133	; 0x85
 8027a38:	7018      	strb	r0, [r3, #0]
            MacCtx.MacFlags.Bits.MacDone = 0;
 8027a3a:	2220      	movs	r2, #32
            MacCtx.AckTimeoutRetry = false;
 8027a3c:	2000      	movs	r0, #0
            MacCtx.MacFlags.Bits.MacDone = 0;
 8027a3e:	491b      	ldr	r1, [pc, #108]	; (8027aac <LoRaMacProcess+0x9c8>)
 8027a40:	5c63      	ldrb	r3, [r4, r1]
 8027a42:	4393      	bics	r3, r2
 8027a44:	5463      	strb	r3, [r4, r1]
            MacCtx.AckTimeoutRetry = false;
 8027a46:	4b1e      	ldr	r3, [pc, #120]	; (8027ac0 <LoRaMacProcess+0x9dc>)
 8027a48:	54e0      	strb	r0, [r4, r3]
            OnTxDelayedTimerEvent( NULL );
 8027a4a:	f7ff fb07 	bl	802705c <OnTxDelayedTimerEvent>
 8027a4e:	e46e      	b.n	802732e <LoRaMacProcess+0x24a>
    if( MacCtx.McpsConfirm.AckReceived == false )
 8027a50:	2788      	movs	r7, #136	; 0x88
 8027a52:	00ff      	lsls	r7, r7, #3
 8027a54:	5de6      	ldrb	r6, [r4, r7]
 8027a56:	2e00      	cmp	r6, #0
 8027a58:	d10b      	bne.n	8027a72 <LoRaMacProcess+0x98e>
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8027a5a:	2302      	movs	r3, #2
 8027a5c:	a91e      	add	r1, sp, #120	; 0x78
 8027a5e:	710b      	strb	r3, [r1, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 8027a60:	4b1a      	ldr	r3, [pc, #104]	; (8027acc <LoRaMacProcess+0x9e8>)
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8027a62:	7800      	ldrb	r0, [r0, #0]
        params.NvmCtx = Contexts.RegionNvmCtx;
 8027a64:	689b      	ldr	r3, [r3, #8]
 8027a66:	931e      	str	r3, [sp, #120]	; 0x78
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8027a68:	f008 f9b3 	bl	802fdd2 <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 8027a6c:	4b18      	ldr	r3, [pc, #96]	; (8027ad0 <LoRaMacProcess+0x9ec>)
        MacCtx.McpsConfirm.AckReceived = false;
 8027a6e:	55e6      	strb	r6, [r4, r7]
        MacCtx.NodeAckRequested = false;
 8027a70:	54e6      	strb	r6, [r4, r3]
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8027a72:	5d62      	ldrb	r2, [r4, r5]
 8027a74:	4b17      	ldr	r3, [pc, #92]	; (8027ad4 <LoRaMacProcess+0x9f0>)
 8027a76:	54e2      	strb	r2, [r4, r3]
        if( stopRetransmission == true )
 8027a78:	e793      	b.n	80279a2 <LoRaMacProcess+0x8be>
 8027a7a:	2a00      	cmp	r2, #0
 8027a7c:	d0dd      	beq.n	8027a3a <LoRaMacProcess+0x956>
 8027a7e:	e790      	b.n	80279a2 <LoRaMacProcess+0x8be>
 8027a80:	0000041e 	.word	0x0000041e
 8027a84:	00000421 	.word	0x00000421
 8027a88:	00000424 	.word	0x00000424
 8027a8c:	0000042e 	.word	0x0000042e
 8027a90:	0000043d 	.word	0x0000043d
 8027a94:	0000042d 	.word	0x0000042d
 8027a98:	200088e8 	.word	0x200088e8
 8027a9c:	0000041c 	.word	0x0000041c
 8027aa0:	0000043c 	.word	0x0000043c
 8027aa4:	0000041f 	.word	0x0000041f
 8027aa8:	00000429 	.word	0x00000429
 8027aac:	00000481 	.word	0x00000481
 8027ab0:	20008b20 	.word	0x20008b20
 8027ab4:	0000041d 	.word	0x0000041d
 8027ab8:	00000484 	.word	0x00000484
 8027abc:	20008c50 	.word	0x20008c50
 8027ac0:	00000413 	.word	0x00000413
 8027ac4:	00000412 	.word	0x00000412
 8027ac8:	00000411 	.word	0x00000411
 8027acc:	200088ac 	.word	0x200088ac
 8027ad0:	00000414 	.word	0x00000414
 8027ad4:	00000441 	.word	0x00000441

08027ad8 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8027ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027ada:	b095      	sub	sp, #84	; 0x54
 8027adc:	0007      	movs	r7, r0
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8027ade:	2503      	movs	r5, #3
{
 8027ae0:	9100      	str	r1, [sp, #0]
 8027ae2:	9201      	str	r2, [sp, #4]
    if( ( primitives == NULL ) ||
 8027ae4:	2800      	cmp	r0, #0
 8027ae6:	d100      	bne.n	8027aea <LoRaMacInitialization+0x12>
 8027ae8:	e161      	b.n	8027dae <LoRaMacInitialization+0x2d6>
 8027aea:	2900      	cmp	r1, #0
 8027aec:	d100      	bne.n	8027af0 <LoRaMacInitialization+0x18>
 8027aee:	e15e      	b.n	8027dae <LoRaMacInitialization+0x2d6>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8027af0:	6803      	ldr	r3, [r0, #0]
 8027af2:	2b00      	cmp	r3, #0
 8027af4:	d100      	bne.n	8027af8 <LoRaMacInitialization+0x20>
 8027af6:	e15a      	b.n	8027dae <LoRaMacInitialization+0x2d6>
 8027af8:	6843      	ldr	r3, [r0, #4]
 8027afa:	2b00      	cmp	r3, #0
 8027afc:	d100      	bne.n	8027b00 <LoRaMacInitialization+0x28>
 8027afe:	e156      	b.n	8027dae <LoRaMacInitialization+0x2d6>
        ( primitives->MacMcpsIndication == NULL ) ||
 8027b00:	6883      	ldr	r3, [r0, #8]
 8027b02:	2b00      	cmp	r3, #0
 8027b04:	d100      	bne.n	8027b08 <LoRaMacInitialization+0x30>
 8027b06:	e152      	b.n	8027dae <LoRaMacInitialization+0x2d6>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8027b08:	68c3      	ldr	r3, [r0, #12]
 8027b0a:	2b00      	cmp	r3, #0
 8027b0c:	d100      	bne.n	8027b10 <LoRaMacInitialization+0x38>
 8027b0e:	e14e      	b.n	8027dae <LoRaMacInitialization+0x2d6>
        ( primitives->MacMlmeIndication == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8027b10:	0010      	movs	r0, r2
 8027b12:	f008 f946 	bl	802fda2 <RegionIsActive>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8027b16:	3506      	adds	r5, #6
    if( RegionIsActive( region ) == false )
 8027b18:	2800      	cmp	r0, #0
 8027b1a:	d100      	bne.n	8027b1e <LoRaMacInitialization+0x46>
 8027b1c:	e147      	b.n	8027dae <LoRaMacInitialization+0x2d6>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 8027b1e:	0038      	movs	r0, r7
 8027b20:	49c5      	ldr	r1, [pc, #788]	; (8027e38 <LoRaMacInitialization+0x360>)
 8027b22:	f002 fa27 	bl	8029f74 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 8027b26:	22b6      	movs	r2, #182	; 0xb6
 8027b28:	4dc4      	ldr	r5, [pc, #784]	; (8027e3c <LoRaMacInitialization+0x364>)
 8027b2a:	2100      	movs	r1, #0
 8027b2c:	0028      	movs	r0, r5
 8027b2e:	0052      	lsls	r2, r2, #1
 8027b30:	f7fc fa72 	bl	8024018 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8027b34:	4cc2      	ldr	r4, [pc, #776]	; (8027e40 <LoRaMacInitialization+0x368>)
 8027b36:	2100      	movs	r1, #0
 8027b38:	0020      	movs	r0, r4
 8027b3a:	4ac2      	ldr	r2, [pc, #776]	; (8027e44 <LoRaMacInitialization+0x36c>)
 8027b3c:	f7fc fa6c 	bl	8024018 <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 8027b40:	2101      	movs	r1, #1
 8027b42:	4bc1      	ldr	r3, [pc, #772]	; (8027e48 <LoRaMacInitialization+0x370>)
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.NvmCtx->Region = region;
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 8027b44:	2200      	movs	r2, #0
    MacCtx.AckTimeoutRetriesCounter = 1;
 8027b46:	54e1      	strb	r1, [r4, r3]
    MacCtx.AckTimeoutRetries = 1;
 8027b48:	4bc0      	ldr	r3, [pc, #768]	; (8027e4c <LoRaMacInitialization+0x374>)
    MacCtx.NvmCtx = &NvmMacCtx;
 8027b4a:	4ec1      	ldr	r6, [pc, #772]	; (8027e50 <LoRaMacInitialization+0x378>)
    MacCtx.AckTimeoutRetries = 1;
 8027b4c:	54e1      	strb	r1, [r4, r3]
    MacCtx.NvmCtx->Region = region;
 8027b4e:	9b01      	ldr	r3, [sp, #4]
    MacCtx.NvmCtx = &NvmMacCtx;
 8027b50:	51a5      	str	r5, [r4, r6]
    MacCtx.NvmCtx->Region = region;
 8027b52:	702b      	strb	r3, [r5, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 8027b54:	002b      	movs	r3, r5
 8027b56:	337c      	adds	r3, #124	; 0x7c
 8027b58:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->RepeaterSupport = false;
 8027b5a:	002b      	movs	r3, r5
 8027b5c:	33ca      	adds	r3, #202	; 0xca
 8027b5e:	701a      	strb	r2, [r3, #0]

    // Setup version
    MacCtx.NvmCtx->Version.Value = LORAMAC_VERSION;
 8027b60:	4bbc      	ldr	r3, [pc, #752]	; (8027e54 <LoRaMacInitialization+0x37c>)
 8027b62:	35fc      	adds	r5, #252	; 0xfc
 8027b64:	666b      	str	r3, [r5, #100]	; 0x64

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8027b66:	230f      	movs	r3, #15
 8027b68:	ad06      	add	r5, sp, #24
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027b6a:	0029      	movs	r1, r5
 8027b6c:	9801      	ldr	r0, [sp, #4]
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8027b6e:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027b70:	f008 f91c 	bl	802fdac <RegionGetPhyParam>
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 8027b74:	59a3      	ldr	r3, [r4, r6]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027b76:	9005      	str	r0, [sp, #20]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 8027b78:	1e42      	subs	r2, r0, #1
 8027b7a:	4190      	sbcs	r0, r2
 8027b7c:	001a      	movs	r2, r3
 8027b7e:	32c9      	adds	r2, #201	; 0xc9
 8027b80:	7010      	strb	r0, [r2, #0]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8027b82:	200a      	movs	r0, #10
 8027b84:	7028      	strb	r0, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027b86:	0029      	movs	r1, r5
 8027b88:	7818      	ldrb	r0, [r3, #0]
 8027b8a:	f008 f90f 	bl	802fdac <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;

    getPhy.Attribute = PHY_DEF_TX_DR;
 8027b8e:	2206      	movs	r2, #6
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 8027b90:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_TX_DR;
 8027b92:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027b94:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 8027b96:	7118      	strb	r0, [r3, #4]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027b98:	9005      	str	r0, [sp, #20]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027b9a:	7818      	ldrb	r0, [r3, #0]
 8027b9c:	f008 f906 	bl	802fdac <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8027ba0:	2210      	movs	r2, #16
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 8027ba2:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8027ba4:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027ba6:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 8027ba8:	7158      	strb	r0, [r3, #5]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027baa:	9005      	str	r0, [sp, #20]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027bac:	7818      	ldrb	r0, [r3, #0]
 8027bae:	f008 f8fd 	bl	802fdac <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8027bb2:	2211      	movs	r2, #17
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8027bb4:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8027bb6:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027bb8:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8027bba:	6118      	str	r0, [r3, #16]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027bbc:	9005      	str	r0, [sp, #20]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027bbe:	7818      	ldrb	r0, [r3, #0]
 8027bc0:	f008 f8f4 	bl	802fdac <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8027bc4:	2212      	movs	r2, #18
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8027bc6:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8027bc8:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027bca:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8027bcc:	6158      	str	r0, [r3, #20]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027bce:	9005      	str	r0, [sp, #20]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027bd0:	7818      	ldrb	r0, [r3, #0]
 8027bd2:	f008 f8eb 	bl	802fdac <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8027bd6:	2213      	movs	r2, #19
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8027bd8:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8027bda:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027bdc:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8027bde:	6198      	str	r0, [r3, #24]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027be0:	9005      	str	r0, [sp, #20]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027be2:	7818      	ldrb	r0, [r3, #0]
 8027be4:	f008 f8e2 	bl	802fdac <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8027be8:	2214      	movs	r2, #20
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8027bea:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8027bec:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027bee:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8027bf0:	61d8      	str	r0, [r3, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027bf2:	9005      	str	r0, [sp, #20]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027bf4:	7818      	ldrb	r0, [r3, #0]
 8027bf6:	f008 f8d9 	bl	802fdac <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8027bfa:	2217      	movs	r2, #23
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8027bfc:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8027bfe:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027c00:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8027c02:	6218      	str	r0, [r3, #32]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027c04:	9005      	str	r0, [sp, #20]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027c06:	7818      	ldrb	r0, [r3, #0]
 8027c08:	f008 f8d0 	bl	802fdac <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8027c0c:	59a3      	ldr	r3, [r4, r6]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027c0e:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8027c10:	1d9a      	adds	r2, r3, #6
 8027c12:	77d0      	strb	r0, [r2, #31]
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8027c14:	2218      	movs	r2, #24
 8027c16:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027c18:	9005      	str	r0, [sp, #20]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027c1a:	7818      	ldrb	r0, [r3, #0]
 8027c1c:	f008 f8c6 	bl	802fdac <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8027c20:	2219      	movs	r2, #25
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8027c22:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_RX2_DR;
 8027c24:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027c26:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8027c28:	6298      	str	r0, [r3, #40]	; 0x28
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8027c2a:	6318      	str	r0, [r3, #48]	; 0x30
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027c2c:	9005      	str	r0, [sp, #20]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027c2e:	7818      	ldrb	r0, [r3, #0]
 8027c30:	f008 f8bc 	bl	802fdac <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8027c34:	59a3      	ldr	r3, [r4, r6]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027c36:	9005      	str	r0, [sp, #20]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8027c38:	001a      	movs	r2, r3
 8027c3a:	b2c0      	uxtb	r0, r0
 8027c3c:	322c      	adds	r2, #44	; 0x2c
 8027c3e:	7010      	strb	r0, [r2, #0]
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8027c40:	7210      	strb	r0, [r2, #8]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8027c42:	221e      	movs	r2, #30
 8027c44:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027c46:	0029      	movs	r1, r5
 8027c48:	7818      	ldrb	r0, [r3, #0]
 8027c4a:	f008 f8af 	bl	802fdac <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8027c4e:	59a3      	ldr	r3, [r4, r6]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027c50:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8027c52:	001a      	movs	r2, r3
 8027c54:	3238      	adds	r2, #56	; 0x38
 8027c56:	7010      	strb	r0, [r2, #0]
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8027c58:	221f      	movs	r2, #31
 8027c5a:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027c5c:	9005      	str	r0, [sp, #20]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027c5e:	7818      	ldrb	r0, [r3, #0]
 8027c60:	f008 f8a4 	bl	802fdac <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8027c64:	59a3      	ldr	r3, [r4, r6]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027c66:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8027c68:	001a      	movs	r2, r3
 8027c6a:	3239      	adds	r2, #57	; 0x39
 8027c6c:	7010      	strb	r0, [r2, #0]
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8027c6e:	2220      	movs	r2, #32
 8027c70:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027c72:	9005      	str	r0, [sp, #20]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027c74:	7818      	ldrb	r0, [r3, #0]
 8027c76:	f008 f899 	bl	802fdac <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8027c7a:	2221      	movs	r2, #33	; 0x21
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 8027c7c:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8027c7e:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027c80:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 8027c82:	63d8      	str	r0, [r3, #60]	; 0x3c
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027c84:	9005      	str	r0, [sp, #20]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027c86:	7818      	ldrb	r0, [r3, #0]
 8027c88:	f008 f890 	bl	802fdac <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8027c8c:	220b      	movs	r2, #11
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 8027c8e:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8027c90:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027c92:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 8027c94:	6418      	str	r0, [r3, #64]	; 0x40
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027c96:	9005      	str	r0, [sp, #20]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027c98:	7818      	ldrb	r0, [r3, #0]
 8027c9a:	f008 f887 	bl	802fdac <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;
 8027c9e:	23fd      	movs	r3, #253	; 0xfd
 8027ca0:	009b      	lsls	r3, r3, #2
 8027ca2:	52e0      	strh	r0, [r4, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8027ca4:	230c      	movs	r3, #12
 8027ca6:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027ca8:	59a3      	ldr	r3, [r4, r6]
 8027caa:	0029      	movs	r1, r5
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027cac:	9005      	str	r0, [sp, #20]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027cae:	7818      	ldrb	r0, [r3, #0]
 8027cb0:	f008 f87c 	bl	802fdac <RegionGetPhyParam>
    MacCtx.AdrAckDelay = phyParam.Value;

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 8027cb4:	2101      	movs	r1, #1
    MacCtx.AdrAckDelay = phyParam.Value;
 8027cb6:	4b68      	ldr	r3, [pc, #416]	; (8027e58 <LoRaMacInitialization+0x380>)
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 8027cb8:	2506      	movs	r5, #6
    MacCtx.AdrAckDelay = phyParam.Value;
 8027cba:	52e0      	strh	r0, [r4, r3]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 8027cbc:	59a3      	ldr	r3, [r4, r6]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8027cbe:	9005      	str	r0, [sp, #20]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 8027cc0:	1d5a      	adds	r2, r3, #5
 8027cc2:	77d1      	strb	r1, [r2, #31]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 8027cc4:	001a      	movs	r2, r3
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
 8027cc6:	200a      	movs	r0, #10
    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 8027cc8:	3288      	adds	r2, #136	; 0x88
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
 8027cca:	6098      	str	r0, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 8027ccc:	731d      	strb	r5, [r3, #12]
    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 8027cce:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 8027cd0:	0018      	movs	r0, r3
 8027cd2:	308c      	adds	r0, #140	; 0x8c
 8027cd4:	7005      	strb	r5, [r0, #0]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 8027cd6:	0018      	movs	r0, r3
 8027cd8:	3090      	adds	r0, #144	; 0x90
 8027cda:	0002      	movs	r2, r0
 8027cdc:	6918      	ldr	r0, [r3, #16]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8027cde:	2500      	movs	r5, #0
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 8027ce0:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 8027ce2:	0018      	movs	r0, r3
 8027ce4:	3094      	adds	r0, #148	; 0x94
 8027ce6:	0002      	movs	r2, r0
 8027ce8:	6958      	ldr	r0, [r3, #20]
    params.NvmCtx = NULL;
 8027cea:	950a      	str	r5, [sp, #40]	; 0x28
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 8027cec:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 8027cee:	0018      	movs	r0, r3
 8027cf0:	3098      	adds	r0, #152	; 0x98
 8027cf2:	0002      	movs	r2, r0
 8027cf4:	6998      	ldr	r0, [r3, #24]
 8027cf6:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 8027cf8:	0018      	movs	r0, r3
 8027cfa:	309c      	adds	r0, #156	; 0x9c
 8027cfc:	0002      	movs	r2, r0
 8027cfe:	69d8      	ldr	r0, [r3, #28]
 8027d00:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 8027d02:	0018      	movs	r0, r3
 8027d04:	30a0      	adds	r0, #160	; 0xa0
 8027d06:	0002      	movs	r2, r0
 8027d08:	6a18      	ldr	r0, [r3, #32]
 8027d0a:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 8027d0c:	0018      	movs	r0, r3
 8027d0e:	30a4      	adds	r0, #164	; 0xa4
 8027d10:	7001      	strb	r1, [r0, #0]
    params.Type = INIT_TYPE_DEFAULTS;
 8027d12:	a90a      	add	r1, sp, #40	; 0x28
 8027d14:	710d      	strb	r5, [r1, #4]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8027d16:	7818      	ldrb	r0, [r3, #0]
 8027d18:	f008 f85b 	bl	802fdd2 <RegionInitDefaults>

    ResetMacParameters( );
 8027d1c:	f7fe fae6 	bl	80262ec <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 8027d20:	59a3      	ldr	r3, [r4, r6]
 8027d22:	2101      	movs	r1, #1
 8027d24:	001a      	movs	r2, r3
 8027d26:	327d      	adds	r2, #125	; 0x7d
 8027d28:	7011      	strb	r1, [r2, #0]

    MacCtx.MacPrimitives = primitives;
 8027d2a:	22d1      	movs	r2, #209	; 0xd1
    MacCtx.MacCallbacks = callbacks;
 8027d2c:	9800      	ldr	r0, [sp, #0]
    MacCtx.MacPrimitives = primitives;
 8027d2e:	0092      	lsls	r2, r2, #2
 8027d30:	50a7      	str	r7, [r4, r2]
    MacCtx.MacCallbacks = callbacks;
 8027d32:	3204      	adds	r2, #4
 8027d34:	50a0      	str	r0, [r4, r2]
    MacCtx.MacFlags.Value = 0;
 8027d36:	4a49      	ldr	r2, [pc, #292]	; (8027e5c <LoRaMacInitialization+0x384>)
    MacCtx.MacState = LORAMAC_STOPPED;

    // Reset duty cycle times
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 8027d38:	33fc      	adds	r3, #252	; 0xfc
    MacCtx.MacFlags.Value = 0;
 8027d3a:	54a5      	strb	r5, [r4, r2]
    MacCtx.MacState = LORAMAC_STOPPED;
 8027d3c:	3a42      	subs	r2, #66	; 0x42
 8027d3e:	3aff      	subs	r2, #255	; 0xff
 8027d40:	50a1      	str	r1, [r4, r2]
    MacCtx.NvmCtx->AggregatedTimeOff = 0;

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8027d42:	4847      	ldr	r0, [pc, #284]	; (8027e60 <LoRaMacInitialization+0x388>)
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 8027d44:	655d      	str	r5, [r3, #84]	; 0x54
    MacCtx.NvmCtx->AggregatedTimeOff = 0;
 8027d46:	659d      	str	r5, [r3, #88]	; 0x58
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8027d48:	4946      	ldr	r1, [pc, #280]	; (8027e64 <LoRaMacInitialization+0x38c>)
 8027d4a:	f007 f9a2 	bl	802f092 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8027d4e:	4946      	ldr	r1, [pc, #280]	; (8027e68 <LoRaMacInitialization+0x390>)
 8027d50:	4846      	ldr	r0, [pc, #280]	; (8027e6c <LoRaMacInitialization+0x394>)
 8027d52:	f007 f99e 	bl	802f092 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8027d56:	4946      	ldr	r1, [pc, #280]	; (8027e70 <LoRaMacInitialization+0x398>)
 8027d58:	4846      	ldr	r0, [pc, #280]	; (8027e74 <LoRaMacInitialization+0x39c>)
 8027d5a:	f007 f99a 	bl	802f092 <TimerInit>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8027d5e:	4946      	ldr	r1, [pc, #280]	; (8027e78 <LoRaMacInitialization+0x3a0>)
 8027d60:	4846      	ldr	r0, [pc, #280]	; (8027e7c <LoRaMacInitialization+0x3a4>)
 8027d62:	f007 f996 	bl	802f092 <TimerInit>

    // Store the current initialization time
    MacCtx.NvmCtx->InitializationTime = SysTimeGetMcuTime( );
 8027d66:	59a5      	ldr	r5, [r4, r6]
 8027d68:	af02      	add	r7, sp, #8
 8027d6a:	3559      	adds	r5, #89	; 0x59
 8027d6c:	0038      	movs	r0, r7
 8027d6e:	35ff      	adds	r5, #255	; 0xff
 8027d70:	f007 f94e 	bl	802f010 <SysTimeGetMcuTime>
 8027d74:	cf0c      	ldmia	r7!, {r2, r3}
 8027d76:	c50c      	stmia	r5!, {r2, r3}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8027d78:	23d3      	movs	r3, #211	; 0xd3
 8027d7a:	4a41      	ldr	r2, [pc, #260]	; (8027e80 <LoRaMacInitialization+0x3a8>)
 8027d7c:	009b      	lsls	r3, r3, #2
 8027d7e:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8027d80:	4a40      	ldr	r2, [pc, #256]	; (8027e84 <LoRaMacInitialization+0x3ac>)
 8027d82:	3308      	adds	r3, #8
 8027d84:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8027d86:	4a40      	ldr	r2, [pc, #256]	; (8027e88 <LoRaMacInitialization+0x3b0>)
 8027d88:	3308      	adds	r3, #8
 8027d8a:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8027d8c:	4a3f      	ldr	r2, [pc, #252]	; (8027e8c <LoRaMacInitialization+0x3b4>)
 8027d8e:	3b0c      	subs	r3, #12
 8027d90:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
    Radio.Init( &MacCtx.RadioEvents );
 8027d92:	4f3f      	ldr	r7, [pc, #252]	; (8027e90 <LoRaMacInitialization+0x3b8>)
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8027d94:	4a3f      	ldr	r2, [pc, #252]	; (8027e94 <LoRaMacInitialization+0x3bc>)
 8027d96:	3308      	adds	r3, #8
 8027d98:	50e2      	str	r2, [r4, r3]
    Radio.Init( &MacCtx.RadioEvents );
 8027d9a:	683b      	ldr	r3, [r7, #0]
 8027d9c:	483e      	ldr	r0, [pc, #248]	; (8027e98 <LoRaMacInitialization+0x3c0>)
 8027d9e:	9301      	str	r3, [sp, #4]
 8027da0:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 8027da2:	483e      	ldr	r0, [pc, #248]	; (8027e9c <LoRaMacInitialization+0x3c4>)
 8027da4:	f7fc fc04 	bl	80245b0 <SecureElementInit>
 8027da8:	2800      	cmp	r0, #0
 8027daa:	d003      	beq.n	8027db4 <LoRaMacInitialization+0x2dc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8027dac:	2511      	movs	r5, #17
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );

    return LORAMAC_STATUS_OK;
}
 8027dae:	0028      	movs	r0, r5
 8027db0:	b015      	add	sp, #84	; 0x54
 8027db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 8027db4:	483a      	ldr	r0, [pc, #232]	; (8027ea0 <LoRaMacInitialization+0x3c8>)
 8027db6:	f002 fa33 	bl	802a220 <LoRaMacCryptoInit>
 8027dba:	2800      	cmp	r0, #0
 8027dbc:	d1f6      	bne.n	8027dac <LoRaMacInitialization+0x2d4>
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 8027dbe:	4839      	ldr	r0, [pc, #228]	; (8027ea4 <LoRaMacInitialization+0x3cc>)
 8027dc0:	f001 ff90 	bl	8029ce4 <LoRaMacCommandsInit>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8027dc4:	2513      	movs	r5, #19
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 8027dc6:	2800      	cmp	r0, #0
 8027dc8:	d1f1      	bne.n	8027dae <LoRaMacInitialization+0x2d6>
    if( LoRaMacCryptoSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8027dca:	59a0      	ldr	r0, [r4, r6]
 8027dcc:	3050      	adds	r0, #80	; 0x50
 8027dce:	f002 fab5 	bl	802a33c <LoRaMacCryptoSetMulticastReference>
 8027dd2:	1e05      	subs	r5, r0, #0
 8027dd4:	d1ea      	bne.n	8027dac <LoRaMacInitialization+0x2d4>
    srand1( Radio.Random( ) );
 8027dd6:	697b      	ldr	r3, [r7, #20]
 8027dd8:	9301      	str	r3, [sp, #4]
 8027dda:	4798      	blx	r3
 8027ddc:	f7fc f8fa 	bl	8023fd4 <srand1>
    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 8027de0:	59a3      	ldr	r3, [r4, r6]
 8027de2:	337d      	adds	r3, #125	; 0x7d
 8027de4:	7818      	ldrb	r0, [r3, #0]
 8027de6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027de8:	9301      	str	r3, [sp, #4]
 8027dea:	4798      	blx	r3
    Radio.Sleep( );
 8027dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027dee:	9301      	str	r3, [sp, #4]
 8027df0:	4798      	blx	r3
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 8027df2:	9b00      	ldr	r3, [sp, #0]
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 8027df4:	a908      	add	r1, sp, #32
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 8027df6:	685b      	ldr	r3, [r3, #4]
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 8027df8:	a80c      	add	r0, sp, #48	; 0x30
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 8027dfa:	9301      	str	r3, [sp, #4]
 8027dfc:	9308      	str	r3, [sp, #32]
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 8027dfe:	9b00      	ldr	r3, [sp, #0]
 8027e00:	68db      	ldr	r3, [r3, #12]
 8027e02:	9300      	str	r3, [sp, #0]
 8027e04:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8027e06:	4b28      	ldr	r3, [pc, #160]	; (8027ea8 <LoRaMacInitialization+0x3d0>)
 8027e08:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8027e0a:	4b28      	ldr	r3, [pc, #160]	; (8027eac <LoRaMacInitialization+0x3d4>)
 8027e0c:	930d      	str	r3, [sp, #52]	; 0x34
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8027e0e:	4b28      	ldr	r3, [pc, #160]	; (8027eb0 <LoRaMacInitialization+0x3d8>)
 8027e10:	930e      	str	r3, [sp, #56]	; 0x38
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8027e12:	4b28      	ldr	r3, [pc, #160]	; (8027eb4 <LoRaMacInitialization+0x3dc>)
 8027e14:	930f      	str	r3, [sp, #60]	; 0x3c
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 8027e16:	59a3      	ldr	r3, [r4, r6]
 8027e18:	001a      	movs	r2, r3
 8027e1a:	324c      	adds	r2, #76	; 0x4c
 8027e1c:	9210      	str	r2, [sp, #64]	; 0x40
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 8027e1e:	3238      	adds	r2, #56	; 0x38
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 8027e20:	9311      	str	r3, [sp, #68]	; 0x44
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 8027e22:	9212      	str	r2, [sp, #72]	; 0x48
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 8027e24:	3350      	adds	r3, #80	; 0x50
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 8027e26:	4a24      	ldr	r2, [pc, #144]	; (8027eb8 <LoRaMacInitialization+0x3e0>)
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 8027e28:	9313      	str	r3, [sp, #76]	; 0x4c
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 8027e2a:	f001 f8b5 	bl	8028f98 <LoRaMacClassBInit>
    MacCtx.AllowRequests = requestState;
 8027e2e:	2201      	movs	r2, #1
 8027e30:	4b22      	ldr	r3, [pc, #136]	; (8027ebc <LoRaMacInitialization+0x3e4>)
 8027e32:	54e2      	strb	r2, [r4, r3]
    return LORAMAC_STATUS_OK;
 8027e34:	e7bb      	b.n	8027dae <LoRaMacInitialization+0x2d6>
 8027e36:	46c0      	nop			; (mov r8, r8)
 8027e38:	0802f85d 	.word	0x0802f85d
 8027e3c:	20008d74 	.word	0x20008d74
 8027e40:	200088e8 	.word	0x200088e8
 8027e44:	0000048c 	.word	0x0000048c
 8027e48:	00000412 	.word	0x00000412
 8027e4c:	00000411 	.word	0x00000411
 8027e50:	00000484 	.word	0x00000484
 8027e54:	01000300 	.word	0x01000300
 8027e58:	000003f6 	.word	0x000003f6
 8027e5c:	00000481 	.word	0x00000481
 8027e60:	20008c50 	.word	0x20008c50
 8027e64:	0802705d 	.word	0x0802705d
 8027e68:	080269b9 	.word	0x080269b9
 8027e6c:	20008c68 	.word	0x20008c68
 8027e70:	08026a19 	.word	0x08026a19
 8027e74:	20008c80 	.word	0x20008c80
 8027e78:	08026169 	.word	0x08026169
 8027e7c:	20008ce0 	.word	0x20008ce0
 8027e80:	0802648d 	.word	0x0802648d
 8027e84:	08026445 	.word	0x08026445
 8027e88:	08026099 	.word	0x08026099
 8027e8c:	0802606d 	.word	0x0802606d
 8027e90:	08031484 	.word	0x08031484
 8027e94:	080260c5 	.word	0x080260c5
 8027e98:	20008c34 	.word	0x20008c34
 8027e9c:	0802f83f 	.word	0x0802f83f
 8027ea0:	0802f835 	.word	0x0802f835
 8027ea4:	0802f849 	.word	0x0802f849
 8027ea8:	20008d4c 	.word	0x20008d4c
 8027eac:	20008d04 	.word	0x20008d04
 8027eb0:	20008d38 	.word	0x20008d38
 8027eb4:	20008d69 	.word	0x20008d69
 8027eb8:	0802f853 	.word	0x0802f853
 8027ebc:	00000482 	.word	0x00000482

08027ec0 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 8027ec0:	23d0      	movs	r3, #208	; 0xd0
 8027ec2:	2000      	movs	r0, #0
 8027ec4:	4a01      	ldr	r2, [pc, #4]	; (8027ecc <LoRaMacStart+0xc>)
 8027ec6:	009b      	lsls	r3, r3, #2
 8027ec8:	50d0      	str	r0, [r2, r3]
    return LORAMAC_STATUS_OK;
}
 8027eca:	4770      	bx	lr
 8027ecc:	200088e8 	.word	0x200088e8

08027ed0 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8027ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027ed2:	b089      	sub	sp, #36	; 0x24
 8027ed4:	0005      	movs	r5, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8027ed6:	4668      	mov	r0, sp
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8027ed8:	4a29      	ldr	r2, [pc, #164]	; (8027f80 <LoRaMacQueryTxPossible+0xb0>)
 8027eda:	4b2a      	ldr	r3, [pc, #168]	; (8027f84 <LoRaMacQueryTxPossible+0xb4>)
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
    size_t macCmdsSize = 0;
 8027edc:	2700      	movs	r7, #0
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8027ede:	58d3      	ldr	r3, [r2, r3]
{
 8027ee0:	000c      	movs	r4, r1
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8027ee2:	1d1a      	adds	r2, r3, #4
 8027ee4:	6fd6      	ldr	r6, [r2, #124]	; 0x7c
 8027ee6:	9601      	str	r6, [sp, #4]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8027ee8:	795a      	ldrb	r2, [r3, #5]
 8027eea:	7082      	strb	r2, [r0, #2]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8027eec:	466a      	mov	r2, sp
 8027eee:	7918      	ldrb	r0, [r3, #4]
 8027ef0:	3203      	adds	r2, #3
 8027ef2:	7010      	strb	r0, [r2, #0]
    size_t macCmdsSize = 0;
 8027ef4:	9702      	str	r7, [sp, #8]

    if( txInfo == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8027ef6:	2003      	movs	r0, #3
    if( txInfo == NULL )
 8027ef8:	42b9      	cmp	r1, r7
 8027efa:	d038      	beq.n	8027f6e <LoRaMacQueryTxPossible+0x9e>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 8027efc:	21fc      	movs	r1, #252	; 0xfc
 8027efe:	468c      	mov	ip, r1
 8027f00:	449c      	add	ip, r3
 8027f02:	4661      	mov	r1, ip
 8027f04:	a803      	add	r0, sp, #12
    adrNext.UpdateChanMask = false;
 8027f06:	7107      	strb	r7, [r0, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8027f08:	001f      	movs	r7, r3
    adrNext.Version = MacCtx.NvmCtx->Version;
 8027f0a:	6e49      	ldr	r1, [r1, #100]	; 0x64
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8027f0c:	377e      	adds	r7, #126	; 0x7e
    adrNext.Version = MacCtx.NvmCtx->Version;
 8027f0e:	9103      	str	r1, [sp, #12]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8027f10:	783f      	ldrb	r7, [r7, #0]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8027f12:	6086      	str	r6, [r0, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8027f14:	26fd      	movs	r6, #253	; 0xfd
 8027f16:	491a      	ldr	r1, [pc, #104]	; (8027f80 <LoRaMacQueryTxPossible+0xb0>)
 8027f18:	00b6      	lsls	r6, r6, #2
 8027f1a:	5989      	ldr	r1, [r1, r6]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8027f1c:	7147      	strb	r7, [r0, #5]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8027f1e:	9106      	str	r1, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8027f20:	0019      	movs	r1, r3
 8027f22:	3184      	adds	r1, #132	; 0x84
 8027f24:	8809      	ldrh	r1, [r1, #0]
 8027f26:	ba49      	rev16	r1, r1
 8027f28:	8201      	strh	r1, [r0, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8027f2a:	0019      	movs	r1, r3
 8027f2c:	31b8      	adds	r1, #184	; 0xb8
 8027f2e:	7809      	ldrb	r1, [r1, #0]
 8027f30:	7481      	strb	r1, [r0, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8027f32:	4669      	mov	r1, sp
    adrNext.Region = MacCtx.NvmCtx->Region;
 8027f34:	781b      	ldrb	r3, [r3, #0]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8027f36:	3102      	adds	r1, #2
    adrNext.Region = MacCtx.NvmCtx->Region;
 8027f38:	74c3      	strb	r3, [r0, #19]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8027f3a:	ab01      	add	r3, sp, #4
 8027f3c:	f007 fc93 	bl	802f866 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8027f40:	466b      	mov	r3, sp
 8027f42:	2002      	movs	r0, #2
 8027f44:	5618      	ldrsb	r0, [r3, r0]
 8027f46:	f7fe f8f1 	bl	802612c <GetMaxAppPayloadWithoutFOptsLength>
 8027f4a:	7060      	strb	r0, [r4, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8027f4c:	a802      	add	r0, sp, #8
 8027f4e:	f001 ff95 	bl	8029e7c <LoRaMacCommandsGetSizeSerializedCmds>
 8027f52:	2800      	cmp	r0, #0
 8027f54:	d111      	bne.n	8027f7a <LoRaMacQueryTxPossible+0xaa>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8027f56:	9b02      	ldr	r3, [sp, #8]
 8027f58:	2b0f      	cmp	r3, #15
 8027f5a:	d80a      	bhi.n	8027f72 <LoRaMacQueryTxPossible+0xa2>
 8027f5c:	7862      	ldrb	r2, [r4, #1]
 8027f5e:	4293      	cmp	r3, r2
 8027f60:	d807      	bhi.n	8027f72 <LoRaMacQueryTxPossible+0xa2>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8027f62:	1ad1      	subs	r1, r2, r3

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8027f64:	18eb      	adds	r3, r5, r3
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8027f66:	7021      	strb	r1, [r4, #0]
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8027f68:	429a      	cmp	r2, r3
 8027f6a:	d200      	bcs.n	8027f6e <LoRaMacQueryTxPossible+0x9e>
        {
            return LORAMAC_STATUS_OK;
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8027f6c:	3008      	adds	r0, #8
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 8027f6e:	b009      	add	sp, #36	; 0x24
 8027f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 8027f72:	2300      	movs	r3, #0
        return LORAMAC_STATUS_LENGTH_ERROR;
 8027f74:	2008      	movs	r0, #8
        txInfo->MaxPossibleApplicationDataSize = 0;
 8027f76:	7023      	strb	r3, [r4, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8027f78:	e7f9      	b.n	8027f6e <LoRaMacQueryTxPossible+0x9e>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8027f7a:	2013      	movs	r0, #19
 8027f7c:	e7f7      	b.n	8027f6e <LoRaMacQueryTxPossible+0x9e>
 8027f7e:	46c0      	nop			; (mov r8, r8)
 8027f80:	200088e8 	.word	0x200088e8
 8027f84:	00000484 	.word	0x00000484

08027f88 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8027f88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8027f8a:	0004      	movs	r4, r0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8027f8c:	2003      	movs	r0, #3
    if( mibGet == NULL )
 8027f8e:	2c00      	cmp	r4, #0
 8027f90:	d034      	beq.n	8027ffc <LoRaMacMibGetRequestConfirm+0x74>
    }

    switch( mibGet->Type )
 8027f92:	7820      	ldrb	r0, [r4, #0]
 8027f94:	2828      	cmp	r0, #40	; 0x28
 8027f96:	d900      	bls.n	8027f9a <LoRaMacMibGetRequestConfirm+0x12>
 8027f98:	e106      	b.n	80281a8 <LoRaMacMibGetRequestConfirm+0x220>
 8027f9a:	f7f8 f8af 	bl	80200fc <__gnu_thumb1_case_uhi>
 8027f9e:	0029      	.short	0x0029
 8027fa0:	00390031 	.word	0x00390031
 8027fa4:	0041003e 	.word	0x0041003e
 8027fa8:	004d0047 	.word	0x004d0047
 8027fac:	01050105 	.word	0x01050105
 8027fb0:	01050105 	.word	0x01050105
 8027fb4:	01050105 	.word	0x01050105
 8027fb8:	01050105 	.word	0x01050105
 8027fbc:	00570052 	.word	0x00570052
 8027fc0:	0066005c 	.word	0x0066005c
 8027fc4:	0074006c 	.word	0x0074006c
 8027fc8:	00820079 	.word	0x00820079
 8027fcc:	0085007f 	.word	0x0085007f
 8027fd0:	0090008a 	.word	0x0090008a
 8027fd4:	009a0095 	.word	0x009a0095
 8027fd8:	00a4009f 	.word	0x00a4009f
 8027fdc:	00b300a9 	.word	0x00b300a9
 8027fe0:	00b800ae 	.word	0x00b800ae
 8027fe4:	00c200bd 	.word	0x00c200bd
 8027fe8:	00c900f6 	.word	0x00c900f6
 8027fec:	00fb0105 	.word	0x00fb0105
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 8027ff0:	4a6f      	ldr	r2, [pc, #444]	; (80281b0 <LoRaMacMibGetRequestConfirm+0x228>)
 8027ff2:	4b70      	ldr	r3, [pc, #448]	; (80281b4 <LoRaMacMibGetRequestConfirm+0x22c>)
 8027ff4:	58d3      	ldr	r3, [r2, r3]
 8027ff6:	337c      	adds	r3, #124	; 0x7c
 8027ff8:	781b      	ldrb	r3, [r3, #0]
 8027ffa:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 8027ffc:	b004      	add	sp, #16
 8027ffe:	bd70      	pop	{r4, r5, r6, pc}
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 8028000:	4b6c      	ldr	r3, [pc, #432]	; (80281b4 <LoRaMacMibGetRequestConfirm+0x22c>)
 8028002:	4a6b      	ldr	r2, [pc, #428]	; (80281b0 <LoRaMacMibGetRequestConfirm+0x228>)
 8028004:	58d2      	ldr	r2, [r2, r3]
 8028006:	23b2      	movs	r3, #178	; 0xb2
 8028008:	005b      	lsls	r3, r3, #1
 802800a:	5cd3      	ldrb	r3, [r2, r3]
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 802800c:	7123      	strb	r3, [r4, #4]
            break;
 802800e:	e002      	b.n	8028016 <LoRaMacMibGetRequestConfirm+0x8e>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8028010:	f7fc fb62 	bl	80246d8 <SecureElementGetDevEui>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8028014:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8028016:	2000      	movs	r0, #0
            break;
 8028018:	e7f0      	b.n	8027ffc <LoRaMacMibGetRequestConfirm+0x74>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 802801a:	f7fc fb73 	bl	8024704 <SecureElementGetJoinEui>
 802801e:	e7f9      	b.n	8028014 <LoRaMacMibGetRequestConfirm+0x8c>
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 8028020:	4a63      	ldr	r2, [pc, #396]	; (80281b0 <LoRaMacMibGetRequestConfirm+0x228>)
 8028022:	4b64      	ldr	r3, [pc, #400]	; (80281b4 <LoRaMacMibGetRequestConfirm+0x22c>)
 8028024:	58d3      	ldr	r3, [r2, r3]
 8028026:	337e      	adds	r3, #126	; 0x7e
 8028028:	781b      	ldrb	r3, [r3, #0]
 802802a:	e7ef      	b.n	802800c <LoRaMacMibGetRequestConfirm+0x84>
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 802802c:	4a60      	ldr	r2, [pc, #384]	; (80281b0 <LoRaMacMibGetRequestConfirm+0x228>)
 802802e:	4b61      	ldr	r3, [pc, #388]	; (80281b4 <LoRaMacMibGetRequestConfirm+0x22c>)
 8028030:	58d3      	ldr	r3, [r2, r3]
 8028032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 8028034:	6063      	str	r3, [r4, #4]
 8028036:	e7ee      	b.n	8028016 <LoRaMacMibGetRequestConfirm+0x8e>
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 8028038:	4a5d      	ldr	r2, [pc, #372]	; (80281b0 <LoRaMacMibGetRequestConfirm+0x228>)
 802803a:	4b5e      	ldr	r3, [pc, #376]	; (80281b4 <LoRaMacMibGetRequestConfirm+0x22c>)
 802803c:	58d3      	ldr	r3, [r2, r3]
 802803e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8028040:	e7f8      	b.n	8028034 <LoRaMacMibGetRequestConfirm+0xac>
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 8028042:	4a5b      	ldr	r2, [pc, #364]	; (80281b0 <LoRaMacMibGetRequestConfirm+0x228>)
 8028044:	4b5b      	ldr	r3, [pc, #364]	; (80281b4 <LoRaMacMibGetRequestConfirm+0x22c>)
 8028046:	58d3      	ldr	r3, [r2, r3]
 8028048:	337d      	adds	r3, #125	; 0x7d
 802804a:	e7ed      	b.n	8028028 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 802804c:	4a58      	ldr	r2, [pc, #352]	; (80281b0 <LoRaMacMibGetRequestConfirm+0x228>)
 802804e:	4b59      	ldr	r3, [pc, #356]	; (80281b4 <LoRaMacMibGetRequestConfirm+0x22c>)
 8028050:	58d3      	ldr	r3, [r2, r3]
 8028052:	33ca      	adds	r3, #202	; 0xca
 8028054:	e7e8      	b.n	8028028 <LoRaMacMibGetRequestConfirm+0xa0>
            getPhy.Attribute = PHY_CHANNELS;
 8028056:	231d      	movs	r3, #29
 8028058:	a902      	add	r1, sp, #8
            getPhy.Attribute = PHY_CHANNELS_MASK;
 802805a:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 802805c:	4a54      	ldr	r2, [pc, #336]	; (80281b0 <LoRaMacMibGetRequestConfirm+0x228>)
 802805e:	4b55      	ldr	r3, [pc, #340]	; (80281b4 <LoRaMacMibGetRequestConfirm+0x22c>)
 8028060:	58d3      	ldr	r3, [r2, r3]
 8028062:	7818      	ldrb	r0, [r3, #0]
 8028064:	f007 fea2 	bl	802fdac <RegionGetPhyParam>
 8028068:	e7d4      	b.n	8028014 <LoRaMacMibGetRequestConfirm+0x8c>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 802806a:	4a51      	ldr	r2, [pc, #324]	; (80281b0 <LoRaMacMibGetRequestConfirm+0x228>)
 802806c:	4b51      	ldr	r3, [pc, #324]	; (80281b4 <LoRaMacMibGetRequestConfirm+0x22c>)
 802806e:	58d3      	ldr	r3, [r2, r3]
 8028070:	33a8      	adds	r3, #168	; 0xa8
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 8028072:	3404      	adds	r4, #4
 8028074:	e004      	b.n	8028080 <LoRaMacMibGetRequestConfirm+0xf8>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 8028076:	4a4e      	ldr	r2, [pc, #312]	; (80281b0 <LoRaMacMibGetRequestConfirm+0x228>)
 8028078:	4b4e      	ldr	r3, [pc, #312]	; (80281b4 <LoRaMacMibGetRequestConfirm+0x22c>)
 802807a:	3404      	adds	r4, #4
 802807c:	58d3      	ldr	r3, [r2, r3]
 802807e:	3328      	adds	r3, #40	; 0x28
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8028080:	cb06      	ldmia	r3!, {r1, r2}
 8028082:	c406      	stmia	r4!, {r1, r2}
            break;
 8028084:	e7c7      	b.n	8028016 <LoRaMacMibGetRequestConfirm+0x8e>
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 8028086:	4a4a      	ldr	r2, [pc, #296]	; (80281b0 <LoRaMacMibGetRequestConfirm+0x228>)
 8028088:	4b4a      	ldr	r3, [pc, #296]	; (80281b4 <LoRaMacMibGetRequestConfirm+0x22c>)
 802808a:	58d3      	ldr	r3, [r2, r3]
 802808c:	33b0      	adds	r3, #176	; 0xb0
 802808e:	e7f0      	b.n	8028072 <LoRaMacMibGetRequestConfirm+0xea>
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8028090:	4a47      	ldr	r2, [pc, #284]	; (80281b0 <LoRaMacMibGetRequestConfirm+0x228>)
 8028092:	4b48      	ldr	r3, [pc, #288]	; (80281b4 <LoRaMacMibGetRequestConfirm+0x22c>)
 8028094:	3404      	adds	r4, #4
 8028096:	58d3      	ldr	r3, [r2, r3]
 8028098:	3330      	adds	r3, #48	; 0x30
 802809a:	e7f1      	b.n	8028080 <LoRaMacMibGetRequestConfirm+0xf8>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 802809c:	231b      	movs	r3, #27
 802809e:	a902      	add	r1, sp, #8
 80280a0:	e7db      	b.n	802805a <LoRaMacMibGetRequestConfirm+0xd2>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80280a2:	231a      	movs	r3, #26
 80280a4:	a902      	add	r1, sp, #8
 80280a6:	e7d8      	b.n	802805a <LoRaMacMibGetRequestConfirm+0xd2>
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 80280a8:	4a41      	ldr	r2, [pc, #260]	; (80281b0 <LoRaMacMibGetRequestConfirm+0x228>)
 80280aa:	4b42      	ldr	r3, [pc, #264]	; (80281b4 <LoRaMacMibGetRequestConfirm+0x22c>)
 80280ac:	58d3      	ldr	r3, [r2, r3]
 80280ae:	33a4      	adds	r3, #164	; 0xa4
 80280b0:	e7ba      	b.n	8028028 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 80280b2:	4a3f      	ldr	r2, [pc, #252]	; (80281b0 <LoRaMacMibGetRequestConfirm+0x228>)
 80280b4:	4b3f      	ldr	r3, [pc, #252]	; (80281b4 <LoRaMacMibGetRequestConfirm+0x22c>)
 80280b6:	58d3      	ldr	r3, [r2, r3]
 80280b8:	3390      	adds	r3, #144	; 0x90
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 80280ba:	681b      	ldr	r3, [r3, #0]
 80280bc:	e7ba      	b.n	8028034 <LoRaMacMibGetRequestConfirm+0xac>
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 80280be:	4a3c      	ldr	r2, [pc, #240]	; (80281b0 <LoRaMacMibGetRequestConfirm+0x228>)
 80280c0:	4b3c      	ldr	r3, [pc, #240]	; (80281b4 <LoRaMacMibGetRequestConfirm+0x22c>)
 80280c2:	58d3      	ldr	r3, [r2, r3]
 80280c4:	3394      	adds	r3, #148	; 0x94
 80280c6:	e7f8      	b.n	80280ba <LoRaMacMibGetRequestConfirm+0x132>
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 80280c8:	4a39      	ldr	r2, [pc, #228]	; (80281b0 <LoRaMacMibGetRequestConfirm+0x228>)
 80280ca:	4b3a      	ldr	r3, [pc, #232]	; (80281b4 <LoRaMacMibGetRequestConfirm+0x22c>)
 80280cc:	58d3      	ldr	r3, [r2, r3]
 80280ce:	3398      	adds	r3, #152	; 0x98
 80280d0:	e7f3      	b.n	80280ba <LoRaMacMibGetRequestConfirm+0x132>
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 80280d2:	4a37      	ldr	r2, [pc, #220]	; (80281b0 <LoRaMacMibGetRequestConfirm+0x228>)
 80280d4:	4b37      	ldr	r3, [pc, #220]	; (80281b4 <LoRaMacMibGetRequestConfirm+0x22c>)
 80280d6:	58d3      	ldr	r3, [r2, r3]
 80280d8:	339c      	adds	r3, #156	; 0x9c
 80280da:	e7ee      	b.n	80280ba <LoRaMacMibGetRequestConfirm+0x132>
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 80280dc:	4a34      	ldr	r2, [pc, #208]	; (80281b0 <LoRaMacMibGetRequestConfirm+0x228>)
 80280de:	4b35      	ldr	r3, [pc, #212]	; (80281b4 <LoRaMacMibGetRequestConfirm+0x22c>)
 80280e0:	58d3      	ldr	r3, [r2, r3]
 80280e2:	33a0      	adds	r3, #160	; 0xa0
 80280e4:	e7e9      	b.n	80280ba <LoRaMacMibGetRequestConfirm+0x132>
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 80280e6:	4a32      	ldr	r2, [pc, #200]	; (80281b0 <LoRaMacMibGetRequestConfirm+0x228>)
 80280e8:	4b32      	ldr	r3, [pc, #200]	; (80281b4 <LoRaMacMibGetRequestConfirm+0x22c>)
 80280ea:	58d3      	ldr	r3, [r2, r3]
 80280ec:	795b      	ldrb	r3, [r3, #5]
 80280ee:	e78d      	b.n	802800c <LoRaMacMibGetRequestConfirm+0x84>
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80280f0:	4a2f      	ldr	r2, [pc, #188]	; (80281b0 <LoRaMacMibGetRequestConfirm+0x228>)
 80280f2:	4b30      	ldr	r3, [pc, #192]	; (80281b4 <LoRaMacMibGetRequestConfirm+0x22c>)
 80280f4:	58d3      	ldr	r3, [r2, r3]
 80280f6:	3385      	adds	r3, #133	; 0x85
 80280f8:	e796      	b.n	8028028 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 80280fa:	4a2d      	ldr	r2, [pc, #180]	; (80281b0 <LoRaMacMibGetRequestConfirm+0x228>)
 80280fc:	4b2d      	ldr	r3, [pc, #180]	; (80281b4 <LoRaMacMibGetRequestConfirm+0x22c>)
 80280fe:	58d3      	ldr	r3, [r2, r3]
 8028100:	791b      	ldrb	r3, [r3, #4]
 8028102:	e783      	b.n	802800c <LoRaMacMibGetRequestConfirm+0x84>
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8028104:	4a2a      	ldr	r2, [pc, #168]	; (80281b0 <LoRaMacMibGetRequestConfirm+0x228>)
 8028106:	4b2b      	ldr	r3, [pc, #172]	; (80281b4 <LoRaMacMibGetRequestConfirm+0x22c>)
 8028108:	58d3      	ldr	r3, [r2, r3]
 802810a:	3384      	adds	r3, #132	; 0x84
 802810c:	e78c      	b.n	8028028 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 802810e:	4a28      	ldr	r2, [pc, #160]	; (80281b0 <LoRaMacMibGetRequestConfirm+0x228>)
 8028110:	4b28      	ldr	r3, [pc, #160]	; (80281b4 <LoRaMacMibGetRequestConfirm+0x22c>)
 8028112:	58d3      	ldr	r3, [r2, r3]
 8028114:	3388      	adds	r3, #136	; 0x88
 8028116:	e7d0      	b.n	80280ba <LoRaMacMibGetRequestConfirm+0x132>
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 8028118:	4a25      	ldr	r2, [pc, #148]	; (80281b0 <LoRaMacMibGetRequestConfirm+0x228>)
 802811a:	4b26      	ldr	r3, [pc, #152]	; (80281b4 <LoRaMacMibGetRequestConfirm+0x22c>)
 802811c:	58d3      	ldr	r3, [r2, r3]
 802811e:	338c      	adds	r3, #140	; 0x8c
 8028120:	e782      	b.n	8028028 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8028122:	4a23      	ldr	r2, [pc, #140]	; (80281b0 <LoRaMacMibGetRequestConfirm+0x228>)
 8028124:	4b23      	ldr	r3, [pc, #140]	; (80281b4 <LoRaMacMibGetRequestConfirm+0x22c>)
 8028126:	58d3      	ldr	r3, [r2, r3]
 8028128:	33c0      	adds	r3, #192	; 0xc0
 802812a:	681b      	ldr	r3, [r3, #0]
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 802812c:	6063      	str	r3, [r4, #4]
 802812e:	e772      	b.n	8028016 <LoRaMacMibGetRequestConfirm+0x8e>
    Contexts.MacNvmCtx = &NvmMacCtx;
 8028130:	4e21      	ldr	r6, [pc, #132]	; (80281b8 <LoRaMacMibGetRequestConfirm+0x230>)
 8028132:	4b22      	ldr	r3, [pc, #136]	; (80281bc <LoRaMacMibGetRequestConfirm+0x234>)
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 8028134:	0030      	movs	r0, r6
    Contexts.MacNvmCtx = &NvmMacCtx;
 8028136:	6033      	str	r3, [r6, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 8028138:	23b6      	movs	r3, #182	; 0xb6
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 802813a:	3014      	adds	r0, #20
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 802813c:	005b      	lsls	r3, r3, #1
 802813e:	6073      	str	r3, [r6, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 8028140:	f002 f8aa 	bl	802a298 <LoRaMacCryptoGetNvmCtx>
    GetNvmCtxParams_t params ={ 0 };
 8028144:	2500      	movs	r5, #0
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 8028146:	4a1a      	ldr	r2, [pc, #104]	; (80281b0 <LoRaMacMibGetRequestConfirm+0x228>)
 8028148:	4b1a      	ldr	r3, [pc, #104]	; (80281b4 <LoRaMacMibGetRequestConfirm+0x22c>)
 802814a:	a902      	add	r1, sp, #8
 802814c:	58d3      	ldr	r3, [r2, r3]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 802814e:	6130      	str	r0, [r6, #16]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 8028150:	7818      	ldrb	r0, [r3, #0]
    GetNvmCtxParams_t params ={ 0 };
 8028152:	9502      	str	r5, [sp, #8]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 8028154:	f007 fe44 	bl	802fde0 <RegionGetNvmCtx>
 8028158:	60b0      	str	r0, [r6, #8]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 802815a:	0030      	movs	r0, r6
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 802815c:	9b02      	ldr	r3, [sp, #8]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 802815e:	301c      	adds	r0, #28
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 8028160:	60f3      	str	r3, [r6, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 8028162:	f7fc fa5b 	bl	802461c <SecureElementGetNvmCtx>
 8028166:	61b0      	str	r0, [r6, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 8028168:	0030      	movs	r0, r6
 802816a:	3024      	adds	r0, #36	; 0x24
 802816c:	f001 fdda 	bl	8029d24 <LoRaMacCommandsGetNvmCtx>
 8028170:	6230      	str	r0, [r6, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 8028172:	0030      	movs	r0, r6
 8028174:	302c      	adds	r0, #44	; 0x2c
 8028176:	f000 ff51 	bl	802901c <LoRaMacClassBGetNvmCtx>
 802817a:	62b0      	str	r0, [r6, #40]	; 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 802817c:	0030      	movs	r0, r6
 802817e:	3034      	adds	r0, #52	; 0x34
 8028180:	f001 ff1e 	bl	8029fc0 <LoRaMacConfirmQueueGetNvmCtx>
 8028184:	6330      	str	r0, [r6, #48]	; 0x30
            mibGet->Param.Contexts = GetCtxs( );
 8028186:	6066      	str	r6, [r4, #4]
            break;
 8028188:	e745      	b.n	8028016 <LoRaMacMibGetRequestConfirm+0x8e>
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 802818a:	4a09      	ldr	r2, [pc, #36]	; (80281b0 <LoRaMacMibGetRequestConfirm+0x228>)
 802818c:	4b09      	ldr	r3, [pc, #36]	; (80281b4 <LoRaMacMibGetRequestConfirm+0x22c>)
 802818e:	58d3      	ldr	r3, [r2, r3]
 8028190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028192:	e7cb      	b.n	802812c <LoRaMacMibGetRequestConfirm+0x1a4>
            mibGet->Param.LrWanVersion.LoRaWan = MacCtx.NvmCtx->Version;
 8028194:	4a06      	ldr	r2, [pc, #24]	; (80281b0 <LoRaMacMibGetRequestConfirm+0x228>)
 8028196:	4b07      	ldr	r3, [pc, #28]	; (80281b4 <LoRaMacMibGetRequestConfirm+0x22c>)
 8028198:	58d3      	ldr	r3, [r2, r3]
 802819a:	33fc      	adds	r3, #252	; 0xfc
 802819c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802819e:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80281a0:	f002 fa60 	bl	802a664 <RegionGetVersion>
 80281a4:	60a0      	str	r0, [r4, #8]
            break;
 80281a6:	e736      	b.n	8028016 <LoRaMacMibGetRequestConfirm+0x8e>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80281a8:	0020      	movs	r0, r4
 80281aa:	f001 f8c7 	bl	802933c <LoRaMacClassBMibGetRequestConfirm>
            break;
 80281ae:	e725      	b.n	8027ffc <LoRaMacMibGetRequestConfirm+0x74>
 80281b0:	200088e8 	.word	0x200088e8
 80281b4:	00000484 	.word	0x00000484
 80281b8:	200088ac 	.word	0x200088ac
 80281bc:	20008d74 	.word	0x20008d74

080281c0 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80281c0:	b570      	push	{r4, r5, r6, lr}
 80281c2:	0004      	movs	r4, r0
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80281c4:	2603      	movs	r6, #3
{
 80281c6:	b086      	sub	sp, #24
    if( mibSet == NULL )
 80281c8:	2800      	cmp	r0, #0
 80281ca:	d06b      	beq.n	80282a4 <LoRaMacMibSetRequestConfirm+0xe4>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80281cc:	23d0      	movs	r3, #208	; 0xd0
 80281ce:	4db9      	ldr	r5, [pc, #740]	; (80284b4 <LoRaMacMibSetRequestConfirm+0x2f4>)
 80281d0:	009b      	lsls	r3, r3, #2
 80281d2:	58eb      	ldr	r3, [r5, r3]
    {
        return LORAMAC_STATUS_BUSY;
 80281d4:	3e02      	subs	r6, #2
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80281d6:	079a      	lsls	r2, r3, #30
 80281d8:	d464      	bmi.n	80282a4 <LoRaMacMibSetRequestConfirm+0xe4>
    }

    switch( mibSet->Type )
 80281da:	7800      	ldrb	r0, [r0, #0]
 80281dc:	2827      	cmp	r0, #39	; 0x27
 80281de:	d900      	bls.n	80281e2 <LoRaMacMibSetRequestConfirm+0x22>
 80281e0:	e20a      	b.n	80285f8 <LoRaMacMibSetRequestConfirm+0x438>
 80281e2:	f7f7 ff8b 	bl	80200fc <__gnu_thumb1_case_uhi>
 80281e6:	0028      	.short	0x0028
 80281e8:	0037002d 	.word	0x0037002d
 80281ec:	00460042 	.word	0x00460042
 80281f0:	0051004c 	.word	0x0051004c
 80281f4:	00620056 	.word	0x00620056
 80281f8:	006c0067 	.word	0x006c0067
 80281fc:	00760071 	.word	0x00760071
 8028200:	0080007b 	.word	0x0080007b
 8028204:	00920085 	.word	0x00920085
 8028208:	00960209 	.word	0x00960209
 802820c:	00ce00b9 	.word	0x00ce00b9
 8028210:	011b00f8 	.word	0x011b00f8
 8028214:	0120010d 	.word	0x0120010d
 8028218:	012f0129 	.word	0x012f0129
 802821c:	01370133 	.word	0x01370133
 8028220:	013f013b 	.word	0x013f013b
 8028224:	017f0151 	.word	0x017f0151
 8028228:	0191016d 	.word	0x0191016d
 802822c:	019d0197 	.word	0x019d0197
 8028230:	01a801a3 	.word	0x01a801a3
 8028234:	01fc      	.short	0x01fc
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8028236:	7920      	ldrb	r0, [r4, #4]
 8028238:	f7fe f94c 	bl	80264d4 <SwitchClass>
            }
            break;
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 802823c:	0006      	movs	r6, r0
            break;
 802823e:	e00f      	b.n	8028260 <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8028240:	7923      	ldrb	r3, [r4, #4]
 8028242:	2b02      	cmp	r3, #2
 8028244:	d00b      	beq.n	802825e <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 8028246:	4a9c      	ldr	r2, [pc, #624]	; (80284b8 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8028248:	58a9      	ldr	r1, [r5, r2]
 802824a:	22b2      	movs	r2, #178	; 0xb2
 802824c:	0052      	lsls	r2, r2, #1
 802824e:	548b      	strb	r3, [r1, r2]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8028250:	2600      	movs	r6, #0
            break;
 8028252:	e005      	b.n	8028260 <LoRaMacMibSetRequestConfirm+0xa0>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8028254:	6860      	ldr	r0, [r4, #4]
 8028256:	f7fc fa2d 	bl	80246b4 <SecureElementSetDevEui>
 802825a:	2800      	cmp	r0, #0
 802825c:	d0f8      	beq.n	8028250 <LoRaMacMibSetRequestConfirm+0x90>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 802825e:	2603      	movs	r6, #3
        }
    }
    EventRegionNvmCtxChanged( );
 8028260:	f007 fae3 	bl	802f82a <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 8028264:	f007 fadc 	bl	802f820 <EventMacNvmCtxChanged>
    return status;
 8028268:	e01c      	b.n	80282a4 <LoRaMacMibSetRequestConfirm+0xe4>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 802826a:	6860      	ldr	r0, [r4, #4]
 802826c:	f7fc fa38 	bl	80246e0 <SecureElementSetJoinEui>
 8028270:	e7f3      	b.n	802825a <LoRaMacMibSetRequestConfirm+0x9a>
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 8028272:	4b91      	ldr	r3, [pc, #580]	; (80284b8 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8028274:	58eb      	ldr	r3, [r5, r3]
 8028276:	337e      	adds	r3, #126	; 0x7e
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8028278:	7922      	ldrb	r2, [r4, #4]
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 802827a:	701a      	strb	r2, [r3, #0]
 802827c:	e7e8      	b.n	8028250 <LoRaMacMibSetRequestConfirm+0x90>
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 802827e:	4b8e      	ldr	r3, [pc, #568]	; (80284b8 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8028280:	6862      	ldr	r2, [r4, #4]
 8028282:	58eb      	ldr	r3, [r5, r3]
 8028284:	649a      	str	r2, [r3, #72]	; 0x48
 8028286:	e7e3      	b.n	8028250 <LoRaMacMibSetRequestConfirm+0x90>
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 8028288:	4b8b      	ldr	r3, [pc, #556]	; (80284b8 <LoRaMacMibSetRequestConfirm+0x2f8>)
 802828a:	6862      	ldr	r2, [r4, #4]
 802828c:	58eb      	ldr	r3, [r5, r3]
 802828e:	64da      	str	r2, [r3, #76]	; 0x4c
 8028290:	e7de      	b.n	8028250 <LoRaMacMibSetRequestConfirm+0x90>
            if( mibSet->Param.AppKey != NULL )
 8028292:	6861      	ldr	r1, [r4, #4]
 8028294:	2900      	cmp	r1, #0
 8028296:	d0e2      	beq.n	802825e <LoRaMacMibSetRequestConfirm+0x9e>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8028298:	2000      	movs	r0, #0
 802829a:	f007 fc22 	bl	802fae2 <LoRaMacCryptoSetKey>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 802829e:	2611      	movs	r6, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 80282a0:	2800      	cmp	r0, #0
 80282a2:	d0d5      	beq.n	8028250 <LoRaMacMibSetRequestConfirm+0x90>
}
 80282a4:	0030      	movs	r0, r6
 80282a6:	b006      	add	sp, #24
 80282a8:	bd70      	pop	{r4, r5, r6, pc}
            if( mibSet->Param.NwkKey != NULL )
 80282aa:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 80282ac:	2001      	movs	r0, #1
            if( mibSet->Param.NwkKey != NULL )
 80282ae:	2900      	cmp	r1, #0
 80282b0:	d1f3      	bne.n	802829a <LoRaMacMibSetRequestConfirm+0xda>
 80282b2:	e7d4      	b.n	802825e <LoRaMacMibSetRequestConfirm+0x9e>
            if( mibSet->Param.NwkSKey != NULL )
 80282b4:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 80282b6:	2002      	movs	r0, #2
            if( mibSet->Param.NwkSKey != NULL )
 80282b8:	2900      	cmp	r1, #0
 80282ba:	d1ee      	bne.n	802829a <LoRaMacMibSetRequestConfirm+0xda>
 80282bc:	e7cf      	b.n	802825e <LoRaMacMibSetRequestConfirm+0x9e>
            if( mibSet->Param.AppSKey != NULL )
 80282be:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80282c0:	2003      	movs	r0, #3
            if( mibSet->Param.AppSKey != NULL )
 80282c2:	2900      	cmp	r1, #0
 80282c4:	d1e9      	bne.n	802829a <LoRaMacMibSetRequestConfirm+0xda>
 80282c6:	e7ca      	b.n	802825e <LoRaMacMibSetRequestConfirm+0x9e>
            if( mibSet->Param.McKEKey != NULL )
 80282c8:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80282ca:	207f      	movs	r0, #127	; 0x7f
            if( mibSet->Param.McKEKey != NULL )
 80282cc:	2900      	cmp	r1, #0
 80282ce:	d1e4      	bne.n	802829a <LoRaMacMibSetRequestConfirm+0xda>
 80282d0:	e7c5      	b.n	802825e <LoRaMacMibSetRequestConfirm+0x9e>
            if( mibSet->Param.McKey0 != NULL )
 80282d2:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80282d4:	2080      	movs	r0, #128	; 0x80
            if( mibSet->Param.McKey0 != NULL )
 80282d6:	2900      	cmp	r1, #0
 80282d8:	d1df      	bne.n	802829a <LoRaMacMibSetRequestConfirm+0xda>
 80282da:	e7c0      	b.n	802825e <LoRaMacMibSetRequestConfirm+0x9e>
            if( mibSet->Param.McAppSKey0 != NULL )
 80282dc:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 80282de:	2081      	movs	r0, #129	; 0x81
            if( mibSet->Param.McAppSKey0 != NULL )
 80282e0:	2900      	cmp	r1, #0
 80282e2:	d1da      	bne.n	802829a <LoRaMacMibSetRequestConfirm+0xda>
 80282e4:	e7bb      	b.n	802825e <LoRaMacMibSetRequestConfirm+0x9e>
            if( mibSet->Param.McNwkSKey0 != NULL )
 80282e6:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 80282e8:	2082      	movs	r0, #130	; 0x82
            if( mibSet->Param.McNwkSKey0 != NULL )
 80282ea:	2900      	cmp	r1, #0
 80282ec:	d1d5      	bne.n	802829a <LoRaMacMibSetRequestConfirm+0xda>
 80282ee:	e7b6      	b.n	802825e <LoRaMacMibSetRequestConfirm+0x9e>
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80282f0:	4b71      	ldr	r3, [pc, #452]	; (80284b8 <LoRaMacMibSetRequestConfirm+0x2f8>)
 80282f2:	7920      	ldrb	r0, [r4, #4]
 80282f4:	58eb      	ldr	r3, [r5, r3]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 80282f6:	4c71      	ldr	r4, [pc, #452]	; (80284bc <LoRaMacMibSetRequestConfirm+0x2fc>)
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80282f8:	337d      	adds	r3, #125	; 0x7d
 80282fa:	7018      	strb	r0, [r3, #0]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 80282fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80282fe:	9301      	str	r3, [sp, #4]
 8028300:	4798      	blx	r3
            Radio.Sleep( );
 8028302:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8028304:	9301      	str	r3, [sp, #4]
 8028306:	4798      	blx	r3
            break;
 8028308:	e7a2      	b.n	8028250 <LoRaMacMibSetRequestConfirm+0x90>
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 802830a:	4b6b      	ldr	r3, [pc, #428]	; (80284b8 <LoRaMacMibSetRequestConfirm+0x2f8>)
 802830c:	58eb      	ldr	r3, [r5, r3]
 802830e:	33ca      	adds	r3, #202	; 0xca
 8028310:	e7b2      	b.n	8028278 <LoRaMacMibSetRequestConfirm+0xb8>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8028312:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8028314:	4e68      	ldr	r6, [pc, #416]	; (80284b8 <LoRaMacMibSetRequestConfirm+0x2f8>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8028316:	aa02      	add	r2, sp, #8
 8028318:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 802831a:	59ab      	ldr	r3, [r5, r6]
 802831c:	a902      	add	r1, sp, #8
 802831e:	001a      	movs	r2, r3
 8028320:	32b9      	adds	r2, #185	; 0xb9
 8028322:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) != true )
 8028324:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8028326:	714a      	strb	r2, [r1, #5]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) != true )
 8028328:	2207      	movs	r2, #7
 802832a:	a903      	add	r1, sp, #12
 802832c:	f007 fd62 	bl	802fdf4 <RegionVerify>
 8028330:	2800      	cmp	r0, #0
 8028332:	d100      	bne.n	8028336 <LoRaMacMibSetRequestConfirm+0x176>
 8028334:	e793      	b.n	802825e <LoRaMacMibSetRequestConfirm+0x9e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8028336:	6863      	ldr	r3, [r4, #4]
                if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_FREQUENCY ) != true )
 8028338:	2200      	movs	r2, #0
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 802833a:	9303      	str	r3, [sp, #12]
                if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_FREQUENCY ) != true )
 802833c:	59ab      	ldr	r3, [r5, r6]
 802833e:	a903      	add	r1, sp, #12
 8028340:	7818      	ldrb	r0, [r3, #0]
 8028342:	f007 fd57 	bl	802fdf4 <RegionVerify>
 8028346:	2800      	cmp	r0, #0
 8028348:	d100      	bne.n	802834c <LoRaMacMibSetRequestConfirm+0x18c>
 802834a:	e788      	b.n	802825e <LoRaMacMibSetRequestConfirm+0x9e>
                    MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 802834c:	59ab      	ldr	r3, [r5, r6]
 802834e:	33a8      	adds	r3, #168	; 0xa8
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8028350:	3404      	adds	r4, #4
 8028352:	cc06      	ldmia	r4!, {r1, r2}
 8028354:	c306      	stmia	r3!, {r1, r2}
 8028356:	e77b      	b.n	8028250 <LoRaMacMibSetRequestConfirm+0x90>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8028358:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 802835a:	4e57      	ldr	r6, [pc, #348]	; (80284b8 <LoRaMacMibSetRequestConfirm+0x2f8>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 802835c:	aa02      	add	r2, sp, #8
 802835e:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8028360:	59ab      	ldr	r3, [r5, r6]
 8028362:	a902      	add	r1, sp, #8
 8028364:	001a      	movs	r2, r3
 8028366:	32b9      	adds	r2, #185	; 0xb9
 8028368:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 802836a:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 802836c:	714a      	strb	r2, [r1, #5]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 802836e:	2207      	movs	r2, #7
 8028370:	a903      	add	r1, sp, #12
 8028372:	f007 fd3f 	bl	802fdf4 <RegionVerify>
 8028376:	2800      	cmp	r0, #0
 8028378:	d100      	bne.n	802837c <LoRaMacMibSetRequestConfirm+0x1bc>
 802837a:	e770      	b.n	802825e <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 802837c:	59ab      	ldr	r3, [r5, r6]
 802837e:	3328      	adds	r3, #40	; 0x28
 8028380:	e7e6      	b.n	8028350 <LoRaMacMibSetRequestConfirm+0x190>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8028382:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8028384:	4e4c      	ldr	r6, [pc, #304]	; (80284b8 <LoRaMacMibSetRequestConfirm+0x2f8>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8028386:	aa02      	add	r2, sp, #8
 8028388:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 802838a:	59ab      	ldr	r3, [r5, r6]
 802838c:	a902      	add	r1, sp, #8
 802838e:	001a      	movs	r2, r3
 8028390:	32b9      	adds	r2, #185	; 0xb9
 8028392:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8028394:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8028396:	714a      	strb	r2, [r1, #5]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8028398:	2207      	movs	r2, #7
 802839a:	a903      	add	r1, sp, #12
 802839c:	f007 fd2a 	bl	802fdf4 <RegionVerify>
 80283a0:	2800      	cmp	r0, #0
 80283a2:	d100      	bne.n	80283a6 <LoRaMacMibSetRequestConfirm+0x1e6>
 80283a4:	e75b      	b.n	802825e <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80283a6:	59ab      	ldr	r3, [r5, r6]
 80283a8:	3404      	adds	r4, #4
 80283aa:	001a      	movs	r2, r3
 80283ac:	32b0      	adds	r2, #176	; 0xb0
 80283ae:	cc03      	ldmia	r4!, {r0, r1}
 80283b0:	c203      	stmia	r2!, {r0, r1}
                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80283b2:	3a3c      	subs	r2, #60	; 0x3c
 80283b4:	7812      	ldrb	r2, [r2, #0]
 80283b6:	2a02      	cmp	r2, #2
 80283b8:	d000      	beq.n	80283bc <LoRaMacMibSetRequestConfirm+0x1fc>
 80283ba:	e749      	b.n	8028250 <LoRaMacMibSetRequestConfirm+0x90>
 80283bc:	3263      	adds	r2, #99	; 0x63
 80283be:	32ff      	adds	r2, #255	; 0xff
 80283c0:	5c9b      	ldrb	r3, [r3, r2]
 80283c2:	2b00      	cmp	r3, #0
 80283c4:	d100      	bne.n	80283c8 <LoRaMacMibSetRequestConfirm+0x208>
 80283c6:	e743      	b.n	8028250 <LoRaMacMibSetRequestConfirm+0x90>
                    Radio.Sleep( );
 80283c8:	4b3c      	ldr	r3, [pc, #240]	; (80284bc <LoRaMacMibSetRequestConfirm+0x2fc>)
 80283ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80283cc:	9301      	str	r3, [sp, #4]
 80283ce:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 80283d0:	f7fd fffe 	bl	80263d0 <OpenContinuousRxCWindow>
 80283d4:	e73c      	b.n	8028250 <LoRaMacMibSetRequestConfirm+0x90>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80283d6:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80283d8:	4e37      	ldr	r6, [pc, #220]	; (80284b8 <LoRaMacMibSetRequestConfirm+0x2f8>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80283da:	aa02      	add	r2, sp, #8
 80283dc:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80283de:	59ab      	ldr	r3, [r5, r6]
 80283e0:	a902      	add	r1, sp, #8
 80283e2:	001a      	movs	r2, r3
 80283e4:	32b9      	adds	r2, #185	; 0xb9
 80283e6:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 80283e8:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80283ea:	714a      	strb	r2, [r1, #5]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 80283ec:	2207      	movs	r2, #7
 80283ee:	a903      	add	r1, sp, #12
 80283f0:	f007 fd00 	bl	802fdf4 <RegionVerify>
 80283f4:	2800      	cmp	r0, #0
 80283f6:	d100      	bne.n	80283fa <LoRaMacMibSetRequestConfirm+0x23a>
 80283f8:	e731      	b.n	802825e <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 80283fa:	59ab      	ldr	r3, [r5, r6]
 80283fc:	3330      	adds	r3, #48	; 0x30
 80283fe:	e7a7      	b.n	8028350 <LoRaMacMibSetRequestConfirm+0x190>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8028400:	6863      	ldr	r3, [r4, #4]
 8028402:	a904      	add	r1, sp, #16
 8028404:	9304      	str	r3, [sp, #16]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8028406:	2301      	movs	r3, #1
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8028408:	710b      	strb	r3, [r1, #4]
            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 802840a:	4b2b      	ldr	r3, [pc, #172]	; (80284b8 <LoRaMacMibSetRequestConfirm+0x2f8>)
 802840c:	58eb      	ldr	r3, [r5, r3]
 802840e:	7818      	ldrb	r0, [r3, #0]
 8028410:	f007 fd03 	bl	802fe1a <RegionChanMaskSet>
 8028414:	2800      	cmp	r0, #0
 8028416:	d000      	beq.n	802841a <LoRaMacMibSetRequestConfirm+0x25a>
 8028418:	e71a      	b.n	8028250 <LoRaMacMibSetRequestConfirm+0x90>
 802841a:	e720      	b.n	802825e <LoRaMacMibSetRequestConfirm+0x9e>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 802841c:	6863      	ldr	r3, [r4, #4]
 802841e:	a904      	add	r1, sp, #16
 8028420:	9304      	str	r3, [sp, #16]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8028422:	2300      	movs	r3, #0
 8028424:	e7f0      	b.n	8028408 <LoRaMacMibSetRequestConfirm+0x248>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8028426:	7922      	ldrb	r2, [r4, #4]
 8028428:	1e53      	subs	r3, r2, #1
 802842a:	2b0e      	cmp	r3, #14
 802842c:	d900      	bls.n	8028430 <LoRaMacMibSetRequestConfirm+0x270>
 802842e:	e716      	b.n	802825e <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8028430:	4b21      	ldr	r3, [pc, #132]	; (80284b8 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8028432:	58eb      	ldr	r3, [r5, r3]
 8028434:	33a4      	adds	r3, #164	; 0xa4
 8028436:	e720      	b.n	802827a <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8028438:	4b1f      	ldr	r3, [pc, #124]	; (80284b8 <LoRaMacMibSetRequestConfirm+0x2f8>)
 802843a:	58eb      	ldr	r3, [r5, r3]
 802843c:	3390      	adds	r3, #144	; 0x90
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 802843e:	6862      	ldr	r2, [r4, #4]
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8028440:	601a      	str	r2, [r3, #0]
 8028442:	e705      	b.n	8028250 <LoRaMacMibSetRequestConfirm+0x90>
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8028444:	4b1c      	ldr	r3, [pc, #112]	; (80284b8 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8028446:	58eb      	ldr	r3, [r5, r3]
 8028448:	3394      	adds	r3, #148	; 0x94
 802844a:	e7f8      	b.n	802843e <LoRaMacMibSetRequestConfirm+0x27e>
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 802844c:	4b1a      	ldr	r3, [pc, #104]	; (80284b8 <LoRaMacMibSetRequestConfirm+0x2f8>)
 802844e:	58eb      	ldr	r3, [r5, r3]
 8028450:	3398      	adds	r3, #152	; 0x98
 8028452:	e7f4      	b.n	802843e <LoRaMacMibSetRequestConfirm+0x27e>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8028454:	4b18      	ldr	r3, [pc, #96]	; (80284b8 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8028456:	58eb      	ldr	r3, [r5, r3]
 8028458:	339c      	adds	r3, #156	; 0x9c
 802845a:	e7f0      	b.n	802843e <LoRaMacMibSetRequestConfirm+0x27e>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 802845c:	4b16      	ldr	r3, [pc, #88]	; (80284b8 <LoRaMacMibSetRequestConfirm+0x2f8>)
 802845e:	58eb      	ldr	r3, [r5, r3]
 8028460:	33a0      	adds	r3, #160	; 0xa0
 8028462:	e7ec      	b.n	802843e <LoRaMacMibSetRequestConfirm+0x27e>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8028464:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 8028466:	4c14      	ldr	r4, [pc, #80]	; (80284b8 <LoRaMacMibSetRequestConfirm+0x2f8>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8028468:	aa02      	add	r2, sp, #8
 802846a:	7113      	strb	r3, [r2, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 802846c:	592b      	ldr	r3, [r5, r4]
 802846e:	2206      	movs	r2, #6
 8028470:	7818      	ldrb	r0, [r3, #0]
 8028472:	a903      	add	r1, sp, #12
 8028474:	f007 fcbe 	bl	802fdf4 <RegionVerify>
 8028478:	2800      	cmp	r0, #0
 802847a:	d100      	bne.n	802847e <LoRaMacMibSetRequestConfirm+0x2be>
 802847c:	e6ef      	b.n	802825e <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 802847e:	aa02      	add	r2, sp, #8
 8028480:	592b      	ldr	r3, [r5, r4]
 8028482:	7912      	ldrb	r2, [r2, #4]
 8028484:	715a      	strb	r2, [r3, #5]
 8028486:	e6e3      	b.n	8028250 <LoRaMacMibSetRequestConfirm+0x90>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8028488:	7923      	ldrb	r3, [r4, #4]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 802848a:	4c0b      	ldr	r4, [pc, #44]	; (80284b8 <LoRaMacMibSetRequestConfirm+0x2f8>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 802848c:	ae03      	add	r6, sp, #12
 802848e:	7033      	strb	r3, [r6, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8028490:	592b      	ldr	r3, [r5, r4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8028492:	0031      	movs	r1, r6
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8028494:	001a      	movs	r2, r3
 8028496:	32b8      	adds	r2, #184	; 0xb8
 8028498:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 802849a:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 802849c:	70b2      	strb	r2, [r6, #2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 802849e:	2205      	movs	r2, #5
 80284a0:	f007 fca8 	bl	802fdf4 <RegionVerify>
 80284a4:	2800      	cmp	r0, #0
 80284a6:	d100      	bne.n	80284aa <LoRaMacMibSetRequestConfirm+0x2ea>
 80284a8:	e6d9      	b.n	802825e <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 80284aa:	592b      	ldr	r3, [r5, r4]
 80284ac:	7832      	ldrb	r2, [r6, #0]
 80284ae:	3385      	adds	r3, #133	; 0x85
 80284b0:	e6e3      	b.n	802827a <LoRaMacMibSetRequestConfirm+0xba>
 80284b2:	46c0      	nop			; (mov r8, r8)
 80284b4:	200088e8 	.word	0x200088e8
 80284b8:	00000484 	.word	0x00000484
 80284bc:	08031484 	.word	0x08031484
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80284c0:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 80284c2:	4c4f      	ldr	r4, [pc, #316]	; (8028600 <LoRaMacMibSetRequestConfirm+0x440>)
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80284c4:	aa02      	add	r2, sp, #8
 80284c6:	7113      	strb	r3, [r2, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 80284c8:	592b      	ldr	r3, [r5, r4]
 80284ca:	220a      	movs	r2, #10
 80284cc:	7818      	ldrb	r0, [r3, #0]
 80284ce:	a903      	add	r1, sp, #12
 80284d0:	f007 fc90 	bl	802fdf4 <RegionVerify>
 80284d4:	2800      	cmp	r0, #0
 80284d6:	d100      	bne.n	80284da <LoRaMacMibSetRequestConfirm+0x31a>
 80284d8:	e6c1      	b.n	802825e <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 80284da:	aa02      	add	r2, sp, #8
 80284dc:	592b      	ldr	r3, [r5, r4]
 80284de:	7912      	ldrb	r2, [r2, #4]
 80284e0:	711a      	strb	r2, [r3, #4]
 80284e2:	e6b5      	b.n	8028250 <LoRaMacMibSetRequestConfirm+0x90>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 80284e4:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 80284e6:	4c46      	ldr	r4, [pc, #280]	; (8028600 <LoRaMacMibSetRequestConfirm+0x440>)
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 80284e8:	aa02      	add	r2, sp, #8
 80284ea:	7113      	strb	r3, [r2, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 80284ec:	592b      	ldr	r3, [r5, r4]
 80284ee:	2209      	movs	r2, #9
 80284f0:	7818      	ldrb	r0, [r3, #0]
 80284f2:	a903      	add	r1, sp, #12
 80284f4:	f007 fc7e 	bl	802fdf4 <RegionVerify>
 80284f8:	2800      	cmp	r0, #0
 80284fa:	d100      	bne.n	80284fe <LoRaMacMibSetRequestConfirm+0x33e>
 80284fc:	e6af      	b.n	802825e <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 80284fe:	592b      	ldr	r3, [r5, r4]
 8028500:	aa02      	add	r2, sp, #8
 8028502:	7912      	ldrb	r2, [r2, #4]
 8028504:	3384      	adds	r3, #132	; 0x84
 8028506:	e6b8      	b.n	802827a <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8028508:	4b3d      	ldr	r3, [pc, #244]	; (8028600 <LoRaMacMibSetRequestConfirm+0x440>)
 802850a:	6862      	ldr	r2, [r4, #4]
 802850c:	58eb      	ldr	r3, [r5, r3]
 802850e:	609a      	str	r2, [r3, #8]
 8028510:	3388      	adds	r3, #136	; 0x88
 8028512:	e795      	b.n	8028440 <LoRaMacMibSetRequestConfirm+0x280>
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8028514:	4b3a      	ldr	r3, [pc, #232]	; (8028600 <LoRaMacMibSetRequestConfirm+0x440>)
 8028516:	7922      	ldrb	r2, [r4, #4]
 8028518:	58eb      	ldr	r3, [r5, r3]
 802851a:	731a      	strb	r2, [r3, #12]
 802851c:	338c      	adds	r3, #140	; 0x8c
 802851e:	e6ac      	b.n	802827a <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8028520:	4b37      	ldr	r3, [pc, #220]	; (8028600 <LoRaMacMibSetRequestConfirm+0x440>)
 8028522:	6862      	ldr	r2, [r4, #4]
 8028524:	58eb      	ldr	r3, [r5, r3]
 8028526:	33c0      	adds	r3, #192	; 0xc0
 8028528:	601a      	str	r2, [r3, #0]
 802852a:	e691      	b.n	8028250 <LoRaMacMibSetRequestConfirm+0x90>
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 802852c:	4b34      	ldr	r3, [pc, #208]	; (8028600 <LoRaMacMibSetRequestConfirm+0x440>)
 802852e:	6862      	ldr	r2, [r4, #4]
 8028530:	58eb      	ldr	r3, [r5, r3]
 8028532:	641a      	str	r2, [r3, #64]	; 0x40
 8028534:	e68c      	b.n	8028250 <LoRaMacMibSetRequestConfirm+0x90>
            if( mibSet->Param.Contexts != 0 )
 8028536:	6864      	ldr	r4, [r4, #4]
 8028538:	2c00      	cmp	r4, #0
 802853a:	d100      	bne.n	802853e <LoRaMacMibSetRequestConfirm+0x37e>
 802853c:	e68f      	b.n	802825e <LoRaMacMibSetRequestConfirm+0x9e>
        return LORAMAC_STATUS_BUSY;
 802853e:	2601      	movs	r6, #1
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8028540:	42b3      	cmp	r3, r6
 8028542:	d000      	beq.n	8028546 <LoRaMacMibSetRequestConfirm+0x386>
 8028544:	e68c      	b.n	8028260 <LoRaMacMibSetRequestConfirm+0xa0>
    if( contexts->MacNvmCtx != NULL )
 8028546:	6821      	ldr	r1, [r4, #0]
 8028548:	2900      	cmp	r1, #0
 802854a:	d004      	beq.n	8028556 <LoRaMacMibSetRequestConfirm+0x396>
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 802854c:	6863      	ldr	r3, [r4, #4]
 802854e:	482d      	ldr	r0, [pc, #180]	; (8028604 <LoRaMacMibSetRequestConfirm+0x444>)
 8028550:	b29a      	uxth	r2, r3
 8028552:	f006 fdee 	bl	802f132 <memcpy1>
    params.Type = INIT_TYPE_RESTORE_CTX;
 8028556:	2303      	movs	r3, #3
 8028558:	a904      	add	r1, sp, #16
 802855a:	710b      	strb	r3, [r1, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 802855c:	68a3      	ldr	r3, [r4, #8]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 802855e:	4e28      	ldr	r6, [pc, #160]	; (8028600 <LoRaMacMibSetRequestConfirm+0x440>)
    params.NvmCtx = contexts->RegionNvmCtx;
 8028560:	9304      	str	r3, [sp, #16]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8028562:	59ab      	ldr	r3, [r5, r6]
 8028564:	7818      	ldrb	r0, [r3, #0]
 8028566:	f007 fc34 	bl	802fdd2 <RegionInitDefaults>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 802856a:	4b27      	ldr	r3, [pc, #156]	; (8028608 <LoRaMacMibSetRequestConfirm+0x448>)
 802856c:	5cea      	ldrb	r2, [r5, r3]
 802856e:	3b35      	subs	r3, #53	; 0x35
 8028570:	54ea      	strb	r2, [r5, r3]
    MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 8028572:	59ab      	ldr	r3, [r5, r6]
 8028574:	001a      	movs	r2, r3
 8028576:	32b0      	adds	r2, #176	; 0xb0
 8028578:	6811      	ldr	r1, [r2, #0]
 802857a:	22f9      	movs	r2, #249	; 0xf9
 802857c:	0092      	lsls	r2, r2, #2
 802857e:	50a9      	str	r1, [r5, r2]
    MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8028580:	001a      	movs	r2, r3
 8028582:	32b9      	adds	r2, #185	; 0xb9
 8028584:	7811      	ldrb	r1, [r2, #0]
 8028586:	22fc      	movs	r2, #252	; 0xfc
 8028588:	0092      	lsls	r2, r2, #2
 802858a:	54a9      	strb	r1, [r5, r2]
    MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 802858c:	33ca      	adds	r3, #202	; 0xca
 802858e:	781a      	ldrb	r2, [r3, #0]
 8028590:	4b1e      	ldr	r3, [pc, #120]	; (802860c <LoRaMacMibSetRequestConfirm+0x44c>)
 8028592:	54ea      	strb	r2, [r5, r3]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8028594:	4b1e      	ldr	r3, [pc, #120]	; (8028610 <LoRaMacMibSetRequestConfirm+0x450>)
 8028596:	4a1f      	ldr	r2, [pc, #124]	; (8028614 <LoRaMacMibSetRequestConfirm+0x454>)
 8028598:	52ea      	strh	r2, [r5, r3]
    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 802859a:	69a0      	ldr	r0, [r4, #24]
 802859c:	f7fc f830 	bl	8024600 <SecureElementRestoreNvmCtx>
 80285a0:	2800      	cmp	r0, #0
 80285a2:	d001      	beq.n	80285a8 <LoRaMacMibSetRequestConfirm+0x3e8>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80285a4:	2611      	movs	r6, #17
 80285a6:	e65b      	b.n	8028260 <LoRaMacMibSetRequestConfirm+0xa0>
    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 80285a8:	6920      	ldr	r0, [r4, #16]
 80285aa:	f001 fe67 	bl	802a27c <LoRaMacCryptoRestoreNvmCtx>
 80285ae:	2800      	cmp	r0, #0
 80285b0:	d1f8      	bne.n	80285a4 <LoRaMacMibSetRequestConfirm+0x3e4>
    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 80285b2:	6a20      	ldr	r0, [r4, #32]
 80285b4:	f001 fba8 	bl	8029d08 <LoRaMacCommandsRestoreNvmCtx>
 80285b8:	1e06      	subs	r6, r0, #0
 80285ba:	d10c      	bne.n	80285d6 <LoRaMacMibSetRequestConfirm+0x416>
    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 80285bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80285be:	f000 fd1f 	bl	8029000 <LoRaMacClassBRestoreNvmCtx>
 80285c2:	2800      	cmp	r0, #0
 80285c4:	d009      	beq.n	80285da <LoRaMacMibSetRequestConfirm+0x41a>
    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 80285c6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80285c8:	f001 fcec 	bl	8029fa4 <LoRaMacConfirmQueueRestoreNvmCtx>
 80285cc:	2800      	cmp	r0, #0
 80285ce:	d000      	beq.n	80285d2 <LoRaMacMibSetRequestConfirm+0x412>
 80285d0:	e646      	b.n	8028260 <LoRaMacMibSetRequestConfirm+0xa0>
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 80285d2:	3615      	adds	r6, #21
 80285d4:	e644      	b.n	8028260 <LoRaMacMibSetRequestConfirm+0xa0>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80285d6:	2613      	movs	r6, #19
 80285d8:	e642      	b.n	8028260 <LoRaMacMibSetRequestConfirm+0xa0>
        return LORAMAC_STATUS_CLASS_B_ERROR;
 80285da:	2614      	movs	r6, #20
 80285dc:	e640      	b.n	8028260 <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 80285de:	79a3      	ldrb	r3, [r4, #6]
 80285e0:	2b01      	cmp	r3, #1
 80285e2:	d900      	bls.n	80285e6 <LoRaMacMibSetRequestConfirm+0x426>
 80285e4:	e63b      	b.n	802825e <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 80285e6:	4b06      	ldr	r3, [pc, #24]	; (8028600 <LoRaMacMibSetRequestConfirm+0x440>)
 80285e8:	6862      	ldr	r2, [r4, #4]
 80285ea:	58eb      	ldr	r3, [r5, r3]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80285ec:	6860      	ldr	r0, [r4, #4]
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 80285ee:	33fc      	adds	r3, #252	; 0xfc
 80285f0:	665a      	str	r2, [r3, #100]	; 0x64
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80285f2:	f001 fe3b 	bl	802a26c <LoRaMacCryptoSetLrWanVersion>
 80285f6:	e652      	b.n	802829e <LoRaMacMibSetRequestConfirm+0xde>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 80285f8:	0020      	movs	r0, r4
 80285fa:	f000 feab 	bl	8029354 <LoRaMacMibClassBSetRequestConfirm>
 80285fe:	e61d      	b.n	802823c <LoRaMacMibSetRequestConfirm+0x7c>
 8028600:	00000484 	.word	0x00000484
 8028604:	20008d74 	.word	0x20008d74
 8028608:	00000415 	.word	0x00000415
 802860c:	000003f1 	.word	0x000003f1
 8028610:	000003f2 	.word	0x000003f2
 8028614:	00000201 	.word	0x00000201

08028618 <LoRaMacMlmeRequest>:

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8028618:	2300      	movs	r3, #0
{
 802861a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802861c:	b089      	sub	sp, #36	; 0x24
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 802861e:	aa02      	add	r2, sp, #8
{
 8028620:	0006      	movs	r6, r0

    if( mlmeRequest == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8028622:	2503      	movs	r5, #3
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8028624:	8013      	strh	r3, [r2, #0]
    if( mlmeRequest == NULL )
 8028626:	4298      	cmp	r0, r3
 8028628:	d004      	beq.n	8028634 <LoRaMacMlmeRequest+0x1c>
    }
    if( LoRaMacIsBusy( ) == true )
 802862a:	f7fe fd49 	bl	80270c0 <LoRaMacIsBusy>
 802862e:	2800      	cmp	r0, #0
 8028630:	d003      	beq.n	802863a <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 8028632:	2501      	movs	r5, #1
    {
        LoRaMacConfirmQueueAdd( &queueElement );
        EventMacNvmCtxChanged( );
    }
    return status;
}
 8028634:	0028      	movs	r0, r5
 8028636:	b009      	add	sp, #36	; 0x24
 8028638:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 802863a:	f001 fd79 	bl	802a130 <LoRaMacConfirmQueueIsFull>
 802863e:	2800      	cmp	r0, #0
 8028640:	d1f7      	bne.n	8028632 <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8028642:	f001 fd6f 	bl	802a124 <LoRaMacConfirmQueueGetCnt>
 8028646:	1e01      	subs	r1, r0, #0
 8028648:	d103      	bne.n	8028652 <LoRaMacMlmeRequest+0x3a>
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 802864a:	2214      	movs	r2, #20
 802864c:	486b      	ldr	r0, [pc, #428]	; (80287fc <LoRaMacMlmeRequest+0x1e4>)
 802864e:	f7fb fce3 	bl	8024018 <memset1>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8028652:	2201      	movs	r2, #1
 8028654:	4c6a      	ldr	r4, [pc, #424]	; (8028800 <LoRaMacMlmeRequest+0x1e8>)
 8028656:	4b6b      	ldr	r3, [pc, #428]	; (8028804 <LoRaMacMlmeRequest+0x1ec>)
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8028658:	486b      	ldr	r0, [pc, #428]	; (8028808 <LoRaMacMlmeRequest+0x1f0>)
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 802865a:	54e2      	strb	r2, [r4, r3]
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 802865c:	2304      	movs	r3, #4
 802865e:	5c21      	ldrb	r1, [r4, r0]
 8028660:	430b      	orrs	r3, r1
    queueElement.RestrictCommonReadyToHandle = false;
 8028662:	2100      	movs	r1, #0
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8028664:	5423      	strb	r3, [r4, r0]
    queueElement.Request = mlmeRequest->Type;
 8028666:	7830      	ldrb	r0, [r6, #0]
 8028668:	ab03      	add	r3, sp, #12
 802866a:	7018      	strb	r0, [r3, #0]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 802866c:	3801      	subs	r0, #1
 802866e:	705a      	strb	r2, [r3, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 8028670:	70d9      	strb	r1, [r3, #3]
    switch( mlmeRequest->Type )
 8028672:	280d      	cmp	r0, #13
 8028674:	d900      	bls.n	8028678 <LoRaMacMlmeRequest+0x60>
 8028676:	e0b8      	b.n	80287ea <LoRaMacMlmeRequest+0x1d2>
 8028678:	f7f7 fd2c 	bl	80200d4 <__gnu_thumb1_case_uqi>
 802867c:	5cb7b707 	.word	0x5cb7b707
 8028680:	b7b78866 	.word	0xb7b78866
 8028684:	abb791b7 	.word	0xabb791b7
 8028688:	a795      	.short	0xa795
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 802868a:	23d0      	movs	r3, #208	; 0xd0
 802868c:	009b      	lsls	r3, r3, #2
 802868e:	58e2      	ldr	r2, [r4, r3]
 8028690:	2320      	movs	r3, #32
 8028692:	0015      	movs	r5, r2
 8028694:	401d      	ands	r5, r3
 8028696:	421a      	tst	r2, r3
 8028698:	d1cb      	bne.n	8028632 <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( );
 802869a:	f7fd fe27 	bl	80262ec <ResetMacParameters>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 802869e:	2104      	movs	r1, #4
 80286a0:	4b5a      	ldr	r3, [pc, #360]	; (802880c <LoRaMacMlmeRequest+0x1f4>)
 80286a2:	5671      	ldrsb	r1, [r6, r1]
 80286a4:	58e7      	ldr	r7, [r4, r3]
 80286a6:	002a      	movs	r2, r5
 80286a8:	7838      	ldrb	r0, [r7, #0]
 80286aa:	f007 fc1c 	bl	802fee6 <RegionAlternateDr>
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 80286ae:	2207      	movs	r2, #7
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80286b0:	3785      	adds	r7, #133	; 0x85
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 80286b2:	ab03      	add	r3, sp, #12
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80286b4:	7038      	strb	r0, [r7, #0]
            SwitchClass( CLASS_A );
 80286b6:	0028      	movs	r0, r5
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 80286b8:	705a      	strb	r2, [r3, #1]
            SwitchClass( CLASS_A );
 80286ba:	f7fd ff0b 	bl	80264d4 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 80286be:	0023      	movs	r3, r4
 80286c0:	33ff      	adds	r3, #255	; 0xff
 80286c2:	715d      	strb	r5, [r3, #5]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 80286c4:	0023      	movs	r3, r4
 80286c6:	4a52      	ldr	r2, [pc, #328]	; (8028810 <LoRaMacMlmeRequest+0x1f8>)
 80286c8:	33fc      	adds	r3, #252	; 0xfc
 80286ca:	60da      	str	r2, [r3, #12]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80286cc:	0023      	movs	r3, r4
 80286ce:	22ff      	movs	r2, #255	; 0xff
 80286d0:	33fe      	adds	r3, #254	; 0xfe
 80286d2:	81da      	strh	r2, [r3, #14]
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 80286d4:	f7fc f816 	bl	8024704 <SecureElementGetJoinEui>
 80286d8:	2208      	movs	r2, #8
 80286da:	0001      	movs	r1, r0
 80286dc:	484d      	ldr	r0, [pc, #308]	; (8028814 <LoRaMacMlmeRequest+0x1fc>)
 80286de:	f006 fd28 	bl	802f132 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 80286e2:	f7fb fff9 	bl	80246d8 <SecureElementGetDevEui>
 80286e6:	2208      	movs	r2, #8
 80286e8:	0001      	movs	r1, r0
 80286ea:	484b      	ldr	r0, [pc, #300]	; (8028818 <LoRaMacMlmeRequest+0x200>)
 80286ec:	f006 fd21 	bl	802f132 <memcpy1>
    status = ScheduleTx( allowDelayedTx );
 80286f0:	0028      	movs	r0, r5
 80286f2:	f7fd ff6b 	bl	80265cc <ScheduleTx>
 80286f6:	1e05      	subs	r5, r0, #0
            if( status != LORAMAC_STATUS_OK )
 80286f8:	d009      	beq.n	802870e <LoRaMacMlmeRequest+0xf6>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 80286fa:	2104      	movs	r1, #4
 80286fc:	4b43      	ldr	r3, [pc, #268]	; (802880c <LoRaMacMlmeRequest+0x1f4>)
 80286fe:	2201      	movs	r2, #1
 8028700:	58e7      	ldr	r7, [r4, r3]
 8028702:	5671      	ldrsb	r1, [r6, r1]
 8028704:	7838      	ldrb	r0, [r7, #0]
 8028706:	f007 fbee 	bl	802fee6 <RegionAlternateDr>
 802870a:	3785      	adds	r7, #133	; 0x85
 802870c:	7038      	strb	r0, [r7, #0]
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 802870e:	2391      	movs	r3, #145	; 0x91
 8028710:	00db      	lsls	r3, r3, #3
 8028712:	58e3      	ldr	r3, [r4, r3]
 8028714:	6133      	str	r3, [r6, #16]
    if( status != LORAMAC_STATUS_OK )
 8028716:	2d00      	cmp	r5, #0
 8028718:	d069      	beq.n	80287ee <LoRaMacMlmeRequest+0x1d6>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 802871a:	f001 fd03 	bl	802a124 <LoRaMacConfirmQueueGetCnt>
 802871e:	2800      	cmp	r0, #0
 8028720:	d000      	beq.n	8028724 <LoRaMacMlmeRequest+0x10c>
 8028722:	e787      	b.n	8028634 <LoRaMacMlmeRequest+0x1c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8028724:	2204      	movs	r2, #4
            MacCtx.NodeAckRequested = false;
 8028726:	4b3d      	ldr	r3, [pc, #244]	; (802881c <LoRaMacMlmeRequest+0x204>)
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8028728:	4937      	ldr	r1, [pc, #220]	; (8028808 <LoRaMacMlmeRequest+0x1f0>)
            MacCtx.NodeAckRequested = false;
 802872a:	54e0      	strb	r0, [r4, r3]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 802872c:	5c63      	ldrb	r3, [r4, r1]
 802872e:	4393      	bics	r3, r2
 8028730:	5463      	strb	r3, [r4, r1]
 8028732:	e77f      	b.n	8028634 <LoRaMacMlmeRequest+0x1c>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8028734:	2200      	movs	r2, #0
 8028736:	2002      	movs	r0, #2
 8028738:	a902      	add	r1, sp, #8
 802873a:	f001 faf9 	bl	8029d30 <LoRaMacCommandsAddCmd>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 802873e:	2513      	movs	r5, #19
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8028740:	2800      	cmp	r0, #0
 8028742:	d1e4      	bne.n	802870e <LoRaMacMlmeRequest+0xf6>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8028744:	2500      	movs	r5, #0
            break;
 8028746:	e7e2      	b.n	802870e <LoRaMacMlmeRequest+0xf6>
    continuousWave.Channel = MacCtx.Channel;
 8028748:	4b35      	ldr	r3, [pc, #212]	; (8028820 <LoRaMacMlmeRequest+0x208>)
 802874a:	a904      	add	r1, sp, #16
 802874c:	5ce3      	ldrb	r3, [r4, r3]
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 802874e:	88b2      	ldrh	r2, [r6, #4]
    continuousWave.Channel = MacCtx.Channel;
 8028750:	700b      	strb	r3, [r1, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8028752:	4b2e      	ldr	r3, [pc, #184]	; (802880c <LoRaMacMlmeRequest+0x1f4>)
 8028754:	58e3      	ldr	r3, [r4, r3]
 8028756:	0018      	movs	r0, r3
 8028758:	3085      	adds	r0, #133	; 0x85
 802875a:	7800      	ldrb	r0, [r0, #0]
 802875c:	7048      	strb	r0, [r1, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 802875e:	0018      	movs	r0, r3
 8028760:	3084      	adds	r0, #132	; 0x84
 8028762:	7800      	ldrb	r0, [r0, #0]
    continuousWave.Timeout = timeout;
 8028764:	818a      	strh	r2, [r1, #12]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8028766:	7088      	strb	r0, [r1, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8028768:	0018      	movs	r0, r3
 802876a:	30bc      	adds	r0, #188	; 0xbc
 802876c:	6800      	ldr	r0, [r0, #0]
 802876e:	6048      	str	r0, [r1, #4]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8028770:	0018      	movs	r0, r3
 8028772:	30c0      	adds	r0, #192	; 0xc0
 8028774:	6800      	ldr	r0, [r0, #0]
 8028776:	6088      	str	r0, [r1, #8]
    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 8028778:	7818      	ldrb	r0, [r3, #0]
 802877a:	f007 fbce 	bl	802ff1a <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 802877e:	22d0      	movs	r2, #208	; 0xd0
 8028780:	2302      	movs	r3, #2
 8028782:	0092      	lsls	r2, r2, #2
 8028784:	58a1      	ldr	r1, [r4, r2]
 8028786:	430b      	orrs	r3, r1
 8028788:	50a3      	str	r3, [r4, r2]
 802878a:	e7db      	b.n	8028744 <LoRaMacMlmeRequest+0x12c>
    Radio.SetTxContinuousWave( frequency, power, timeout );
 802878c:	210c      	movs	r1, #12
 802878e:	4b25      	ldr	r3, [pc, #148]	; (8028824 <LoRaMacMlmeRequest+0x20c>)
 8028790:	88b2      	ldrh	r2, [r6, #4]
 8028792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028794:	5671      	ldrsb	r1, [r6, r1]
 8028796:	68b0      	ldr	r0, [r6, #8]
 8028798:	9301      	str	r3, [sp, #4]
 802879a:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 802879c:	e7ef      	b.n	802877e <LoRaMacMlmeRequest+0x166>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 802879e:	2200      	movs	r2, #0
 80287a0:	200d      	movs	r0, #13
 80287a2:	a902      	add	r1, sp, #8
 80287a4:	e7c9      	b.n	802873a <LoRaMacMlmeRequest+0x122>
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 80287a6:	4b19      	ldr	r3, [pc, #100]	; (802880c <LoRaMacMlmeRequest+0x1f4>)
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80287a8:	2502      	movs	r5, #2
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 80287aa:	58e3      	ldr	r3, [r4, r3]
 80287ac:	337c      	adds	r3, #124	; 0x7c
 80287ae:	781b      	ldrb	r3, [r3, #0]
 80287b0:	2b00      	cmp	r3, #0
 80287b2:	d1ac      	bne.n	802870e <LoRaMacMlmeRequest+0xf6>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 80287b4:	7935      	ldrb	r5, [r6, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 80287b6:	0768      	lsls	r0, r5, #29
 80287b8:	0f40      	lsrs	r0, r0, #29
 80287ba:	f000 fd8f 	bl	80292dc <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 80287be:	ab02      	add	r3, sp, #8
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 80287c0:	2201      	movs	r2, #1
 80287c2:	0019      	movs	r1, r3
 80287c4:	2010      	movs	r0, #16
                macCmdPayload[0] = value;
 80287c6:	701d      	strb	r5, [r3, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 80287c8:	e7b7      	b.n	802873a <LoRaMacMlmeRequest+0x122>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80287ca:	2200      	movs	r2, #0
 80287cc:	2012      	movs	r0, #18
 80287ce:	a902      	add	r1, sp, #8
 80287d0:	e7b3      	b.n	802873a <LoRaMacMlmeRequest+0x122>
            queueElement.RestrictCommonReadyToHandle = true;
 80287d2:	70da      	strb	r2, [r3, #3]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80287d4:	f000 fd66 	bl	80292a4 <LoRaMacClassBIsAcquisitionInProgress>
                status = LORAMAC_STATUS_BUSY;
 80287d8:	2501      	movs	r5, #1
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80287da:	1e07      	subs	r7, r0, #0
 80287dc:	d197      	bne.n	802870e <LoRaMacMlmeRequest+0xf6>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 80287de:	f000 fd3d 	bl	802925c <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 80287e2:	0038      	movs	r0, r7
 80287e4:	f000 fa38 	bl	8028c58 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 80287e8:	e7ac      	b.n	8028744 <LoRaMacMlmeRequest+0x12c>
    queueElement.RestrictCommonReadyToHandle = false;
 80287ea:	2502      	movs	r5, #2
 80287ec:	e78f      	b.n	802870e <LoRaMacMlmeRequest+0xf6>
        LoRaMacConfirmQueueAdd( &queueElement );
 80287ee:	a803      	add	r0, sp, #12
 80287f0:	f001 fbec 	bl	8029fcc <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 80287f4:	f007 f814 	bl	802f820 <EventMacNvmCtxChanged>
 80287f8:	e71c      	b.n	8028634 <LoRaMacMlmeRequest+0x1c>
 80287fa:	46c0      	nop			; (mov r8, r8)
 80287fc:	20008d38 	.word	0x20008d38
 8028800:	200088e8 	.word	0x200088e8
 8028804:	00000451 	.word	0x00000451
 8028808:	00000481 	.word	0x00000481
 802880c:	00000484 	.word	0x00000484
 8028810:	200088ea 	.word	0x200088ea
 8028814:	200089f6 	.word	0x200089f6
 8028818:	200089fe 	.word	0x200089fe
 802881c:	00000414 	.word	0x00000414
 8028820:	00000415 	.word	0x00000415
 8028824:	08031484 	.word	0x08031484

08028828 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8028828:	2300      	movs	r3, #0
 802882a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802882c:	b095      	sub	sp, #84	; 0x54
 802882e:	0007      	movs	r7, r0
 8028830:	9107      	str	r1, [sp, #28]
 8028832:	9300      	str	r3, [sp, #0]
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 8028834:	4298      	cmp	r0, r3
 8028836:	d103      	bne.n	8028840 <LoRaMacMcpsRequest+0x18>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8028838:	2403      	movs	r4, #3

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 802883a:	0020      	movs	r0, r4
 802883c:	b015      	add	sp, #84	; 0x54
 802883e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacIsBusy( ) == true )
 8028840:	f7fe fc3e 	bl	80270c0 <LoRaMacIsBusy>
        return LORAMAC_STATUS_BUSY;
 8028844:	2401      	movs	r4, #1
    if( LoRaMacIsBusy( ) == true )
 8028846:	1e05      	subs	r5, r0, #0
 8028848:	d1f7      	bne.n	802883a <LoRaMacMcpsRequest+0x12>
    macHdr.Value = 0;
 802884a:	466b      	mov	r3, sp
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 802884c:	0001      	movs	r1, r0
    macHdr.Value = 0;
 802884e:	7218      	strb	r0, [r3, #8]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8028850:	2214      	movs	r2, #20
 8028852:	48c7      	ldr	r0, [pc, #796]	; (8028b70 <LoRaMacMcpsRequest+0x348>)
 8028854:	f7fb fbe0 	bl	8024018 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8028858:	4ec6      	ldr	r6, [pc, #792]	; (8028b74 <LoRaMacMcpsRequest+0x34c>)
 802885a:	4bc7      	ldr	r3, [pc, #796]	; (8028b78 <LoRaMacMcpsRequest+0x350>)
 802885c:	54f4      	strb	r4, [r6, r3]
    MacCtx.AckTimeoutRetriesCounter = 1;
 802885e:	4bc7      	ldr	r3, [pc, #796]	; (8028b7c <LoRaMacMcpsRequest+0x354>)
 8028860:	54f4      	strb	r4, [r6, r3]
    switch( mcpsRequest->Type )
 8028862:	783b      	ldrb	r3, [r7, #0]
 8028864:	42a3      	cmp	r3, r4
 8028866:	d100      	bne.n	802886a <LoRaMacMcpsRequest+0x42>
 8028868:	e0c9      	b.n	80289fe <LoRaMacMcpsRequest+0x1d6>
 802886a:	2b03      	cmp	r3, #3
 802886c:	d100      	bne.n	8028870 <LoRaMacMcpsRequest+0x48>
 802886e:	e0cf      	b.n	8028a10 <LoRaMacMcpsRequest+0x1e8>
 8028870:	9503      	str	r5, [sp, #12]
 8028872:	9504      	str	r5, [sp, #16]
 8028874:	2b00      	cmp	r3, #0
 8028876:	d10e      	bne.n	8028896 <LoRaMacMcpsRequest+0x6e>
            MacCtx.AckTimeoutRetries = 1;
 8028878:	4bc1      	ldr	r3, [pc, #772]	; (8028b80 <LoRaMacMcpsRequest+0x358>)
 802887a:	54f4      	strb	r4, [r6, r3]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 802887c:	2340      	movs	r3, #64	; 0x40
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 802887e:	466a      	mov	r2, sp
 8028880:	7213      	strb	r3, [r2, #8]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8028882:	793b      	ldrb	r3, [r7, #4]
            readyToSend = true;
 8028884:	2501      	movs	r5, #1
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8028886:	9304      	str	r3, [sp, #16]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8028888:	68bb      	ldr	r3, [r7, #8]
 802888a:	9301      	str	r3, [sp, #4]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 802888c:	89bb      	ldrh	r3, [r7, #12]
 802888e:	9300      	str	r3, [sp, #0]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8028890:	230e      	movs	r3, #14
 8028892:	56fb      	ldrsb	r3, [r7, r3]
 8028894:	9303      	str	r3, [sp, #12]
    getPhy.Attribute = PHY_MIN_TX_DR;
 8028896:	2402      	movs	r4, #2
 8028898:	ab08      	add	r3, sp, #32
 802889a:	751c      	strb	r4, [r3, #20]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 802889c:	4bb9      	ldr	r3, [pc, #740]	; (8028b84 <LoRaMacMcpsRequest+0x35c>)
 802889e:	a908      	add	r1, sp, #32
 80288a0:	58f3      	ldr	r3, [r6, r3]
 80288a2:	001a      	movs	r2, r3
 80288a4:	32b8      	adds	r2, #184	; 0xb8
 80288a6:	7812      	ldrb	r2, [r2, #0]
 80288a8:	758a      	strb	r2, [r1, #22]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80288aa:	7818      	ldrb	r0, [r3, #0]
 80288ac:	a90d      	add	r1, sp, #52	; 0x34
 80288ae:	f007 fa7d 	bl	802fdac <RegionGetPhyParam>
 80288b2:	9008      	str	r0, [sp, #32]
    if( readyToSend == true )
 80288b4:	2d00      	cmp	r5, #0
 80288b6:	d100      	bne.n	80288ba <LoRaMacMcpsRequest+0x92>
 80288b8:	e09b      	b.n	80289f2 <LoRaMacMcpsRequest+0x1ca>
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 80288ba:	4bb2      	ldr	r3, [pc, #712]	; (8028b84 <LoRaMacMcpsRequest+0x35c>)
 80288bc:	58f3      	ldr	r3, [r6, r3]
 80288be:	001a      	movs	r2, r3
 80288c0:	327e      	adds	r2, #126	; 0x7e
 80288c2:	7812      	ldrb	r2, [r2, #0]
 80288c4:	2a00      	cmp	r2, #0
 80288c6:	d119      	bne.n	80288fc <LoRaMacMcpsRequest+0xd4>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80288c8:	9903      	ldr	r1, [sp, #12]
 80288ca:	1c02      	adds	r2, r0, #0
 80288cc:	b240      	sxtb	r0, r0
            verify.DatarateParams.Datarate = datarate;
 80288ce:	ac09      	add	r4, sp, #36	; 0x24
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80288d0:	4288      	cmp	r0, r1
 80288d2:	da01      	bge.n	80288d8 <LoRaMacMcpsRequest+0xb0>
 80288d4:	466a      	mov	r2, sp
 80288d6:	7b12      	ldrb	r2, [r2, #12]
            verify.DatarateParams.Datarate = datarate;
 80288d8:	7022      	strb	r2, [r4, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80288da:	001a      	movs	r2, r3
 80288dc:	32b8      	adds	r2, #184	; 0xb8
 80288de:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 80288e0:	0021      	movs	r1, r4
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80288e2:	70a2      	strb	r2, [r4, #2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 80288e4:	7818      	ldrb	r0, [r3, #0]
 80288e6:	2205      	movs	r2, #5
 80288e8:	f007 fa84 	bl	802fdf4 <RegionVerify>
 80288ec:	2800      	cmp	r0, #0
 80288ee:	d0a3      	beq.n	8028838 <LoRaMacMcpsRequest+0x10>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 80288f0:	4aa4      	ldr	r2, [pc, #656]	; (8028b84 <LoRaMacMcpsRequest+0x35c>)
 80288f2:	4ba0      	ldr	r3, [pc, #640]	; (8028b74 <LoRaMacMcpsRequest+0x34c>)
 80288f4:	589b      	ldr	r3, [r3, r2]
 80288f6:	7822      	ldrb	r2, [r4, #0]
 80288f8:	3385      	adds	r3, #133	; 0x85
 80288fa:	701a      	strb	r2, [r3, #0]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80288fc:	4b9d      	ldr	r3, [pc, #628]	; (8028b74 <LoRaMacMcpsRequest+0x34c>)
 80288fe:	4aa1      	ldr	r2, [pc, #644]	; (8028b84 <LoRaMacMcpsRequest+0x35c>)
 8028900:	5899      	ldr	r1, [r3, r2]
 8028902:	000a      	movs	r2, r1
 8028904:	3284      	adds	r2, #132	; 0x84
 8028906:	8812      	ldrh	r2, [r2, #0]
 8028908:	1d0b      	adds	r3, r1, #4
 802890a:	9203      	str	r2, [sp, #12]
 802890c:	ba52      	rev16	r2, r2
 802890e:	4694      	mov	ip, r2
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8028910:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8028912:	23b2      	movs	r3, #178	; 0xb2
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8028914:	920a      	str	r2, [sp, #40]	; 0x28
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8028916:	005b      	lsls	r3, r3, #1
 8028918:	5ccb      	ldrb	r3, [r1, r3]
 802891a:	2b00      	cmp	r3, #0
 802891c:	d100      	bne.n	8028920 <LoRaMacMcpsRequest+0xf8>
 802891e:	e11a      	b.n	8028b56 <LoRaMacMcpsRequest+0x32e>
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 8028920:	000b      	movs	r3, r1
 8028922:	33c8      	adds	r3, #200	; 0xc8
 8028924:	781b      	ldrb	r3, [r3, #0]
 8028926:	2b00      	cmp	r3, #0
 8028928:	d102      	bne.n	8028930 <LoRaMacMcpsRequest+0x108>
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 802892a:	0008      	movs	r0, r1
 802892c:	30fc      	adds	r0, #252	; 0xfc
 802892e:	6583      	str	r3, [r0, #88]	; 0x58
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 8028930:	000b      	movs	r3, r1
 8028932:	337e      	adds	r3, #126	; 0x7e
 8028934:	781e      	ldrb	r6, [r3, #0]
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8028936:	3b02      	subs	r3, #2
 8028938:	781b      	ldrb	r3, [r3, #0]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 802893a:	4c8e      	ldr	r4, [pc, #568]	; (8028b74 <LoRaMacMcpsRequest+0x34c>)
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 802893c:	3b01      	subs	r3, #1
 802893e:	4258      	negs	r0, r3
 8028940:	4143      	adcs	r3, r0
 8028942:	b2db      	uxtb	r3, r3
 8028944:	9306      	str	r3, [sp, #24]
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 8028946:	234c      	movs	r3, #76	; 0x4c
 8028948:	33ff      	adds	r3, #255	; 0xff
 802894a:	5ccb      	ldrb	r3, [r1, r3]
    adrNext.Version = MacCtx.NvmCtx->Version;
 802894c:	a80f      	add	r0, sp, #60	; 0x3c
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 802894e:	9305      	str	r3, [sp, #20]
    adrNext.Version = MacCtx.NvmCtx->Version;
 8028950:	000b      	movs	r3, r1
 8028952:	33fc      	adds	r3, #252	; 0xfc
 8028954:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8028956:	6082      	str	r2, [r0, #8]
    adrNext.Version = MacCtx.NvmCtx->Version;
 8028958:	930f      	str	r3, [sp, #60]	; 0x3c
    adrNext.UpdateChanMask = true;
 802895a:	2301      	movs	r3, #1
 802895c:	7103      	strb	r3, [r0, #4]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 802895e:	23fd      	movs	r3, #253	; 0xfd
 8028960:	009b      	lsls	r3, r3, #2
 8028962:	58e3      	ldr	r3, [r4, r3]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8028964:	000a      	movs	r2, r1
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8028966:	9312      	str	r3, [sp, #72]	; 0x48
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8028968:	4663      	mov	r3, ip
 802896a:	8203      	strh	r3, [r0, #16]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 802896c:	000b      	movs	r3, r1
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 802896e:	7146      	strb	r6, [r0, #5]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8028970:	33b8      	adds	r3, #184	; 0xb8
 8028972:	781b      	ldrb	r3, [r3, #0]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8028974:	3284      	adds	r2, #132	; 0x84
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8028976:	7483      	strb	r3, [r0, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 8028978:	780b      	ldrb	r3, [r1, #0]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 802897a:	3185      	adds	r1, #133	; 0x85
    adrNext.Region = MacCtx.NvmCtx->Region;
 802897c:	74c3      	strb	r3, [r0, #19]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 802897e:	ab0a      	add	r3, sp, #40	; 0x28
 8028980:	f006 ff71 	bl	802f866 <LoRaMacAdrCalcNext>
    fCtrl.Value = 0;
 8028984:	2500      	movs	r5, #0
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8028986:	9b05      	ldr	r3, [sp, #20]
 8028988:	0180      	lsls	r0, r0, #6
 802898a:	015a      	lsls	r2, r3, #5
 802898c:	9b06      	ldr	r3, [sp, #24]
 802898e:	01f6      	lsls	r6, r6, #7
 8028990:	011b      	lsls	r3, r3, #4
 8028992:	4313      	orrs	r3, r2
 8028994:	4303      	orrs	r3, r0
 8028996:	4333      	orrs	r3, r6
 8028998:	9305      	str	r3, [sp, #20]
    MacCtx.NodeAckRequested = false;
 802899a:	4b7b      	ldr	r3, [pc, #492]	; (8028b88 <LoRaMacMcpsRequest+0x360>)
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 802899c:	9901      	ldr	r1, [sp, #4]
    MacCtx.NodeAckRequested = false;
 802899e:	54e5      	strb	r5, [r4, r3]
        fBufferSize = 0;
 80289a0:	9b01      	ldr	r3, [sp, #4]
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80289a2:	487a      	ldr	r0, [pc, #488]	; (8028b8c <LoRaMacMcpsRequest+0x364>)
        fBufferSize = 0;
 80289a4:	1e5a      	subs	r2, r3, #1
 80289a6:	4193      	sbcs	r3, r2
 80289a8:	9a00      	ldr	r2, [sp, #0]
 80289aa:	425b      	negs	r3, r3
 80289ac:	401a      	ands	r2, r3
 80289ae:	9200      	str	r2, [sp, #0]
    MacCtx.PktBufferLen = 0;
 80289b0:	8025      	strh	r5, [r4, #0]
    uint32_t fCntUp = 0;
 80289b2:	950b      	str	r5, [sp, #44]	; 0x2c
    size_t macCmdsSize = 0;
 80289b4:	950c      	str	r5, [sp, #48]	; 0x30
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80289b6:	f006 fbbc 	bl	802f132 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80289ba:	466b      	mov	r3, sp
 80289bc:	781a      	ldrb	r2, [r3, #0]
 80289be:	4b74      	ldr	r3, [pc, #464]	; (8028b90 <LoRaMacMcpsRequest+0x368>)
 80289c0:	54e2      	strb	r2, [r4, r3]
    MacCtx.PktBuffer[0] = macHdr->Value;
 80289c2:	466b      	mov	r3, sp
 80289c4:	7a19      	ldrb	r1, [r3, #8]
    switch( macHdr->Bits.MType )
 80289c6:	9b02      	ldr	r3, [sp, #8]
    MacCtx.PktBuffer[0] = macHdr->Value;
 80289c8:	70a1      	strb	r1, [r4, #2]
    switch( macHdr->Bits.MType )
 80289ca:	061b      	lsls	r3, r3, #24
 80289cc:	0f5b      	lsrs	r3, r3, #29
 80289ce:	2b04      	cmp	r3, #4
 80289d0:	d02e      	beq.n	8028a30 <LoRaMacMcpsRequest+0x208>
 80289d2:	2b07      	cmp	r3, #7
 80289d4:	d100      	bne.n	80289d8 <LoRaMacMcpsRequest+0x1b0>
 80289d6:	e0ac      	b.n	8028b32 <LoRaMacMcpsRequest+0x30a>
 80289d8:	2b02      	cmp	r3, #2
 80289da:	d02c      	beq.n	8028a36 <LoRaMacMcpsRequest+0x20e>
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80289dc:	2402      	movs	r4, #2
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 80289de:	4a69      	ldr	r2, [pc, #420]	; (8028b84 <LoRaMacMcpsRequest+0x35c>)
 80289e0:	4b64      	ldr	r3, [pc, #400]	; (8028b74 <LoRaMacMcpsRequest+0x34c>)
 80289e2:	589b      	ldr	r3, [r3, r2]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 80289e4:	9a03      	ldr	r2, [sp, #12]
 80289e6:	3384      	adds	r3, #132	; 0x84
 80289e8:	801a      	strh	r2, [r3, #0]
            MacCtx.NodeAckRequested = false;
 80289ea:	2200      	movs	r2, #0
 80289ec:	4b61      	ldr	r3, [pc, #388]	; (8028b74 <LoRaMacMcpsRequest+0x34c>)
 80289ee:	4966      	ldr	r1, [pc, #408]	; (8028b88 <LoRaMacMcpsRequest+0x360>)
 80289f0:	545a      	strb	r2, [r3, r1]
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80289f2:	2391      	movs	r3, #145	; 0x91
 80289f4:	4a5f      	ldr	r2, [pc, #380]	; (8028b74 <LoRaMacMcpsRequest+0x34c>)
 80289f6:	00db      	lsls	r3, r3, #3
 80289f8:	58d3      	ldr	r3, [r2, r3]
 80289fa:	613b      	str	r3, [r7, #16]
    return status;
 80289fc:	e71d      	b.n	802883a <LoRaMacMcpsRequest+0x12>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 80289fe:	7bfa      	ldrb	r2, [r7, #15]
 8028a00:	1c13      	adds	r3, r2, #0
 8028a02:	2a08      	cmp	r2, #8
 8028a04:	d900      	bls.n	8028a08 <LoRaMacMcpsRequest+0x1e0>
 8028a06:	2308      	movs	r3, #8
 8028a08:	4a5d      	ldr	r2, [pc, #372]	; (8028b80 <LoRaMacMcpsRequest+0x358>)
 8028a0a:	54b3      	strb	r3, [r6, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8028a0c:	2380      	movs	r3, #128	; 0x80
 8028a0e:	e736      	b.n	802887e <LoRaMacMcpsRequest+0x56>
            MacCtx.AckTimeoutRetries = 1;
 8028a10:	4b5b      	ldr	r3, [pc, #364]	; (8028b80 <LoRaMacMcpsRequest+0x358>)
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8028a12:	466a      	mov	r2, sp
            MacCtx.AckTimeoutRetries = 1;
 8028a14:	54f4      	strb	r4, [r6, r3]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8028a16:	23e0      	movs	r3, #224	; 0xe0
 8028a18:	7213      	strb	r3, [r2, #8]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8028a1a:	687b      	ldr	r3, [r7, #4]
            readyToSend = true;
 8028a1c:	0025      	movs	r5, r4
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8028a1e:	9301      	str	r3, [sp, #4]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8028a20:	893b      	ldrh	r3, [r7, #8]
 8028a22:	9300      	str	r3, [sp, #0]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8028a24:	230a      	movs	r3, #10
 8028a26:	56fb      	ldrsb	r3, [r7, r3]
 8028a28:	9303      	str	r3, [sp, #12]
    uint8_t fPort = 0;
 8028a2a:	2300      	movs	r3, #0
 8028a2c:	9304      	str	r3, [sp, #16]
            break;
 8028a2e:	e732      	b.n	8028896 <LoRaMacMcpsRequest+0x6e>
            MacCtx.NodeAckRequested = true;
 8028a30:	2001      	movs	r0, #1
 8028a32:	4b55      	ldr	r3, [pc, #340]	; (8028b88 <LoRaMacMcpsRequest+0x360>)
 8028a34:	54e0      	strb	r0, [r4, r3]
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8028a36:	0025      	movs	r5, r4
 8028a38:	2304      	movs	r3, #4
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8028a3a:	0026      	movs	r6, r4
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8028a3c:	35ff      	adds	r5, #255	; 0xff
 8028a3e:	716b      	strb	r3, [r5, #5]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8028a40:	4b54      	ldr	r3, [pc, #336]	; (8028b94 <LoRaMacMcpsRequest+0x36c>)
 8028a42:	36fc      	adds	r6, #252	; 0xfc
 8028a44:	60f3      	str	r3, [r6, #12]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8028a46:	23ff      	movs	r3, #255	; 0xff
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8028a48:	73a9      	strb	r1, [r5, #14]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8028a4a:	9904      	ldr	r1, [sp, #16]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8028a4c:	736b      	strb	r3, [r5, #13]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8028a4e:	3329      	adds	r3, #41	; 0x29
 8028a50:	54e1      	strb	r1, [r4, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 8028a52:	4b4c      	ldr	r3, [pc, #304]	; (8028b84 <LoRaMacMcpsRequest+0x35c>)
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8028a54:	a80b      	add	r0, sp, #44	; 0x2c
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 8028a56:	58e3      	ldr	r3, [r4, r3]
 8028a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8028a5a:	6173      	str	r3, [r6, #20]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8028a5c:	9b05      	ldr	r3, [sp, #20]
 8028a5e:	756b      	strb	r3, [r5, #21]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8028a60:	2398      	movs	r3, #152	; 0x98
 8028a62:	005b      	lsls	r3, r3, #1
 8028a64:	54e2      	strb	r2, [r4, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8028a66:	4b49      	ldr	r3, [pc, #292]	; (8028b8c <LoRaMacMcpsRequest+0x364>)
 8028a68:	6333      	str	r3, [r6, #48]	; 0x30
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8028a6a:	f001 fc1b 	bl	802a2a4 <LoRaMacCryptoGetFCntUp>
 8028a6e:	2800      	cmp	r0, #0
 8028a70:	d16f      	bne.n	8028b52 <LoRaMacMcpsRequest+0x32a>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8028a72:	0022      	movs	r2, r4
 8028a74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028a76:	32fe      	adds	r2, #254	; 0xfe
 8028a78:	8313      	strh	r3, [r2, #24]
            MacCtx.McpsConfirm.AckReceived = false;
 8028a7a:	2288      	movs	r2, #136	; 0x88
 8028a7c:	00d2      	lsls	r2, r2, #3
 8028a7e:	52a0      	strh	r0, [r4, r2]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8028a80:	3208      	adds	r2, #8
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8028a82:	a80c      	add	r0, sp, #48	; 0x30
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8028a84:	50a3      	str	r3, [r4, r2]
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8028a86:	f001 f9f9 	bl	8029e7c <LoRaMacCommandsGetSizeSerializedCmds>
 8028a8a:	2800      	cmp	r0, #0
 8028a8c:	d139      	bne.n	8028b02 <LoRaMacMcpsRequest+0x2da>
            if( macCmdsSize > 0 )
 8028a8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028a90:	2b00      	cmp	r3, #0
 8028a92:	d01a      	beq.n	8028aca <LoRaMacMcpsRequest+0x2a2>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 8028a94:	2085      	movs	r0, #133	; 0x85
 8028a96:	4b3b      	ldr	r3, [pc, #236]	; (8028b84 <LoRaMacMcpsRequest+0x35c>)
 8028a98:	58e3      	ldr	r3, [r4, r3]
 8028a9a:	9300      	str	r3, [sp, #0]
 8028a9c:	5618      	ldrsb	r0, [r3, r0]
 8028a9e:	f7fd fb45 	bl	802612c <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8028aa2:	4b3b      	ldr	r3, [pc, #236]	; (8028b90 <LoRaMacMcpsRequest+0x368>)
 8028aa4:	5ce3      	ldrb	r3, [r4, r3]
 8028aa6:	2b00      	cmp	r3, #0
 8028aa8:	d02d      	beq.n	8028b06 <LoRaMacMcpsRequest+0x2de>
 8028aaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028aac:	2b0f      	cmp	r3, #15
 8028aae:	d820      	bhi.n	8028af2 <LoRaMacMcpsRequest+0x2ca>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8028ab0:	200f      	movs	r0, #15
 8028ab2:	4a39      	ldr	r2, [pc, #228]	; (8028b98 <LoRaMacMcpsRequest+0x370>)
 8028ab4:	a90c      	add	r1, sp, #48	; 0x30
 8028ab6:	f001 f9ed 	bl	8029e94 <LoRaMacCommandsSerializeCmds>
 8028aba:	2800      	cmp	r0, #0
 8028abc:	d121      	bne.n	8028b02 <LoRaMacMcpsRequest+0x2da>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8028abe:	260f      	movs	r6, #15
 8028ac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028ac2:	401e      	ands	r6, r3
 8028ac4:	9b05      	ldr	r3, [sp, #20]
 8028ac6:	4333      	orrs	r3, r6
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8028ac8:	756b      	strb	r3, [r5, #21]
        status = ScheduleTx( allowDelayedTx );
 8028aca:	9807      	ldr	r0, [sp, #28]
 8028acc:	f7fd fd7e 	bl	80265cc <ScheduleTx>
 8028ad0:	1e04      	subs	r4, r0, #0
    if( status != LORAMAC_STATUS_OK )
 8028ad2:	d184      	bne.n	80289de <LoRaMacMcpsRequest+0x1b6>
        MacCtx.NvmCtx->SrvAckRequested = false;
 8028ad4:	224c      	movs	r2, #76	; 0x4c
 8028ad6:	4d27      	ldr	r5, [pc, #156]	; (8028b74 <LoRaMacMcpsRequest+0x34c>)
 8028ad8:	4b2a      	ldr	r3, [pc, #168]	; (8028b84 <LoRaMacMcpsRequest+0x35c>)
 8028ada:	32ff      	adds	r2, #255	; 0xff
 8028adc:	58eb      	ldr	r3, [r5, r3]
 8028ade:	5498      	strb	r0, [r3, r2]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 8028ae0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8028ae2:	3304      	adds	r3, #4
 8028ae4:	67da      	str	r2, [r3, #124]	; 0x7c
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8028ae6:	f001 f99d 	bl	8029e24 <LoRaMacCommandsRemoveNoneStickyCmds>
 8028aea:	1e04      	subs	r4, r0, #0
 8028aec:	d035      	beq.n	8028b5a <LoRaMacMcpsRequest+0x332>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8028aee:	2413      	movs	r4, #19
 8028af0:	e77b      	b.n	80289ea <LoRaMacMcpsRequest+0x1c2>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8028af2:	4b24      	ldr	r3, [pc, #144]	; (8028b84 <LoRaMacMcpsRequest+0x35c>)
 8028af4:	a90c      	add	r1, sp, #48	; 0x30
 8028af6:	58e2      	ldr	r2, [r4, r3]
 8028af8:	32cb      	adds	r2, #203	; 0xcb
 8028afa:	f001 f9cb 	bl	8029e94 <LoRaMacCommandsSerializeCmds>
 8028afe:	2800      	cmp	r0, #0
 8028b00:	d0e3      	beq.n	8028aca <LoRaMacMcpsRequest+0x2a2>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8028b02:	2413      	movs	r4, #19
 8028b04:	e76b      	b.n	80289de <LoRaMacMcpsRequest+0x1b6>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8028b06:	4d1f      	ldr	r5, [pc, #124]	; (8028b84 <LoRaMacMcpsRequest+0x35c>)
 8028b08:	a90c      	add	r1, sp, #48	; 0x30
 8028b0a:	5963      	ldr	r3, [r4, r5]
 8028b0c:	001a      	movs	r2, r3
 8028b0e:	32cb      	adds	r2, #203	; 0xcb
 8028b10:	9300      	str	r3, [sp, #0]
 8028b12:	f001 f9bf 	bl	8029e94 <LoRaMacCommandsSerializeCmds>
 8028b16:	2800      	cmp	r0, #0
 8028b18:	d1f3      	bne.n	8028b02 <LoRaMacMcpsRequest+0x2da>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8028b1a:	2394      	movs	r3, #148	; 0x94
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8028b1c:	2298      	movs	r2, #152	; 0x98
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8028b1e:	005b      	lsls	r3, r3, #1
 8028b20:	54e0      	strb	r0, [r4, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 8028b22:	5963      	ldr	r3, [r4, r5]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8028b24:	0052      	lsls	r2, r2, #1
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 8028b26:	9300      	str	r3, [sp, #0]
 8028b28:	33cb      	adds	r3, #203	; 0xcb
 8028b2a:	6333      	str	r3, [r6, #48]	; 0x30
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8028b2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028b2e:	54a3      	strb	r3, [r4, r2]
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8028b30:	e7cb      	b.n	8028aca <LoRaMacMcpsRequest+0x2a2>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8028b32:	9b01      	ldr	r3, [sp, #4]
 8028b34:	2b00      	cmp	r3, #0
 8028b36:	d0c8      	beq.n	8028aca <LoRaMacMcpsRequest+0x2a2>
 8028b38:	2a00      	cmp	r2, #0
 8028b3a:	d0c6      	beq.n	8028aca <LoRaMacMcpsRequest+0x2a2>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8028b3c:	466b      	mov	r3, sp
 8028b3e:	9901      	ldr	r1, [sp, #4]
 8028b40:	781a      	ldrb	r2, [r3, #0]
 8028b42:	4816      	ldr	r0, [pc, #88]	; (8028b9c <LoRaMacMcpsRequest+0x374>)
 8028b44:	f006 faf5 	bl	802f132 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8028b48:	4b11      	ldr	r3, [pc, #68]	; (8028b90 <LoRaMacMcpsRequest+0x368>)
 8028b4a:	5ce3      	ldrb	r3, [r4, r3]
 8028b4c:	3301      	adds	r3, #1
 8028b4e:	8023      	strh	r3, [r4, #0]
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8028b50:	e7bb      	b.n	8028aca <LoRaMacMcpsRequest+0x2a2>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8028b52:	2412      	movs	r4, #18
 8028b54:	e743      	b.n	80289de <LoRaMacMcpsRequest+0x1b6>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8028b56:	2407      	movs	r4, #7
 8028b58:	e747      	b.n	80289ea <LoRaMacMcpsRequest+0x1c2>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8028b5a:	783a      	ldrb	r2, [r7, #0]
 8028b5c:	4b10      	ldr	r3, [pc, #64]	; (8028ba0 <LoRaMacMcpsRequest+0x378>)
 8028b5e:	54ea      	strb	r2, [r5, r3]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8028b60:	2301      	movs	r3, #1
 8028b62:	4a10      	ldr	r2, [pc, #64]	; (8028ba4 <LoRaMacMcpsRequest+0x37c>)
 8028b64:	5ca9      	ldrb	r1, [r5, r2]
 8028b66:	430b      	orrs	r3, r1
 8028b68:	54ab      	strb	r3, [r5, r2]
            EventMacNvmCtxChanged( );
 8028b6a:	f006 fe59 	bl	802f820 <EventMacNvmCtxChanged>
 8028b6e:	e740      	b.n	80289f2 <LoRaMacMcpsRequest+0x1ca>
 8028b70:	20008d24 	.word	0x20008d24
 8028b74:	200088e8 	.word	0x200088e8
 8028b78:	0000043d 	.word	0x0000043d
 8028b7c:	00000412 	.word	0x00000412
 8028b80:	00000411 	.word	0x00000411
 8028b84:	00000484 	.word	0x00000484
 8028b88:	00000414 	.word	0x00000414
 8028b8c:	20008a20 	.word	0x20008a20
 8028b90:	00000237 	.word	0x00000237
 8028b94:	200088ea 	.word	0x200088ea
 8028b98:	20008a00 	.word	0x20008a00
 8028b9c:	200088eb 	.word	0x200088eb
 8028ba0:	0000043c 	.word	0x0000043c
 8028ba4:	00000481 	.word	0x00000481

08028ba8 <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8028ba8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    VerifyParams_t verify;

    verify.DutyCycle = enable;

    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 8028baa:	4e08      	ldr	r6, [pc, #32]	; (8028bcc <LoRaMacTestSetDutyCycleOn+0x24>)
 8028bac:	4d08      	ldr	r5, [pc, #32]	; (8028bd0 <LoRaMacTestSetDutyCycleOn+0x28>)
    verify.DutyCycle = enable;
 8028bae:	a901      	add	r1, sp, #4
    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 8028bb0:	5973      	ldr	r3, [r6, r5]
{
 8028bb2:	0004      	movs	r4, r0
    verify.DutyCycle = enable;
 8028bb4:	7008      	strb	r0, [r1, #0]
    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 8028bb6:	220f      	movs	r2, #15
 8028bb8:	7818      	ldrb	r0, [r3, #0]
 8028bba:	f007 f91b 	bl	802fdf4 <RegionVerify>
 8028bbe:	2800      	cmp	r0, #0
 8028bc0:	d002      	beq.n	8028bc8 <LoRaMacTestSetDutyCycleOn+0x20>
    {
        MacCtx.NvmCtx->DutyCycleOn = enable;
 8028bc2:	5973      	ldr	r3, [r6, r5]
 8028bc4:	33c9      	adds	r3, #201	; 0xc9
 8028bc6:	701c      	strb	r4, [r3, #0]
    }
}
 8028bc8:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8028bca:	46c0      	nop			; (mov r8, r8)
 8028bcc:	200088e8 	.word	0x200088e8
 8028bd0:	00000484 	.word	0x00000484

08028bd4 <NvmContextChange>:
/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void NvmContextChange( void )
{
    if( Ctx.LoRaMacClassBNvmEvent != NULL )
 8028bd4:	4b03      	ldr	r3, [pc, #12]	; (8028be4 <NvmContextChange+0x10>)
{
 8028bd6:	b510      	push	{r4, lr}
    if( Ctx.LoRaMacClassBNvmEvent != NULL )
 8028bd8:	33b8      	adds	r3, #184	; 0xb8
 8028bda:	681b      	ldr	r3, [r3, #0]
 8028bdc:	2b00      	cmp	r3, #0
 8028bde:	d000      	beq.n	8028be2 <NvmContextChange+0xe>
    {
        Ctx.LoRaMacClassBNvmEvent( );
 8028be0:	4798      	blx	r3
    }
}
 8028be2:	bd10      	pop	{r4, pc}
 8028be4:	20008ef4 	.word	0x20008ef4

08028be8 <LoRaMacClassBPingSlotTimerEvent>:
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;
 8028be8:	2302      	movs	r3, #2
 8028bea:	4a06      	ldr	r2, [pc, #24]	; (8028c04 <LoRaMacClassBPingSlotTimerEvent+0x1c>)
{
 8028bec:	b510      	push	{r4, lr}
    LoRaMacClassBEvents.Events.PingSlot = 1;
 8028bee:	7811      	ldrb	r1, [r2, #0]
 8028bf0:	430b      	orrs	r3, r1
 8028bf2:	7013      	strb	r3, [r2, #0]

    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
 8028bf4:	4b04      	ldr	r3, [pc, #16]	; (8028c08 <LoRaMacClassBPingSlotTimerEvent+0x20>)
 8028bf6:	3394      	adds	r3, #148	; 0x94
 8028bf8:	681b      	ldr	r3, [r3, #0]
 8028bfa:	2b00      	cmp	r3, #0
 8028bfc:	d000      	beq.n	8028c00 <LoRaMacClassBPingSlotTimerEvent+0x18>
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
 8028bfe:	4798      	blx	r3
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8028c00:	bd10      	pop	{r4, pc}
 8028c02:	46c0      	nop			; (mov r8, r8)
 8028c04:	20008fb4 	.word	0x20008fb4
 8028c08:	20008ef4 	.word	0x20008ef4

08028c0c <LoRaMacClassBMulticastSlotTimerEvent>:
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;
 8028c0c:	2304      	movs	r3, #4
 8028c0e:	4a06      	ldr	r2, [pc, #24]	; (8028c28 <LoRaMacClassBMulticastSlotTimerEvent+0x1c>)
{
 8028c10:	b510      	push	{r4, lr}
    LoRaMacClassBEvents.Events.MulticastSlot = 1;
 8028c12:	7811      	ldrb	r1, [r2, #0]
 8028c14:	430b      	orrs	r3, r1
 8028c16:	7013      	strb	r3, [r2, #0]

    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
 8028c18:	4b04      	ldr	r3, [pc, #16]	; (8028c2c <LoRaMacClassBMulticastSlotTimerEvent+0x20>)
 8028c1a:	3394      	adds	r3, #148	; 0x94
 8028c1c:	681b      	ldr	r3, [r3, #0]
 8028c1e:	2b00      	cmp	r3, #0
 8028c20:	d000      	beq.n	8028c24 <LoRaMacClassBMulticastSlotTimerEvent+0x18>
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
 8028c22:	4798      	blx	r3
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8028c24:	bd10      	pop	{r4, pc}
 8028c26:	46c0      	nop			; (mov r8, r8)
 8028c28:	20008fb4 	.word	0x20008fb4
 8028c2c:	20008ef4 	.word	0x20008ef4

08028c30 <CalcDownlinkFrequency>:
{
 8028c30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    getPhy.Attribute = PHY_PING_SLOT_CHANNEL_FREQ;
 8028c32:	2235      	movs	r2, #53	; 0x35
 8028c34:	ab02      	add	r3, sp, #8
    if( isBeacon == true )
 8028c36:	2900      	cmp	r1, #0
 8028c38:	d000      	beq.n	8028c3c <CalcDownlinkFrequency+0xc>
        getPhy.Attribute = PHY_BEACON_CHANNEL_FREQ;
 8028c3a:	2230      	movs	r2, #48	; 0x30
 8028c3c:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8028c3e:	4a05      	ldr	r2, [pc, #20]	; (8028c54 <CalcDownlinkFrequency+0x24>)
    getPhy.Channel = channel;
 8028c40:	7118      	strb	r0, [r3, #4]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8028c42:	32ac      	adds	r2, #172	; 0xac
 8028c44:	6812      	ldr	r2, [r2, #0]
 8028c46:	0019      	movs	r1, r3
 8028c48:	7810      	ldrb	r0, [r2, #0]
 8028c4a:	f007 f8af 	bl	802fdac <RegionGetPhyParam>
}
 8028c4e:	b005      	add	sp, #20
 8028c50:	bd00      	pop	{pc}
 8028c52:	46c0      	nop			; (mov r8, r8)
 8028c54:	20008ef4 	.word	0x20008ef4

08028c58 <LoRaMacClassBBeaconTimerEvent>:
{
 8028c58:	b510      	push	{r4, lr}
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
 8028c5a:	f006 fa33 	bl	802f0c4 <TimerGetCurrentTime>
 8028c5e:	4c08      	ldr	r4, [pc, #32]	; (8028c80 <LoRaMacClassBBeaconTimerEvent+0x28>)
 8028c60:	6420      	str	r0, [r4, #64]	; 0x40
    TimerStop( &Ctx.BeaconTimer );
 8028c62:	4808      	ldr	r0, [pc, #32]	; (8028c84 <LoRaMacClassBBeaconTimerEvent+0x2c>)
 8028c64:	f7fb f93e 	bl	8023ee4 <TimerStop>
    LoRaMacClassBEvents.Events.Beacon = 1;
 8028c68:	2301      	movs	r3, #1
 8028c6a:	4a07      	ldr	r2, [pc, #28]	; (8028c88 <LoRaMacClassBBeaconTimerEvent+0x30>)
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
 8028c6c:	3494      	adds	r4, #148	; 0x94
    LoRaMacClassBEvents.Events.Beacon = 1;
 8028c6e:	7811      	ldrb	r1, [r2, #0]
 8028c70:	430b      	orrs	r3, r1
 8028c72:	7013      	strb	r3, [r2, #0]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
 8028c74:	6823      	ldr	r3, [r4, #0]
 8028c76:	2b00      	cmp	r3, #0
 8028c78:	d000      	beq.n	8028c7c <LoRaMacClassBBeaconTimerEvent+0x24>
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
 8028c7a:	4798      	blx	r3
}
 8028c7c:	bd10      	pop	{r4, pc}
 8028c7e:	46c0      	nop			; (mov r8, r8)
 8028c80:	20008ef4 	.word	0x20008ef4
 8028c84:	20008f3c 	.word	0x20008f3c
 8028c88:	20008fb4 	.word	0x20008fb4

08028c8c <TimerTempCompensation>:
{
 8028c8c:	b570      	push	{r4, r5, r6, lr}
 8028c8e:	0005      	movs	r5, r0
 8028c90:	1c08      	adds	r0, r1, #0
  interim = (temperature - (t - tDev));
 8028c92:	4915      	ldr	r1, [pc, #84]	; (8028ce8 <TimerTempCompensation+0x5c>)
 8028c94:	f7f8 f9c8 	bl	8021028 <__aeabi_fsub>
 8028c98:	1c04      	adds	r4, r0, #0
  interim = ((float) period * ppm) / 1000000.0f;
 8028c9a:	0028      	movs	r0, r5
 8028c9c:	f7f8 fb92 	bl	80213c4 <__aeabi_ui2f>
  ppm *=  interim * interim;
 8028ca0:	1c21      	adds	r1, r4, #0
  interim = ((float) period * ppm) / 1000000.0f;
 8028ca2:	1c05      	adds	r5, r0, #0
  ppm *=  interim * interim;
 8028ca4:	1c20      	adds	r0, r4, #0
 8028ca6:	f7f8 f899 	bl	8020ddc <__aeabi_fmul>
 8028caa:	4910      	ldr	r1, [pc, #64]	; (8028cec <TimerTempCompensation+0x60>)
 8028cac:	f7f8 f896 	bl	8020ddc <__aeabi_fmul>
  interim = ((float) period * ppm) / 1000000.0f;
 8028cb0:	1c29      	adds	r1, r5, #0
 8028cb2:	f7f8 f893 	bl	8020ddc <__aeabi_fmul>
 8028cb6:	490e      	ldr	r1, [pc, #56]	; (8028cf0 <TimerTempCompensation+0x64>)
 8028cb8:	f7f7 fec8 	bl	8020a4c <__aeabi_fdiv>
 8028cbc:	1c01      	adds	r1, r0, #0
  interim += period;
 8028cbe:	1c28      	adds	r0, r5, #0
 8028cc0:	f7f7 fd26 	bl	8020710 <__aeabi_fadd>
  interim = floor(interim);
 8028cc4:	f7f8 ff32 	bl	8021b2c <__aeabi_f2d>
 8028cc8:	f004 fd4c 	bl	802d764 <floor>
 8028ccc:	f7f8 ff76 	bl	8021bbc <__aeabi_d2f>
  if (interim < 0.0f)
 8028cd0:	2100      	movs	r1, #0
  interim = floor(interim);
 8028cd2:	1c04      	adds	r4, r0, #0
  if (interim < 0.0f)
 8028cd4:	f7f7 fba4 	bl	8020420 <__aeabi_fcmplt>
 8028cd8:	2800      	cmp	r0, #0
 8028cda:	d000      	beq.n	8028cde <TimerTempCompensation+0x52>
    interim = (float)period;
 8028cdc:	1c2c      	adds	r4, r5, #0
  return ( UTIL_TIMER_Time_t ) interim;
 8028cde:	1c20      	adds	r0, r4, #0
 8028ce0:	f7f7 fc32 	bl	8020548 <__aeabi_f2uiz>
}
 8028ce4:	bd70      	pop	{r4, r5, r6, pc}
 8028ce6:	46c0      	nop			; (mov r8, r8)
 8028ce8:	41a00000 	.word	0x41a00000
 8028cec:	bd1db22d 	.word	0xbd1db22d
 8028cf0:	49742400 	.word	0x49742400

08028cf4 <CalcNextSlotTime>:
{
 8028cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028cf6:	b085      	sub	sp, #20
 8028cf8:	9303      	str	r3, [sp, #12]
 8028cfa:	0004      	movs	r4, r0
 8028cfc:	9202      	str	r2, [sp, #8]
 8028cfe:	9101      	str	r1, [sp, #4]
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8028d00:	f006 f9e0 	bl	802f0c4 <TimerGetCurrentTime>
    slotTime = ( ( currentTime - SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) ) % CLASSB_BEACON_INTERVAL );
 8028d04:	4e1d      	ldr	r6, [pc, #116]	; (8028d7c <CalcNextSlotTime+0x88>)
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8028d06:	0005      	movs	r5, r0
    slotTime = ( ( currentTime - SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) ) % CLASSB_BEACON_INTERVAL );
 8028d08:	6a31      	ldr	r1, [r6, #32]
 8028d0a:	69f0      	ldr	r0, [r6, #28]
 8028d0c:	f006 f98f 	bl	802f02e <SysTimeToMs>
 8028d10:	21fa      	movs	r1, #250	; 0xfa
 8028d12:	1a28      	subs	r0, r5, r0
 8028d14:	0249      	lsls	r1, r1, #9
 8028d16:	f7f7 fa81 	bl	802021c <__aeabi_uidivmod>
    slotTime += slotOffset * CLASSB_PING_SLOT_WINDOW;
 8028d1a:	271e      	movs	r7, #30
 8028d1c:	0020      	movs	r0, r4
 8028d1e:	4378      	muls	r0, r7
 8028d20:	4b17      	ldr	r3, [pc, #92]	; (8028d80 <CalcNextSlotTime+0x8c>)
 8028d22:	18c0      	adds	r0, r0, r3
 8028d24:	1940      	adds	r0, r0, r5
    uint8_t currentPingSlot = 0;
 8028d26:	2300      	movs	r3, #0
    slotTime += slotOffset * CLASSB_PING_SLOT_WINDOW;
 8028d28:	1a44      	subs	r4, r0, r1
    if( slotTime < currentTime )
 8028d2a:	42a5      	cmp	r5, r4
 8028d2c:	d90b      	bls.n	8028d46 <CalcNextSlotTime+0x52>
        currentPingSlot = ( ( currentTime - slotTime ) /
 8028d2e:	1a08      	subs	r0, r1, r0
                          ( pingPeriod * CLASSB_PING_SLOT_WINDOW ) ) + 1;
 8028d30:	9901      	ldr	r1, [sp, #4]
        currentPingSlot = ( ( currentTime - slotTime ) /
 8028d32:	1940      	adds	r0, r0, r5
                          ( pingPeriod * CLASSB_PING_SLOT_WINDOW ) ) + 1;
 8028d34:	4379      	muls	r1, r7
        currentPingSlot = ( ( currentTime - slotTime ) /
 8028d36:	f7f7 f9eb 	bl	8020110 <__udivsi3>
        slotTime += ( ( TimerTime_t )( currentPingSlot * pingPeriod ) *
 8028d3a:	9901      	ldr	r1, [sp, #4]
        currentPingSlot = ( ( currentTime - slotTime ) /
 8028d3c:	3001      	adds	r0, #1
 8028d3e:	b2c3      	uxtb	r3, r0
        slotTime += ( ( TimerTime_t )( currentPingSlot * pingPeriod ) *
 8028d40:	4359      	muls	r1, r3
 8028d42:	434f      	muls	r7, r1
 8028d44:	19e4      	adds	r4, r4, r7
    if( currentPingSlot < pingNb )
 8028d46:	9a02      	ldr	r2, [sp, #8]
 8028d48:	4293      	cmp	r3, r2
 8028d4a:	d302      	bcc.n	8028d52 <CalcNextSlotTime+0x5e>
    return false;
 8028d4c:	2000      	movs	r0, #0
}
 8028d4e:	b005      	add	sp, #20
 8028d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( slotTime <= ( SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - CLASSB_BEACON_GUARD - CLASSB_PING_SLOT_WINDOW ) )
 8028d52:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8028d54:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8028d56:	f006 f96a 	bl	802f02e <SysTimeToMs>
 8028d5a:	4b0a      	ldr	r3, [pc, #40]	; (8028d84 <CalcNextSlotTime+0x90>)
 8028d5c:	18c0      	adds	r0, r0, r3
 8028d5e:	42a0      	cmp	r0, r4
 8028d60:	d3f4      	bcc.n	8028d4c <CalcNextSlotTime+0x58>
            slotTime -= Radio.GetWakeupTime( );
 8028d62:	4b09      	ldr	r3, [pc, #36]	; (8028d88 <CalcNextSlotTime+0x94>)
            slotTime -= currentTime;
 8028d64:	1b64      	subs	r4, r4, r5
            slotTime -= Radio.GetWakeupTime( );
 8028d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8028d68:	9301      	str	r3, [sp, #4]
 8028d6a:	4798      	blx	r3
            slotTime = TimerTempCompensation( slotTime, Ctx.BeaconCtx.Temperature );
 8028d6c:	6931      	ldr	r1, [r6, #16]
            slotTime -= Radio.GetWakeupTime( );
 8028d6e:	1a20      	subs	r0, r4, r0
            slotTime = TimerTempCompensation( slotTime, Ctx.BeaconCtx.Temperature );
 8028d70:	f7ff ff8c 	bl	8028c8c <TimerTempCompensation>
            *timeOffset = slotTime;
 8028d74:	9b03      	ldr	r3, [sp, #12]
 8028d76:	6018      	str	r0, [r3, #0]
            return true;
 8028d78:	2001      	movs	r0, #1
 8028d7a:	e7e8      	b.n	8028d4e <CalcNextSlotTime+0x5a>
 8028d7c:	20008ef4 	.word	0x20008ef4
 8028d80:	00000848 	.word	0x00000848
 8028d84:	fffff42a 	.word	0xfffff42a
 8028d88:	08031484 	.word	0x08031484

08028d8c <BeaconCrc>:
{
 8028d8c:	0002      	movs	r2, r0
 8028d8e:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( buffer == NULL )
 8028d90:	2800      	cmp	r0, #0
 8028d92:	d018      	beq.n	8028dc6 <BeaconCrc+0x3a>
 8028d94:	2300      	movs	r3, #0
        crc ^= ( uint16_t ) buffer[i] << 8;
 8028d96:	2708      	movs	r7, #8
    uint16_t crc = 0x0000;
 8028d98:	0018      	movs	r0, r3
        crc ^= ( uint16_t ) buffer[i] << 8;
 8028d9a:	5cd4      	ldrb	r4, [r2, r3]
 8028d9c:	0224      	lsls	r4, r4, #8
 8028d9e:	4060      	eors	r0, r4
 8028da0:	003c      	movs	r4, r7
            crc = ( crc & 0x8000 ) ? ( crc << 1 ) ^ polynom : ( crc << 1 );
 8028da2:	b205      	sxth	r5, r0
 8028da4:	46ac      	mov	ip, r5
 8028da6:	4666      	mov	r6, ip
 8028da8:	0045      	lsls	r5, r0, #1
 8028daa:	b2a8      	uxth	r0, r5
 8028dac:	2e00      	cmp	r6, #0
 8028dae:	da02      	bge.n	8028db6 <BeaconCrc+0x2a>
 8028db0:	4805      	ldr	r0, [pc, #20]	; (8028dc8 <BeaconCrc+0x3c>)
 8028db2:	4045      	eors	r5, r0
 8028db4:	b2a8      	uxth	r0, r5
        for( uint16_t j = 0; j < 8; ++j )
 8028db6:	3c01      	subs	r4, #1
 8028db8:	b2a4      	uxth	r4, r4
 8028dba:	2c00      	cmp	r4, #0
 8028dbc:	d1f1      	bne.n	8028da2 <BeaconCrc+0x16>
    for( uint16_t i = 0; i < length; ++i )
 8028dbe:	3301      	adds	r3, #1
 8028dc0:	b29c      	uxth	r4, r3
 8028dc2:	42a1      	cmp	r1, r4
 8028dc4:	d8e9      	bhi.n	8028d9a <BeaconCrc+0xe>
}
 8028dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028dc8:	00001021 	.word	0x00001021

08028dcc <CalcDownlinkChannelAndFrequency.constprop.0>:
static uint32_t CalcDownlinkChannelAndFrequency( uint32_t devAddr, TimerTime_t beaconTime,
 8028dcc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8028dce:	0006      	movs	r6, r0
 8028dd0:	000c      	movs	r4, r1
 8028dd2:	0015      	movs	r5, r2
    getPhy.Attribute = PHY_PING_SLOT_NB_CHANNELS;
 8028dd4:	2337      	movs	r3, #55	; 0x37
    if( isBeacon == true )
 8028dd6:	2a00      	cmp	r2, #0
 8028dd8:	d000      	beq.n	8028ddc <CalcDownlinkChannelAndFrequency.constprop.0+0x10>
        getPhy.Attribute = PHY_BEACON_NB_CHANNELS;
 8028dda:	2334      	movs	r3, #52	; 0x34
 8028ddc:	466a      	mov	r2, sp
 8028dde:	7213      	strb	r3, [r2, #8]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8028de0:	4b0b      	ldr	r3, [pc, #44]	; (8028e10 <CalcDownlinkChannelAndFrequency.constprop.0+0x44>)
 8028de2:	a902      	add	r1, sp, #8
 8028de4:	33ac      	adds	r3, #172	; 0xac
 8028de6:	681b      	ldr	r3, [r3, #0]
 8028de8:	7818      	ldrb	r0, [r3, #0]
 8028dea:	f006 ffdf 	bl	802fdac <RegionGetPhyParam>
    if( nbChannels > 1 )
 8028dee:	b2c2      	uxtb	r2, r0
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8028df0:	0003      	movs	r3, r0
    uint32_t channel = 0;
 8028df2:	2100      	movs	r1, #0
    if( nbChannels > 1 )
 8028df4:	2a01      	cmp	r2, #1
 8028df6:	d904      	bls.n	8028e02 <CalcDownlinkChannelAndFrequency.constprop.0+0x36>
        channel = devAddr + ( beaconTime / ( beaconInterval / 1000 ) );
 8028df8:	09e0      	lsrs	r0, r4, #7
 8028dfa:	1980      	adds	r0, r0, r6
        channel = channel % nbChannels;
 8028dfc:	b2d9      	uxtb	r1, r3
 8028dfe:	f7f7 fa0d 	bl	802021c <__aeabi_uidivmod>
    return CalcDownlinkFrequency( channel, isBeacon );
 8028e02:	b2c8      	uxtb	r0, r1
 8028e04:	0029      	movs	r1, r5
 8028e06:	f7ff ff13 	bl	8028c30 <CalcDownlinkFrequency>
}
 8028e0a:	b004      	add	sp, #16
 8028e0c:	bd70      	pop	{r4, r5, r6, pc}
 8028e0e:	46c0      	nop			; (mov r8, r8)
 8028e10:	20008ef4 	.word	0x20008ef4

08028e14 <RxBeaconSetup>:
{
 8028e14:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t windowTimeout = Ctx.BeaconCtx.SymbolTimeout;
 8028e16:	4c2c      	ldr	r4, [pc, #176]	; (8028ec8 <RxBeaconSetup+0xb4>)
{
 8028e18:	0007      	movs	r7, r0
    uint16_t windowTimeout = Ctx.BeaconCtx.SymbolTimeout;
 8028e1a:	8e26      	ldrh	r6, [r4, #48]	; 0x30
{
 8028e1c:	0008      	movs	r0, r1
 8028e1e:	b08f      	sub	sp, #60	; 0x3c
    if( activateDefaultChannel == true )
 8028e20:	2900      	cmp	r1, #0
 8028e22:	d04a      	beq.n	8028eba <RxBeaconSetup+0xa6>
        frequency = CalcDownlinkFrequency( 0, true );
 8028e24:	2101      	movs	r1, #1
 8028e26:	2000      	movs	r0, #0
 8028e28:	f7ff ff02 	bl	8028c30 <CalcDownlinkFrequency>
    if( Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq == 1 )
 8028e2c:	0023      	movs	r3, r4
 8028e2e:	33bc      	adds	r3, #188	; 0xbc
 8028e30:	681b      	ldr	r3, [r3, #0]
        frequency = CalcDownlinkChannelAndFrequency( 0, Ctx.BeaconCtx.BeaconTime.Seconds + ( CLASSB_BEACON_INTERVAL / 1000 ),
 8028e32:	0005      	movs	r5, r0
    if( Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq == 1 )
 8028e34:	7b1a      	ldrb	r2, [r3, #12]
 8028e36:	07d2      	lsls	r2, r2, #31
 8028e38:	d500      	bpl.n	8028e3c <RxBeaconSetup+0x28>
        frequency = Ctx.NvmCtx->BeaconCtx.Frequency;
 8028e3a:	691d      	ldr	r5, [r3, #16]
    if( Ctx.BeaconCtx.Ctrl.BeaconChannelSet == 1 )
 8028e3c:	2208      	movs	r2, #8
 8028e3e:	7b23      	ldrb	r3, [r4, #12]
 8028e40:	4213      	tst	r3, r2
 8028e42:	d008      	beq.n	8028e56 <RxBeaconSetup+0x42>
        Ctx.BeaconCtx.Ctrl.BeaconChannelSet = 0;
 8028e44:	4393      	bics	r3, r2
 8028e46:	7323      	strb	r3, [r4, #12]
        frequency = CalcDownlinkFrequency( Ctx.BeaconCtx.BeaconTimingChannel, true );
 8028e48:	0023      	movs	r3, r4
 8028e4a:	3338      	adds	r3, #56	; 0x38
 8028e4c:	2101      	movs	r1, #1
 8028e4e:	7818      	ldrb	r0, [r3, #0]
 8028e50:	f7ff feee 	bl	8028c30 <CalcDownlinkFrequency>
 8028e54:	0005      	movs	r5, r0
    if( ( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 1 ) || ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) )
 8028e56:	2312      	movs	r3, #18
 8028e58:	7b22      	ldrb	r2, [r4, #12]
 8028e5a:	421a      	tst	r2, r3
 8028e5c:	d017      	beq.n	8028e8e <RxBeaconSetup+0x7a>
        phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8028e5e:	0026      	movs	r6, r4
        getPhy.Attribute = PHY_BEACON_CHANNEL_DR;
 8028e60:	a904      	add	r1, sp, #16
        phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8028e62:	36ac      	adds	r6, #172	; 0xac
        getPhy.Attribute = PHY_BEACON_CHANNEL_DR;
 8028e64:	3320      	adds	r3, #32
 8028e66:	700b      	strb	r3, [r1, #0]
        phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8028e68:	6833      	ldr	r3, [r6, #0]
 8028e6a:	7818      	ldrb	r0, [r3, #0]
 8028e6c:	f006 ff9e 	bl	802fdac <RegionGetPhyParam>
                                        Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 8028e70:	0023      	movs	r3, r4
 8028e72:	33b0      	adds	r3, #176	; 0xb0
 8028e74:	681b      	ldr	r3, [r3, #0]
        phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8028e76:	9003      	str	r0, [sp, #12]
        RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8028e78:	b241      	sxtb	r1, r0
 8028e7a:	6830      	ldr	r0, [r6, #0]
 8028e7c:	ae09      	add	r6, sp, #36	; 0x24
 8028e7e:	7a1a      	ldrb	r2, [r3, #8]
 8028e80:	7800      	ldrb	r0, [r0, #0]
 8028e82:	9600      	str	r6, [sp, #0]
 8028e84:	685b      	ldr	r3, [r3, #4]
 8028e86:	f006 ffd2 	bl	802fe2e <RegionComputeRxWindowParameters>
        windowTimeout = beaconRxConfig.WindowTimeout;
 8028e8a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8028e8c:	b2b6      	uxth	r6, r6
    rxBeaconSetup.SymbolTimeout = windowTimeout;
 8028e8e:	a906      	add	r1, sp, #24
 8028e90:	800e      	strh	r6, [r1, #0]
    RegionRxBeaconSetup( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &rxBeaconSetup, &Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 8028e92:	0026      	movs	r6, r4
 8028e94:	369c      	adds	r6, #156	; 0x9c
 8028e96:	6833      	ldr	r3, [r6, #0]
    rxBeaconSetup.RxTime = rxTime;
 8028e98:	604f      	str	r7, [r1, #4]
    RegionRxBeaconSetup( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &rxBeaconSetup, &Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 8028e9a:	1d1a      	adds	r2, r3, #4
 8028e9c:	0023      	movs	r3, r4
 8028e9e:	33ac      	adds	r3, #172	; 0xac
 8028ea0:	681b      	ldr	r3, [r3, #0]
    rxBeaconSetup.Frequency = frequency;
 8028ea2:	608d      	str	r5, [r1, #8]
    RegionRxBeaconSetup( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &rxBeaconSetup, &Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 8028ea4:	7818      	ldrb	r0, [r3, #0]
 8028ea6:	f007 f84c 	bl	802ff42 <RegionRxBeaconSetup>
    Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Frequency = frequency;
 8028eaa:	3498      	adds	r4, #152	; 0x98
 8028eac:	6823      	ldr	r3, [r4, #0]
    Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Datarate = Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate;
 8028eae:	6832      	ldr	r2, [r6, #0]
    Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Frequency = frequency;
 8028eb0:	60dd      	str	r5, [r3, #12]
    Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Datarate = Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate;
 8028eb2:	7912      	ldrb	r2, [r2, #4]
 8028eb4:	741a      	strb	r2, [r3, #16]
}
 8028eb6:	b00f      	add	sp, #60	; 0x3c
 8028eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        frequency = CalcDownlinkChannelAndFrequency( 0, Ctx.BeaconCtx.BeaconTime.Seconds + ( CLASSB_BEACON_INTERVAL / 1000 ),
 8028eba:	6961      	ldr	r1, [r4, #20]
 8028ebc:	2201      	movs	r2, #1
 8028ebe:	3180      	adds	r1, #128	; 0x80
 8028ec0:	f7ff ff84 	bl	8028dcc <CalcDownlinkChannelAndFrequency.constprop.0>
 8028ec4:	e7b2      	b.n	8028e2c <RxBeaconSetup+0x18>
 8028ec6:	46c0      	nop			; (mov r8, r8)
 8028ec8:	20008ef4 	.word	0x20008ef4

08028ecc <InitClassB>:
{
 8028ecc:	b530      	push	{r4, r5, lr}
    LoRaMacClassBEvents.Value = 0;
 8028ece:	2500      	movs	r5, #0
 8028ed0:	4b19      	ldr	r3, [pc, #100]	; (8028f38 <InitClassB+0x6c>)
{
 8028ed2:	b085      	sub	sp, #20
    memset1( ( uint8_t* ) &NvmCtx, 0, sizeof( LoRaMacClassBNvmCtx_t ) );
 8028ed4:	2218      	movs	r2, #24
 8028ed6:	0029      	movs	r1, r5
 8028ed8:	4818      	ldr	r0, [pc, #96]	; (8028f3c <InitClassB+0x70>)
    LoRaMacClassBEvents.Value = 0;
 8028eda:	601d      	str	r5, [r3, #0]
    memset1( ( uint8_t* ) &NvmCtx, 0, sizeof( LoRaMacClassBNvmCtx_t ) );
 8028edc:	f7fb f89c 	bl	8024018 <memset1>
    memset1( ( uint8_t* ) &Ctx.PingSlotCtx, 0, sizeof( PingSlotContext_t ) );
 8028ee0:	4c17      	ldr	r4, [pc, #92]	; (8028f40 <InitClassB+0x74>)
 8028ee2:	220c      	movs	r2, #12
 8028ee4:	0029      	movs	r1, r5
 8028ee6:	0020      	movs	r0, r4
 8028ee8:	f7fb f896 	bl	8024018 <memset1>
    memset1( ( uint8_t* ) &Ctx.BeaconCtx, 0, sizeof( BeaconContext_t ) );
 8028eec:	2238      	movs	r2, #56	; 0x38
 8028eee:	0029      	movs	r1, r5
 8028ef0:	4814      	ldr	r0, [pc, #80]	; (8028f44 <InitClassB+0x78>)
 8028ef2:	f7fb f891 	bl	8024018 <memset1>
    Ctx.BeaconCtx.Temperature = 25.0;
 8028ef6:	4b14      	ldr	r3, [pc, #80]	; (8028f48 <InitClassB+0x7c>)
 8028ef8:	6123      	str	r3, [r4, #16]
    if( ( callbacks != NULL ) && ( callbacks->GetTemperatureLevel != NULL ) )
 8028efa:	0023      	movs	r3, r4
 8028efc:	3390      	adds	r3, #144	; 0x90
 8028efe:	681b      	ldr	r3, [r3, #0]
 8028f00:	42ab      	cmp	r3, r5
 8028f02:	d003      	beq.n	8028f0c <InitClassB+0x40>
        beaconCtx->Temperature = callbacks->GetTemperatureLevel( );
 8028f04:	4798      	blx	r3
 8028f06:	f7f8 fa5d 	bl	80213c4 <__aeabi_ui2f>
 8028f0a:	6120      	str	r0, [r4, #16]
    getPhy.Attribute = PHY_PING_SLOT_CHANNEL_DR;
 8028f0c:	2336      	movs	r3, #54	; 0x36
 8028f0e:	a902      	add	r1, sp, #8
 8028f10:	700b      	strb	r3, [r1, #0]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8028f12:	0023      	movs	r3, r4
 8028f14:	33ac      	adds	r3, #172	; 0xac
 8028f16:	681b      	ldr	r3, [r3, #0]
 8028f18:	7818      	ldrb	r0, [r3, #0]
 8028f1a:	f006 ff47 	bl	802fdac <RegionGetPhyParam>
    Ctx.NvmCtx->PingSlotCtx.Datarate = (int8_t)( phyParam.Value );
 8028f1e:	0023      	movs	r3, r4
 8028f20:	33bc      	adds	r3, #188	; 0xbc
 8028f22:	681a      	ldr	r2, [r3, #0]
    Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 8028f24:	2300      	movs	r3, #0
 8028f26:	1da1      	adds	r1, r4, #6
    Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 8028f28:	3446      	adds	r4, #70	; 0x46
    Ctx.NvmCtx->PingSlotCtx.Datarate = (int8_t)( phyParam.Value );
 8028f2a:	7210      	strb	r0, [r2, #8]
    Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 8028f2c:	87cb      	strh	r3, [r1, #62]	; 0x3e
    Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 8028f2e:	7023      	strb	r3, [r4, #0]
    Ctx.NvmCtx->BeaconCtx.BeaconState = BEACON_STATE_ACQUISITION;
 8028f30:	7513      	strb	r3, [r2, #20]
}
 8028f32:	b005      	add	sp, #20
 8028f34:	bd30      	pop	{r4, r5, pc}
 8028f36:	46c0      	nop			; (mov r8, r8)
 8028f38:	20008fb4 	.word	0x20008fb4
 8028f3c:	20008fb8 	.word	0x20008fb8
 8028f40:	20008ef4 	.word	0x20008ef4
 8028f44:	20008f00 	.word	0x20008f00
 8028f48:	41c80000 	.word	0x41c80000

08028f4c <InitClassBDefaults>:
{
 8028f4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    LoRaMacClassBBeaconNvmCtx_t beaconCtx = Ctx.NvmCtx->BeaconCtx;
 8028f4e:	4e11      	ldr	r6, [pc, #68]	; (8028f94 <InitClassBDefaults+0x48>)
 8028f50:	36bc      	adds	r6, #188	; 0xbc
 8028f52:	6833      	ldr	r3, [r6, #0]
    LoRaMacClassBPingSlotNvmCtx_t pingSlotCtx = Ctx.NvmCtx->PingSlotCtx;
 8028f54:	685a      	ldr	r2, [r3, #4]
    LoRaMacClassBBeaconNvmCtx_t beaconCtx = Ctx.NvmCtx->BeaconCtx;
 8028f56:	691f      	ldr	r7, [r3, #16]
    LoRaMacClassBPingSlotNvmCtx_t pingSlotCtx = Ctx.NvmCtx->PingSlotCtx;
 8028f58:	9200      	str	r2, [sp, #0]
    LoRaMacClassBBeaconNvmCtx_t beaconCtx = Ctx.NvmCtx->BeaconCtx;
 8028f5a:	7b1d      	ldrb	r5, [r3, #12]
    LoRaMacClassBPingSlotNvmCtx_t pingSlotCtx = Ctx.NvmCtx->PingSlotCtx;
 8028f5c:	781c      	ldrb	r4, [r3, #0]
 8028f5e:	7a1b      	ldrb	r3, [r3, #8]
    LoRaMacClassBBeaconNvmCtx_t beaconCtx = Ctx.NvmCtx->BeaconCtx;
 8028f60:	07ed      	lsls	r5, r5, #31
    LoRaMacClassBPingSlotNvmCtx_t pingSlotCtx = Ctx.NvmCtx->PingSlotCtx;
 8028f62:	b25b      	sxtb	r3, r3
 8028f64:	9301      	str	r3, [sp, #4]
    InitClassB( );
 8028f66:	f7ff ffb1 	bl	8028ecc <InitClassB>
    Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq = beaconCtx.Ctrl.CustomFreq;
 8028f6a:	2101      	movs	r1, #1
    Ctx.NvmCtx->BeaconCtx.Frequency = beaconCtx.Frequency;
 8028f6c:	6833      	ldr	r3, [r6, #0]
    LoRaMacClassBPingSlotNvmCtx_t pingSlotCtx = Ctx.NvmCtx->PingSlotCtx;
 8028f6e:	07a4      	lsls	r4, r4, #30
    Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq = beaconCtx.Ctrl.CustomFreq;
 8028f70:	7b1a      	ldrb	r2, [r3, #12]
    LoRaMacClassBPingSlotNvmCtx_t pingSlotCtx = Ctx.NvmCtx->PingSlotCtx;
 8028f72:	0fe4      	lsrs	r4, r4, #31
    Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq = beaconCtx.Ctrl.CustomFreq;
 8028f74:	438a      	bics	r2, r1
    LoRaMacClassBBeaconNvmCtx_t beaconCtx = Ctx.NvmCtx->BeaconCtx;
 8028f76:	0fed      	lsrs	r5, r5, #31
    Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq = beaconCtx.Ctrl.CustomFreq;
 8028f78:	4315      	orrs	r5, r2
    Ctx.NvmCtx->PingSlotCtx.Ctrl.CustomFreq = pingSlotCtx.Ctrl.CustomFreq;
 8028f7a:	0062      	lsls	r2, r4, #1
 8028f7c:	781c      	ldrb	r4, [r3, #0]
 8028f7e:	1849      	adds	r1, r1, r1
 8028f80:	438c      	bics	r4, r1
 8028f82:	4314      	orrs	r4, r2
    Ctx.NvmCtx->PingSlotCtx.Frequency = pingSlotCtx.Frequency;
 8028f84:	9a00      	ldr	r2, [sp, #0]
    Ctx.NvmCtx->BeaconCtx.Frequency = beaconCtx.Frequency;
 8028f86:	611f      	str	r7, [r3, #16]
    Ctx.NvmCtx->PingSlotCtx.Frequency = pingSlotCtx.Frequency;
 8028f88:	605a      	str	r2, [r3, #4]
    Ctx.NvmCtx->PingSlotCtx.Datarate = pingSlotCtx.Datarate;
 8028f8a:	9a01      	ldr	r2, [sp, #4]
    Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq = beaconCtx.Ctrl.CustomFreq;
 8028f8c:	731d      	strb	r5, [r3, #12]
    Ctx.NvmCtx->PingSlotCtx.Ctrl.CustomFreq = pingSlotCtx.Ctrl.CustomFreq;
 8028f8e:	701c      	strb	r4, [r3, #0]
    Ctx.NvmCtx->PingSlotCtx.Datarate = pingSlotCtx.Datarate;
 8028f90:	721a      	strb	r2, [r3, #8]
}
 8028f92:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8028f94:	20008ef4 	.word	0x20008ef4

08028f98 <LoRaMacClassBInit>:
{
 8028f98:	b570      	push	{r4, r5, r6, lr}
    Ctx.LoRaMacClassBCallbacks = *callbacks;
 8028f9a:	4c11      	ldr	r4, [pc, #68]	; (8028fe0 <LoRaMacClassBInit+0x48>)
 8028f9c:	0023      	movs	r3, r4
 8028f9e:	3390      	adds	r3, #144	; 0x90
 8028fa0:	c960      	ldmia	r1!, {r5, r6}
 8028fa2:	c360      	stmia	r3!, {r5, r6}
    Ctx.LoRaMacClassBParams = *classBParams;
 8028fa4:	0021      	movs	r1, r4
 8028fa6:	3198      	adds	r1, #152	; 0x98
 8028fa8:	000b      	movs	r3, r1
 8028faa:	c862      	ldmia	r0!, {r1, r5, r6}
 8028fac:	c362      	stmia	r3!, {r1, r5, r6}
 8028fae:	c862      	ldmia	r0!, {r1, r5, r6}
 8028fb0:	c362      	stmia	r3!, {r1, r5, r6}
 8028fb2:	c822      	ldmia	r0!, {r1, r5}
 8028fb4:	c322      	stmia	r3!, {r1, r5}
    Ctx.NvmCtx = &NvmCtx;
 8028fb6:	0023      	movs	r3, r4
 8028fb8:	490a      	ldr	r1, [pc, #40]	; (8028fe4 <LoRaMacClassBInit+0x4c>)
 8028fba:	33bc      	adds	r3, #188	; 0xbc
 8028fbc:	6019      	str	r1, [r3, #0]
    TimerInit( &Ctx.BeaconTimer, LoRaMacClassBBeaconTimerEvent );
 8028fbe:	480a      	ldr	r0, [pc, #40]	; (8028fe8 <LoRaMacClassBInit+0x50>)
 8028fc0:	490a      	ldr	r1, [pc, #40]	; (8028fec <LoRaMacClassBInit+0x54>)
    Ctx.LoRaMacClassBNvmEvent = classBNvmCtxChanged;
 8028fc2:	34b8      	adds	r4, #184	; 0xb8
 8028fc4:	6022      	str	r2, [r4, #0]
    TimerInit( &Ctx.BeaconTimer, LoRaMacClassBBeaconTimerEvent );
 8028fc6:	f006 f864 	bl	802f092 <TimerInit>
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
 8028fca:	4909      	ldr	r1, [pc, #36]	; (8028ff0 <LoRaMacClassBInit+0x58>)
 8028fcc:	4809      	ldr	r0, [pc, #36]	; (8028ff4 <LoRaMacClassBInit+0x5c>)
 8028fce:	f006 f860 	bl	802f092 <TimerInit>
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );
 8028fd2:	4909      	ldr	r1, [pc, #36]	; (8028ff8 <LoRaMacClassBInit+0x60>)
 8028fd4:	4809      	ldr	r0, [pc, #36]	; (8028ffc <LoRaMacClassBInit+0x64>)
 8028fd6:	f006 f85c 	bl	802f092 <TimerInit>
    InitClassB( );
 8028fda:	f7ff ff77 	bl	8028ecc <InitClassB>
}
 8028fde:	bd70      	pop	{r4, r5, r6, pc}
 8028fe0:	20008ef4 	.word	0x20008ef4
 8028fe4:	20008fb8 	.word	0x20008fb8
 8028fe8:	20008f3c 	.word	0x20008f3c
 8028fec:	08028c59 	.word	0x08028c59
 8028ff0:	08028be9 	.word	0x08028be9
 8028ff4:	20008f54 	.word	0x20008f54
 8028ff8:	08028c0d 	.word	0x08028c0d
 8028ffc:	20008f6c 	.word	0x20008f6c

08029000 <LoRaMacClassBRestoreNvmCtx>:
{
 8029000:	0001      	movs	r1, r0
        return false;
 8029002:	2000      	movs	r0, #0
{
 8029004:	b510      	push	{r4, lr}
    if( classBNvmCtx != NULL )
 8029006:	4281      	cmp	r1, r0
 8029008:	d004      	beq.n	8029014 <LoRaMacClassBRestoreNvmCtx+0x14>
        memcpy1( ( uint8_t* ) &NvmCtx, ( uint8_t* ) classBNvmCtx, sizeof( NvmCtx ) );
 802900a:	4803      	ldr	r0, [pc, #12]	; (8029018 <LoRaMacClassBRestoreNvmCtx+0x18>)
 802900c:	2218      	movs	r2, #24
 802900e:	f006 f890 	bl	802f132 <memcpy1>
        return true;
 8029012:	2001      	movs	r0, #1
}
 8029014:	bd10      	pop	{r4, pc}
 8029016:	46c0      	nop			; (mov r8, r8)
 8029018:	20008fb8 	.word	0x20008fb8

0802901c <LoRaMacClassBGetNvmCtx>:
    *classBNvmCtxSize = sizeof( NvmCtx );
 802901c:	2318      	movs	r3, #24
 802901e:	6003      	str	r3, [r0, #0]
}
 8029020:	4800      	ldr	r0, [pc, #0]	; (8029024 <LoRaMacClassBGetNvmCtx+0x8>)
 8029022:	4770      	bx	lr
 8029024:	20008fb8 	.word	0x20008fb8

08029028 <LoRaMacClassBSetPingSlotState>:
    Ctx.PingSlotState = pingSlotState;
 8029028:	4b01      	ldr	r3, [pc, #4]	; (8029030 <LoRaMacClassBSetPingSlotState+0x8>)
 802902a:	3345      	adds	r3, #69	; 0x45
 802902c:	7018      	strb	r0, [r3, #0]
}
 802902e:	4770      	bx	lr
 8029030:	20008ef4 	.word	0x20008ef4

08029034 <LoRaMacClassBSetMulticastSlotState>:
    Ctx.MulticastSlotState = multicastSlotState;
 8029034:	4b01      	ldr	r3, [pc, #4]	; (802903c <LoRaMacClassBSetMulticastSlotState+0x8>)
 8029036:	3346      	adds	r3, #70	; 0x46
 8029038:	7018      	strb	r0, [r3, #0]
}
 802903a:	4770      	bx	lr
 802903c:	20008ef4 	.word	0x20008ef4

08029040 <LoRaMacClassBRxBeacon>:
    uint16_t crc0 = 0;
    uint16_t crc1 = 0;
    uint16_t beaconCrc0 = 0;
    uint16_t beaconCrc1 = 0;

    getPhy.Attribute = PHY_BEACON_FORMAT;
 8029040:	2331      	movs	r3, #49	; 0x31
{
 8029042:	b5f0      	push	{r4, r5, r6, r7, lr}
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8029044:	4c6d      	ldr	r4, [pc, #436]	; (80291fc <LoRaMacClassBRxBeacon+0x1bc>)
{
 8029046:	b091      	sub	sp, #68	; 0x44
    getPhy.Attribute = PHY_BEACON_FORMAT;
 8029048:	ae0a      	add	r6, sp, #40	; 0x28
 802904a:	7033      	strb	r3, [r6, #0]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 802904c:	0023      	movs	r3, r4
 802904e:	33ac      	adds	r3, #172	; 0xac
 8029050:	681b      	ldr	r3, [r3, #0]
{
 8029052:	9106      	str	r1, [sp, #24]
 8029054:	0005      	movs	r5, r0
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8029056:	0031      	movs	r1, r6
 8029058:	7818      	ldrb	r0, [r3, #0]
 802905a:	f006 fea7 	bl	802fdac <RegionGetPhyParam>

    // Verify if we are in the state where we expect a beacon
    if( ( Ctx.BeaconState == BEACON_STATE_RX ) || ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) )
 802905e:	0023      	movs	r3, r4
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8029060:	9009      	str	r0, [sp, #36]	; 0x24
    if( ( Ctx.BeaconState == BEACON_STATE_RX ) || ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) )
 8029062:	3344      	adds	r3, #68	; 0x44
 8029064:	781b      	ldrb	r3, [r3, #0]
 8029066:	2b09      	cmp	r3, #9
 8029068:	d004      	beq.n	8029074 <LoRaMacClassBRxBeacon+0x34>
 802906a:	7b23      	ldrb	r3, [r4, #12]
    bool beaconProcessed = false;
 802906c:	2700      	movs	r7, #0
    if( ( Ctx.BeaconState == BEACON_STATE_RX ) || ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) )
 802906e:	06db      	lsls	r3, r3, #27
 8029070:	d400      	bmi.n	8029074 <LoRaMacClassBRxBeacon+0x34>
 8029072:	e0bf      	b.n	80291f4 <LoRaMacClassBRxBeacon+0x1b4>
    {
        if( size == phyParam.BeaconFormat.BeaconSize )
 8029074:	ab09      	add	r3, sp, #36	; 0x24
 8029076:	781a      	ldrb	r2, [r3, #0]
 8029078:	9906      	ldr	r1, [sp, #24]
 802907a:	428a      	cmp	r2, r1
 802907c:	d000      	beq.n	8029080 <LoRaMacClassBRxBeacon+0x40>
 802907e:	e0aa      	b.n	80291d6 <LoRaMacClassBRxBeacon+0x196>
            // Field: | RFU1 | Time | CRC1 | GwSpecific | RFU2 | CRC2 |
            //
            // Field RFU1 and RFU2 have variable sizes. It depends on the region specific implementation

            // Read CRC1 field from the frame
            beaconCrc0 = ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 4] ) & 0x00FF;
 8029080:	785f      	ldrb	r7, [r3, #1]
            beaconCrc0 |= ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 4 + 1] << 8 ) & 0xFF00;
            crc0 = BeaconCrc( payload, phyParam.BeaconFormat.Rfu1Size + 4 );
 8029082:	0028      	movs	r0, r5
 8029084:	1d39      	adds	r1, r7, #4
 8029086:	f7ff fe81 	bl	8028d8c <BeaconCrc>
 802908a:	0001      	movs	r1, r0
            beaconCrc0 |= ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 4 + 1] << 8 ) & 0xFF00;
 802908c:	19e8      	adds	r0, r5, r7
 802908e:	7942      	ldrb	r2, [r0, #5]
 8029090:	7903      	ldrb	r3, [r0, #4]
 8029092:	0212      	lsls	r2, r2, #8

            // Validate the first crc of the beacon frame
            if( crc0 == beaconCrc0 )
 8029094:	4313      	orrs	r3, r2
    bool beaconProcessed = false;
 8029096:	2200      	movs	r2, #0
 8029098:	9205      	str	r2, [sp, #20]
            if( crc0 == beaconCrc0 )
 802909a:	428b      	cmp	r3, r1
 802909c:	d119      	bne.n	80290d2 <LoRaMacClassBRxBeacon+0x92>
            {
                // Read Time field from the frame
                Ctx.BeaconCtx.BeaconTime.Seconds  = ( ( uint32_t )payload[phyParam.BeaconFormat.Rfu1Size] ) & 0x000000FF;
 802909e:	5de9      	ldrb	r1, [r5, r7]
 80290a0:	6161      	str	r1, [r4, #20]
                Ctx.BeaconCtx.BeaconTime.Seconds |= ( ( uint32_t )( payload[phyParam.BeaconFormat.Rfu1Size + 1] << 8 ) ) & 0x0000FF00;
 80290a2:	7842      	ldrb	r2, [r0, #1]
 80290a4:	0212      	lsls	r2, r2, #8
 80290a6:	4311      	orrs	r1, r2
 80290a8:	6161      	str	r1, [r4, #20]
                Ctx.BeaconCtx.BeaconTime.Seconds |= ( ( uint32_t )( payload[phyParam.BeaconFormat.Rfu1Size + 2] << 16 ) ) & 0x00FF0000;
 80290aa:	7883      	ldrb	r3, [r0, #2]
 80290ac:	041b      	lsls	r3, r3, #16
 80290ae:	430b      	orrs	r3, r1
 80290b0:	6163      	str	r3, [r4, #20]
                Ctx.BeaconCtx.BeaconTime.Seconds |= ( ( uint32_t )( payload[phyParam.BeaconFormat.Rfu1Size + 3] << 24 ) ) & 0xFF000000;
 80290b2:	78c2      	ldrb	r2, [r0, #3]
 80290b4:	0612      	lsls	r2, r2, #24
 80290b6:	4313      	orrs	r3, r2
 80290b8:	6163      	str	r3, [r4, #20]
                Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
 80290ba:	2300      	movs	r3, #0
 80290bc:	8323      	strh	r3, [r4, #24]
                Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Time = Ctx.BeaconCtx.BeaconTime;
 80290be:	0023      	movs	r3, r4
 80290c0:	0022      	movs	r2, r4
 80290c2:	3398      	adds	r3, #152	; 0x98
 80290c4:	681b      	ldr	r3, [r3, #0]
 80290c6:	3214      	adds	r2, #20
 80290c8:	3304      	adds	r3, #4
 80290ca:	ca03      	ldmia	r2!, {r0, r1}
 80290cc:	c303      	stmia	r3!, {r0, r1}
                beaconProcessed = true;
 80290ce:	2301      	movs	r3, #1
 80290d0:	9305      	str	r3, [sp, #20]
            }

            // Read CRC2 field from the frame
            beaconCrc1 = ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2 + 7 + phyParam.BeaconFormat.Rfu2Size] ) & 0x00FF;
 80290d2:	ab09      	add	r3, sp, #36	; 0x24
 80290d4:	7899      	ldrb	r1, [r3, #2]
 80290d6:	187b      	adds	r3, r7, r1
 80290d8:	9307      	str	r3, [sp, #28]
            beaconCrc1 |= ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2 + 7 + phyParam.BeaconFormat.Rfu2Size + 1] << 8 ) & 0xFF00;
            crc1 = BeaconCrc( &payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2], 7 + phyParam.BeaconFormat.Rfu2Size );
 80290da:	1dbb      	adds	r3, r7, #6
 80290dc:	18eb      	adds	r3, r5, r3
 80290de:	0018      	movs	r0, r3
 80290e0:	3107      	adds	r1, #7
 80290e2:	9304      	str	r3, [sp, #16]
 80290e4:	f7ff fe52 	bl	8028d8c <BeaconCrc>
            beaconCrc1 |= ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2 + 7 + phyParam.BeaconFormat.Rfu2Size + 1] << 8 ) & 0xFF00;
 80290e8:	9b07      	ldr	r3, [sp, #28]
 80290ea:	18eb      	adds	r3, r5, r3
 80290ec:	7b9a      	ldrb	r2, [r3, #14]
 80290ee:	7b5b      	ldrb	r3, [r3, #13]
 80290f0:	0212      	lsls	r2, r2, #8

            // Validate the second crc of the beacon frame
            if( crc1 == beaconCrc1 )
 80290f2:	4313      	orrs	r3, r2
 80290f4:	4283      	cmp	r3, r0
 80290f6:	d10b      	bne.n	8029110 <LoRaMacClassBRxBeacon+0xd0>
            {
                // Read GwSpecific field from the frame
                // The GwSpecific field contains 1 byte InfoDesc and 6 bytes Info
                Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.InfoDesc = payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2];
 80290f8:	4b40      	ldr	r3, [pc, #256]	; (80291fc <LoRaMacClassBRxBeacon+0x1bc>)
                memcpy1( Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.Info, &payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2 + 1], 6 );
 80290fa:	1df9      	adds	r1, r7, #7
                Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.InfoDesc = payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2];
 80290fc:	3398      	adds	r3, #152	; 0x98
 80290fe:	6818      	ldr	r0, [r3, #0]
 8029100:	9b04      	ldr	r3, [sp, #16]
                memcpy1( Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.Info, &payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2 + 1], 6 );
 8029102:	2206      	movs	r2, #6
                Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.InfoDesc = payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2];
 8029104:	781b      	ldrb	r3, [r3, #0]
                memcpy1( Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.Info, &payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2 + 1], 6 );
 8029106:	1869      	adds	r1, r5, r1
                Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.InfoDesc = payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2];
 8029108:	7543      	strb	r3, [r0, #21]
                memcpy1( Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.Info, &payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2 + 1], 6 );
 802910a:	3016      	adds	r0, #22
 802910c:	f006 f811 	bl	802f132 <memcpy1>
            }

            // Reset beacon variables, if one of the crc is valid
            if( beaconProcessed == true )
 8029110:	9b05      	ldr	r3, [sp, #20]
 8029112:	2b00      	cmp	r3, #0
 8029114:	d05f      	beq.n	80291d6 <LoRaMacClassBRxBeacon+0x196>
            {
                uint32_t spreadingFactor = 0;
                uint32_t bandwidth = 0;

                getPhy.Attribute = PHY_BEACON_CHANNEL_DR;
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8029116:	0027      	movs	r7, r4
                getPhy.Attribute = PHY_BEACON_CHANNEL_DR;
 8029118:	2332      	movs	r3, #50	; 0x32
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 802911a:	37ac      	adds	r7, #172	; 0xac
                getPhy.Attribute = PHY_BEACON_CHANNEL_DR;
 802911c:	7033      	strb	r3, [r6, #0]
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 802911e:	683b      	ldr	r3, [r7, #0]
 8029120:	0031      	movs	r1, r6
 8029122:	7818      	ldrb	r0, [r3, #0]
 8029124:	f006 fe42 	bl	802fdac <RegionGetPhyParam>

                getPhy.Attribute = PHY_SF_FROM_DR;
 8029128:	2338      	movs	r3, #56	; 0x38
 802912a:	7033      	strb	r3, [r6, #0]
                getPhy.Datarate = phyParam.Value;
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 802912c:	683b      	ldr	r3, [r7, #0]
                getPhy.Datarate = phyParam.Value;
 802912e:	7070      	strb	r0, [r6, #1]
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8029130:	0031      	movs	r1, r6
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8029132:	9009      	str	r0, [sp, #36]	; 0x24
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8029134:	7818      	ldrb	r0, [r3, #0]
 8029136:	f006 fe39 	bl	802fdac <RegionGetPhyParam>
                spreadingFactor = phyParam.Value;

                getPhy.Attribute = PHY_BW_FROM_DR;
 802913a:	2339      	movs	r3, #57	; 0x39
 802913c:	7033      	strb	r3, [r6, #0]
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 802913e:	683b      	ldr	r3, [r7, #0]
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8029140:	0005      	movs	r5, r0
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8029142:	0031      	movs	r1, r6
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8029144:	9009      	str	r0, [sp, #36]	; 0x24
                bandwidth = phyParam.Value;

                TimerTime_t time = Radio.TimeOnAir( MODEM_LORA, bandwidth, spreadingFactor, 1, 10, true, size, false );
 8029146:	2600      	movs	r6, #0
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8029148:	7818      	ldrb	r0, [r3, #0]
 802914a:	f006 fe2f 	bl	802fdac <RegionGetPhyParam>
                TimerTime_t time = Radio.TimeOnAir( MODEM_LORA, bandwidth, spreadingFactor, 1, 10, true, size, false );
 802914e:	466b      	mov	r3, sp
 8029150:	9603      	str	r6, [sp, #12]
 8029152:	7e1b      	ldrb	r3, [r3, #24]
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8029154:	0001      	movs	r1, r0
 8029156:	9009      	str	r0, [sp, #36]	; 0x24
                TimerTime_t time = Radio.TimeOnAir( MODEM_LORA, bandwidth, spreadingFactor, 1, 10, true, size, false );
 8029158:	9302      	str	r3, [sp, #8]
 802915a:	2001      	movs	r0, #1
 802915c:	230a      	movs	r3, #10
 802915e:	4f28      	ldr	r7, [pc, #160]	; (8029200 <LoRaMacClassBRxBeacon+0x1c0>)
 8029160:	002a      	movs	r2, r5
 8029162:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8029164:	9300      	str	r3, [sp, #0]
 8029166:	9001      	str	r0, [sp, #4]
 8029168:	0003      	movs	r3, r0
 802916a:	9504      	str	r5, [sp, #16]
 802916c:	47a8      	blx	r5
                SysTime_t timeOnAir;
                timeOnAir.Seconds = time / 1000;
 802916e:	21fa      	movs	r1, #250	; 0xfa
 8029170:	0089      	lsls	r1, r1, #2
                TimerTime_t time = Radio.TimeOnAir( MODEM_LORA, bandwidth, spreadingFactor, 1, 10, true, size, false );
 8029172:	0005      	movs	r5, r0
                timeOnAir.Seconds = time / 1000;
 8029174:	f7f6 ffcc 	bl	8020110 <__udivsi3>
 8029178:	0003      	movs	r3, r0
                timeOnAir.SubSeconds = time - timeOnAir.Seconds * 1000;
 802917a:	20fa      	movs	r0, #250	; 0xfa

                Ctx.BeaconCtx.LastBeaconRx = Ctx.BeaconCtx.BeaconTime;
 802917c:	0022      	movs	r2, r4
 802917e:	0021      	movs	r1, r4
                timeOnAir.SubSeconds = time - timeOnAir.Seconds * 1000;
 8029180:	0080      	lsls	r0, r0, #2
 8029182:	4358      	muls	r0, r3
 8029184:	af0c      	add	r7, sp, #48	; 0x30
 8029186:	1a2d      	subs	r5, r5, r0
 8029188:	80bd      	strh	r5, [r7, #4]
                Ctx.BeaconCtx.LastBeaconRx = Ctx.BeaconCtx.BeaconTime;
 802918a:	321c      	adds	r2, #28
 802918c:	3114      	adds	r1, #20
 802918e:	c921      	ldmia	r1!, {r0, r5}
 8029190:	c221      	stmia	r2!, {r0, r5}
                Ctx.BeaconCtx.LastBeaconRx.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8029192:	491c      	ldr	r1, [pc, #112]	; (8029204 <LoRaMacClassBRxBeacon+0x1c4>)
 8029194:	69e2      	ldr	r2, [r4, #28]

                // Update system time.
                SysTimeSet( SysTimeAdd( Ctx.BeaconCtx.LastBeaconRx, timeOnAir ) );
 8029196:	a80e      	add	r0, sp, #56	; 0x38
                Ctx.BeaconCtx.LastBeaconRx.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8029198:	1851      	adds	r1, r2, r1
                SysTimeSet( SysTimeAdd( Ctx.BeaconCtx.LastBeaconRx, timeOnAir ) );
 802919a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
                Ctx.BeaconCtx.LastBeaconRx.Seconds += UNIX_GPS_EPOCH_OFFSET;
 802919c:	61e1      	str	r1, [r4, #28]
                SysTimeSet( SysTimeAdd( Ctx.BeaconCtx.LastBeaconRx, timeOnAir ) );
 802919e:	9200      	str	r2, [sp, #0]
 80291a0:	6a22      	ldr	r2, [r4, #32]
 80291a2:	f7fa fdaf 	bl	8023d04 <SysTimeAdd>
 80291a6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80291a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80291aa:	f005 ff15 	bl	802efd8 <SysTimeSet>

                Ctx.BeaconCtx.Ctrl.BeaconAcquired = 1;
                Ctx.BeaconCtx.Ctrl.BeaconMode = 1;
 80291ae:	2303      	movs	r3, #3
 80291b0:	7b22      	ldrb	r2, [r4, #12]
                ResetWindowTimeout( );
                Ctx.BeaconState = BEACON_STATE_LOCKED;
                Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
                LoRaMacClassBBeaconTimerEvent( NULL );
 80291b2:	0030      	movs	r0, r6
                Ctx.BeaconCtx.Ctrl.BeaconMode = 1;
 80291b4:	439a      	bics	r2, r3
 80291b6:	4313      	orrs	r3, r2
 80291b8:	7323      	strb	r3, [r4, #12]
    Ctx.BeaconCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 80291ba:	2308      	movs	r3, #8
                Ctx.BeaconState = BEACON_STATE_LOCKED;
 80291bc:	0022      	movs	r2, r4
    Ctx.BeaconCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 80291be:	8623      	strh	r3, [r4, #48]	; 0x30
    Ctx.PingSlotCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 80291c0:	80e3      	strh	r3, [r4, #6]
    Ctx.BeaconCtx.BeaconWindowMovement  = CLASSB_WINDOW_MOVE_DEFAULT;
 80291c2:	3b06      	subs	r3, #6
 80291c4:	6363      	str	r3, [r4, #52]	; 0x34
                Ctx.BeaconState = BEACON_STATE_LOCKED;
 80291c6:	3244      	adds	r2, #68	; 0x44
 80291c8:	3303      	adds	r3, #3
                Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
 80291ca:	34bc      	adds	r4, #188	; 0xbc
                Ctx.BeaconState = BEACON_STATE_LOCKED;
 80291cc:	7013      	strb	r3, [r2, #0]
                Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
 80291ce:	6822      	ldr	r2, [r4, #0]
 80291d0:	7513      	strb	r3, [r2, #20]
                LoRaMacClassBBeaconTimerEvent( NULL );
 80291d2:	f7ff fd41 	bl	8028c58 <LoRaMacClassBBeaconTimerEvent>
            }
        }

        if( Ctx.BeaconState == BEACON_STATE_RX )
 80291d6:	4b09      	ldr	r3, [pc, #36]	; (80291fc <LoRaMacClassBRxBeacon+0x1bc>)
        // If it receives a frame which is
        // 1. not a beacon or
        // 2. a beacon with a crc fail
        // the MAC shall ignore the frame completely. Thus, the function must always return true, even if no
        // valid beacon has been received.
        beaconProcessed = true;
 80291d8:	2701      	movs	r7, #1
        if( Ctx.BeaconState == BEACON_STATE_RX )
 80291da:	0019      	movs	r1, r3
 80291dc:	3144      	adds	r1, #68	; 0x44
 80291de:	780a      	ldrb	r2, [r1, #0]
 80291e0:	2a09      	cmp	r2, #9
 80291e2:	d107      	bne.n	80291f4 <LoRaMacClassBRxBeacon+0x1b4>
            Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
 80291e4:	33bc      	adds	r3, #188	; 0xbc
 80291e6:	681b      	ldr	r3, [r3, #0]
            Ctx.BeaconState = BEACON_STATE_TIMEOUT;
 80291e8:	3a07      	subs	r2, #7
 80291ea:	700a      	strb	r2, [r1, #0]
            LoRaMacClassBBeaconTimerEvent( NULL );
 80291ec:	2000      	movs	r0, #0
            Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
 80291ee:	751a      	strb	r2, [r3, #20]
            LoRaMacClassBBeaconTimerEvent( NULL );
 80291f0:	f7ff fd32 	bl	8028c58 <LoRaMacClassBBeaconTimerEvent>
    }
    return beaconProcessed;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 80291f4:	0038      	movs	r0, r7
 80291f6:	b011      	add	sp, #68	; 0x44
 80291f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80291fa:	46c0      	nop			; (mov r8, r8)
 80291fc:	20008ef4 	.word	0x20008ef4
 8029200:	08031484 	.word	0x08031484
 8029204:	12d53d80 	.word	0x12d53d80

08029208 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) ||
 8029208:	4b05      	ldr	r3, [pc, #20]	; (8029220 <LoRaMacClassBIsBeaconExpected+0x18>)
        ( Ctx.BeaconState == BEACON_STATE_RX ) )
    {
        return true;
 802920a:	2001      	movs	r0, #1
    if( ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) ||
 802920c:	7b1a      	ldrb	r2, [r3, #12]
 802920e:	06d2      	lsls	r2, r2, #27
 8029210:	d405      	bmi.n	802921e <LoRaMacClassBIsBeaconExpected+0x16>
        ( Ctx.BeaconState == BEACON_STATE_RX ) )
 8029212:	3344      	adds	r3, #68	; 0x44
    if( ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) ||
 8029214:	7818      	ldrb	r0, [r3, #0]
 8029216:	3809      	subs	r0, #9
 8029218:	4243      	negs	r3, r0
 802921a:	4158      	adcs	r0, r3
 802921c:	b2c0      	uxtb	r0, r0
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 802921e:	4770      	bx	lr
 8029220:	20008ef4 	.word	0x20008ef4

08029224 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.PingSlotState == PINGSLOT_STATE_RX )
 8029224:	4b03      	ldr	r3, [pc, #12]	; (8029234 <LoRaMacClassBIsPingExpected+0x10>)
 8029226:	3345      	adds	r3, #69	; 0x45
 8029228:	7818      	ldrb	r0, [r3, #0]
 802922a:	3803      	subs	r0, #3
 802922c:	4243      	negs	r3, r0
 802922e:	4158      	adcs	r0, r3
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 8029230:	b2c0      	uxtb	r0, r0
 8029232:	4770      	bx	lr
 8029234:	20008ef4 	.word	0x20008ef4

08029238 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.MulticastSlotState == PINGSLOT_STATE_RX )
 8029238:	4b03      	ldr	r3, [pc, #12]	; (8029248 <LoRaMacClassBIsMulticastExpected+0x10>)
 802923a:	3346      	adds	r3, #70	; 0x46
 802923c:	7818      	ldrb	r0, [r3, #0]
 802923e:	3803      	subs	r0, #3
 8029240:	4243      	negs	r3, r0
 8029242:	4158      	adcs	r0, r3
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 8029244:	b2c0      	uxtb	r0, r0
 8029246:	4770      	bx	lr
 8029248:	20008ef4 	.word	0x20008ef4

0802924c <LoRaMacClassBIsAcquisitionPending>:

bool LoRaMacClassBIsAcquisitionPending( void )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 )
 802924c:	4b02      	ldr	r3, [pc, #8]	; (8029258 <LoRaMacClassBIsAcquisitionPending+0xc>)
 802924e:	7b18      	ldrb	r0, [r3, #12]
 8029250:	06c0      	lsls	r0, r0, #27
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 8029252:	0fc0      	lsrs	r0, r0, #31
 8029254:	4770      	bx	lr
 8029256:	46c0      	nop			; (mov r8, r8)
 8029258:	20008ef4 	.word	0x20008ef4

0802925c <LoRaMacClassBSetBeaconState>:
{
 802925c:	b510      	push	{r4, lr}
 802925e:	4c10      	ldr	r4, [pc, #64]	; (80292a0 <LoRaMacClassBSetBeaconState+0x44>)
    if( beaconState == BEACON_STATE_ACQUISITION )
 8029260:	2800      	cmp	r0, #0
 8029262:	d115      	bne.n	8029290 <LoRaMacClassBSetBeaconState+0x34>
        if( ( Ctx.BeaconCtx.Ctrl.BeaconDelaySet == 1 ) &&
 8029264:	7b23      	ldrb	r3, [r4, #12]
 8029266:	075b      	lsls	r3, r3, #29
 8029268:	d50e      	bpl.n	8029288 <LoRaMacClassBSetBeaconState+0x2c>
            ( LoRaMacClassBIsAcquisitionPending( ) == false ) )
 802926a:	f7ff ffef 	bl	802924c <LoRaMacClassBIsAcquisitionPending>
        if( ( Ctx.BeaconCtx.Ctrl.BeaconDelaySet == 1 ) &&
 802926e:	2800      	cmp	r0, #0
 8029270:	d10a      	bne.n	8029288 <LoRaMacClassBSetBeaconState+0x2c>
            Ctx.BeaconState = BEACON_STATE_ACQUISITION_BY_TIME;
 8029272:	0023      	movs	r3, r4
 8029274:	2201      	movs	r2, #1
 8029276:	3344      	adds	r3, #68	; 0x44
           Ctx.BeaconState = beaconState;
 8029278:	701a      	strb	r2, [r3, #0]
    Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
 802927a:	0023      	movs	r3, r4
 802927c:	3444      	adds	r4, #68	; 0x44
 802927e:	33bc      	adds	r3, #188	; 0xbc
 8029280:	681b      	ldr	r3, [r3, #0]
 8029282:	7822      	ldrb	r2, [r4, #0]
 8029284:	751a      	strb	r2, [r3, #20]
}
 8029286:	bd10      	pop	{r4, pc}
           Ctx.BeaconState = beaconState;
 8029288:	0023      	movs	r3, r4
 802928a:	2200      	movs	r2, #0
 802928c:	3344      	adds	r3, #68	; 0x44
 802928e:	e7f3      	b.n	8029278 <LoRaMacClassBSetBeaconState+0x1c>
        if( ( Ctx.BeaconState != BEACON_STATE_ACQUISITION ) &&
 8029290:	0023      	movs	r3, r4
 8029292:	3344      	adds	r3, #68	; 0x44
 8029294:	781a      	ldrb	r2, [r3, #0]
 8029296:	2a01      	cmp	r2, #1
 8029298:	d9ef      	bls.n	802927a <LoRaMacClassBSetBeaconState+0x1e>
            Ctx.BeaconState = beaconState;
 802929a:	7018      	strb	r0, [r3, #0]
 802929c:	e7ed      	b.n	802927a <LoRaMacClassBSetBeaconState+0x1e>
 802929e:	46c0      	nop			; (mov r8, r8)
 80292a0:	20008ef4 	.word	0x20008ef4

080292a4 <LoRaMacClassBIsAcquisitionInProgress>:
{
 80292a4:	b510      	push	{r4, lr}
    if( Ctx.BeaconState == BEACON_STATE_ACQUISITION_BY_TIME )
 80292a6:	4b04      	ldr	r3, [pc, #16]	; (80292b8 <LoRaMacClassBIsAcquisitionInProgress+0x14>)
 80292a8:	3344      	adds	r3, #68	; 0x44
 80292aa:	781b      	ldrb	r3, [r3, #0]
        return true;
 80292ac:	0018      	movs	r0, r3
    if( Ctx.BeaconState == BEACON_STATE_ACQUISITION_BY_TIME )
 80292ae:	2b01      	cmp	r3, #1
 80292b0:	d001      	beq.n	80292b6 <LoRaMacClassBIsAcquisitionInProgress+0x12>
    if( LoRaMacClassBIsAcquisitionPending( ) == true )
 80292b2:	f7ff ffcb 	bl	802924c <LoRaMacClassBIsAcquisitionPending>
}
 80292b6:	bd10      	pop	{r4, pc}
 80292b8:	20008ef4 	.word	0x20008ef4

080292bc <LoRaMacClassBIsBeaconModeActive>:

bool LoRaMacClassBIsBeaconModeActive( void )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( ( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 ) ||
 80292bc:	2201      	movs	r2, #1
 80292be:	4b06      	ldr	r3, [pc, #24]	; (80292d8 <LoRaMacClassBIsBeaconModeActive+0x1c>)
        ( Ctx.BeaconState == BEACON_STATE_ACQUISITION_BY_TIME ) )
    {
        return true;
 80292c0:	0010      	movs	r0, r2
    if( ( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 ) ||
 80292c2:	7b19      	ldrb	r1, [r3, #12]
 80292c4:	4211      	tst	r1, r2
 80292c6:	d105      	bne.n	80292d4 <LoRaMacClassBIsBeaconModeActive+0x18>
        ( Ctx.BeaconState == BEACON_STATE_ACQUISITION_BY_TIME ) )
 80292c8:	3344      	adds	r3, #68	; 0x44
    if( ( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 ) ||
 80292ca:	7818      	ldrb	r0, [r3, #0]
 80292cc:	3801      	subs	r0, #1
 80292ce:	4243      	negs	r3, r0
 80292d0:	4158      	adcs	r0, r3
 80292d2:	b2c0      	uxtb	r0, r0
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 80292d4:	4770      	bx	lr
 80292d6:	46c0      	nop			; (mov r8, r8)
 80292d8:	20008ef4 	.word	0x20008ef4

080292dc <LoRaMacClassBSetPingSlotInfo>:
    return 128 / ( 1 << periodicity );
 80292dc:	2180      	movs	r1, #128	; 0x80
 80292de:	4101      	asrs	r1, r0
    return CLASSB_BEACON_WINDOW_SLOTS / pingNb;
 80292e0:	2080      	movs	r0, #128	; 0x80

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
 80292e2:	4b06      	ldr	r3, [pc, #24]	; (80292fc <LoRaMacClassBSetPingSlotInfo+0x20>)
{
 80292e4:	b510      	push	{r4, lr}
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
 80292e6:	33bc      	adds	r3, #188	; 0xbc
 80292e8:	681c      	ldr	r4, [r3, #0]
    return CLASSB_BEACON_WINDOW_SLOTS / pingNb;
 80292ea:	0140      	lsls	r0, r0, #5
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
 80292ec:	7061      	strb	r1, [r4, #1]
    return CLASSB_BEACON_WINDOW_SLOTS / pingNb;
 80292ee:	b2c9      	uxtb	r1, r1
 80292f0:	f7f6 ff98 	bl	8020224 <__divsi3>
    Ctx.NvmCtx->PingSlotCtx.PingPeriod = CalcPingPeriod( Ctx.NvmCtx->PingSlotCtx.PingNb );
 80292f4:	8060      	strh	r0, [r4, #2]
    NvmContextChange( );
 80292f6:	f7ff fc6d 	bl	8028bd4 <NvmContextChange>
#endif // LORAMAC_CLASSB_ENABLED
}
 80292fa:	bd10      	pop	{r4, pc}
 80292fc:	20008ef4 	.word	0x20008ef4

08029300 <LoRaMacClassBResumeBeaconing>:
}

void LoRaMacClassBResumeBeaconing( void )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.BeaconState == BEACON_STATE_HALT )
 8029300:	4b0d      	ldr	r3, [pc, #52]	; (8029338 <LoRaMacClassBResumeBeaconing+0x38>)
{
 8029302:	b510      	push	{r4, lr}
    if( Ctx.BeaconState == BEACON_STATE_HALT )
 8029304:	0019      	movs	r1, r3
 8029306:	3144      	adds	r1, #68	; 0x44
 8029308:	780a      	ldrb	r2, [r1, #0]
 802930a:	2a06      	cmp	r2, #6
 802930c:	d112      	bne.n	8029334 <LoRaMacClassBResumeBeaconing+0x34>
    {
        Ctx.BeaconCtx.Ctrl.ResumeBeaconing = 1;
 802930e:	7b18      	ldrb	r0, [r3, #12]
 8029310:	321a      	adds	r2, #26
 8029312:	4302      	orrs	r2, r0

        // Set default state
        Ctx.BeaconState = BEACON_STATE_LOCKED;
 8029314:	2005      	movs	r0, #5
        Ctx.BeaconCtx.Ctrl.ResumeBeaconing = 1;
 8029316:	731a      	strb	r2, [r3, #12]
        Ctx.BeaconState = BEACON_STATE_LOCKED;
 8029318:	7008      	strb	r0, [r1, #0]

        if( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 0 )
 802931a:	0792      	lsls	r2, r2, #30
 802931c:	d401      	bmi.n	8029322 <LoRaMacClassBResumeBeaconing+0x22>
        {
            // Set the default state for beacon less operation
            Ctx.BeaconState = BEACON_STATE_REACQUISITION;
 802931e:	2204      	movs	r2, #4
 8029320:	700a      	strb	r2, [r1, #0]
        }

        Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
 8029322:	001a      	movs	r2, r3
 8029324:	3344      	adds	r3, #68	; 0x44
 8029326:	32bc      	adds	r2, #188	; 0xbc
 8029328:	6812      	ldr	r2, [r2, #0]
 802932a:	781b      	ldrb	r3, [r3, #0]
        LoRaMacClassBBeaconTimerEvent( NULL );
 802932c:	2000      	movs	r0, #0
        Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
 802932e:	7513      	strb	r3, [r2, #20]
        LoRaMacClassBBeaconTimerEvent( NULL );
 8029330:	f7ff fc92 	bl	8028c58 <LoRaMacClassBBeaconTimerEvent>
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8029334:	bd10      	pop	{r4, pc}
 8029336:	46c0      	nop			; (mov r8, r8)
 8029338:	20008ef4 	.word	0x20008ef4

0802933c <LoRaMacClassBMibGetRequestConfirm>:
LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacStatus_t status;

    switch( mibGet->Type )
 802933c:	7803      	ldrb	r3, [r0, #0]
 802933e:	2b35      	cmp	r3, #53	; 0x35
 8029340:	d104      	bne.n	802934c <LoRaMacClassBMibGetRequestConfirm+0x10>
    {
        case MIB_PING_SLOT_DATARATE:
        {
            mibGet->Param.PingSlotDatarate = Ctx.NvmCtx->PingSlotCtx.Datarate;
 8029342:	4b03      	ldr	r3, [pc, #12]	; (8029350 <LoRaMacClassBMibGetRequestConfirm+0x14>)
 8029344:	33bc      	adds	r3, #188	; 0xbc
 8029346:	681b      	ldr	r3, [r3, #0]
 8029348:	7a1b      	ldrb	r3, [r3, #8]
 802934a:	7103      	strb	r3, [r0, #4]
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 802934c:	2002      	movs	r0, #2
 802934e:	4770      	bx	lr
 8029350:	20008ef4 	.word	0x20008ef4

08029354 <LoRaMacMibClassBSetRequestConfirm>:
LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacStatus_t status;

    switch( mibSet->Type )
 8029354:	7803      	ldrb	r3, [r0, #0]
{
 8029356:	b510      	push	{r4, lr}
    switch( mibSet->Type )
 8029358:	2b35      	cmp	r3, #53	; 0x35
 802935a:	d106      	bne.n	802936a <LoRaMacMibClassBSetRequestConfirm+0x16>
    {
        case MIB_PING_SLOT_DATARATE:
        {
            Ctx.NvmCtx->PingSlotCtx.Datarate = mibSet->Param.PingSlotDatarate;
 802935c:	4b04      	ldr	r3, [pc, #16]	; (8029370 <LoRaMacMibClassBSetRequestConfirm+0x1c>)
 802935e:	7902      	ldrb	r2, [r0, #4]
 8029360:	33bc      	adds	r3, #188	; 0xbc
 8029362:	681b      	ldr	r3, [r3, #0]
 8029364:	721a      	strb	r2, [r3, #8]
            NvmContextChange( );
 8029366:	f7ff fc35 	bl	8028bd4 <NvmContextChange>
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 802936a:	2002      	movs	r0, #2
 802936c:	bd10      	pop	{r4, pc}
 802936e:	46c0      	nop			; (mov r8, r8)
 8029370:	20008ef4 	.word	0x20008ef4

08029374 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8029374:	b510      	push	{r4, lr}
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8029376:	200d      	movs	r0, #13
 8029378:	f000 fe9c 	bl	802a0b4 <LoRaMacConfirmQueueIsCmdActive>
 802937c:	2800      	cmp	r0, #0
 802937e:	d00c      	beq.n	802939a <LoRaMacClassBPingSlotInfoAns+0x26>
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8029380:	210d      	movs	r1, #13
 8029382:	2000      	movs	r0, #0
 8029384:	f000 fe54 	bl	802a030 <LoRaMacConfirmQueueSetStatus>
        Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned = 1;
 8029388:	4b04      	ldr	r3, [pc, #16]	; (802939c <LoRaMacClassBPingSlotInfoAns+0x28>)
 802938a:	33bc      	adds	r3, #188	; 0xbc
 802938c:	681a      	ldr	r2, [r3, #0]
 802938e:	2301      	movs	r3, #1
 8029390:	7811      	ldrb	r1, [r2, #0]
 8029392:	430b      	orrs	r3, r1
 8029394:	7013      	strb	r3, [r2, #0]
        NvmContextChange( );
 8029396:	f7ff fc1d 	bl	8028bd4 <NvmContextChange>
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 802939a:	bd10      	pop	{r4, pc}
 802939c:	20008ef4 	.word	0x20008ef4

080293a0 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 80293a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80293a2:	b085      	sub	sp, #20
 80293a4:	000e      	movs	r6, r1
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    uint8_t status = 0x03;
    VerifyParams_t verify;
    bool isCustomFreq = false;
 80293a6:	000d      	movs	r5, r1
    uint8_t status = 0x03;
 80293a8:	2403      	movs	r4, #3
 80293aa:	4f21      	ldr	r7, [pc, #132]	; (8029430 <LoRaMacClassBPingSlotChannelReq+0x90>)
{
 80293ac:	9001      	str	r0, [sp, #4]

    if( frequency != 0 )
 80293ae:	2900      	cmp	r1, #0
 80293b0:	d00c      	beq.n	80293cc <LoRaMacClassBPingSlotChannelReq+0x2c>
    {
        isCustomFreq = true;
        verify.Frequency = frequency;
        if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_FREQUENCY ) == false )
 80293b2:	003b      	movs	r3, r7
 80293b4:	33ac      	adds	r3, #172	; 0xac
 80293b6:	681b      	ldr	r3, [r3, #0]
        verify.Frequency = frequency;
 80293b8:	9103      	str	r1, [sp, #12]
        if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_FREQUENCY ) == false )
 80293ba:	2200      	movs	r2, #0
 80293bc:	7818      	ldrb	r0, [r3, #0]
 80293be:	a903      	add	r1, sp, #12
 80293c0:	f006 fd18 	bl	802fdf4 <RegionVerify>
 80293c4:	1e05      	subs	r5, r0, #0
 80293c6:	d101      	bne.n	80293cc <LoRaMacClassBPingSlotChannelReq+0x2c>
        isCustomFreq = true;
 80293c8:	3501      	adds	r5, #1
        {
            status &= 0xFE; // Channel frequency KO
 80293ca:	3c01      	subs	r4, #1
        }
    }

    verify.DatarateParams.Datarate = datarate;
 80293cc:	466b      	mov	r3, sp
 80293ce:	791b      	ldrb	r3, [r3, #4]
    verify.DatarateParams.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;

    if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_RX_DR ) == false )
 80293d0:	a903      	add	r1, sp, #12
    verify.DatarateParams.Datarate = datarate;
 80293d2:	b25b      	sxtb	r3, r3
 80293d4:	9301      	str	r3, [sp, #4]
 80293d6:	9a01      	ldr	r2, [sp, #4]
 80293d8:	ab02      	add	r3, sp, #8
 80293da:	711a      	strb	r2, [r3, #4]
    verify.DatarateParams.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 80293dc:	003b      	movs	r3, r7
 80293de:	33b0      	adds	r3, #176	; 0xb0
 80293e0:	681b      	ldr	r3, [r3, #0]
 80293e2:	aa02      	add	r2, sp, #8
 80293e4:	3335      	adds	r3, #53	; 0x35
 80293e6:	781b      	ldrb	r3, [r3, #0]
 80293e8:	7153      	strb	r3, [r2, #5]
    if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_RX_DR ) == false )
 80293ea:	003b      	movs	r3, r7
 80293ec:	33ac      	adds	r3, #172	; 0xac
 80293ee:	681b      	ldr	r3, [r3, #0]
 80293f0:	2207      	movs	r2, #7
 80293f2:	7818      	ldrb	r0, [r3, #0]
 80293f4:	f006 fcfe 	bl	802fdf4 <RegionVerify>
 80293f8:	2302      	movs	r3, #2
 80293fa:	2800      	cmp	r0, #0
 80293fc:	d103      	bne.n	8029406 <LoRaMacClassBPingSlotChannelReq+0x66>
    {
        status &= 0xFD; // Datarate range KO
 80293fe:	439c      	bics	r4, r3

    return status;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 8029400:	0020      	movs	r0, r4
 8029402:	b005      	add	sp, #20
 8029404:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( status == 0x03 )
 8029406:	2c03      	cmp	r4, #3
 8029408:	d110      	bne.n	802942c <LoRaMacClassBPingSlotChannelReq+0x8c>
            Ctx.NvmCtx->PingSlotCtx.Ctrl.CustomFreq = 1;
 802940a:	37bc      	adds	r7, #188	; 0xbc
 802940c:	683a      	ldr	r2, [r7, #0]
 802940e:	7811      	ldrb	r1, [r2, #0]
        if( isCustomFreq == true )
 8029410:	2d00      	cmp	r5, #0
 8029412:	d007      	beq.n	8029424 <LoRaMacClassBPingSlotChannelReq+0x84>
            Ctx.NvmCtx->PingSlotCtx.Ctrl.CustomFreq = 1;
 8029414:	430b      	orrs	r3, r1
 8029416:	7013      	strb	r3, [r2, #0]
            Ctx.NvmCtx->PingSlotCtx.Frequency = frequency;
 8029418:	6056      	str	r6, [r2, #4]
        Ctx.NvmCtx->PingSlotCtx.Datarate = datarate;
 802941a:	9b01      	ldr	r3, [sp, #4]
 802941c:	7213      	strb	r3, [r2, #8]
        NvmContextChange( );
 802941e:	f7ff fbd9 	bl	8028bd4 <NvmContextChange>
 8029422:	e7ed      	b.n	8029400 <LoRaMacClassBPingSlotChannelReq+0x60>
            Ctx.NvmCtx->PingSlotCtx.Ctrl.CustomFreq = 0;
 8029424:	4399      	bics	r1, r3
 8029426:	7011      	strb	r1, [r2, #0]
            Ctx.NvmCtx->PingSlotCtx.Frequency = 0;
 8029428:	6055      	str	r5, [r2, #4]
 802942a:	e7f6      	b.n	802941a <LoRaMacClassBPingSlotChannelReq+0x7a>
 802942c:	001c      	movs	r4, r3
 802942e:	e7e7      	b.n	8029400 <LoRaMacClassBPingSlotChannelReq+0x60>
 8029430:	20008ef4 	.word	0x20008ef4

08029434 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.BeaconCtx.BeaconTimingDelay = ( CLASSB_BEACON_DELAY_BEACON_TIMING_ANS * beaconTimingDelay );
 8029434:	231e      	movs	r3, #30
{
 8029436:	b573      	push	{r0, r1, r4, r5, r6, lr}
    Ctx.BeaconCtx.BeaconTimingDelay = ( CLASSB_BEACON_DELAY_BEACON_TIMING_ANS * beaconTimingDelay );
 8029438:	4c18      	ldr	r4, [pc, #96]	; (802949c <LoRaMacClassBBeaconTimingAns+0x68>)
 802943a:	4343      	muls	r3, r0
    Ctx.BeaconCtx.BeaconTimingChannel = beaconTimingChannel;
 802943c:	0025      	movs	r5, r4

    if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 802943e:	200e      	movs	r0, #14
    Ctx.BeaconCtx.BeaconTimingChannel = beaconTimingChannel;
 8029440:	3538      	adds	r5, #56	; 0x38
{
 8029442:	0016      	movs	r6, r2
    Ctx.BeaconCtx.BeaconTimingDelay = ( CLASSB_BEACON_DELAY_BEACON_TIMING_ANS * beaconTimingDelay );
 8029444:	63e3      	str	r3, [r4, #60]	; 0x3c
    Ctx.BeaconCtx.BeaconTimingChannel = beaconTimingChannel;
 8029446:	7029      	strb	r1, [r5, #0]
    if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8029448:	f000 fe34 	bl	802a0b4 <LoRaMacConfirmQueueIsCmdActive>
 802944c:	2800      	cmp	r0, #0
 802944e:	d013      	beq.n	8029478 <LoRaMacClassBBeaconTimingAns+0x44>
    {
        if( Ctx.BeaconCtx.BeaconTimingDelay > CLASSB_BEACON_INTERVAL )
 8029450:	23fa      	movs	r3, #250	; 0xfa
 8029452:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8029454:	025b      	lsls	r3, r3, #9
 8029456:	4299      	cmp	r1, r3
 8029458:	d90f      	bls.n	802947a <LoRaMacClassBBeaconTimingAns+0x46>
        {
            // We missed the beacon already
            Ctx.BeaconCtx.BeaconTimingDelay = 0;
 802945a:	2300      	movs	r3, #0
            Ctx.BeaconCtx.BeaconTimingChannel = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND, MLME_BEACON_TIMING );
 802945c:	210e      	movs	r1, #14
 802945e:	2010      	movs	r0, #16
            Ctx.BeaconCtx.BeaconTimingDelay = 0;
 8029460:	63e3      	str	r3, [r4, #60]	; 0x3c
            Ctx.BeaconCtx.BeaconTimingChannel = 0;
 8029462:	702b      	strb	r3, [r5, #0]
        else
        {
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
            Ctx.BeaconCtx.Ctrl.BeaconChannelSet = 1;
            Ctx.BeaconCtx.NextBeaconRx = SysTimeFromMs( lastRxDone + Ctx.BeaconCtx.BeaconTimingDelay );
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8029464:	f000 fde4 	bl	802a030 <LoRaMacConfirmQueueSetStatus>
        }

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
 8029468:	0023      	movs	r3, r4
 802946a:	33a0      	adds	r3, #160	; 0xa0
 802946c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 802946e:	681b      	ldr	r3, [r3, #0]
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
 8029470:	3438      	adds	r4, #56	; 0x38
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
 8029472:	60da      	str	r2, [r3, #12]
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
 8029474:	7822      	ldrb	r2, [r4, #0]
 8029476:	741a      	strb	r2, [r3, #16]
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8029478:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 802947a:	230c      	movs	r3, #12
            Ctx.BeaconCtx.NextBeaconRx = SysTimeFromMs( lastRxDone + Ctx.BeaconCtx.BeaconTimingDelay );
 802947c:	466d      	mov	r5, sp
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 802947e:	7b22      	ldrb	r2, [r4, #12]
            Ctx.BeaconCtx.NextBeaconRx = SysTimeFromMs( lastRxDone + Ctx.BeaconCtx.BeaconTimingDelay );
 8029480:	0028      	movs	r0, r5
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 8029482:	439a      	bics	r2, r3
 8029484:	4313      	orrs	r3, r2
            Ctx.BeaconCtx.NextBeaconRx = SysTimeFromMs( lastRxDone + Ctx.BeaconCtx.BeaconTimingDelay );
 8029486:	1989      	adds	r1, r1, r6
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 8029488:	7323      	strb	r3, [r4, #12]
            Ctx.BeaconCtx.NextBeaconRx = SysTimeFromMs( lastRxDone + Ctx.BeaconCtx.BeaconTimingDelay );
 802948a:	f7fa fc7b 	bl	8023d84 <SysTimeFromMs>
 802948e:	0023      	movs	r3, r4
 8029490:	3324      	adds	r3, #36	; 0x24
 8029492:	cd06      	ldmia	r5!, {r1, r2}
 8029494:	c306      	stmia	r3!, {r1, r2}
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8029496:	2000      	movs	r0, #0
 8029498:	210e      	movs	r1, #14
 802949a:	e7e3      	b.n	8029464 <LoRaMacClassBBeaconTimingAns+0x30>
 802949c:	20008ef4 	.word	0x20008ef4

080294a0 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 80294a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80294a2:	b08b      	sub	sp, #44	; 0x2c
#if ( LORAMAC_CLASSB_ENABLED == 1 )

    SysTime_t nextBeacon = SysTimeGet( );
 80294a4:	ae06      	add	r6, sp, #24
 80294a6:	0030      	movs	r0, r6
 80294a8:	f7fa fc44 	bl	8023d34 <SysTimeGet>
 80294ac:	9c06      	ldr	r4, [sp, #24]
    uint32_t currentTimeMs = SysTimeToMs( nextBeacon );
 80294ae:	9907      	ldr	r1, [sp, #28]
 80294b0:	0020      	movs	r0, r4
 80294b2:	f005 fdbc 	bl	802f02e <SysTimeToMs>

    nextBeacon.Seconds = nextBeacon.Seconds + ( 128 - ( nextBeacon.Seconds % 128 ) );
 80294b6:	237f      	movs	r3, #127	; 0x7f
 80294b8:	439c      	bics	r4, r3
 80294ba:	0023      	movs	r3, r4
 80294bc:	9403      	str	r4, [sp, #12]
    nextBeacon.SubSeconds = 0;

    Ctx.BeaconCtx.NextBeaconRx = nextBeacon;
 80294be:	4c20      	ldr	r4, [pc, #128]	; (8029540 <LoRaMacClassBDeviceTimeAns+0xa0>)
    nextBeacon.Seconds = nextBeacon.Seconds + ( 128 - ( nextBeacon.Seconds % 128 ) );
 80294c0:	3380      	adds	r3, #128	; 0x80
    Ctx.BeaconCtx.NextBeaconRx = nextBeacon;
 80294c2:	2500      	movs	r5, #0
 80294c4:	9306      	str	r3, [sp, #24]
 80294c6:	0023      	movs	r3, r4
 80294c8:	80b5      	strh	r5, [r6, #4]
 80294ca:	3324      	adds	r3, #36	; 0x24
 80294cc:	ce06      	ldmia	r6!, {r1, r2}
 80294ce:	c306      	stmia	r3!, {r1, r2}
    Ctx.BeaconCtx.LastBeaconRx = SysTimeSub( Ctx.BeaconCtx.NextBeaconRx, ( SysTime_t ){ .Seconds = CLASSB_BEACON_INTERVAL / 1000, .SubSeconds = 0 } );
 80294d0:	0033      	movs	r3, r6
 80294d2:	80b5      	strh	r5, [r6, #4]
 80294d4:	685b      	ldr	r3, [r3, #4]
 80294d6:	ae04      	add	r6, sp, #16
 80294d8:	9300      	str	r3, [sp, #0]
 80294da:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80294dc:	2380      	movs	r3, #128	; 0x80
 80294de:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    uint32_t currentTimeMs = SysTimeToMs( nextBeacon );
 80294e0:	0007      	movs	r7, r0
    Ctx.BeaconCtx.LastBeaconRx = SysTimeSub( Ctx.BeaconCtx.NextBeaconRx, ( SysTime_t ){ .Seconds = CLASSB_BEACON_INTERVAL / 1000, .SubSeconds = 0 } );
 80294e2:	0030      	movs	r0, r6
 80294e4:	f005 fd63 	bl	802efae <SysTimeSub>
 80294e8:	0023      	movs	r3, r4
 80294ea:	331c      	adds	r3, #28

    if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80294ec:	200a      	movs	r0, #10
    Ctx.BeaconCtx.LastBeaconRx = SysTimeSub( Ctx.BeaconCtx.NextBeaconRx, ( SysTime_t ){ .Seconds = CLASSB_BEACON_INTERVAL / 1000, .SubSeconds = 0 } );
 80294ee:	ce06      	ldmia	r6!, {r1, r2}
 80294f0:	c306      	stmia	r3!, {r1, r2}
    if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80294f2:	f000 fddf 	bl	802a0b4 <LoRaMacConfirmQueueIsCmdActive>
 80294f6:	42a8      	cmp	r0, r5
 80294f8:	d00d      	beq.n	8029516 <LoRaMacClassBDeviceTimeAns+0x76>
    {
        if( currentTimeMs > SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) )
 80294fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80294fc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80294fe:	f005 fd96 	bl	802f02e <SysTimeToMs>
 8029502:	42b8      	cmp	r0, r7
 8029504:	d209      	bcs.n	802951a <LoRaMacClassBDeviceTimeAns+0x7a>
            // We missed the beacon already
            Ctx.BeaconCtx.LastBeaconRx.Seconds = 0;
            Ctx.BeaconCtx.LastBeaconRx.SubSeconds = 0;
            Ctx.BeaconCtx.NextBeaconRx.Seconds = 0;
            Ctx.BeaconCtx.NextBeaconRx.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND, MLME_DEVICE_TIME );
 8029506:	210a      	movs	r1, #10
 8029508:	2010      	movs	r0, #16
            Ctx.BeaconCtx.LastBeaconRx.Seconds = 0;
 802950a:	61e5      	str	r5, [r4, #28]
            Ctx.BeaconCtx.LastBeaconRx.SubSeconds = 0;
 802950c:	8425      	strh	r5, [r4, #32]
            Ctx.BeaconCtx.NextBeaconRx.Seconds = 0;
 802950e:	6265      	str	r5, [r4, #36]	; 0x24
            Ctx.BeaconCtx.NextBeaconRx.SubSeconds = 0;
 8029510:	8525      	strh	r5, [r4, #40]	; 0x28
        {
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
            Ctx.BeaconCtx.BeaconTimingDelay = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - currentTimeMs;
            Ctx.BeaconCtx.BeaconTime.Seconds = nextBeacon.Seconds - UNIX_GPS_EPOCH_OFFSET - 128;
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8029512:	f000 fd8d 	bl	802a030 <LoRaMacConfirmQueueSetStatus>
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8029516:	b00b      	add	sp, #44	; 0x2c
 8029518:	bdf0      	pop	{r4, r5, r6, r7, pc}
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 802951a:	2304      	movs	r3, #4
 802951c:	7b22      	ldrb	r2, [r4, #12]
            Ctx.BeaconCtx.BeaconTimingDelay = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - currentTimeMs;
 802951e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 8029520:	4313      	orrs	r3, r2
            Ctx.BeaconCtx.BeaconTimingDelay = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - currentTimeMs;
 8029522:	6a60      	ldr	r0, [r4, #36]	; 0x24
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 8029524:	7323      	strb	r3, [r4, #12]
            Ctx.BeaconCtx.BeaconTimingDelay = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - currentTimeMs;
 8029526:	f005 fd82 	bl	802f02e <SysTimeToMs>
            Ctx.BeaconCtx.BeaconTime.Seconds = nextBeacon.Seconds - UNIX_GPS_EPOCH_OFFSET - 128;
 802952a:	4a06      	ldr	r2, [pc, #24]	; (8029544 <LoRaMacClassBDeviceTimeAns+0xa4>)
 802952c:	9b03      	ldr	r3, [sp, #12]
 802952e:	4694      	mov	ip, r2
            Ctx.BeaconCtx.BeaconTimingDelay = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - currentTimeMs;
 8029530:	1bc7      	subs	r7, r0, r7
            Ctx.BeaconCtx.BeaconTime.Seconds = nextBeacon.Seconds - UNIX_GPS_EPOCH_OFFSET - 128;
 8029532:	4463      	add	r3, ip
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8029534:	210a      	movs	r1, #10
 8029536:	0028      	movs	r0, r5
            Ctx.BeaconCtx.BeaconTimingDelay = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - currentTimeMs;
 8029538:	63e7      	str	r7, [r4, #60]	; 0x3c
            Ctx.BeaconCtx.BeaconTime.Seconds = nextBeacon.Seconds - UNIX_GPS_EPOCH_OFFSET - 128;
 802953a:	6163      	str	r3, [r4, #20]
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
 802953c:	8325      	strh	r5, [r4, #24]
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 802953e:	e7e8      	b.n	8029512 <LoRaMacClassBDeviceTimeAns+0x72>
 8029540:	20008ef4 	.word	0x20008ef4
 8029544:	ed2ac280 	.word	0xed2ac280

08029548 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8029548:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802954a:	1e06      	subs	r6, r0, #0
 802954c:	4d0f      	ldr	r5, [pc, #60]	; (802958c <LoRaMacClassBBeaconFreqReq+0x44>)
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    VerifyParams_t verify;

    if( frequency != 0 )
 802954e:	d015      	beq.n	802957c <LoRaMacClassBBeaconFreqReq+0x34>
    {
        verify.Frequency = frequency;

        if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_FREQUENCY ) == true )
 8029550:	002b      	movs	r3, r5
 8029552:	33ac      	adds	r3, #172	; 0xac
 8029554:	681b      	ldr	r3, [r3, #0]
        verify.Frequency = frequency;
 8029556:	9001      	str	r0, [sp, #4]
        if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_FREQUENCY ) == true )
 8029558:	2200      	movs	r2, #0
 802955a:	7818      	ldrb	r0, [r3, #0]
 802955c:	a901      	add	r1, sp, #4
 802955e:	f006 fc49 	bl	802fdf4 <RegionVerify>
 8029562:	1e04      	subs	r4, r0, #0
 8029564:	d008      	beq.n	8029578 <LoRaMacClassBBeaconFreqReq+0x30>
        {
            Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq = 1;
 8029566:	2201      	movs	r2, #1
 8029568:	35bc      	adds	r5, #188	; 0xbc
 802956a:	682b      	ldr	r3, [r5, #0]
 802956c:	7b19      	ldrb	r1, [r3, #12]
            Ctx.NvmCtx->BeaconCtx.Frequency = frequency;
 802956e:	611e      	str	r6, [r3, #16]
            Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq = 1;
 8029570:	430a      	orrs	r2, r1
 8029572:	731a      	strb	r2, [r3, #12]
        }
    }
    else
    {
        Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq = 0;
        NvmContextChange( );
 8029574:	f7ff fb2e 	bl	8028bd4 <NvmContextChange>
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 8029578:	0020      	movs	r0, r4
 802957a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq = 0;
 802957c:	2401      	movs	r4, #1
 802957e:	35bc      	adds	r5, #188	; 0xbc
 8029580:	682a      	ldr	r2, [r5, #0]
 8029582:	7b13      	ldrb	r3, [r2, #12]
 8029584:	43a3      	bics	r3, r4
 8029586:	7313      	strb	r3, [r2, #12]
 8029588:	e7f4      	b.n	8029574 <LoRaMacClassBBeaconFreqReq+0x2c>
 802958a:	46c0      	nop			; (mov r8, r8)
 802958c:	20008ef4 	.word	0x20008ef4

08029590 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8029590:	b570      	push	{r4, r5, r6, lr}
 8029592:	0005      	movs	r5, r0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8029594:	f005 fd96 	bl	802f0c4 <TimerGetCurrentTime>
    TimerTime_t beaconReserved = 0;
    TimerTime_t nextBeacon = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx );
 8029598:	4e0d      	ldr	r6, [pc, #52]	; (80295d0 <LoRaMacClassBIsUplinkCollision+0x40>)
    TimerTime_t currentTime = TimerGetCurrentTime( );
 802959a:	0004      	movs	r4, r0
    TimerTime_t nextBeacon = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx );
 802959c:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 802959e:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80295a0:	f005 fd45 	bl	802f02e <SysTimeToMs>
 80295a4:	0002      	movs	r2, r0

    beaconReserved = nextBeacon -
                     CLASSB_BEACON_GUARD -
                     Ctx.LoRaMacClassBParams.LoRaMacParams->ReceiveDelay1 -
 80295a6:	36b0      	adds	r6, #176	; 0xb0
 80295a8:	6831      	ldr	r1, [r6, #0]
    beaconReserved = nextBeacon -
 80295aa:	690b      	ldr	r3, [r1, #16]
 80295ac:	6948      	ldr	r0, [r1, #20]
 80295ae:	1818      	adds	r0, r3, r0
 80295b0:	4b08      	ldr	r3, [pc, #32]	; (80295d4 <LoRaMacClassBIsUplinkCollision+0x44>)
 80295b2:	1a1b      	subs	r3, r3, r0
 80295b4:	1b5b      	subs	r3, r3, r5
 80295b6:	189b      	adds	r3, r3, r2
    // Check if the next beacon will be received during the next uplink.
    if( ( currentTime >= beaconReserved ) && ( currentTime < ( nextBeacon + CLASSB_BEACON_RESERVED ) ) )
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
 80295b8:	2000      	movs	r0, #0
    if( ( currentTime >= beaconReserved ) && ( currentTime < ( nextBeacon + CLASSB_BEACON_RESERVED ) ) )
 80295ba:	429c      	cmp	r4, r3
 80295bc:	d307      	bcc.n	80295ce <LoRaMacClassBIsUplinkCollision+0x3e>
 80295be:	4906      	ldr	r1, [pc, #24]	; (80295d8 <LoRaMacClassBIsUplinkCollision+0x48>)
        return CLASSB_BEACON_RESERVED;
 80295c0:	4b06      	ldr	r3, [pc, #24]	; (80295dc <LoRaMacClassBIsUplinkCollision+0x4c>)
    if( ( currentTime >= beaconReserved ) && ( currentTime < ( nextBeacon + CLASSB_BEACON_RESERVED ) ) )
 80295c2:	1852      	adds	r2, r2, r1
        return CLASSB_BEACON_RESERVED;
 80295c4:	4294      	cmp	r4, r2
 80295c6:	4140      	adcs	r0, r0
 80295c8:	4240      	negs	r0, r0
 80295ca:	4018      	ands	r0, r3
 80295cc:	1840      	adds	r0, r0, r1
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 80295ce:	bd70      	pop	{r4, r5, r6, pc}
 80295d0:	20008ef4 	.word	0x20008ef4
 80295d4:	fffff448 	.word	0xfffff448
 80295d8:	00000848 	.word	0x00000848
 80295dc:	fffff7b8 	.word	0xfffff7b8

080295e0 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80295e0:	b510      	push	{r4, lr}
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    TimerStop( &Ctx.PingSlotTimer );
 80295e2:	480a      	ldr	r0, [pc, #40]	; (802960c <LoRaMacClassBStopRxSlots+0x2c>)
 80295e4:	f7fa fc7e 	bl	8023ee4 <TimerStop>
    TimerStop( &Ctx.MulticastSlotTimer );
 80295e8:	4809      	ldr	r0, [pc, #36]	; (8029610 <LoRaMacClassBStopRxSlots+0x30>)
 80295ea:	f7fa fc7b 	bl	8023ee4 <TimerStop>
	__asm__ volatile("mrs %0, PRIMASK;"
 80295ee:	f3ef 8110 	mrs	r1, PRIMASK
 80295f2:	b672      	cpsid	i

    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
 80295f4:	2006      	movs	r0, #6
 80295f6:	4a07      	ldr	r2, [pc, #28]	; (8029614 <LoRaMacClassBStopRxSlots+0x34>)
 80295f8:	7813      	ldrb	r3, [r2, #0]
 80295fa:	4383      	bics	r3, r0
 80295fc:	7013      	strb	r3, [r2, #0]
	if (key != 0U) {
 80295fe:	2900      	cmp	r1, #0
 8029600:	d102      	bne.n	8029608 <LoRaMacClassBStopRxSlots+0x28>
	__asm__ volatile(
 8029602:	b662      	cpsie	i
 8029604:	f3bf 8f6f 	isb	sy
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8029608:	bd10      	pop	{r4, pc}
 802960a:	46c0      	nop			; (mov r8, r8)
 802960c:	20008f54 	.word	0x20008f54
 8029610:	20008f6c 	.word	0x20008f6c
 8029614:	20008fb4 	.word	0x20008fb4

08029618 <LoRaMacClassBHaltBeaconing>:
{
 8029618:	b510      	push	{r4, lr}
    if( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 )
 802961a:	4c14      	ldr	r4, [pc, #80]	; (802966c <LoRaMacClassBHaltBeaconing+0x54>)
 802961c:	7b23      	ldrb	r3, [r4, #12]
 802961e:	07db      	lsls	r3, r3, #31
 8029620:	d522      	bpl.n	8029668 <LoRaMacClassBHaltBeaconing+0x50>
        if( ( Ctx.BeaconState == BEACON_STATE_TIMEOUT ) ||
 8029622:	0023      	movs	r3, r4
 8029624:	2208      	movs	r2, #8
 8029626:	3344      	adds	r3, #68	; 0x44
 8029628:	781b      	ldrb	r3, [r3, #0]
 802962a:	4393      	bics	r3, r2
 802962c:	2b02      	cmp	r3, #2
 802962e:	d102      	bne.n	8029636 <LoRaMacClassBHaltBeaconing+0x1e>
            LoRaMacClassBBeaconTimerEvent( NULL );
 8029630:	2000      	movs	r0, #0
 8029632:	f7ff fb11 	bl	8028c58 <LoRaMacClassBBeaconTimerEvent>
	__asm__ volatile("mrs %0, PRIMASK;"
 8029636:	f3ef 8110 	mrs	r1, PRIMASK
 802963a:	b672      	cpsid	i
        LoRaMacClassBEvents.Events.Beacon = 0;
 802963c:	2001      	movs	r0, #1
 802963e:	4a0c      	ldr	r2, [pc, #48]	; (8029670 <LoRaMacClassBHaltBeaconing+0x58>)
 8029640:	7813      	ldrb	r3, [r2, #0]
 8029642:	4383      	bics	r3, r0
 8029644:	7013      	strb	r3, [r2, #0]
	if (key != 0U) {
 8029646:	2900      	cmp	r1, #0
 8029648:	d102      	bne.n	8029650 <LoRaMacClassBHaltBeaconing+0x38>
	__asm__ volatile(
 802964a:	b662      	cpsie	i
 802964c:	f3bf 8f6f 	isb	sy
        TimerStop( &Ctx.BeaconTimer );
 8029650:	4808      	ldr	r0, [pc, #32]	; (8029674 <LoRaMacClassBHaltBeaconing+0x5c>)
 8029652:	f7fa fc47 	bl	8023ee4 <TimerStop>
        Ctx.BeaconState = BEACON_STATE_HALT;
 8029656:	0022      	movs	r2, r4
 8029658:	2306      	movs	r3, #6
 802965a:	3244      	adds	r2, #68	; 0x44
        Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
 802965c:	34bc      	adds	r4, #188	; 0xbc
        Ctx.BeaconState = BEACON_STATE_HALT;
 802965e:	7013      	strb	r3, [r2, #0]
        Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
 8029660:	6822      	ldr	r2, [r4, #0]
 8029662:	7513      	strb	r3, [r2, #20]
        LoRaMacClassBStopRxSlots( );
 8029664:	f7ff ffbc 	bl	80295e0 <LoRaMacClassBStopRxSlots>
}
 8029668:	bd10      	pop	{r4, pc}
 802966a:	46c0      	nop			; (mov r8, r8)
 802966c:	20008ef4 	.word	0x20008ef4
 8029670:	20008fb4 	.word	0x20008fb4
 8029674:	20008f3c 	.word	0x20008f3c

08029678 <LoRaMacClassBSwitchClass>:
{
 8029678:	b510      	push	{r4, lr}
 802967a:	0004      	movs	r4, r0
    if( nextClass == CLASS_B )
 802967c:	2801      	cmp	r0, #1
 802967e:	d10c      	bne.n	802969a <LoRaMacClassBSwitchClass+0x22>
        if( ( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 ) && ( Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned == 1 ) )
 8029680:	4b0a      	ldr	r3, [pc, #40]	; (80296ac <LoRaMacClassBSwitchClass+0x34>)
 8029682:	7b1a      	ldrb	r2, [r3, #12]
 8029684:	4202      	tst	r2, r0
 8029686:	d00f      	beq.n	80296a8 <LoRaMacClassBSwitchClass+0x30>
 8029688:	33bc      	adds	r3, #188	; 0xbc
 802968a:	681b      	ldr	r3, [r3, #0]
 802968c:	7818      	ldrb	r0, [r3, #0]
 802968e:	4004      	ands	r4, r0
            return LORAMAC_STATUS_OK;
 8029690:	4263      	negs	r3, r4
 8029692:	415c      	adcs	r4, r3
 8029694:	0064      	lsls	r4, r4, #1
}
 8029696:	0020      	movs	r0, r4
 8029698:	bd10      	pop	{r4, pc}
    if( nextClass == CLASS_A )
 802969a:	2800      	cmp	r0, #0
 802969c:	d104      	bne.n	80296a8 <LoRaMacClassBSwitchClass+0x30>
        LoRaMacClassBHaltBeaconing( );
 802969e:	f7ff ffbb 	bl	8029618 <LoRaMacClassBHaltBeaconing>
        InitClassBDefaults( );
 80296a2:	f7ff fc53 	bl	8028f4c <InitClassBDefaults>
        return LORAMAC_STATUS_OK;
 80296a6:	e7f6      	b.n	8029696 <LoRaMacClassBSwitchClass+0x1e>
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80296a8:	2402      	movs	r4, #2
 80296aa:	e7f4      	b.n	8029696 <LoRaMacClassBSwitchClass+0x1e>
 80296ac:	20008ef4 	.word	0x20008ef4

080296b0 <LoRaMacClassBStartRxSlots>:

void LoRaMacClassBStartRxSlots( void )
{
 80296b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned == 1 )
 80296b2:	4c0f      	ldr	r4, [pc, #60]	; (80296f0 <LoRaMacClassBStartRxSlots+0x40>)
 80296b4:	2501      	movs	r5, #1
 80296b6:	0023      	movs	r3, r4
 80296b8:	33bc      	adds	r3, #188	; 0xbc
 80296ba:	681b      	ldr	r3, [r3, #0]
 80296bc:	781b      	ldrb	r3, [r3, #0]
 80296be:	422b      	tst	r3, r5
 80296c0:	d015      	beq.n	80296ee <LoRaMacClassBStartRxSlots+0x3e>
    {
        Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 80296c2:	0023      	movs	r3, r4
 80296c4:	2600      	movs	r6, #0
        TimerSetValue( &Ctx.PingSlotTimer, 1 );
 80296c6:	4f0b      	ldr	r7, [pc, #44]	; (80296f4 <LoRaMacClassBStartRxSlots+0x44>)
        Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 80296c8:	3345      	adds	r3, #69	; 0x45
        TimerSetValue( &Ctx.PingSlotTimer, 1 );
 80296ca:	0029      	movs	r1, r5
 80296cc:	0038      	movs	r0, r7
        Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 80296ce:	701e      	strb	r6, [r3, #0]
        TimerStart( &Ctx.PingSlotTimer );

        Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 80296d0:	3446      	adds	r4, #70	; 0x46
        TimerSetValue( &Ctx.PingSlotTimer, 1 );
 80296d2:	f005 fce6 	bl	802f0a2 <TimerSetValue>
        TimerStart( &Ctx.PingSlotTimer );
 80296d6:	0038      	movs	r0, r7
 80296d8:	f7fa fb8a 	bl	8023df0 <TimerStart>
        Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 80296dc:	7026      	strb	r6, [r4, #0]
        TimerSetValue( &Ctx.MulticastSlotTimer, 1 );
 80296de:	4c06      	ldr	r4, [pc, #24]	; (80296f8 <LoRaMacClassBStartRxSlots+0x48>)
 80296e0:	0029      	movs	r1, r5
 80296e2:	0020      	movs	r0, r4
 80296e4:	f005 fcdd 	bl	802f0a2 <TimerSetValue>
        TimerStart( &Ctx.MulticastSlotTimer );
 80296e8:	0020      	movs	r0, r4
 80296ea:	f7fa fb81 	bl	8023df0 <TimerStart>
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80296ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80296f0:	20008ef4 	.word	0x20008ef4
 80296f4:	20008f54 	.word	0x20008f54
 80296f8:	20008f6c 	.word	0x20008f6c

080296fc <UpdateBeaconState>:
{
 80296fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    beaconEventTime = CalcDelayForNextBeacon( currentTime, SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) );
 80296fe:	4c22      	ldr	r4, [pc, #136]	; (8029788 <UpdateBeaconState+0x8c>)
{
 8029700:	b085      	sub	sp, #20
 8029702:	9001      	str	r0, [sp, #4]
 8029704:	9100      	str	r1, [sp, #0]
    beaconEventTime = CalcDelayForNextBeacon( currentTime, SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) );
 8029706:	69e0      	ldr	r0, [r4, #28]
 8029708:	6a21      	ldr	r1, [r4, #32]
{
 802970a:	0015      	movs	r5, r2
    beaconEventTime = CalcDelayForNextBeacon( currentTime, SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) );
 802970c:	f005 fc8f 	bl	802f02e <SysTimeToMs>
    nextBeaconRxTime = ( ( currentTime - lastBeaconRx ) % CLASSB_BEACON_INTERVAL );
 8029710:	21fa      	movs	r1, #250	; 0xfa
    return ( CLASSB_BEACON_INTERVAL - nextBeaconRxTime );
 8029712:	27fa      	movs	r7, #250	; 0xfa
    nextBeaconRxTime = ( ( currentTime - lastBeaconRx ) % CLASSB_BEACON_INTERVAL );
 8029714:	1a28      	subs	r0, r5, r0
 8029716:	0249      	lsls	r1, r1, #9
 8029718:	f7f6 fd80 	bl	802021c <__aeabi_uidivmod>
    return ( CLASSB_BEACON_INTERVAL - nextBeaconRxTime );
 802971c:	027f      	lsls	r7, r7, #9
 802971e:	1a7f      	subs	r7, r7, r1
    Ctx.BeaconCtx.NextBeaconRx = SysTimeFromMs( currentTime + beaconEventTime );
 8029720:	ae02      	add	r6, sp, #8
 8029722:	0030      	movs	r0, r6
 8029724:	19e9      	adds	r1, r5, r7
 8029726:	f7fa fb2d 	bl	8023d84 <SysTimeFromMs>
 802972a:	0023      	movs	r3, r4
 802972c:	3324      	adds	r3, #36	; 0x24
 802972e:	ce06      	ldmia	r6!, {r1, r2}
 8029730:	c306      	stmia	r3!, {r1, r2}
    beaconEventTime = TimerTempCompensation( beaconEventTime, Ctx.BeaconCtx.Temperature );
 8029732:	0038      	movs	r0, r7
 8029734:	6921      	ldr	r1, [r4, #16]
 8029736:	f7ff faa9 	bl	8028c8c <TimerTempCompensation>
    if( beaconEventTime > windowMovement )
 802973a:	9b00      	ldr	r3, [sp, #0]
    beaconEventTime = TimerTempCompensation( beaconEventTime, Ctx.BeaconCtx.Temperature );
 802973c:	0006      	movs	r6, r0
    if( beaconEventTime > windowMovement )
 802973e:	4298      	cmp	r0, r3
 8029740:	d900      	bls.n	8029744 <UpdateBeaconState+0x48>
        beaconEventTime -= windowMovement;
 8029742:	1ac6      	subs	r6, r0, r3
    Ctx.BeaconCtx.NextBeaconRxAdjusted = currentTime + beaconEventTime;
 8029744:	1975      	adds	r5, r6, r5
 8029746:	62e5      	str	r5, [r4, #44]	; 0x2c
    LoRaMacClassBStartRxSlots( );
 8029748:	f7ff ffb2 	bl	80296b0 <LoRaMacClassBStartRxSlots>
    if( Ctx.BeaconCtx.Ctrl.ResumeBeaconing == 0 )
 802974c:	7b23      	ldrb	r3, [r4, #12]
 802974e:	069b      	lsls	r3, r3, #26
 8029750:	d40e      	bmi.n	8029770 <UpdateBeaconState+0x74>
        Ctx.LoRaMacClassBParams.MlmeIndication->MlmeIndication = MLME_BEACON;
 8029752:	0023      	movs	r3, r4
 8029754:	220b      	movs	r2, #11
 8029756:	3398      	adds	r3, #152	; 0x98
 8029758:	681b      	ldr	r3, [r3, #0]
 802975a:	701a      	strb	r2, [r3, #0]
        Ctx.LoRaMacClassBParams.MlmeIndication->Status = status;
 802975c:	9a01      	ldr	r2, [sp, #4]
 802975e:	705a      	strb	r2, [r3, #1]
        Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeInd = 1;
 8029760:	0023      	movs	r3, r4
 8029762:	33a4      	adds	r3, #164	; 0xa4
 8029764:	6819      	ldr	r1, [r3, #0]
 8029766:	2328      	movs	r3, #40	; 0x28
 8029768:	780a      	ldrb	r2, [r1, #0]
 802976a:	439a      	bics	r2, r3
 802976c:	4313      	orrs	r3, r2
 802976e:	700b      	strb	r3, [r1, #0]
    Ctx.BeaconCtx.Ctrl.ResumeBeaconing = 0;
 8029770:	2220      	movs	r2, #32
 8029772:	7b23      	ldrb	r3, [r4, #12]
 8029774:	4393      	bics	r3, r2
 8029776:	7323      	strb	r3, [r4, #12]
    if( timeGuard > CLASSB_BEACON_GUARD )
 8029778:	4b04      	ldr	r3, [pc, #16]	; (802978c <UpdateBeaconState+0x90>)
 802977a:	429e      	cmp	r6, r3
 802977c:	d901      	bls.n	8029782 <UpdateBeaconState+0x86>
        timeGuard -= CLASSB_BEACON_GUARD;
 802977e:	4b04      	ldr	r3, [pc, #16]	; (8029790 <UpdateBeaconState+0x94>)
 8029780:	18f6      	adds	r6, r6, r3
}
 8029782:	0030      	movs	r0, r6
 8029784:	b005      	add	sp, #20
 8029786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029788:	20008ef4 	.word	0x20008ef4
 802978c:	00000bb8 	.word	0x00000bb8
 8029790:	fffff448 	.word	0xfffff448

08029794 <LoRaMacClassBProcess>:
    }
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBProcess( void )
{
 8029794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029796:	b087      	sub	sp, #28
	__asm__ volatile("mrs %0, PRIMASK;"
 8029798:	f3ef 8110 	mrs	r1, PRIMASK
 802979c:	b672      	cpsid	i
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents_t events;

    CRITICAL_SECTION_BEGIN( );
    events = LoRaMacClassBEvents;
    LoRaMacClassBEvents.Value = 0;
 802979e:	2000      	movs	r0, #0
    events = LoRaMacClassBEvents;
 80297a0:	4ac1      	ldr	r2, [pc, #772]	; (8029aa8 <LoRaMacClassBProcess+0x314>)
 80297a2:	6813      	ldr	r3, [r2, #0]
    LoRaMacClassBEvents.Value = 0;
 80297a4:	6010      	str	r0, [r2, #0]
	if (key != 0U) {
 80297a6:	4281      	cmp	r1, r0
 80297a8:	d102      	bne.n	80297b0 <LoRaMacClassBProcess+0x1c>
	__asm__ volatile(
 80297aa:	b662      	cpsie	i
 80297ac:	f3bf 8f6f 	isb	sy
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 80297b0:	2b00      	cmp	r3, #0
 80297b2:	d100      	bne.n	80297b6 <LoRaMacClassBProcess+0x22>
 80297b4:	e22e      	b.n	8029c14 <LoRaMacClassBProcess+0x480>
    {
        if( events.Events.Beacon == 1 )
 80297b6:	b2dd      	uxtb	r5, r3
 80297b8:	07db      	lsls	r3, r3, #31
 80297ba:	d55a      	bpl.n	8029872 <LoRaMacClassBProcess+0xde>
    TimerTime_t currentTime = Ctx.BeaconCtx.TimeStamp;
 80297bc:	4cbb      	ldr	r4, [pc, #748]	; (8029aac <LoRaMacClassBProcess+0x318>)
    switch( Ctx.BeaconState )
 80297be:	0023      	movs	r3, r4
 80297c0:	3344      	adds	r3, #68	; 0x44
 80297c2:	7818      	ldrb	r0, [r3, #0]
    TimerTime_t currentTime = Ctx.BeaconCtx.TimeStamp;
 80297c4:	6c26      	ldr	r6, [r4, #64]	; 0x40
    switch( Ctx.BeaconState )
 80297c6:	280a      	cmp	r0, #10
 80297c8:	d900      	bls.n	80297cc <LoRaMacClassBProcess+0x38>
 80297ca:	e169      	b.n	8029aa0 <LoRaMacClassBProcess+0x30c>
 80297cc:	f7f6 fc96 	bl	80200fc <__gnu_thumb1_case_uhi>
 80297d0:	000b00ab 	.word	0x000b00ab
 80297d4:	016800bf 	.word	0x016800bf
 80297d8:	00fb00db 	.word	0x00fb00db
 80297dc:	011d0168 	.word	0x011d0168
 80297e0:	0168013d 	.word	0x0168013d
 80297e4:	0144      	.short	0x0144
            if( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 )
 80297e6:	7b23      	ldrb	r3, [r4, #12]
 80297e8:	2210      	movs	r2, #16
 80297ea:	001f      	movs	r7, r3
 80297ec:	4017      	ands	r7, r2
 80297ee:	4213      	tst	r3, r2
 80297f0:	d007      	beq.n	8029802 <LoRaMacClassBProcess+0x6e>
                Radio.Sleep();
 80297f2:	4baf      	ldr	r3, [pc, #700]	; (8029ab0 <LoRaMacClassBProcess+0x31c>)
                Ctx.BeaconState = BEACON_STATE_LOST;
 80297f4:	3444      	adds	r4, #68	; 0x44
                Radio.Sleep();
 80297f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80297f8:	9303      	str	r3, [sp, #12]
 80297fa:	4798      	blx	r3
                Ctx.BeaconState = BEACON_STATE_LOST;
 80297fc:	230a      	movs	r3, #10
 80297fe:	7023      	strb	r3, [r4, #0]
    if( activateTimer == true )
 8029800:	e08f      	b.n	8029922 <LoRaMacClassBProcess+0x18e>
    Ctx.BeaconCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 8029802:	2108      	movs	r1, #8
 8029804:	8621      	strh	r1, [r4, #48]	; 0x30
    Ctx.PingSlotCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 8029806:	80e1      	strh	r1, [r4, #6]
    Ctx.BeaconCtx.BeaconWindowMovement  = CLASSB_WINDOW_MOVE_DEFAULT;
 8029808:	3906      	subs	r1, #6
                if( Ctx.BeaconCtx.Ctrl.BeaconDelaySet == 1 )
 802980a:	2004      	movs	r0, #4
    Ctx.BeaconCtx.BeaconWindowMovement  = CLASSB_WINDOW_MOVE_DEFAULT;
 802980c:	6361      	str	r1, [r4, #52]	; 0x34
                if( Ctx.BeaconCtx.Ctrl.BeaconDelaySet == 1 )
 802980e:	0019      	movs	r1, r3
 8029810:	4001      	ands	r1, r0
 8029812:	4203      	tst	r3, r0
 8029814:	d100      	bne.n	8029818 <LoRaMacClassBProcess+0x84>
 8029816:	e07f      	b.n	8029918 <LoRaMacClassBProcess+0x184>
                    if( Ctx.BeaconCtx.BeaconTimingDelay > 0 )
 8029818:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 802981a:	2900      	cmp	r1, #0
 802981c:	d022      	beq.n	8029864 <LoRaMacClassBProcess+0xd0>
                        if( SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) > currentTime )
 802981e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8029820:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8029822:	f005 fc04 	bl	802f02e <SysTimeToMs>
 8029826:	4286      	cmp	r6, r0
 8029828:	d213      	bcs.n	8029852 <LoRaMacClassBProcess+0xbe>
                            beaconEventTime = TimerTempCompensation( SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - currentTime, Ctx.BeaconCtx.Temperature );
 802982a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 802982c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802982e:	f005 fbfe 	bl	802f02e <SysTimeToMs>
 8029832:	6921      	ldr	r1, [r4, #16]
 8029834:	1b80      	subs	r0, r0, r6
 8029836:	f7ff fa29 	bl	8028c8c <TimerTempCompensation>
 802983a:	0006      	movs	r6, r0
                        Ctx.BeaconCtx.BeaconTimingDelay = 0;
 802983c:	2300      	movs	r3, #0
 802983e:	63e3      	str	r3, [r4, #60]	; 0x3c
        TimerSetValue( &Ctx.BeaconTimer, beaconEventTime );
 8029840:	4c9c      	ldr	r4, [pc, #624]	; (8029ab4 <LoRaMacClassBProcess+0x320>)
 8029842:	0031      	movs	r1, r6
 8029844:	0020      	movs	r0, r4
 8029846:	f005 fc2c 	bl	802f0a2 <TimerSetValue>
        TimerStart( &Ctx.BeaconTimer );
 802984a:	0020      	movs	r0, r4
 802984c:	f7fa fad0 	bl	8023df0 <TimerStart>
 8029850:	e00f      	b.n	8029872 <LoRaMacClassBProcess+0xde>
                            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 0;
 8029852:	220c      	movs	r2, #12
 8029854:	7b23      	ldrb	r3, [r4, #12]
    TimerTime_t beaconEventTime = 1;
 8029856:	2601      	movs	r6, #1
                            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 0;
 8029858:	4393      	bics	r3, r2
 802985a:	7323      	strb	r3, [r4, #12]
                            Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 802985c:	0023      	movs	r3, r4
 802985e:	3344      	adds	r3, #68	; 0x44
 8029860:	701f      	strb	r7, [r3, #0]
 8029862:	e7eb      	b.n	802983c <LoRaMacClassBProcess+0xa8>
                        Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 0;
 8029864:	2014      	movs	r0, #20
 8029866:	4383      	bics	r3, r0
 8029868:	4313      	orrs	r3, r2
 802986a:	7323      	strb	r3, [r4, #12]
            RxBeaconSetup( CLASSB_BEACON_RESERVED, false );
 802986c:	4892      	ldr	r0, [pc, #584]	; (8029ab8 <LoRaMacClassBProcess+0x324>)
 802986e:	f7ff fad1 	bl	8028e14 <RxBeaconSetup>
        {
            LoRaMacClassBProcessBeacon( );
        }
        if( events.Events.PingSlot == 1 )
 8029872:	07ab      	lsls	r3, r5, #30
 8029874:	d400      	bmi.n	8029878 <LoRaMacClassBProcess+0xe4>
 8029876:	e164      	b.n	8029b42 <LoRaMacClassBProcess+0x3ae>
    switch( Ctx.PingSlotState )
 8029878:	4c8c      	ldr	r4, [pc, #560]	; (8029aac <LoRaMacClassBProcess+0x318>)
    TimerTime_t pingSlotTime = 0;
 802987a:	2300      	movs	r3, #0
    switch( Ctx.PingSlotState )
 802987c:	0026      	movs	r6, r4
    TimerTime_t pingSlotTime = 0;
 802987e:	9305      	str	r3, [sp, #20]
    switch( Ctx.PingSlotState )
 8029880:	3645      	adds	r6, #69	; 0x45
 8029882:	7831      	ldrb	r1, [r6, #0]
 8029884:	2901      	cmp	r1, #1
 8029886:	d014      	beq.n	80298b2 <LoRaMacClassBProcess+0x11e>
 8029888:	2902      	cmp	r1, #2
 802988a:	d100      	bne.n	802988e <LoRaMacClassBProcess+0xfa>
 802988c:	e11e      	b.n	8029acc <LoRaMacClassBProcess+0x338>
 802988e:	4299      	cmp	r1, r3
 8029890:	d000      	beq.n	8029894 <LoRaMacClassBProcess+0x100>
 8029892:	e1ba      	b.n	8029c0a <LoRaMacClassBProcess+0x476>
            ComputePingOffset( Ctx.BeaconCtx.BeaconTime.Seconds,
 8029894:	0023      	movs	r3, r4
 8029896:	0022      	movs	r2, r4
 8029898:	33bc      	adds	r3, #188	; 0xbc
 802989a:	681b      	ldr	r3, [r3, #0]
 802989c:	4887      	ldr	r0, [pc, #540]	; (8029abc <LoRaMacClassBProcess+0x328>)
 802989e:	32a8      	adds	r2, #168	; 0xa8
 80298a0:	6812      	ldr	r2, [r2, #0]
 80298a2:	885b      	ldrh	r3, [r3, #2]
 80298a4:	9000      	str	r0, [sp, #0]
 80298a6:	6812      	ldr	r2, [r2, #0]
 80298a8:	6960      	ldr	r0, [r4, #20]
 80298aa:	f006 f845 	bl	802f938 <ComputePingOffset>
            Ctx.PingSlotState = PINGSLOT_STATE_SET_TIMER;
 80298ae:	2301      	movs	r3, #1
 80298b0:	7033      	strb	r3, [r6, #0]
            if( CalcNextSlotTime( Ctx.PingSlotCtx.PingOffset, Ctx.NvmCtx->PingSlotCtx.PingPeriod, Ctx.NvmCtx->PingSlotCtx.PingNb, &pingSlotTime ) == true )
 80298b2:	0026      	movs	r6, r4
 80298b4:	36bc      	adds	r6, #188	; 0xbc
 80298b6:	6833      	ldr	r3, [r6, #0]
 80298b8:	88a0      	ldrh	r0, [r4, #4]
 80298ba:	785a      	ldrb	r2, [r3, #1]
 80298bc:	8859      	ldrh	r1, [r3, #2]
 80298be:	ab05      	add	r3, sp, #20
 80298c0:	f7ff fa18 	bl	8028cf4 <CalcNextSlotTime>
 80298c4:	2800      	cmp	r0, #0
 80298c6:	d100      	bne.n	80298ca <LoRaMacClassBProcess+0x136>
 80298c8:	e13b      	b.n	8029b42 <LoRaMacClassBProcess+0x3ae>
                if( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 1 )
 80298ca:	7b23      	ldrb	r3, [r4, #12]
 80298cc:	079b      	lsls	r3, r3, #30
 80298ce:	d517      	bpl.n	8029900 <LoRaMacClassBProcess+0x16c>
                                                     Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 80298d0:	0023      	movs	r3, r4
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 80298d2:	0020      	movs	r0, r4
 80298d4:	6831      	ldr	r1, [r6, #0]
                                                     Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 80298d6:	33b0      	adds	r3, #176	; 0xb0
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 80298d8:	30ac      	adds	r0, #172	; 0xac
                                                     Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 80298da:	681b      	ldr	r3, [r3, #0]
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 80298dc:	4e78      	ldr	r6, [pc, #480]	; (8029ac0 <LoRaMacClassBProcess+0x32c>)
 80298de:	6800      	ldr	r0, [r0, #0]
 80298e0:	7a09      	ldrb	r1, [r1, #8]
 80298e2:	7a1a      	ldrb	r2, [r3, #8]
 80298e4:	7800      	ldrb	r0, [r0, #0]
 80298e6:	9600      	str	r6, [sp, #0]
 80298e8:	685b      	ldr	r3, [r3, #4]
 80298ea:	b249      	sxtb	r1, r1
 80298ec:	f006 fa9f 	bl	802fe2e <RegionComputeRxWindowParameters>
                    Ctx.PingSlotCtx.SymbolTimeout = pingSlotRxConfig.WindowTimeout;
 80298f0:	68b3      	ldr	r3, [r6, #8]
                    if( ( int32_t )pingSlotTime > pingSlotRxConfig.WindowOffset )
 80298f2:	9a05      	ldr	r2, [sp, #20]
                    Ctx.PingSlotCtx.SymbolTimeout = pingSlotRxConfig.WindowTimeout;
 80298f4:	80e3      	strh	r3, [r4, #6]
                    if( ( int32_t )pingSlotTime > pingSlotRxConfig.WindowOffset )
 80298f6:	68f3      	ldr	r3, [r6, #12]
 80298f8:	4293      	cmp	r3, r2
 80298fa:	da01      	bge.n	8029900 <LoRaMacClassBProcess+0x16c>
                        pingSlotTime += pingSlotRxConfig.WindowOffset;
 80298fc:	189b      	adds	r3, r3, r2
 80298fe:	9305      	str	r3, [sp, #20]
                Ctx.PingSlotState = PINGSLOT_STATE_IDLE;
 8029900:	2302      	movs	r3, #2
 8029902:	3445      	adds	r4, #69	; 0x45
 8029904:	7023      	strb	r3, [r4, #0]
                TimerSetValue( &Ctx.PingSlotTimer, pingSlotTime );
 8029906:	9905      	ldr	r1, [sp, #20]
 8029908:	4c6e      	ldr	r4, [pc, #440]	; (8029ac4 <LoRaMacClassBProcess+0x330>)
                TimerSetValue( &Ctx.PingSlotTimer, CLASSB_PING_SLOT_WINDOW );
 802990a:	0020      	movs	r0, r4
 802990c:	f005 fbc9 	bl	802f0a2 <TimerSetValue>
                TimerStart( &Ctx.PingSlotTimer );
 8029910:	0020      	movs	r0, r4
 8029912:	f7fa fa6d 	bl	8023df0 <TimerStart>
 8029916:	e114      	b.n	8029b42 <LoRaMacClassBProcess+0x3ae>
                    Ctx.BeaconCtx.NextBeaconRx.Seconds = 0;
 8029918:	6261      	str	r1, [r4, #36]	; 0x24
                    Ctx.BeaconCtx.NextBeaconRx.SubSeconds = 0;
 802991a:	8521      	strh	r1, [r4, #40]	; 0x28
                    Ctx.BeaconCtx.BeaconTimingDelay = 0;
 802991c:	63e1      	str	r1, [r4, #60]	; 0x3c
                    Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 802991e:	3444      	adds	r4, #68	; 0x44
 8029920:	7021      	strb	r1, [r4, #0]
    TimerTime_t beaconEventTime = 1;
 8029922:	2601      	movs	r6, #1
 8029924:	e78c      	b.n	8029840 <LoRaMacClassBProcess+0xac>
            if( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 )
 8029926:	7b22      	ldrb	r2, [r4, #12]
 8029928:	2310      	movs	r3, #16
 802992a:	0010      	movs	r0, r2
 802992c:	4018      	ands	r0, r3
 802992e:	421a      	tst	r2, r3
 8029930:	d000      	beq.n	8029934 <LoRaMacClassBProcess+0x1a0>
 8029932:	e75e      	b.n	80297f2 <LoRaMacClassBProcess+0x5e>
    Ctx.BeaconCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 8029934:	2108      	movs	r1, #8
                beaconEventTime = CLASSB_BEACON_INTERVAL;
 8029936:	26fa      	movs	r6, #250	; 0xfa
    Ctx.BeaconCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 8029938:	8621      	strh	r1, [r4, #48]	; 0x30
    Ctx.PingSlotCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 802993a:	80e1      	strh	r1, [r4, #6]
    Ctx.BeaconCtx.BeaconWindowMovement  = CLASSB_WINDOW_MOVE_DEFAULT;
 802993c:	3906      	subs	r1, #6
 802993e:	6361      	str	r1, [r4, #52]	; 0x34
                Ctx.BeaconCtx.Ctrl.AcquisitionPending = 1;
 8029940:	4313      	orrs	r3, r2
                RxBeaconSetup( 0, true );
 8029942:	3901      	subs	r1, #1
                Ctx.BeaconCtx.Ctrl.AcquisitionPending = 1;
 8029944:	7323      	strb	r3, [r4, #12]
                beaconEventTime = CLASSB_BEACON_INTERVAL;
 8029946:	0276      	lsls	r6, r6, #9
                RxBeaconSetup( 0, true );
 8029948:	f7ff fa64 	bl	8028e14 <RxBeaconSetup>
    if( activateTimer == true )
 802994c:	e778      	b.n	8029840 <LoRaMacClassBProcess+0xac>
            Ctx.BeaconCtx.BeaconTime.Seconds += ( CLASSB_BEACON_INTERVAL / 1000 );
 802994e:	6963      	ldr	r3, [r4, #20]
    if( Ctx.BeaconCtx.BeaconWindowMovement > CLASSB_WINDOW_MOVE_EXPANSION_MAX )
 8029950:	2280      	movs	r2, #128	; 0x80
            Ctx.BeaconCtx.BeaconTime.Seconds += ( CLASSB_BEACON_INTERVAL / 1000 );
 8029952:	3380      	adds	r3, #128	; 0x80
 8029954:	6163      	str	r3, [r4, #20]
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
 8029956:	2300      	movs	r3, #0
 8029958:	8323      	strh	r3, [r4, #24]
    Ctx.BeaconCtx.BeaconWindowMovement *= CLASSB_WINDOW_MOVE_EXPANSION_FACTOR;
 802995a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    if( Ctx.BeaconCtx.BeaconWindowMovement > CLASSB_WINDOW_MOVE_EXPANSION_MAX )
 802995c:	0052      	lsls	r2, r2, #1
    Ctx.BeaconCtx.BeaconWindowMovement *= CLASSB_WINDOW_MOVE_EXPANSION_FACTOR;
 802995e:	005b      	lsls	r3, r3, #1
    if( Ctx.BeaconCtx.BeaconWindowMovement > CLASSB_WINDOW_MOVE_EXPANSION_MAX )
 8029960:	4293      	cmp	r3, r2
 8029962:	d821      	bhi.n	80299a8 <LoRaMacClassBProcess+0x214>
    Ctx.BeaconCtx.BeaconWindowMovement *= CLASSB_WINDOW_MOVE_EXPANSION_FACTOR;
 8029964:	6363      	str	r3, [r4, #52]	; 0x34
    Ctx.BeaconCtx.SymbolTimeout *= CLASSB_BEACON_SYMBOL_TO_EXPANSION_FACTOR;
 8029966:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8029968:	005b      	lsls	r3, r3, #1
 802996a:	b29b      	uxth	r3, r3
    if( Ctx.BeaconCtx.SymbolTimeout > CLASSB_BEACON_SYMBOL_TO_EXPANSION_MAX )
 802996c:	2bff      	cmp	r3, #255	; 0xff
 802996e:	d81d      	bhi.n	80299ac <LoRaMacClassBProcess+0x218>
        Ctx.BeaconCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_EXPANSION_MAX;
 8029970:	8623      	strh	r3, [r4, #48]	; 0x30
    Ctx.PingSlotCtx.SymbolTimeout *= CLASSB_BEACON_SYMBOL_TO_EXPANSION_FACTOR;
 8029972:	88e3      	ldrh	r3, [r4, #6]
 8029974:	005b      	lsls	r3, r3, #1
 8029976:	b29b      	uxth	r3, r3
    if( Ctx.PingSlotCtx.SymbolTimeout > CLASSB_PING_SLOT_SYMBOL_TO_EXPANSION_MAX )
 8029978:	2b1e      	cmp	r3, #30
 802997a:	d819      	bhi.n	80299b0 <LoRaMacClassBProcess+0x21c>
        Ctx.PingSlotCtx.SymbolTimeout = CLASSB_PING_SLOT_SYMBOL_TO_EXPANSION_MAX;
 802997c:	80e3      	strh	r3, [r4, #6]
            Ctx.BeaconState = BEACON_STATE_REACQUISITION;
 802997e:	0023      	movs	r3, r4
 8029980:	2204      	movs	r2, #4
 8029982:	3344      	adds	r3, #68	; 0x44
 8029984:	701a      	strb	r2, [r3, #0]
            Ctx.BeaconCtx.Ctrl.BeaconAcquired = 0;
 8029986:	2202      	movs	r2, #2
 8029988:	7b23      	ldrb	r3, [r4, #12]
            if( ( currentTime - SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) ) > CLASSB_MAX_BEACON_LESS_PERIOD )
 802998a:	69e0      	ldr	r0, [r4, #28]
            Ctx.BeaconCtx.Ctrl.BeaconAcquired = 0;
 802998c:	4393      	bics	r3, r2
            if( ( currentTime - SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) ) > CLASSB_MAX_BEACON_LESS_PERIOD )
 802998e:	6a21      	ldr	r1, [r4, #32]
            Ctx.BeaconCtx.Ctrl.BeaconAcquired = 0;
 8029990:	7323      	strb	r3, [r4, #12]
            if( ( currentTime - SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) ) > CLASSB_MAX_BEACON_LESS_PERIOD )
 8029992:	0027      	movs	r7, r4
 8029994:	f005 fb4b 	bl	802f02e <SysTimeToMs>
 8029998:	4b4b      	ldr	r3, [pc, #300]	; (8029ac8 <LoRaMacClassBProcess+0x334>)
 802999a:	1a30      	subs	r0, r6, r0
 802999c:	3744      	adds	r7, #68	; 0x44
 802999e:	4298      	cmp	r0, r3
 80299a0:	d908      	bls.n	80299b4 <LoRaMacClassBProcess+0x220>
                Ctx.BeaconState = BEACON_STATE_LOST;
 80299a2:	230a      	movs	r3, #10
 80299a4:	703b      	strb	r3, [r7, #0]
    if( activateTimer == true )
 80299a6:	e7bc      	b.n	8029922 <LoRaMacClassBProcess+0x18e>
        Ctx.BeaconCtx.BeaconWindowMovement = CLASSB_WINDOW_MOVE_EXPANSION_MAX;
 80299a8:	6362      	str	r2, [r4, #52]	; 0x34
 80299aa:	e7dc      	b.n	8029966 <LoRaMacClassBProcess+0x1d2>
        Ctx.BeaconCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_EXPANSION_MAX;
 80299ac:	23ff      	movs	r3, #255	; 0xff
 80299ae:	e7df      	b.n	8029970 <LoRaMacClassBProcess+0x1dc>
        Ctx.PingSlotCtx.SymbolTimeout = CLASSB_PING_SLOT_SYMBOL_TO_EXPANSION_MAX;
 80299b0:	231e      	movs	r3, #30
 80299b2:	e7e3      	b.n	802997c <LoRaMacClassBProcess+0x1e8>
                beaconEventTime = UpdateBeaconState( LORAMAC_EVENT_INFO_STATUS_BEACON_LOST,
 80299b4:	0032      	movs	r2, r6
 80299b6:	200f      	movs	r0, #15
 80299b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80299ba:	f7ff fe9f 	bl	80296fc <UpdateBeaconState>
                Ctx.BeaconState = BEACON_STATE_IDLE;
 80299be:	2307      	movs	r3, #7
                beaconEventTime = UpdateBeaconState( LORAMAC_EVENT_INFO_STATUS_BEACON_LOST,
 80299c0:	0006      	movs	r6, r0
                Ctx.BeaconState = BEACON_STATE_IDLE;
 80299c2:	703b      	strb	r3, [r7, #0]
    if( activateTimer == true )
 80299c4:	e73c      	b.n	8029840 <LoRaMacClassBProcess+0xac>
            Ctx.BeaconCtx.Ctrl.AcquisitionPending = 0;
 80299c6:	2210      	movs	r2, #16
 80299c8:	7b23      	ldrb	r3, [r4, #12]
            beaconEventTime = UpdateBeaconState( LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED,
 80299ca:	2100      	movs	r1, #0
            Ctx.BeaconCtx.Ctrl.AcquisitionPending = 0;
 80299cc:	4393      	bics	r3, r2
            beaconEventTime = UpdateBeaconState( LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED,
 80299ce:	200e      	movs	r0, #14
 80299d0:	0032      	movs	r2, r6
            Ctx.BeaconCtx.Ctrl.AcquisitionPending = 0;
 80299d2:	7323      	strb	r3, [r4, #12]
            beaconEventTime = UpdateBeaconState( LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED,
 80299d4:	f7ff fe92 	bl	80296fc <UpdateBeaconState>
            if( Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeReq == 1 )
 80299d8:	0023      	movs	r3, r4
 80299da:	33a4      	adds	r3, #164	; 0xa4
 80299dc:	681b      	ldr	r3, [r3, #0]
            beaconEventTime = UpdateBeaconState( LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED,
 80299de:	0006      	movs	r6, r0
            if( Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeReq == 1 )
 80299e0:	781b      	ldrb	r3, [r3, #0]
 80299e2:	075b      	lsls	r3, r3, #29
 80299e4:	d50d      	bpl.n	8029a02 <LoRaMacClassBProcess+0x26e>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true )
 80299e6:	200c      	movs	r0, #12
 80299e8:	f000 fb64 	bl	802a0b4 <LoRaMacConfirmQueueIsCmdActive>
 80299ec:	2800      	cmp	r0, #0
 80299ee:	d008      	beq.n	8029a02 <LoRaMacClassBProcess+0x26e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_ACQUISITION );
 80299f0:	210c      	movs	r1, #12
 80299f2:	2000      	movs	r0, #0
 80299f4:	f000 fb1c 	bl	802a030 <LoRaMacConfirmQueueSetStatus>
                    Ctx.LoRaMacClassBParams.MlmeConfirm->TxTimeOnAir = 0;
 80299f8:	0023      	movs	r3, r4
 80299fa:	2200      	movs	r2, #0
 80299fc:	33a0      	adds	r3, #160	; 0xa0
 80299fe:	681b      	ldr	r3, [r3, #0]
 8029a00:	605a      	str	r2, [r3, #4]
            Ctx.BeaconState = BEACON_STATE_IDLE;
 8029a02:	2307      	movs	r3, #7
 8029a04:	3444      	adds	r4, #68	; 0x44
 8029a06:	7023      	strb	r3, [r4, #0]
    if( activateTimer == true )
 8029a08:	e71a      	b.n	8029840 <LoRaMacClassBProcess+0xac>
    if( ( callbacks != NULL ) && ( callbacks->GetTemperatureLevel != NULL ) )
 8029a0a:	0023      	movs	r3, r4
 8029a0c:	3390      	adds	r3, #144	; 0x90
 8029a0e:	681b      	ldr	r3, [r3, #0]
 8029a10:	2b00      	cmp	r3, #0
 8029a12:	d003      	beq.n	8029a1c <LoRaMacClassBProcess+0x288>
        beaconCtx->Temperature = callbacks->GetTemperatureLevel( );
 8029a14:	4798      	blx	r3
 8029a16:	f7f7 fcd5 	bl	80213c4 <__aeabi_ui2f>
 8029a1a:	6120      	str	r0, [r4, #16]
            beaconEventTime = Ctx.BeaconCtx.NextBeaconRxAdjusted - Radio.GetWakeupTime( );
 8029a1c:	4b24      	ldr	r3, [pc, #144]	; (8029ab0 <LoRaMacClassBProcess+0x31c>)
 8029a1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8029a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8029a22:	9303      	str	r3, [sp, #12]
 8029a24:	4798      	blx	r3
 8029a26:	1a36      	subs	r6, r6, r0
            currentTime = TimerGetCurrentTime( );
 8029a28:	f005 fb4c 	bl	802f0c4 <TimerGetCurrentTime>
            if( beaconEventTime > currentTime )
 8029a2c:	0023      	movs	r3, r4
 8029a2e:	3344      	adds	r3, #68	; 0x44
 8029a30:	4286      	cmp	r6, r0
 8029a32:	d907      	bls.n	8029a44 <LoRaMacClassBProcess+0x2b0>
                Ctx.BeaconState = BEACON_STATE_GUARD;
 8029a34:	2208      	movs	r2, #8
                beaconEventTime -= currentTime;
 8029a36:	1a30      	subs	r0, r6, r0
                beaconEventTime = TimerTempCompensation( beaconEventTime, Ctx.BeaconCtx.Temperature );
 8029a38:	6921      	ldr	r1, [r4, #16]
                Ctx.BeaconState = BEACON_STATE_GUARD;
 8029a3a:	701a      	strb	r2, [r3, #0]
                beaconEventTime = TimerTempCompensation( beaconEventTime, Ctx.BeaconCtx.Temperature );
 8029a3c:	f7ff f926 	bl	8028c8c <TimerTempCompensation>
 8029a40:	0006      	movs	r6, r0
    if( activateTimer == true )
 8029a42:	e6fd      	b.n	8029840 <LoRaMacClassBProcess+0xac>
                Ctx.BeaconState = BEACON_STATE_REACQUISITION;
 8029a44:	2204      	movs	r2, #4
 8029a46:	701a      	strb	r2, [r3, #0]
    if( activateTimer == true )
 8029a48:	e76b      	b.n	8029922 <LoRaMacClassBProcess+0x18e>
            Ctx.BeaconState = BEACON_STATE_RX;
 8029a4a:	2309      	movs	r3, #9
 8029a4c:	3444      	adds	r4, #68	; 0x44
 8029a4e:	7023      	strb	r3, [r4, #0]
            LoRaMacClassBStopRxSlots( );
 8029a50:	f7ff fdc6 	bl	80295e0 <LoRaMacClassBStopRxSlots>
            RxBeaconSetup( CLASSB_BEACON_RESERVED, false );
 8029a54:	2100      	movs	r1, #0
 8029a56:	e709      	b.n	802986c <LoRaMacClassBProcess+0xd8>
            if( Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeReq == 1 )
 8029a58:	0023      	movs	r3, r4
 8029a5a:	33a4      	adds	r3, #164	; 0xa4
 8029a5c:	681b      	ldr	r3, [r3, #0]
 8029a5e:	781a      	ldrb	r2, [r3, #0]
 8029a60:	0752      	lsls	r2, r2, #29
 8029a62:	d513      	bpl.n	8029a8c <LoRaMacClassBProcess+0x2f8>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true )
 8029a64:	200c      	movs	r0, #12
 8029a66:	f000 fb25 	bl	802a0b4 <LoRaMacConfirmQueueIsCmdActive>
 8029a6a:	2800      	cmp	r0, #0
 8029a6c:	d003      	beq.n	8029a76 <LoRaMacClassBProcess+0x2e2>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND, MLME_BEACON_ACQUISITION );
 8029a6e:	210c      	movs	r1, #12
 8029a70:	2010      	movs	r0, #16
 8029a72:	f000 fadd 	bl	802a030 <LoRaMacConfirmQueueSetStatus>
            LoRaMacClassBStopRxSlots( );
 8029a76:	f7ff fdb3 	bl	80295e0 <LoRaMacClassBStopRxSlots>
            InitClassBDefaults( );
 8029a7a:	f7ff fa67 	bl	8028f4c <InitClassBDefaults>
            Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MacDone = 1;
 8029a7e:	2320      	movs	r3, #32
 8029a80:	34a4      	adds	r4, #164	; 0xa4
 8029a82:	6822      	ldr	r2, [r4, #0]
 8029a84:	7811      	ldrb	r1, [r2, #0]
 8029a86:	430b      	orrs	r3, r1
 8029a88:	7013      	strb	r3, [r2, #0]
    if( activateTimer == true )
 8029a8a:	e6f2      	b.n	8029872 <LoRaMacClassBProcess+0xde>
                Ctx.LoRaMacClassBParams.MlmeIndication->MlmeIndication = MLME_BEACON_LOST;
 8029a8c:	0022      	movs	r2, r4
 8029a8e:	210f      	movs	r1, #15
 8029a90:	3298      	adds	r2, #152	; 0x98
 8029a92:	6812      	ldr	r2, [r2, #0]
 8029a94:	8011      	strh	r1, [r2, #0]
                Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeInd = 1;
 8029a96:	2208      	movs	r2, #8
 8029a98:	7819      	ldrb	r1, [r3, #0]
 8029a9a:	430a      	orrs	r2, r1
 8029a9c:	701a      	strb	r2, [r3, #0]
 8029a9e:	e7ea      	b.n	8029a76 <LoRaMacClassBProcess+0x2e2>
            Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 8029aa0:	2300      	movs	r3, #0
 8029aa2:	3444      	adds	r4, #68	; 0x44
 8029aa4:	7023      	strb	r3, [r4, #0]
    if( activateTimer == true )
 8029aa6:	e6e4      	b.n	8029872 <LoRaMacClassBProcess+0xde>
 8029aa8:	20008fb4 	.word	0x20008fb4
 8029aac:	20008ef4 	.word	0x20008ef4
 8029ab0:	08031484 	.word	0x08031484
 8029ab4:	20008f3c 	.word	0x20008f3c
 8029ab8:	00000848 	.word	0x00000848
 8029abc:	20008ef8 	.word	0x20008ef8
 8029ac0:	20008fe4 	.word	0x20008fe4
 8029ac4:	20008f54 	.word	0x20008f54
 8029ac8:	006ddd00 	.word	0x006ddd00
            uint32_t frequency = Ctx.NvmCtx->PingSlotCtx.Frequency;
 8029acc:	0023      	movs	r3, r4
 8029ace:	33bc      	adds	r3, #188	; 0xbc
 8029ad0:	681b      	ldr	r3, [r3, #0]
            if( Ctx.NvmCtx->PingSlotCtx.Ctrl.CustomFreq == 0 )
 8029ad2:	7818      	ldrb	r0, [r3, #0]
 8029ad4:	0002      	movs	r2, r0
 8029ad6:	400a      	ands	r2, r1
 8029ad8:	4208      	tst	r0, r1
 8029ada:	d100      	bne.n	8029ade <LoRaMacClassBProcess+0x34a>
 8029adc:	e088      	b.n	8029bf0 <LoRaMacClassBProcess+0x45c>
            uint32_t frequency = Ctx.NvmCtx->PingSlotCtx.Frequency;
 8029ade:	6858      	ldr	r0, [r3, #4]
            if( Ctx.MulticastSlotState != PINGSLOT_STATE_RX )
 8029ae0:	0023      	movs	r3, r4
 8029ae2:	3346      	adds	r3, #70	; 0x46
 8029ae4:	781a      	ldrb	r2, [r3, #0]
 8029ae6:	0023      	movs	r3, r4
 8029ae8:	3345      	adds	r3, #69	; 0x45
 8029aea:	2a03      	cmp	r2, #3
 8029aec:	d100      	bne.n	8029af0 <LoRaMacClassBProcess+0x35c>
 8029aee:	e087      	b.n	8029c00 <LoRaMacClassBProcess+0x46c>
                Ctx.PingSlotState = PINGSLOT_STATE_RX;
 8029af0:	2203      	movs	r2, #3
 8029af2:	701a      	strb	r2, [r3, #0]
                pingSlotRxConfig.Datarate = Ctx.NvmCtx->PingSlotCtx.Datarate;
 8029af4:	0023      	movs	r3, r4
                pingSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 8029af6:	0027      	movs	r7, r4
                pingSlotRxConfig.Datarate = Ctx.NvmCtx->PingSlotCtx.Datarate;
 8029af8:	33bc      	adds	r3, #188	; 0xbc
 8029afa:	681b      	ldr	r3, [r3, #0]
 8029afc:	4e6e      	ldr	r6, [pc, #440]	; (8029cb8 <LoRaMacClassBProcess+0x524>)
 8029afe:	7a1b      	ldrb	r3, [r3, #8]
                pingSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 8029b00:	37b0      	adds	r7, #176	; 0xb0
                pingSlotRxConfig.Datarate = Ctx.NvmCtx->PingSlotCtx.Datarate;
 8029b02:	7073      	strb	r3, [r6, #1]
                pingSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 8029b04:	683b      	ldr	r3, [r7, #0]
                RegionRxConfig( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &pingSlotRxConfig, ( int8_t* )&Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 8029b06:	0031      	movs	r1, r6
                pingSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 8029b08:	001a      	movs	r2, r3
 8029b0a:	3235      	adds	r2, #53	; 0x35
 8029b0c:	7812      	ldrb	r2, [r2, #0]
                pingSlotRxConfig.RepeaterSupport = Ctx.LoRaMacClassBParams.LoRaMacParams->RepeaterSupport;
 8029b0e:	3340      	adds	r3, #64	; 0x40
                pingSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 8029b10:	7432      	strb	r2, [r6, #16]
                pingSlotRxConfig.RepeaterSupport = Ctx.LoRaMacClassBParams.LoRaMacParams->RepeaterSupport;
 8029b12:	781b      	ldrb	r3, [r3, #0]
                pingSlotRxConfig.Frequency = frequency;
 8029b14:	6070      	str	r0, [r6, #4]
                pingSlotRxConfig.RepeaterSupport = Ctx.LoRaMacClassBParams.LoRaMacParams->RepeaterSupport;
 8029b16:	7473      	strb	r3, [r6, #17]
                pingSlotRxConfig.RxContinuous = false;
 8029b18:	2380      	movs	r3, #128	; 0x80
 8029b1a:	00db      	lsls	r3, r3, #3
 8029b1c:	8273      	strh	r3, [r6, #18]
                RegionRxConfig( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &pingSlotRxConfig, ( int8_t* )&Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 8029b1e:	0023      	movs	r3, r4
 8029b20:	34ac      	adds	r4, #172	; 0xac
 8029b22:	339c      	adds	r3, #156	; 0x9c
 8029b24:	681a      	ldr	r2, [r3, #0]
 8029b26:	6823      	ldr	r3, [r4, #0]
 8029b28:	3204      	adds	r2, #4
 8029b2a:	7818      	ldrb	r0, [r3, #0]
 8029b2c:	f006 f98a 	bl	802fe44 <RegionRxConfig>
                    Radio.Rx( Ctx.LoRaMacClassBParams.LoRaMacParams->MaxRxWindow );
 8029b30:	4b62      	ldr	r3, [pc, #392]	; (8029cbc <LoRaMacClassBProcess+0x528>)
                if( pingSlotRxConfig.RxContinuous == false )
 8029b32:	7cb2      	ldrb	r2, [r6, #18]
                    Radio.Rx( 0 ); // Continuous mode
 8029b34:	2000      	movs	r0, #0
                    Radio.Rx( Ctx.LoRaMacClassBParams.LoRaMacParams->MaxRxWindow );
 8029b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                if( pingSlotRxConfig.RxContinuous == false )
 8029b38:	2a00      	cmp	r2, #0
 8029b3a:	d101      	bne.n	8029b40 <LoRaMacClassBProcess+0x3ac>
                    Radio.Rx( Ctx.LoRaMacClassBParams.LoRaMacParams->MaxRxWindow );
 8029b3c:	683a      	ldr	r2, [r7, #0]
 8029b3e:	68d0      	ldr	r0, [r2, #12]
                    Radio.Rx( 0 ); // Continuous mode
 8029b40:	4798      	blx	r3
        {
            LoRaMacClassBProcessPingSlot( );
        }
        if( events.Events.MulticastSlot == 1 )
 8029b42:	076b      	lsls	r3, r5, #29
 8029b44:	d566      	bpl.n	8029c14 <LoRaMacClassBProcess+0x480>
    MulticastCtx_t *cur = Ctx.LoRaMacClassBParams.MulticastChannels;
 8029b46:	4c5e      	ldr	r4, [pc, #376]	; (8029cc0 <LoRaMacClassBProcess+0x52c>)
    TimerTime_t slotTime = 0;
 8029b48:	2300      	movs	r3, #0
    MulticastCtx_t *cur = Ctx.LoRaMacClassBParams.MulticastChannels;
 8029b4a:	0022      	movs	r2, r4
 8029b4c:	32b4      	adds	r2, #180	; 0xb4
 8029b4e:	6812      	ldr	r2, [r2, #0]
    TimerTime_t slotTime = 0;
 8029b50:	9305      	str	r3, [sp, #20]
    if( cur == NULL )
 8029b52:	429a      	cmp	r2, r3
 8029b54:	d05e      	beq.n	8029c14 <LoRaMacClassBProcess+0x480>
    if( Ctx.MulticastSlotState == PINGSLOT_STATE_RX )
 8029b56:	0025      	movs	r5, r4
 8029b58:	3546      	adds	r5, #70	; 0x46
 8029b5a:	7829      	ldrb	r1, [r5, #0]
 8029b5c:	2903      	cmp	r1, #3
 8029b5e:	d059      	beq.n	8029c14 <LoRaMacClassBProcess+0x480>
    switch( Ctx.MulticastSlotState )
 8029b60:	2901      	cmp	r1, #1
 8029b62:	d00e      	beq.n	8029b82 <LoRaMacClassBProcess+0x3ee>
 8029b64:	2902      	cmp	r1, #2
 8029b66:	d057      	beq.n	8029c18 <LoRaMacClassBProcess+0x484>
 8029b68:	4299      	cmp	r1, r3
 8029b6a:	d000      	beq.n	8029b6e <LoRaMacClassBProcess+0x3da>
 8029b6c:	e0a1      	b.n	8029cb2 <LoRaMacClassBProcess+0x51e>
                ComputePingOffset( Ctx.BeaconCtx.BeaconTime.Seconds,
 8029b6e:	0010      	movs	r0, r2
 8029b70:	3028      	adds	r0, #40	; 0x28
 8029b72:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8029b74:	9000      	str	r0, [sp, #0]
 8029b76:	6852      	ldr	r2, [r2, #4]
 8029b78:	6960      	ldr	r0, [r4, #20]
 8029b7a:	f005 fedd 	bl	802f938 <ComputePingOffset>
            Ctx.MulticastSlotState = PINGSLOT_STATE_SET_TIMER;
 8029b7e:	2301      	movs	r3, #1
 8029b80:	702b      	strb	r3, [r5, #0]
            cur = Ctx.LoRaMacClassBParams.MulticastChannels;
 8029b82:	0023      	movs	r3, r4
 8029b84:	33b4      	adds	r3, #180	; 0xb4
 8029b86:	681e      	ldr	r6, [r3, #0]
            Ctx.PingSlotCtx.NextMulticastChannel = NULL;
 8029b88:	2300      	movs	r3, #0
 8029b8a:	60a3      	str	r3, [r4, #8]
                if( CalcNextSlotTime( cur->PingOffset, cur->PingPeriod, cur->PingNb, &slotTime ) == true )
 8029b8c:	1d73      	adds	r3, r6, #5
 8029b8e:	7fda      	ldrb	r2, [r3, #31]
 8029b90:	8cf1      	ldrh	r1, [r6, #38]	; 0x26
 8029b92:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 8029b94:	ab05      	add	r3, sp, #20
 8029b96:	f7ff f8ad 	bl	8028cf4 <CalcNextSlotTime>
 8029b9a:	1e05      	subs	r5, r0, #0
 8029b9c:	d037      	beq.n	8029c0e <LoRaMacClassBProcess+0x47a>
                        multicastSlotTime = slotTime;
 8029b9e:	9d05      	ldr	r5, [sp, #20]
                        Ctx.PingSlotCtx.NextMulticastChannel = cur;
 8029ba0:	60a6      	str	r6, [r4, #8]
                if( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 1 )
 8029ba2:	7b23      	ldrb	r3, [r4, #12]
 8029ba4:	4e47      	ldr	r6, [pc, #284]	; (8029cc4 <LoRaMacClassBProcess+0x530>)
 8029ba6:	079b      	lsls	r3, r3, #30
 8029ba8:	d512      	bpl.n	8029bd0 <LoRaMacClassBProcess+0x43c>
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8029baa:	0021      	movs	r1, r4
                                                    Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 8029bac:	0023      	movs	r3, r4
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8029bae:	0020      	movs	r0, r4
 8029bb0:	31bc      	adds	r1, #188	; 0xbc
 8029bb2:	6809      	ldr	r1, [r1, #0]
                                                    Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 8029bb4:	33b0      	adds	r3, #176	; 0xb0
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8029bb6:	30ac      	adds	r0, #172	; 0xac
                                                    Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 8029bb8:	681b      	ldr	r3, [r3, #0]
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8029bba:	6800      	ldr	r0, [r0, #0]
 8029bbc:	7a09      	ldrb	r1, [r1, #8]
 8029bbe:	7a1a      	ldrb	r2, [r3, #8]
 8029bc0:	7800      	ldrb	r0, [r0, #0]
 8029bc2:	9600      	str	r6, [sp, #0]
 8029bc4:	685b      	ldr	r3, [r3, #4]
 8029bc6:	b249      	sxtb	r1, r1
 8029bc8:	f006 f931 	bl	802fe2e <RegionComputeRxWindowParameters>
                    Ctx.PingSlotCtx.SymbolTimeout = multicastSlotRxConfig.WindowTimeout;
 8029bcc:	68b3      	ldr	r3, [r6, #8]
 8029bce:	80e3      	strh	r3, [r4, #6]
                if( ( int32_t )multicastSlotTime > multicastSlotRxConfig.WindowOffset )
 8029bd0:	68f3      	ldr	r3, [r6, #12]
 8029bd2:	42ab      	cmp	r3, r5
 8029bd4:	da00      	bge.n	8029bd8 <LoRaMacClassBProcess+0x444>
                    multicastSlotTime += multicastSlotRxConfig.WindowOffset;
 8029bd6:	18ed      	adds	r5, r5, r3
                Ctx.MulticastSlotState = PINGSLOT_STATE_IDLE;
 8029bd8:	2302      	movs	r3, #2
                TimerSetValue( &Ctx.MulticastSlotTimer, multicastSlotTime );
 8029bda:	0029      	movs	r1, r5
                Ctx.MulticastSlotState = PINGSLOT_STATE_IDLE;
 8029bdc:	3446      	adds	r4, #70	; 0x46
 8029bde:	7023      	strb	r3, [r4, #0]
                TimerSetValue( &Ctx.MulticastSlotTimer, multicastSlotTime );
 8029be0:	4c39      	ldr	r4, [pc, #228]	; (8029cc8 <LoRaMacClassBProcess+0x534>)
                TimerSetValue( &Ctx.MulticastSlotTimer, 1 );
 8029be2:	0020      	movs	r0, r4
 8029be4:	f005 fa5d 	bl	802f0a2 <TimerSetValue>
                TimerStart( &Ctx.MulticastSlotTimer );
 8029be8:	0020      	movs	r0, r4
 8029bea:	f7fa f901 	bl	8023df0 <TimerStart>
                break;
 8029bee:	e011      	b.n	8029c14 <LoRaMacClassBProcess+0x480>
                frequency = CalcDownlinkChannelAndFrequency( *Ctx.LoRaMacClassBParams.LoRaMacDevAddr, Ctx.BeaconCtx.BeaconTime.Seconds,
 8029bf0:	0023      	movs	r3, r4
 8029bf2:	33a8      	adds	r3, #168	; 0xa8
 8029bf4:	681b      	ldr	r3, [r3, #0]
 8029bf6:	6961      	ldr	r1, [r4, #20]
 8029bf8:	6818      	ldr	r0, [r3, #0]
 8029bfa:	f7ff f8e7 	bl	8028dcc <CalcDownlinkChannelAndFrequency.constprop.0>
 8029bfe:	e76f      	b.n	8029ae0 <LoRaMacClassBProcess+0x34c>
                Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 8029c00:	2200      	movs	r2, #0
                TimerSetValue( &Ctx.PingSlotTimer, CLASSB_PING_SLOT_WINDOW );
 8029c02:	211e      	movs	r1, #30
 8029c04:	4c31      	ldr	r4, [pc, #196]	; (8029ccc <LoRaMacClassBProcess+0x538>)
                Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 8029c06:	701a      	strb	r2, [r3, #0]
                TimerSetValue( &Ctx.PingSlotTimer, CLASSB_PING_SLOT_WINDOW );
 8029c08:	e67f      	b.n	802990a <LoRaMacClassBProcess+0x176>
            Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 8029c0a:	7033      	strb	r3, [r6, #0]
}
 8029c0c:	e799      	b.n	8029b42 <LoRaMacClassBProcess+0x3ae>
            if( Ctx.PingSlotCtx.NextMulticastChannel != NULL )
 8029c0e:	68a3      	ldr	r3, [r4, #8]
 8029c10:	2b00      	cmp	r3, #0
 8029c12:	d1c6      	bne.n	8029ba2 <LoRaMacClassBProcess+0x40e>
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8029c14:	b007      	add	sp, #28
 8029c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( Ctx.PingSlotCtx.NextMulticastChannel == NULL )
 8029c18:	68a3      	ldr	r3, [r4, #8]
 8029c1a:	2b00      	cmp	r3, #0
 8029c1c:	d103      	bne.n	8029c26 <LoRaMacClassBProcess+0x492>
                TimerSetValue( &Ctx.MulticastSlotTimer, 1 );
 8029c1e:	2101      	movs	r1, #1
 8029c20:	4c29      	ldr	r4, [pc, #164]	; (8029cc8 <LoRaMacClassBProcess+0x534>)
                Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 8029c22:	702b      	strb	r3, [r5, #0]
                TimerSetValue( &Ctx.MulticastSlotTimer, 1 );
 8029c24:	e7dd      	b.n	8029be2 <LoRaMacClassBProcess+0x44e>
            frequency = Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.RxParams.ClassB.Frequency;
 8029c26:	699a      	ldr	r2, [r3, #24]
            if( frequency == 0 )
 8029c28:	2a00      	cmp	r2, #0
 8029c2a:	d104      	bne.n	8029c36 <LoRaMacClassBProcess+0x4a2>
                frequency = CalcDownlinkChannelAndFrequency( Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.Address,
 8029c2c:	6961      	ldr	r1, [r4, #20]
 8029c2e:	6858      	ldr	r0, [r3, #4]
 8029c30:	f7ff f8cc 	bl	8028dcc <CalcDownlinkChannelAndFrequency.constprop.0>
 8029c34:	0002      	movs	r2, r0
            Ctx.MulticastSlotState = PINGSLOT_STATE_RX;
 8029c36:	0023      	movs	r3, r4
 8029c38:	2103      	movs	r1, #3
 8029c3a:	3346      	adds	r3, #70	; 0x46
 8029c3c:	7019      	strb	r1, [r3, #0]
            multicastSlotRxConfig.Datarate = Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.RxParams.ClassB.Datarate;
 8029c3e:	68a3      	ldr	r3, [r4, #8]
 8029c40:	4d20      	ldr	r5, [pc, #128]	; (8029cc4 <LoRaMacClassBProcess+0x530>)
 8029c42:	7f1b      	ldrb	r3, [r3, #28]
            if( Ctx.PingSlotState == PINGSLOT_STATE_RX )
 8029c44:	0027      	movs	r7, r4
            multicastSlotRxConfig.Datarate = Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.RxParams.ClassB.Datarate;
 8029c46:	706b      	strb	r3, [r5, #1]
            multicastSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 8029c48:	0023      	movs	r3, r4
 8029c4a:	33b0      	adds	r3, #176	; 0xb0
 8029c4c:	681b      	ldr	r3, [r3, #0]
            if( Ctx.PingSlotState == PINGSLOT_STATE_RX )
 8029c4e:	3745      	adds	r7, #69	; 0x45
            multicastSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 8029c50:	0019      	movs	r1, r3
 8029c52:	3135      	adds	r1, #53	; 0x35
 8029c54:	7809      	ldrb	r1, [r1, #0]
            multicastSlotRxConfig.RepeaterSupport = Ctx.LoRaMacClassBParams.LoRaMacParams->RepeaterSupport;
 8029c56:	3340      	adds	r3, #64	; 0x40
            multicastSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 8029c58:	7429      	strb	r1, [r5, #16]
            multicastSlotRxConfig.RepeaterSupport = Ctx.LoRaMacClassBParams.LoRaMacParams->RepeaterSupport;
 8029c5a:	781b      	ldrb	r3, [r3, #0]
            multicastSlotRxConfig.Frequency = frequency;
 8029c5c:	606a      	str	r2, [r5, #4]
            multicastSlotRxConfig.RepeaterSupport = Ctx.LoRaMacClassBParams.LoRaMacParams->RepeaterSupport;
 8029c5e:	746b      	strb	r3, [r5, #17]
            multicastSlotRxConfig.RxContinuous = false;
 8029c60:	23a0      	movs	r3, #160	; 0xa0
 8029c62:	00db      	lsls	r3, r3, #3
 8029c64:	826b      	strh	r3, [r5, #18]
            RegionRxConfig( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &multicastSlotRxConfig, ( int8_t* )&Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 8029c66:	0023      	movs	r3, r4
 8029c68:	339c      	adds	r3, #156	; 0x9c
 8029c6a:	681a      	ldr	r2, [r3, #0]
 8029c6c:	0023      	movs	r3, r4
 8029c6e:	33ac      	adds	r3, #172	; 0xac
 8029c70:	681b      	ldr	r3, [r3, #0]
 8029c72:	0029      	movs	r1, r5
 8029c74:	7818      	ldrb	r0, [r3, #0]
 8029c76:	3204      	adds	r2, #4
 8029c78:	f006 f8e4 	bl	802fe44 <RegionRxConfig>
            if( Ctx.PingSlotState == PINGSLOT_STATE_RX )
 8029c7c:	783b      	ldrb	r3, [r7, #0]
 8029c7e:	4e0f      	ldr	r6, [pc, #60]	; (8029cbc <LoRaMacClassBProcess+0x528>)
 8029c80:	2b03      	cmp	r3, #3
 8029c82:	d10c      	bne.n	8029c9e <LoRaMacClassBProcess+0x50a>
                Radio.Standby( );
 8029c84:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8029c86:	9303      	str	r3, [sp, #12]
 8029c88:	4798      	blx	r3
                Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 8029c8a:	2300      	movs	r3, #0
 8029c8c:	703b      	strb	r3, [r7, #0]
                TimerSetValue( &Ctx.PingSlotTimer, CLASSB_PING_SLOT_WINDOW );
 8029c8e:	4f0f      	ldr	r7, [pc, #60]	; (8029ccc <LoRaMacClassBProcess+0x538>)
 8029c90:	211e      	movs	r1, #30
 8029c92:	0038      	movs	r0, r7
 8029c94:	f005 fa05 	bl	802f0a2 <TimerSetValue>
                TimerStart( &Ctx.PingSlotTimer );
 8029c98:	0038      	movs	r0, r7
 8029c9a:	f7fa f8a9 	bl	8023df0 <TimerStart>
            if( multicastSlotRxConfig.RxContinuous == false )
 8029c9e:	7caa      	ldrb	r2, [r5, #18]
                Radio.Rx( 0 ); // Continuous mode
 8029ca0:	2000      	movs	r0, #0
                    Radio.Rx( Ctx.LoRaMacClassBParams.LoRaMacParams->MaxRxWindow );
 8029ca2:	6b73      	ldr	r3, [r6, #52]	; 0x34
            if( multicastSlotRxConfig.RxContinuous == false )
 8029ca4:	2a00      	cmp	r2, #0
 8029ca6:	d102      	bne.n	8029cae <LoRaMacClassBProcess+0x51a>
                Radio.Rx( Ctx.LoRaMacClassBParams.LoRaMacParams->MaxRxWindow );
 8029ca8:	34b0      	adds	r4, #176	; 0xb0
 8029caa:	6822      	ldr	r2, [r4, #0]
 8029cac:	68d0      	ldr	r0, [r2, #12]
                Radio.Rx( 0 ); // Continuous mode
 8029cae:	4798      	blx	r3
 8029cb0:	e7b0      	b.n	8029c14 <LoRaMacClassBProcess+0x480>
            Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 8029cb2:	702b      	strb	r3, [r5, #0]
            break;
 8029cb4:	e7ae      	b.n	8029c14 <LoRaMacClassBProcess+0x480>
 8029cb6:	46c0      	nop			; (mov r8, r8)
 8029cb8:	20008fe4 	.word	0x20008fe4
 8029cbc:	08031484 	.word	0x08031484
 8029cc0:	20008ef4 	.word	0x20008ef4
 8029cc4:	20008fd0 	.word	0x20008fd0
 8029cc8:	20008f6c 	.word	0x20008f6c
 8029ccc:	20008f54 	.word	0x20008f54

08029cd0 <NvmCtxCallback>:
/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
    if( CommandsNvmCtxChanged != NULL )
 8029cd0:	4b03      	ldr	r3, [pc, #12]	; (8029ce0 <NvmCtxCallback+0x10>)
{
 8029cd2:	b510      	push	{r4, lr}
    if( CommandsNvmCtxChanged != NULL )
 8029cd4:	681b      	ldr	r3, [r3, #0]
 8029cd6:	2b00      	cmp	r3, #0
 8029cd8:	d000      	beq.n	8029cdc <NvmCtxCallback+0xc>
    {
        CommandsNvmCtxChanged( );
 8029cda:	4798      	blx	r3
    }
}
 8029cdc:	bd10      	pop	{r4, pc}
 8029cde:	46c0      	nop			; (mov r8, r8)
 8029ce0:	20008ff8 	.word	0x20008ff8

08029ce4 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( LoRaMacCommandsNvmEvent commandsNvmCtxChanged )
{
 8029ce4:	b570      	push	{r4, r5, r6, lr}
    // Initialize with default
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 8029ce6:	4d06      	ldr	r5, [pc, #24]	; (8029d00 <LoRaMacCommandsInit+0x1c>)
{
 8029ce8:	0004      	movs	r4, r0
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 8029cea:	0028      	movs	r0, r5
 8029cec:	22fc      	movs	r2, #252	; 0xfc
 8029cee:	2100      	movs	r1, #0
 8029cf0:	f7fa f992 	bl	8024018 <memset1>
    list->First = NULL;
 8029cf4:	2000      	movs	r0, #0

    LinkedListInit( &NvmCtx.MacCommandList );

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 8029cf6:	4b03      	ldr	r3, [pc, #12]	; (8029d04 <LoRaMacCommandsInit+0x20>)
    list->First = NULL;
 8029cf8:	6028      	str	r0, [r5, #0]
    list->Last = NULL;
 8029cfa:	6068      	str	r0, [r5, #4]
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 8029cfc:	601c      	str	r4, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
}
 8029cfe:	bd70      	pop	{r4, r5, r6, pc}
 8029d00:	20008ffc 	.word	0x20008ffc
 8029d04:	20008ff8 	.word	0x20008ff8

08029d08 <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 8029d08:	0001      	movs	r1, r0
 8029d0a:	b510      	push	{r4, lr}
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
        return LORAMAC_COMMANDS_SUCCESS;
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8029d0c:	2001      	movs	r0, #1
    if( commandsNvmCtx != NULL )
 8029d0e:	2900      	cmp	r1, #0
 8029d10:	d004      	beq.n	8029d1c <LoRaMacCommandsRestoreNvmCtx+0x14>
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 8029d12:	4803      	ldr	r0, [pc, #12]	; (8029d20 <LoRaMacCommandsRestoreNvmCtx+0x18>)
 8029d14:	22fc      	movs	r2, #252	; 0xfc
 8029d16:	f005 fa0c 	bl	802f132 <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 8029d1a:	2000      	movs	r0, #0
    }
}
 8029d1c:	bd10      	pop	{r4, pc}
 8029d1e:	46c0      	nop			; (mov r8, r8)
 8029d20:	20008ffc 	.word	0x20008ffc

08029d24 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
    *commandsNvmCtxSize = sizeof( NvmCtx );
 8029d24:	23fc      	movs	r3, #252	; 0xfc
 8029d26:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 8029d28:	4800      	ldr	r0, [pc, #0]	; (8029d2c <LoRaMacCommandsGetNvmCtx+0x8>)
 8029d2a:	4770      	bx	lr
 8029d2c:	20008ffc 	.word	0x20008ffc

08029d30 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8029d30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8029d32:	0015      	movs	r5, r2
    if( payload == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8029d34:	2701      	movs	r7, #1
{
 8029d36:	9001      	str	r0, [sp, #4]
    if( payload == NULL )
 8029d38:	2900      	cmp	r1, #0
 8029d3a:	d03b      	beq.n	8029db4 <LoRaMacCommandsAddCmd+0x84>
 8029d3c:	2400      	movs	r4, #0
 8029d3e:	4b21      	ldr	r3, [pc, #132]	; (8029dc4 <LoRaMacCommandsAddCmd+0x94>)
    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 8029d40:	0122      	lsls	r2, r4, #4
 8029d42:	0018      	movs	r0, r3
 8029d44:	4694      	mov	ip, r2
 8029d46:	001a      	movs	r2, r3
 8029d48:	3010      	adds	r0, #16
        if( mem[size] != 0x00 )
 8029d4a:	7817      	ldrb	r7, [r2, #0]
 8029d4c:	2f00      	cmp	r7, #0
 8029d4e:	d133      	bne.n	8029db8 <LoRaMacCommandsAddCmd+0x88>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8029d50:	3201      	adds	r2, #1
 8029d52:	4282      	cmp	r2, r0
 8029d54:	d1f9      	bne.n	8029d4a <LoRaMacCommandsAddCmd+0x1a>
    if( list->First == NULL )
 8029d56:	481c      	ldr	r0, [pc, #112]	; (8029dc8 <LoRaMacCommandsAddCmd+0x98>)
 8029d58:	6802      	ldr	r2, [r0, #0]
 8029d5a:	2a00      	cmp	r2, #0
 8029d5c:	d100      	bne.n	8029d60 <LoRaMacCommandsAddCmd+0x30>
        list->First = element;
 8029d5e:	6003      	str	r3, [r0, #0]
    if( list->Last )
 8029d60:	6842      	ldr	r2, [r0, #4]
 8029d62:	2a00      	cmp	r2, #0
 8029d64:	d000      	beq.n	8029d68 <LoRaMacCommandsAddCmd+0x38>
        list->Last->Next = element;
 8029d66:	6013      	str	r3, [r2, #0]
    list->Last = element;
 8029d68:	6043      	str	r3, [r0, #4]
    element->Next = NULL;
 8029d6a:	0122      	lsls	r2, r4, #4
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 8029d6c:	9b01      	ldr	r3, [sp, #4]
    element->Next = NULL;
 8029d6e:	1882      	adds	r2, r0, r2
    newCmd->PayloadSize = payloadSize;
 8029d70:	3401      	adds	r4, #1
    newCmd->CID = cid;
 8029d72:	7313      	strb	r3, [r2, #12]
    newCmd->PayloadSize = payloadSize;
 8029d74:	0123      	lsls	r3, r4, #4
 8029d76:	50c5      	str	r5, [r0, r3]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8029d78:	4663      	mov	r3, ip
    element->Next = NULL;
 8029d7a:	2600      	movs	r6, #0
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8029d7c:	330d      	adds	r3, #13
    element->Next = NULL;
 8029d7e:	6096      	str	r6, [r2, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8029d80:	18c0      	adds	r0, r0, r3
 8029d82:	b2aa      	uxth	r2, r5
 8029d84:	f005 f9d5 	bl	802f132 <memcpy1>
    switch( cid )
 8029d88:	9b01      	ldr	r3, [sp, #4]
            return true;
 8029d8a:	2201      	movs	r2, #1
    switch( cid )
 8029d8c:	2b05      	cmp	r3, #5
 8029d8e:	d006      	beq.n	8029d9e <LoRaMacCommandsAddCmd+0x6e>
 8029d90:	0018      	movs	r0, r3
 8029d92:	2302      	movs	r3, #2
 8029d94:	3808      	subs	r0, #8
 8029d96:	b2c0      	uxtb	r0, r0
 8029d98:	4283      	cmp	r3, r0
 8029d9a:	4176      	adcs	r6, r6
 8029d9c:	b2f2      	uxtb	r2, r6
    newCmd->IsSticky = IsSticky( cid );
 8029d9e:	4b0a      	ldr	r3, [pc, #40]	; (8029dc8 <LoRaMacCommandsAddCmd+0x98>)
 8029da0:	0124      	lsls	r4, r4, #4
 8029da2:	191c      	adds	r4, r3, r4

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8029da4:	33f8      	adds	r3, #248	; 0xf8
    newCmd->IsSticky = IsSticky( cid );
 8029da6:	7122      	strb	r2, [r4, #4]
    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8029da8:	681a      	ldr	r2, [r3, #0]
 8029daa:	3201      	adds	r2, #1
 8029dac:	1955      	adds	r5, r2, r5
 8029dae:	601d      	str	r5, [r3, #0]

    NvmCtxCallback( );
 8029db0:	f7ff ff8e 	bl	8029cd0 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 8029db4:	0038      	movs	r0, r7
 8029db6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( itr == NUM_OF_MAC_COMMANDS )
 8029db8:	3401      	adds	r4, #1
 8029dba:	0003      	movs	r3, r0
 8029dbc:	2c0f      	cmp	r4, #15
 8029dbe:	d1bf      	bne.n	8029d40 <LoRaMacCommandsAddCmd+0x10>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8029dc0:	2702      	movs	r7, #2
 8029dc2:	e7f7      	b.n	8029db4 <LoRaMacCommandsAddCmd+0x84>
 8029dc4:	20009004 	.word	0x20009004
 8029dc8:	20008ffc 	.word	0x20008ffc

08029dcc <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8029dcc:	b510      	push	{r4, lr}
    if( macCmd == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8029dce:	2401      	movs	r4, #1
    if( macCmd == NULL )
 8029dd0:	2800      	cmp	r0, #0
 8029dd2:	d023      	beq.n	8029e1c <LoRaMacCommandsRemoveCmd+0x50>
    curElement = list->First;
 8029dd4:	4b12      	ldr	r3, [pc, #72]	; (8029e20 <LoRaMacCommandsRemoveCmd+0x54>)
 8029dd6:	681a      	ldr	r2, [r3, #0]
    if( element != curElement )
 8029dd8:	4290      	cmp	r0, r2
 8029dda:	d104      	bne.n	8029de6 <LoRaMacCommandsRemoveCmd+0x1a>
        list->First = element->Next;
 8029ddc:	6802      	ldr	r2, [r0, #0]
 8029dde:	601a      	str	r2, [r3, #0]
 8029de0:	2200      	movs	r2, #0
 8029de2:	e005      	b.n	8029df0 <LoRaMacCommandsRemoveCmd+0x24>
 8029de4:	000a      	movs	r2, r1
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8029de6:	2a00      	cmp	r2, #0
 8029de8:	d002      	beq.n	8029df0 <LoRaMacCommandsRemoveCmd+0x24>
 8029dea:	6811      	ldr	r1, [r2, #0]
 8029dec:	4288      	cmp	r0, r1
 8029dee:	d1f9      	bne.n	8029de4 <LoRaMacCommandsRemoveCmd+0x18>
    if( list->Last == element )
 8029df0:	6859      	ldr	r1, [r3, #4]
 8029df2:	4288      	cmp	r0, r1
 8029df4:	d100      	bne.n	8029df8 <LoRaMacCommandsRemoveCmd+0x2c>
        list->Last = PrevElement;
 8029df6:	605a      	str	r2, [r3, #4]
    if( PrevElement != NULL )
 8029df8:	2a00      	cmp	r2, #0
 8029dfa:	d001      	beq.n	8029e00 <LoRaMacCommandsRemoveCmd+0x34>
        PrevElement->Next = element->Next;
 8029dfc:	6801      	ldr	r1, [r0, #0]
 8029dfe:	6011      	str	r1, [r2, #0]
    element->Next = NULL;
 8029e00:	2400      	movs	r4, #0
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8029e02:	33f8      	adds	r3, #248	; 0xf8
 8029e04:	681a      	ldr	r2, [r3, #0]
 8029e06:	6881      	ldr	r1, [r0, #8]
 8029e08:	3a01      	subs	r2, #1
 8029e0a:	1a52      	subs	r2, r2, r1
    element->Next = NULL;
 8029e0c:	6004      	str	r4, [r0, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8029e0e:	0021      	movs	r1, r4
    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8029e10:	601a      	str	r2, [r3, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8029e12:	2210      	movs	r2, #16
 8029e14:	f7fa f900 	bl	8024018 <memset1>
    if( FreeMacCommandSlot( macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    NvmCtxCallback( );
 8029e18:	f7ff ff5a 	bl	8029cd0 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 8029e1c:	0020      	movs	r0, r4
 8029e1e:	bd10      	pop	{r4, pc}
 8029e20:	20008ffc 	.word	0x20008ffc

08029e24 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 8029e24:	4b08      	ldr	r3, [pc, #32]	; (8029e48 <LoRaMacCommandsRemoveNoneStickyCmds+0x24>)
{
 8029e26:	b570      	push	{r4, r5, r6, lr}
    curElement = NvmCtx.MacCommandList.First;
 8029e28:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8029e2a:	2c00      	cmp	r4, #0
 8029e2c:	d103      	bne.n	8029e36 <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
        {
            curElement = curElement->Next;
        }
    }

    NvmCtxCallback( );
 8029e2e:	f7ff ff4f 	bl	8029cd0 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 8029e32:	0020      	movs	r0, r4
 8029e34:	bd70      	pop	{r4, r5, r6, pc}
        if( curElement->IsSticky == false )
 8029e36:	7b23      	ldrb	r3, [r4, #12]
            nexElement = curElement->Next;
 8029e38:	6825      	ldr	r5, [r4, #0]
        if( curElement->IsSticky == false )
 8029e3a:	2b00      	cmp	r3, #0
 8029e3c:	d102      	bne.n	8029e44 <LoRaMacCommandsRemoveNoneStickyCmds+0x20>
            LoRaMacCommandsRemoveCmd( curElement );
 8029e3e:	0020      	movs	r0, r4
 8029e40:	f7ff ffc4 	bl	8029dcc <LoRaMacCommandsRemoveCmd>
{
 8029e44:	002c      	movs	r4, r5
 8029e46:	e7f0      	b.n	8029e2a <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
 8029e48:	20008ffc 	.word	0x20008ffc

08029e4c <LoRaMacCommandsRemoveStickyAnsCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 8029e4c:	4b0a      	ldr	r3, [pc, #40]	; (8029e78 <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>)
{
 8029e4e:	b570      	push	{r4, r5, r6, lr}
    curElement = NvmCtx.MacCommandList.First;
 8029e50:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8029e52:	2c00      	cmp	r4, #0
 8029e54:	d103      	bne.n	8029e5e <LoRaMacCommandsRemoveStickyAnsCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
        }
        curElement = nexElement;
    }

    NvmCtxCallback( );
 8029e56:	f7ff ff3b 	bl	8029cd0 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 8029e5a:	0020      	movs	r0, r4
 8029e5c:	bd70      	pop	{r4, r5, r6, pc}
        if( IsSticky( curElement->CID ) == true )
 8029e5e:	7923      	ldrb	r3, [r4, #4]
        nexElement = curElement->Next;
 8029e60:	6825      	ldr	r5, [r4, #0]
    switch( cid )
 8029e62:	2b05      	cmp	r3, #5
 8029e64:	d002      	beq.n	8029e6c <LoRaMacCommandsRemoveStickyAnsCmds+0x20>
 8029e66:	3b08      	subs	r3, #8
 8029e68:	2b02      	cmp	r3, #2
 8029e6a:	d802      	bhi.n	8029e72 <LoRaMacCommandsRemoveStickyAnsCmds+0x26>
            LoRaMacCommandsRemoveCmd( curElement );
 8029e6c:	0020      	movs	r0, r4
 8029e6e:	f7ff ffad 	bl	8029dcc <LoRaMacCommandsRemoveCmd>
{
 8029e72:	002c      	movs	r4, r5
 8029e74:	e7ed      	b.n	8029e52 <LoRaMacCommandsRemoveStickyAnsCmds+0x6>
 8029e76:	46c0      	nop			; (mov r8, r8)
 8029e78:	20008ffc 	.word	0x20008ffc

08029e7c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8029e7c:	0003      	movs	r3, r0
    if( size == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8029e7e:	2001      	movs	r0, #1
    if( size == NULL )
 8029e80:	2b00      	cmp	r3, #0
 8029e82:	d004      	beq.n	8029e8e <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    }
    *size = NvmCtx.SerializedCmdsSize;
    return LORAMAC_COMMANDS_SUCCESS;
 8029e84:	2000      	movs	r0, #0
    *size = NvmCtx.SerializedCmdsSize;
 8029e86:	4a02      	ldr	r2, [pc, #8]	; (8029e90 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 8029e88:	32f8      	adds	r2, #248	; 0xf8
 8029e8a:	6812      	ldr	r2, [r2, #0]
 8029e8c:	601a      	str	r2, [r3, #0]
}
 8029e8e:	4770      	bx	lr
 8029e90:	20008ffc 	.word	0x20008ffc

08029e94 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8029e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8029e96:	000f      	movs	r7, r1
 8029e98:	9001      	str	r0, [sp, #4]
 8029e9a:	0016      	movs	r6, r2
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8029e9c:	2001      	movs	r0, #1
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8029e9e:	2a00      	cmp	r2, #0
 8029ea0:	d00a      	beq.n	8029eb8 <LoRaMacCommandsSerializeCmds+0x24>
 8029ea2:	2900      	cmp	r1, #0
 8029ea4:	d008      	beq.n	8029eb8 <LoRaMacCommandsSerializeCmds+0x24>
    MacCommand_t* curElement = NvmCtx.MacCommandList.First;
 8029ea6:	4b13      	ldr	r3, [pc, #76]	; (8029ef4 <LoRaMacCommandsSerializeCmds+0x60>)
 8029ea8:	681c      	ldr	r4, [r3, #0]
    uint8_t itr = 0;
 8029eaa:	2300      	movs	r3, #0
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 8029eac:	2c00      	cmp	r4, #0
 8029eae:	d104      	bne.n	8029eba <LoRaMacCommandsSerializeCmds+0x26>
        LoRaMacCommandsRemoveCmd( curElement );
        curElement = nextElement;
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8029eb0:	0038      	movs	r0, r7
 8029eb2:	f7ff ffe3 	bl	8029e7c <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8029eb6:	2000      	movs	r0, #0
}
 8029eb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8029eba:	9a01      	ldr	r2, [sp, #4]
 8029ebc:	1ad1      	subs	r1, r2, r3
 8029ebe:	68a2      	ldr	r2, [r4, #8]
 8029ec0:	3201      	adds	r2, #1
 8029ec2:	4291      	cmp	r1, r2
 8029ec4:	d30e      	bcc.n	8029ee4 <LoRaMacCommandsSerializeCmds+0x50>
            buffer[itr++] = curElement->CID;
 8029ec6:	7922      	ldrb	r2, [r4, #4]
 8029ec8:	1c5d      	adds	r5, r3, #1
 8029eca:	54f2      	strb	r2, [r6, r3]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8029ecc:	68a3      	ldr	r3, [r4, #8]
            buffer[itr++] = curElement->CID;
 8029ece:	b2ed      	uxtb	r5, r5
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8029ed0:	b29a      	uxth	r2, r3
 8029ed2:	1d61      	adds	r1, r4, #5
 8029ed4:	1970      	adds	r0, r6, r5
 8029ed6:	f005 f92c 	bl	802f132 <memcpy1>
            itr += curElement->PayloadSize;
 8029eda:	68a3      	ldr	r3, [r4, #8]
        curElement = curElement->Next;
 8029edc:	6824      	ldr	r4, [r4, #0]
            itr += curElement->PayloadSize;
 8029ede:	18ed      	adds	r5, r5, r3
 8029ee0:	b2eb      	uxtb	r3, r5
        curElement = curElement->Next;
 8029ee2:	e7e3      	b.n	8029eac <LoRaMacCommandsSerializeCmds+0x18>
        nextElement = curElement->Next;
 8029ee4:	0020      	movs	r0, r4
 8029ee6:	6824      	ldr	r4, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 8029ee8:	f7ff ff70 	bl	8029dcc <LoRaMacCommandsRemoveCmd>
    while( curElement != NULL )
 8029eec:	2c00      	cmp	r4, #0
 8029eee:	d1f9      	bne.n	8029ee4 <LoRaMacCommandsSerializeCmds+0x50>
 8029ef0:	e7de      	b.n	8029eb0 <LoRaMacCommandsSerializeCmds+0x1c>
 8029ef2:	46c0      	nop			; (mov r8, r8)
 8029ef4:	20008ffc 	.word	0x20008ffc

08029ef8 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8029ef8:	0003      	movs	r3, r0
    if( cmdsPending == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8029efa:	2001      	movs	r0, #1
    if( cmdsPending == NULL )
 8029efc:	2b00      	cmp	r3, #0
 8029efe:	d00b      	beq.n	8029f18 <LoRaMacCommandsStickyCmdsPending+0x20>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 8029f00:	4a07      	ldr	r2, [pc, #28]	; (8029f20 <LoRaMacCommandsStickyCmdsPending+0x28>)
 8029f02:	6810      	ldr	r0, [r2, #0]

    *cmdsPending = false;
 8029f04:	2200      	movs	r2, #0
 8029f06:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8029f08:	2800      	cmp	r0, #0
 8029f0a:	d005      	beq.n	8029f18 <LoRaMacCommandsStickyCmdsPending+0x20>
    {
        if( curElement->IsSticky == true )
 8029f0c:	7b02      	ldrb	r2, [r0, #12]
 8029f0e:	2a00      	cmp	r2, #0
 8029f10:	d003      	beq.n	8029f1a <LoRaMacCommandsStickyCmdsPending+0x22>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8029f12:	2201      	movs	r2, #1
            return LORAMAC_COMMANDS_SUCCESS;
 8029f14:	2000      	movs	r0, #0
            *cmdsPending = true;
 8029f16:	701a      	strb	r2, [r3, #0]
        }
        curElement = curElement->Next;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 8029f18:	4770      	bx	lr
        curElement = curElement->Next;
 8029f1a:	6800      	ldr	r0, [r0, #0]
 8029f1c:	e7f4      	b.n	8029f08 <LoRaMacCommandsStickyCmdsPending+0x10>
 8029f1e:	46c0      	nop			; (mov r8, r8)
 8029f20:	20008ffc 	.word	0x20008ffc

08029f24 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 8029f24:	3802      	subs	r0, #2
 8029f26:	b2c3      	uxtb	r3, r0
{
 8029f28:	2000      	movs	r0, #0
 8029f2a:	2b11      	cmp	r3, #17
 8029f2c:	d801      	bhi.n	8029f32 <LoRaMacCommandsGetCmdSize+0xe>
 8029f2e:	4a01      	ldr	r2, [pc, #4]	; (8029f34 <LoRaMacCommandsGetCmdSize+0x10>)
 8029f30:	5cd0      	ldrb	r0, [r2, r3]
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 8029f32:	4770      	bx	lr
 8029f34:	08031df7 	.word	0x08031df7

08029f38 <GetElement.constprop.0>:
        return true;
    }
    return false;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 8029f38:	b570      	push	{r4, r5, r6, lr}
{
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8029f3a:	4b0d      	ldr	r3, [pc, #52]	; (8029f70 <GetElement.constprop.0+0x38>)
static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 8029f3c:	0004      	movs	r4, r0
 8029f3e:	0008      	movs	r0, r1
    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8029f40:	6919      	ldr	r1, [r3, #16]
 8029f42:	7d0a      	ldrb	r2, [r1, #20]
    if( count == 0 )
 8029f44:	2a00      	cmp	r2, #0
 8029f46:	d010      	beq.n	8029f6a <GetElement.constprop.0+0x32>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8029f48:	000d      	movs	r5, r1
 8029f4a:	2300      	movs	r3, #0
 8029f4c:	3510      	adds	r5, #16
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
    {
        if( element->Request == request )
 8029f4e:	7806      	ldrb	r6, [r0, #0]
 8029f50:	42a6      	cmp	r6, r4
 8029f52:	d007      	beq.n	8029f64 <GetElement.constprop.0+0x2c>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8029f54:	42a8      	cmp	r0, r5
 8029f56:	d106      	bne.n	8029f66 <GetElement.constprop.0+0x2e>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8029f58:	0008      	movs	r0, r1
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
 8029f5a:	3301      	adds	r3, #1
 8029f5c:	b2db      	uxtb	r3, r3
 8029f5e:	429a      	cmp	r2, r3
 8029f60:	d1f5      	bne.n	8029f4e <GetElement.constprop.0+0x16>
        return NULL;
 8029f62:	2000      	movs	r0, #0
        }
        element = IncreaseBufferPointer( element );
    }

    return NULL;
}
 8029f64:	bd70      	pop	{r4, r5, r6, pc}
        bufferPointer++;
 8029f66:	3004      	adds	r0, #4
 8029f68:	e7f7      	b.n	8029f5a <GetElement.constprop.0+0x22>
        return NULL;
 8029f6a:	0010      	movs	r0, r2
 8029f6c:	e7fa      	b.n	8029f64 <GetElement.constprop.0+0x2c>
 8029f6e:	46c0      	nop			; (mov r8, r8)
 8029f70:	200090f8 	.word	0x200090f8

08029f74 <LoRaMacConfirmQueueInit>:

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 8029f74:	2300      	movs	r3, #0
{
 8029f76:	b570      	push	{r4, r5, r6, lr}
    ConfirmQueueCtx.Primitives = primitives;
 8029f78:	4c08      	ldr	r4, [pc, #32]	; (8029f9c <LoRaMacConfirmQueueInit+0x28>)
{
 8029f7a:	000d      	movs	r5, r1
    ConfirmQueueCtx.Primitives = primitives;
 8029f7c:	6020      	str	r0, [r4, #0]
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 8029f7e:	4808      	ldr	r0, [pc, #32]	; (8029fa0 <LoRaMacConfirmQueueInit+0x2c>)

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 8029f80:	2214      	movs	r2, #20
 8029f82:	21ff      	movs	r1, #255	; 0xff
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 8029f84:	7503      	strb	r3, [r0, #20]
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 8029f86:	6120      	str	r0, [r4, #16]
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8029f88:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8029f8a:	60a0      	str	r0, [r4, #8]
    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 8029f8c:	f7fa f844 	bl	8024018 <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8029f90:	2301      	movs	r3, #1
 8029f92:	6922      	ldr	r2, [r4, #16]

    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
 8029f94:	60e5      	str	r5, [r4, #12]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8029f96:	7553      	strb	r3, [r2, #21]
}
 8029f98:	bd70      	pop	{r4, r5, r6, pc}
 8029f9a:	46c0      	nop			; (mov r8, r8)
 8029f9c:	200090f8 	.word	0x200090f8
 8029fa0:	20009a10 	.word	0x20009a10

08029fa4 <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 8029fa4:	0001      	movs	r1, r0
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
        return true;
    }
    else
    {
        return false;
 8029fa6:	2000      	movs	r0, #0
{
 8029fa8:	b510      	push	{r4, lr}
    if( confirmQueueNvmCtx != NULL )
 8029faa:	4281      	cmp	r1, r0
 8029fac:	d004      	beq.n	8029fb8 <LoRaMacConfirmQueueRestoreNvmCtx+0x14>
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 8029fae:	4803      	ldr	r0, [pc, #12]	; (8029fbc <LoRaMacConfirmQueueRestoreNvmCtx+0x18>)
 8029fb0:	2216      	movs	r2, #22
 8029fb2:	f005 f8be 	bl	802f132 <memcpy1>
        return true;
 8029fb6:	2001      	movs	r0, #1
    }
}
 8029fb8:	bd10      	pop	{r4, pc}
 8029fba:	46c0      	nop			; (mov r8, r8)
 8029fbc:	20009a10 	.word	0x20009a10

08029fc0 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 8029fc0:	2316      	movs	r3, #22
 8029fc2:	6003      	str	r3, [r0, #0]
    return &ConfirmQueueNvmCtx;
}
 8029fc4:	4800      	ldr	r0, [pc, #0]	; (8029fc8 <LoRaMacConfirmQueueGetNvmCtx+0x8>)
 8029fc6:	4770      	bx	lr
 8029fc8:	20009a10 	.word	0x20009a10

08029fcc <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8029fcc:	b530      	push	{r4, r5, lr}
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8029fce:	4d0d      	ldr	r5, [pc, #52]	; (802a004 <LoRaMacConfirmQueueAdd+0x38>)
{
 8029fd0:	0002      	movs	r2, r0
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8029fd2:	6929      	ldr	r1, [r5, #16]
    {
        // Protect the buffer against overwrites
        return false;
 8029fd4:	2000      	movs	r0, #0
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8029fd6:	7d0c      	ldrb	r4, [r1, #20]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8029fd8:	2c04      	cmp	r4, #4
 8029fda:	d812      	bhi.n	802a002 <LoRaMacConfirmQueueAdd+0x36>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8029fdc:	7810      	ldrb	r0, [r2, #0]
 8029fde:	68ab      	ldr	r3, [r5, #8]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 8029fe0:	3401      	adds	r4, #1
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8029fe2:	7018      	strb	r0, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8029fe4:	7850      	ldrb	r0, [r2, #1]
 8029fe6:	7058      	strb	r0, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8029fe8:	78d2      	ldrb	r2, [r2, #3]
        bufferPointer++;
 8029fea:	1d18      	adds	r0, r3, #4
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8029fec:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8029fee:	2200      	movs	r2, #0
 8029ff0:	709a      	strb	r2, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8029ff2:	000a      	movs	r2, r1
 8029ff4:	3210      	adds	r2, #16
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 8029ff6:	750c      	strb	r4, [r1, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8029ff8:	4293      	cmp	r3, r2
 8029ffa:	d100      	bne.n	8029ffe <LoRaMacConfirmQueueAdd+0x32>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8029ffc:	0008      	movs	r0, r1
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8029ffe:	60a8      	str	r0, [r5, #8]

    return true;
 802a000:	2001      	movs	r0, #1
}
 802a002:	bd30      	pop	{r4, r5, pc}
 802a004:	200090f8 	.word	0x200090f8

0802a008 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 802a008:	b510      	push	{r4, lr}
    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 802a00a:	4908      	ldr	r1, [pc, #32]	; (802a02c <LoRaMacConfirmQueueRemoveFirst+0x24>)
 802a00c:	690a      	ldr	r2, [r1, #16]
 802a00e:	7d13      	ldrb	r3, [r2, #20]
    {
        return false;
 802a010:	1e18      	subs	r0, r3, #0
    if( count == 0 )
 802a012:	d00a      	beq.n	802a02a <LoRaMacConfirmQueueRemoveFirst+0x22>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 802a014:	3b01      	subs	r3, #1
 802a016:	7513      	strb	r3, [r2, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 802a018:	0013      	movs	r3, r2
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 802a01a:	684c      	ldr	r4, [r1, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 802a01c:	3310      	adds	r3, #16
        bufferPointer++;
 802a01e:	1d20      	adds	r0, r4, #4
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 802a020:	429c      	cmp	r4, r3
 802a022:	d100      	bne.n	802a026 <LoRaMacConfirmQueueRemoveFirst+0x1e>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 802a024:	0010      	movs	r0, r2
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 802a026:	6048      	str	r0, [r1, #4]

    return true;
 802a028:	2001      	movs	r0, #1
}
 802a02a:	bd10      	pop	{r4, pc}
 802a02c:	200090f8 	.word	0x200090f8

0802a030 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 802a030:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 802a032:	4b08      	ldr	r3, [pc, #32]	; (802a054 <LoRaMacConfirmQueueSetStatus+0x24>)
{
 802a034:	0004      	movs	r4, r0
    if( count == 0 )
 802a036:	691a      	ldr	r2, [r3, #16]
{
 802a038:	0008      	movs	r0, r1
    if( count == 0 )
 802a03a:	7d12      	ldrb	r2, [r2, #20]
 802a03c:	2a00      	cmp	r2, #0
 802a03e:	d007      	beq.n	802a050 <LoRaMacConfirmQueueSetStatus+0x20>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 802a040:	6859      	ldr	r1, [r3, #4]
 802a042:	f7ff ff79 	bl	8029f38 <GetElement.constprop.0>
        if( element != NULL )
 802a046:	2800      	cmp	r0, #0
 802a048:	d002      	beq.n	802a050 <LoRaMacConfirmQueueSetStatus+0x20>
        {
            element->Status = status;
            element->ReadyToHandle = true;
 802a04a:	2301      	movs	r3, #1
            element->Status = status;
 802a04c:	7044      	strb	r4, [r0, #1]
            element->ReadyToHandle = true;
 802a04e:	7083      	strb	r3, [r0, #2]
        }
    }
}
 802a050:	bd10      	pop	{r4, pc}
 802a052:	46c0      	nop			; (mov r8, r8)
 802a054:	200090f8 	.word	0x200090f8

0802a058 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 802a058:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 802a05a:	4b07      	ldr	r3, [pc, #28]	; (802a078 <LoRaMacConfirmQueueGetStatus+0x20>)
    if( count == 0 )
 802a05c:	691a      	ldr	r2, [r3, #16]
 802a05e:	7d11      	ldrb	r1, [r2, #20]
        if( element != NULL )
        {
            return element->Status;
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 802a060:	2201      	movs	r2, #1
    if( count == 0 )
 802a062:	2900      	cmp	r1, #0
 802a064:	d006      	beq.n	802a074 <LoRaMacConfirmQueueGetStatus+0x1c>
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 802a066:	6859      	ldr	r1, [r3, #4]
 802a068:	f7ff ff66 	bl	8029f38 <GetElement.constprop.0>
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 802a06c:	2201      	movs	r2, #1
        if( element != NULL )
 802a06e:	2800      	cmp	r0, #0
 802a070:	d000      	beq.n	802a074 <LoRaMacConfirmQueueGetStatus+0x1c>
            return element->Status;
 802a072:	7842      	ldrb	r2, [r0, #1]
}
 802a074:	0010      	movs	r0, r2
 802a076:	bd10      	pop	{r4, pc}
 802a078:	200090f8 	.word	0x200090f8

0802a07c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 802a07c:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 802a07e:	490c      	ldr	r1, [pc, #48]	; (802a0b0 <LoRaMacConfirmQueueSetStatusCmn+0x34>)

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 802a080:	690a      	ldr	r2, [r1, #16]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 802a082:	684b      	ldr	r3, [r1, #4]
    if( count == 0 )
 802a084:	7d14      	ldrb	r4, [r2, #20]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 802a086:	7550      	strb	r0, [r2, #21]
    if( count == 0 )
 802a088:	2c00      	cmp	r4, #0
 802a08a:	d00d      	beq.n	802a0a8 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 802a08c:	0014      	movs	r4, r2
            element->Status = status;
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
 802a08e:	2501      	movs	r5, #1
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 802a090:	6889      	ldr	r1, [r1, #8]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 802a092:	3410      	adds	r4, #16
            if( element->RestrictCommonReadyToHandle == false )
 802a094:	78de      	ldrb	r6, [r3, #3]
            element->Status = status;
 802a096:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 802a098:	2e00      	cmp	r6, #0
 802a09a:	d100      	bne.n	802a09e <LoRaMacConfirmQueueSetStatusCmn+0x22>
                element->ReadyToHandle = true;
 802a09c:	709d      	strb	r5, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 802a09e:	42a3      	cmp	r3, r4
 802a0a0:	d103      	bne.n	802a0aa <LoRaMacConfirmQueueSetStatusCmn+0x2e>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 802a0a2:	0013      	movs	r3, r2
        }while( element != ConfirmQueueCtx.BufferEnd );
 802a0a4:	4299      	cmp	r1, r3
 802a0a6:	d1f5      	bne.n	802a094 <LoRaMacConfirmQueueSetStatusCmn+0x18>
    }
}
 802a0a8:	bd70      	pop	{r4, r5, r6, pc}
        bufferPointer++;
 802a0aa:	3304      	adds	r3, #4
 802a0ac:	e7fa      	b.n	802a0a4 <LoRaMacConfirmQueueSetStatusCmn+0x28>
 802a0ae:	46c0      	nop			; (mov r8, r8)
 802a0b0:	200090f8 	.word	0x200090f8

0802a0b4 <LoRaMacConfirmQueueIsCmdActive>:
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 802a0b4:	4b04      	ldr	r3, [pc, #16]	; (802a0c8 <LoRaMacConfirmQueueIsCmdActive+0x14>)
{
 802a0b6:	b510      	push	{r4, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 802a0b8:	6859      	ldr	r1, [r3, #4]
 802a0ba:	f7ff ff3d 	bl	8029f38 <GetElement.constprop.0>
 802a0be:	1e43      	subs	r3, r0, #1
 802a0c0:	4198      	sbcs	r0, r3
    {
        return true;
    }
    return false;
}
 802a0c2:	b2c0      	uxtb	r0, r0
 802a0c4:	bd10      	pop	{r4, pc}
 802a0c6:	46c0      	nop			; (mov r8, r8)
 802a0c8:	200090f8 	.word	0x200090f8

0802a0cc <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 802a0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a0ce:	0005      	movs	r5, r0
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 802a0d0:	2400      	movs	r4, #0
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 802a0d2:	4e13      	ldr	r6, [pc, #76]	; (802a120 <LoRaMacConfirmQueueHandleCb+0x54>)
{
 802a0d4:	b085      	sub	sp, #20
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 802a0d6:	6933      	ldr	r3, [r6, #16]
 802a0d8:	7d1b      	ldrb	r3, [r3, #20]
 802a0da:	9301      	str	r3, [sp, #4]
    for( uint8_t i = 0; i < nbElements; i++ )
 802a0dc:	9b01      	ldr	r3, [sp, #4]
 802a0de:	429c      	cmp	r4, r3
 802a0e0:	d101      	bne.n	802a0e6 <LoRaMacConfirmQueueHandleCb+0x1a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
 802a0e2:	b005      	add	sp, #20
 802a0e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 802a0e6:	6873      	ldr	r3, [r6, #4]
 802a0e8:	7818      	ldrb	r0, [r3, #0]
 802a0ea:	7028      	strb	r0, [r5, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 802a0ec:	7859      	ldrb	r1, [r3, #1]
 802a0ee:	7069      	strb	r1, [r5, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 802a0f0:	789f      	ldrb	r7, [r3, #2]
        if( readyToHandle == true )
 802a0f2:	2f00      	cmp	r7, #0
 802a0f4:	d00d      	beq.n	802a112 <LoRaMacConfirmQueueHandleCb+0x46>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 802a0f6:	6833      	ldr	r3, [r6, #0]
 802a0f8:	0028      	movs	r0, r5
 802a0fa:	689b      	ldr	r3, [r3, #8]
 802a0fc:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
 802a0fe:	f7ff ff83 	bl	802a008 <LoRaMacConfirmQueueRemoveFirst>
        if( readyToHandle == false )
 802a102:	2f00      	cmp	r7, #0
 802a104:	d102      	bne.n	802a10c <LoRaMacConfirmQueueHandleCb+0x40>
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 802a106:	a803      	add	r0, sp, #12
 802a108:	f7ff ff60 	bl	8029fcc <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 802a10c:	3401      	adds	r4, #1
 802a10e:	b2e4      	uxtb	r4, r4
 802a110:	e7e4      	b.n	802a0dc <LoRaMacConfirmQueueHandleCb+0x10>
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 802a112:	aa03      	add	r2, sp, #12
 802a114:	7010      	strb	r0, [r2, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 802a116:	7051      	strb	r1, [r2, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 802a118:	78db      	ldrb	r3, [r3, #3]
 802a11a:	70d3      	strb	r3, [r2, #3]
 802a11c:	e7ef      	b.n	802a0fe <LoRaMacConfirmQueueHandleCb+0x32>
 802a11e:	46c0      	nop			; (mov r8, r8)
 802a120:	200090f8 	.word	0x200090f8

0802a124 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 802a124:	4b01      	ldr	r3, [pc, #4]	; (802a12c <LoRaMacConfirmQueueGetCnt+0x8>)
 802a126:	691b      	ldr	r3, [r3, #16]
 802a128:	7d18      	ldrb	r0, [r3, #20]
}
 802a12a:	4770      	bx	lr
 802a12c:	200090f8 	.word	0x200090f8

0802a130 <LoRaMacConfirmQueueIsFull>:
    }
    else
    {
        return false;
    }
}
 802a130:	2004      	movs	r0, #4
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 802a132:	4b03      	ldr	r3, [pc, #12]	; (802a140 <LoRaMacConfirmQueueIsFull+0x10>)
 802a134:	691b      	ldr	r3, [r3, #16]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 802a136:	7d1b      	ldrb	r3, [r3, #20]
}
 802a138:	4298      	cmp	r0, r3
 802a13a:	4180      	sbcs	r0, r0
 802a13c:	4240      	negs	r0, r0
 802a13e:	4770      	bx	lr
 802a140:	200090f8 	.word	0x200090f8

0802a144 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* netID, uint8_t* devNonce )
{
 802a144:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a146:	0004      	movs	r4, r0
 802a148:	000f      	movs	r7, r1
 802a14a:	0016      	movs	r6, r2
 802a14c:	001d      	movs	r5, r3
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 802a14e:	200a      	movs	r0, #10
{
 802a150:	b085      	sub	sp, #20
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 802a152:	2900      	cmp	r1, #0
 802a154:	d028      	beq.n	802a1a8 <DeriveSessionKey10x+0x64>
 802a156:	2a00      	cmp	r2, #0
 802a158:	d026      	beq.n	802a1a8 <DeriveSessionKey10x+0x64>
 802a15a:	2b00      	cmp	r3, #0
 802a15c:	d024      	beq.n	802a1a8 <DeriveSessionKey10x+0x64>
    }

    uint8_t compBase[16] = { 0 };
 802a15e:	2100      	movs	r1, #0
 802a160:	220c      	movs	r2, #12
 802a162:	a801      	add	r0, sp, #4
 802a164:	9100      	str	r1, [sp, #0]
 802a166:	f006 fe04 	bl	8030d72 <memset>

    switch( keyID )
 802a16a:	466a      	mov	r2, sp
 802a16c:	1e63      	subs	r3, r4, #1
 802a16e:	7013      	strb	r3, [r2, #0]
            break;
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }

    memcpy1( compBase + 1, joinNonce, 3 );
 802a170:	466b      	mov	r3, sp
 802a172:	2203      	movs	r2, #3
 802a174:	1c58      	adds	r0, r3, #1
 802a176:	0039      	movs	r1, r7
 802a178:	f004 ffdb 	bl	802f132 <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 802a17c:	2203      	movs	r2, #3
 802a17e:	0031      	movs	r1, r6
 802a180:	a801      	add	r0, sp, #4
 802a182:	f004 ffd6 	bl	802f132 <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 802a186:	466b      	mov	r3, sp
 802a188:	2202      	movs	r2, #2
 802a18a:	1dd8      	adds	r0, r3, #7
 802a18c:	0029      	movs	r1, r5
 802a18e:	f004 ffd0 	bl	802f132 <memcpy1>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 802a192:	4b06      	ldr	r3, [pc, #24]	; (802a1ac <DeriveSessionKey10x+0x68>)
 802a194:	2201      	movs	r2, #1
 802a196:	6818      	ldr	r0, [r3, #0]
 802a198:	4669      	mov	r1, sp
 802a19a:	0023      	movs	r3, r4
 802a19c:	6800      	ldr	r0, [r0, #0]
 802a19e:	f005 fa40 	bl	802f622 <SecureElementDeriveAndStoreKey>
 802a1a2:	2800      	cmp	r0, #0
 802a1a4:	d000      	beq.n	802a1a8 <DeriveSessionKey10x+0x64>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 802a1a6:	200f      	movs	r0, #15
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 802a1a8:	b005      	add	sp, #20
 802a1aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a1ac:	2000910c 	.word	0x2000910c

0802a1b0 <LoRaMacCryptoDeriveMcKEKey.part.0>:
    }

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
 802a1b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 802a1b2:	2100      	movs	r1, #0
 802a1b4:	220c      	movs	r2, #12
 802a1b6:	a801      	add	r0, sp, #4
 802a1b8:	9100      	str	r1, [sp, #0]
 802a1ba:	f006 fdda 	bl	8030d72 <memset>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 802a1be:	4b06      	ldr	r3, [pc, #24]	; (802a1d8 <LoRaMacCryptoDeriveMcKEKey.part.0+0x28>)
 802a1c0:	2204      	movs	r2, #4
 802a1c2:	6818      	ldr	r0, [r3, #0]
 802a1c4:	4669      	mov	r1, sp
 802a1c6:	237f      	movs	r3, #127	; 0x7f
 802a1c8:	6800      	ldr	r0, [r0, #0]
 802a1ca:	f005 fa2a 	bl	802f622 <SecureElementDeriveAndStoreKey>
 802a1ce:	2800      	cmp	r0, #0
 802a1d0:	d000      	beq.n	802a1d4 <LoRaMacCryptoDeriveMcKEKey.part.0+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 802a1d2:	200f      	movs	r0, #15
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 802a1d4:	b005      	add	sp, #20
 802a1d6:	bd00      	pop	{pc}
 802a1d8:	2000910c 	.word	0x2000910c

0802a1dc <GetLastFcntDown.constprop.0>:
    switch( fCntID )
 802a1dc:	3801      	subs	r0, #1
    return LORAMAC_CRYPTO_SUCCESS;
 802a1de:	2305      	movs	r3, #5
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
 802a1e0:	b500      	push	{lr}
 802a1e2:	2803      	cmp	r0, #3
 802a1e4:	d80b      	bhi.n	802a1fe <GetLastFcntDown.constprop.0+0x22>
 802a1e6:	4b0d      	ldr	r3, [pc, #52]	; (802a21c <GetLastFcntDown.constprop.0+0x40>)
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 802a1e8:	681b      	ldr	r3, [r3, #0]
 802a1ea:	f7f5 ff73 	bl	80200d4 <__gnu_thumb1_case_uqi>
 802a1ee:	0a02      	.short	0x0a02
 802a1f0:	140f      	.short	0x140f
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 802a1f2:	691a      	ldr	r2, [r3, #16]
 802a1f4:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 802a1f6:	001a      	movs	r2, r3
 802a1f8:	3210      	adds	r2, #16
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 802a1fa:	621a      	str	r2, [r3, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 802a1fc:	2300      	movs	r3, #0
}
 802a1fe:	0018      	movs	r0, r3
 802a200:	bd00      	pop	{pc}
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 802a202:	695a      	ldr	r2, [r3, #20]
 802a204:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 802a206:	001a      	movs	r2, r3
 802a208:	3214      	adds	r2, #20
 802a20a:	e7f6      	b.n	802a1fa <GetLastFcntDown.constprop.0+0x1e>
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 802a20c:	699a      	ldr	r2, [r3, #24]
 802a20e:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 802a210:	001a      	movs	r2, r3
 802a212:	3218      	adds	r2, #24
 802a214:	e7f1      	b.n	802a1fa <GetLastFcntDown.constprop.0+0x1e>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 802a216:	69db      	ldr	r3, [r3, #28]
 802a218:	600b      	str	r3, [r1, #0]
 802a21a:	e7ef      	b.n	802a1fc <GetLastFcntDown.constprop.0+0x20>
 802a21c:	2000910c 	.word	0x2000910c

0802a220 <LoRaMacCryptoInit>:
{
 802a220:	b570      	push	{r4, r5, r6, lr}
 802a222:	1e03      	subs	r3, r0, #0
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 802a224:	4c0d      	ldr	r4, [pc, #52]	; (802a25c <LoRaMacCryptoInit+0x3c>)
 802a226:	480e      	ldr	r0, [pc, #56]	; (802a260 <LoRaMacCryptoInit+0x40>)
 802a228:	6020      	str	r0, [r4, #0]
    if( cryptoNvmCtxChanged != 0 )
 802a22a:	d100      	bne.n	802a22e <LoRaMacCryptoInit+0xe>
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 802a22c:	4b0d      	ldr	r3, [pc, #52]	; (802a264 <LoRaMacCryptoInit+0x44>)
    memset1( ( uint8_t* )CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 802a22e:	2224      	movs	r2, #36	; 0x24
 802a230:	2100      	movs	r1, #0
 802a232:	6063      	str	r3, [r4, #4]
 802a234:	f7f9 fef0 	bl	8024018 <memset1>
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Major = 1;
 802a238:	6823      	ldr	r3, [r4, #0]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 0;
 802a23a:	4a0b      	ldr	r2, [pc, #44]	; (802a268 <LoRaMacCryptoInit+0x48>)
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 802a23c:	0019      	movs	r1, r3
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 0;
 802a23e:	601a      	str	r2, [r3, #0]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 802a240:	2201      	movs	r2, #1
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 802a242:	2500      	movs	r5, #0
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 802a244:	4252      	negs	r2, r2
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 802a246:	3118      	adds	r1, #24
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 802a248:	60dd      	str	r5, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 802a24a:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 802a24c:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 802a24e:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 802a250:	6219      	str	r1, [r3, #32]
    CryptoCtx.NvmCtx->FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 802a252:	61da      	str	r2, [r3, #28]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 802a254:	6863      	ldr	r3, [r4, #4]
 802a256:	4798      	blx	r3
}
 802a258:	0028      	movs	r0, r5
 802a25a:	bd70      	pop	{r4, r5, r6, pc}
 802a25c:	2000910c 	.word	0x2000910c
 802a260:	20009114 	.word	0x20009114
 802a264:	0802f99b 	.word	0x0802f99b
 802a268:	01010100 	.word	0x01010100

0802a26c <LoRaMacCryptoSetLrWanVersion>:
    CryptoCtx.NvmCtx->LrWanVersion = version;
 802a26c:	4b02      	ldr	r3, [pc, #8]	; (802a278 <LoRaMacCryptoSetLrWanVersion+0xc>)
 802a26e:	681b      	ldr	r3, [r3, #0]
 802a270:	6018      	str	r0, [r3, #0]
}
 802a272:	2000      	movs	r0, #0
 802a274:	4770      	bx	lr
 802a276:	46c0      	nop			; (mov r8, r8)
 802a278:	2000910c 	.word	0x2000910c

0802a27c <LoRaMacCryptoRestoreNvmCtx>:
{
 802a27c:	0001      	movs	r1, r0
 802a27e:	b510      	push	{r4, lr}
        return LORAMAC_CRYPTO_ERROR_NPE;
 802a280:	200a      	movs	r0, #10
    if( cryptoNvmCtx != 0 )
 802a282:	2900      	cmp	r1, #0
 802a284:	d004      	beq.n	802a290 <LoRaMacCryptoRestoreNvmCtx+0x14>
        memcpy1( ( uint8_t* )&NvmCryptoCtx, ( uint8_t* )cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 802a286:	4803      	ldr	r0, [pc, #12]	; (802a294 <LoRaMacCryptoRestoreNvmCtx+0x18>)
 802a288:	2224      	movs	r2, #36	; 0x24
 802a28a:	f004 ff52 	bl	802f132 <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 802a28e:	2000      	movs	r0, #0
}
 802a290:	bd10      	pop	{r4, pc}
 802a292:	46c0      	nop			; (mov r8, r8)
 802a294:	20009114 	.word	0x20009114

0802a298 <LoRaMacCryptoGetNvmCtx>:
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 802a298:	2324      	movs	r3, #36	; 0x24
 802a29a:	6003      	str	r3, [r0, #0]
}
 802a29c:	4800      	ldr	r0, [pc, #0]	; (802a2a0 <LoRaMacCryptoGetNvmCtx+0x8>)
 802a29e:	4770      	bx	lr
 802a2a0:	20009114 	.word	0x20009114

0802a2a4 <LoRaMacCryptoGetFCntUp>:
{
 802a2a4:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 802a2a6:	200a      	movs	r0, #10
    if( currentUp == NULL )
 802a2a8:	2b00      	cmp	r3, #0
 802a2aa:	d005      	beq.n	802a2b8 <LoRaMacCryptoGetFCntUp+0x14>
    return LORAMAC_CRYPTO_SUCCESS;
 802a2ac:	2000      	movs	r0, #0
    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 802a2ae:	4a03      	ldr	r2, [pc, #12]	; (802a2bc <LoRaMacCryptoGetFCntUp+0x18>)
 802a2b0:	6812      	ldr	r2, [r2, #0]
 802a2b2:	68d2      	ldr	r2, [r2, #12]
 802a2b4:	3201      	adds	r2, #1
 802a2b6:	601a      	str	r2, [r3, #0]
}
 802a2b8:	4770      	bx	lr
 802a2ba:	46c0      	nop			; (mov r8, r8)
 802a2bc:	2000910c 	.word	0x2000910c

0802a2c0 <LoRaMacCryptoGetFCntDown>:
{
 802a2c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802a2c2:	001c      	movs	r4, r3
    uint32_t lastDown = 0;
 802a2c4:	2300      	movs	r3, #0
{
 802a2c6:	0007      	movs	r7, r0
 802a2c8:	000d      	movs	r5, r1
 802a2ca:	0016      	movs	r6, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 802a2cc:	200a      	movs	r0, #10
    uint32_t lastDown = 0;
 802a2ce:	9301      	str	r3, [sp, #4]
    if( currentDown == NULL )
 802a2d0:	429c      	cmp	r4, r3
 802a2d2:	d026      	beq.n	802a322 <LoRaMacCryptoGetFCntDown+0x62>
    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 802a2d4:	0038      	movs	r0, r7
 802a2d6:	a901      	add	r1, sp, #4
 802a2d8:	f7ff ff80 	bl	802a1dc <GetLastFcntDown.constprop.0>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 802a2dc:	2800      	cmp	r0, #0
 802a2de:	d120      	bne.n	802a322 <LoRaMacCryptoGetFCntDown+0x62>
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 802a2e0:	9f01      	ldr	r7, [sp, #4]
 802a2e2:	1c7b      	adds	r3, r7, #1
 802a2e4:	d101      	bne.n	802a2ea <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 802a2e6:	6026      	str	r6, [r4, #0]
 802a2e8:	e005      	b.n	802a2f6 <LoRaMacCryptoGetFCntDown+0x36>
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 802a2ea:	b2bb      	uxth	r3, r7
 802a2ec:	1af3      	subs	r3, r6, r3
        if( fCntDiff > 0 )
 802a2ee:	2b00      	cmp	r3, #0
 802a2f0:	dd13      	ble.n	802a31a <LoRaMacCryptoGetFCntDown+0x5a>
            *currentDown = lastDown + fCntDiff;
 802a2f2:	19db      	adds	r3, r3, r7
 802a2f4:	6023      	str	r3, [r4, #0]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 802a2f6:	4b10      	ldr	r3, [pc, #64]	; (802a338 <LoRaMacCryptoGetFCntDown+0x78>)
 802a2f8:	681b      	ldr	r3, [r3, #0]
 802a2fa:	789e      	ldrb	r6, [r3, #2]
 802a2fc:	2e00      	cmp	r6, #0
 802a2fe:	d110      	bne.n	802a322 <LoRaMacCryptoGetFCntDown+0x62>
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 802a300:	0033      	movs	r3, r6
 802a302:	0038      	movs	r0, r7
 802a304:	0031      	movs	r1, r6
 802a306:	6822      	ldr	r2, [r4, #0]
 802a308:	1a12      	subs	r2, r2, r0
 802a30a:	418b      	sbcs	r3, r1
 802a30c:	429e      	cmp	r6, r3
 802a30e:	dc10      	bgt.n	802a332 <LoRaMacCryptoGetFCntDown+0x72>
 802a310:	d101      	bne.n	802a316 <LoRaMacCryptoGetFCntDown+0x56>
 802a312:	4295      	cmp	r5, r2
 802a314:	d80d      	bhi.n	802a332 <LoRaMacCryptoGetFCntDown+0x72>
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 802a316:	2008      	movs	r0, #8
 802a318:	e003      	b.n	802a322 <LoRaMacCryptoGetFCntDown+0x62>
        else if( fCntDiff == 0 )
 802a31a:	2b00      	cmp	r3, #0
 802a31c:	d102      	bne.n	802a324 <LoRaMacCryptoGetFCntDown+0x64>
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 802a31e:	2007      	movs	r0, #7
            *currentDown = lastDown;
 802a320:	6027      	str	r7, [r4, #0]
}
 802a322:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 802a324:	2380      	movs	r3, #128	; 0x80
 802a326:	0c3a      	lsrs	r2, r7, #16
 802a328:	0412      	lsls	r2, r2, #16
 802a32a:	025b      	lsls	r3, r3, #9
 802a32c:	18d2      	adds	r2, r2, r3
 802a32e:	1996      	adds	r6, r2, r6
 802a330:	e7d9      	b.n	802a2e6 <LoRaMacCryptoGetFCntDown+0x26>
    return LORAMAC_CRYPTO_SUCCESS;
 802a332:	2000      	movs	r0, #0
 802a334:	e7f5      	b.n	802a322 <LoRaMacCryptoGetFCntDown+0x62>
 802a336:	46c0      	nop			; (mov r8, r8)
 802a338:	2000910c 	.word	0x2000910c

0802a33c <LoRaMacCryptoSetMulticastReference>:
{
 802a33c:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 802a33e:	200a      	movs	r0, #10
    if( multicastList == NULL )
 802a340:	2b00      	cmp	r3, #0
 802a342:	d004      	beq.n	802a34e <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 802a344:	2000      	movs	r0, #0
    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 802a346:	4a02      	ldr	r2, [pc, #8]	; (802a350 <LoRaMacCryptoSetMulticastReference+0x14>)
 802a348:	6812      	ldr	r2, [r2, #0]
 802a34a:	321c      	adds	r2, #28
 802a34c:	621a      	str	r2, [r3, #32]
}
 802a34e:	4770      	bx	lr
 802a350:	2000910c 	.word	0x2000910c

0802a354 <LoRaMacCryptoPrepareJoinRequest>:
{
 802a354:	b530      	push	{r4, r5, lr}
 802a356:	0004      	movs	r4, r0
 802a358:	b085      	sub	sp, #20
        return LORAMAC_CRYPTO_ERROR_NPE;
 802a35a:	200a      	movs	r0, #10
    if( macMsg == 0 )
 802a35c:	2c00      	cmp	r4, #0
 802a35e:	d024      	beq.n	802a3aa <LoRaMacCryptoPrepareJoinRequest+0x56>
    uint32_t devNonce = 0;
 802a360:	2300      	movs	r3, #0
    SecureElementRandomNumber( &devNonce );
 802a362:	a803      	add	r0, sp, #12
    uint32_t devNonce = 0;
 802a364:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 802a366:	f7fa f997 	bl	8024698 <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 802a36a:	4d11      	ldr	r5, [pc, #68]	; (802a3b0 <LoRaMacCryptoPrepareJoinRequest+0x5c>)
 802a36c:	9b03      	ldr	r3, [sp, #12]
 802a36e:	682a      	ldr	r2, [r5, #0]
 802a370:	8093      	strh	r3, [r2, #4]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 802a372:	686b      	ldr	r3, [r5, #4]
 802a374:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 802a376:	682b      	ldr	r3, [r5, #0]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 802a378:	0020      	movs	r0, r4
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 802a37a:	889b      	ldrh	r3, [r3, #4]
 802a37c:	82e3      	strh	r3, [r4, #22]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 802a37e:	f005 fc6c 	bl	802fc5a <LoRaMacSerializerJoinRequest>
 802a382:	2800      	cmp	r0, #0
 802a384:	d110      	bne.n	802a3a8 <LoRaMacCryptoPrepareJoinRequest+0x54>
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 802a386:	0023      	movs	r3, r4
 802a388:	3318      	adds	r3, #24
 802a38a:	9300      	str	r3, [sp, #0]
 802a38c:	2213      	movs	r2, #19
 802a38e:	2301      	movs	r3, #1
 802a390:	6821      	ldr	r1, [r4, #0]
 802a392:	f005 f8e9 	bl	802f568 <SecureElementComputeAesCmac>
 802a396:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 802a398:	200f      	movs	r0, #15
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 802a39a:	2b00      	cmp	r3, #0
 802a39c:	d105      	bne.n	802a3aa <LoRaMacCryptoPrepareJoinRequest+0x56>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 802a39e:	0020      	movs	r0, r4
 802a3a0:	f005 fc5b 	bl	802fc5a <LoRaMacSerializerJoinRequest>
 802a3a4:	2800      	cmp	r0, #0
 802a3a6:	d000      	beq.n	802a3aa <LoRaMacCryptoPrepareJoinRequest+0x56>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 802a3a8:	2011      	movs	r0, #17
}
 802a3aa:	b005      	add	sp, #20
 802a3ac:	bd30      	pop	{r4, r5, pc}
 802a3ae:	46c0      	nop			; (mov r8, r8)
 802a3b0:	2000910c 	.word	0x2000910c

0802a3b4 <LoRaMacCryptoSecureMessage>:
{
 802a3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a3b6:	0006      	movs	r6, r0
 802a3b8:	001d      	movs	r5, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 802a3ba:	240a      	movs	r4, #10
{
 802a3bc:	b089      	sub	sp, #36	; 0x24
    if( macMsg == NULL )
 802a3be:	2b00      	cmp	r3, #0
 802a3c0:	d01f      	beq.n	802a402 <LoRaMacCryptoSecureMessage+0x4e>
    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 802a3c2:	4b32      	ldr	r3, [pc, #200]	; (802a48c <LoRaMacCryptoSecureMessage+0xd8>)
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 802a3c4:	3c04      	subs	r4, #4
    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 802a3c6:	681b      	ldr	r3, [r3, #0]
 802a3c8:	68db      	ldr	r3, [r3, #12]
 802a3ca:	4283      	cmp	r3, r0
 802a3cc:	d819      	bhi.n	802a402 <LoRaMacCryptoSecureMessage+0x4e>
    if( macMsg->FPort == 0 )
 802a3ce:	1c6a      	adds	r2, r5, #1
 802a3d0:	7fd2      	ldrb	r2, [r2, #31]
        payloadDecryptionKeyID = NWK_S_KEY;
 802a3d2:	1e51      	subs	r1, r2, #1
 802a3d4:	418a      	sbcs	r2, r1
 802a3d6:	3202      	adds	r2, #2
    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 802a3d8:	4283      	cmp	r3, r0
 802a3da:	d306      	bcc.n	802a3ea <LoRaMacCryptoSecureMessage+0x36>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 802a3dc:	0028      	movs	r0, r5
 802a3de:	f005 fc71 	bl	802fcc4 <LoRaMacSerializerData>
 802a3e2:	1e03      	subs	r3, r0, #0
 802a3e4:	d010      	beq.n	802a408 <LoRaMacCryptoSecureMessage+0x54>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 802a3e6:	2411      	movs	r4, #17
 802a3e8:	e00b      	b.n	802a402 <LoRaMacCryptoSecureMessage+0x4e>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 802a3ea:	002b      	movs	r3, r5
 802a3ec:	3328      	adds	r3, #40	; 0x28
 802a3ee:	7819      	ldrb	r1, [r3, #0]
 802a3f0:	2300      	movs	r3, #0
 802a3f2:	9001      	str	r0, [sp, #4]
 802a3f4:	9300      	str	r3, [sp, #0]
 802a3f6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 802a3f8:	68ab      	ldr	r3, [r5, #8]
 802a3fa:	f005 facf 	bl	802f99c <PayloadEncrypt>
 802a3fe:	1e04      	subs	r4, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 802a400:	d0ec      	beq.n	802a3dc <LoRaMacCryptoSecureMessage+0x28>
}
 802a402:	0020      	movs	r0, r4
 802a404:	b009      	add	sp, #36	; 0x24
 802a406:	bdf0      	pop	{r4, r5, r6, r7, pc}
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 802a408:	0028      	movs	r0, r5
 802a40a:	792f      	ldrb	r7, [r5, #4]
 802a40c:	6829      	ldr	r1, [r5, #0]
 802a40e:	3f04      	subs	r7, #4
 802a410:	b2ba      	uxth	r2, r7
 802a412:	302c      	adds	r0, #44	; 0x2c
 802a414:	9203      	str	r2, [sp, #12]
 802a416:	9002      	str	r0, [sp, #8]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 802a418:	2900      	cmp	r1, #0
 802a41a:	d101      	bne.n	802a420 <LoRaMacCryptoSecureMessage+0x6c>
        return LORAMAC_CRYPTO_ERROR_NPE;
 802a41c:	240a      	movs	r4, #10
 802a41e:	e7f0      	b.n	802a402 <LoRaMacCryptoSecureMessage+0x4e>
    if( ( msg == 0 ) || ( cmac == 0 ) )
 802a420:	9802      	ldr	r0, [sp, #8]
 802a422:	2800      	cmp	r0, #0
 802a424:	d0fa      	beq.n	802a41c <LoRaMacCryptoSecureMessage+0x68>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 802a426:	2080      	movs	r0, #128	; 0x80
 802a428:	b2ba      	uxth	r2, r7
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 802a42a:	240e      	movs	r4, #14
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 802a42c:	0040      	lsls	r0, r0, #1
 802a42e:	4282      	cmp	r2, r0
 802a430:	d8e7      	bhi.n	802a402 <LoRaMacCryptoSecureMessage+0x4e>
    b0[0] = 0x49;
 802a432:	2249      	movs	r2, #73	; 0x49
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 802a434:	68ac      	ldr	r4, [r5, #8]
    b0[0] = 0x49;
 802a436:	a804      	add	r0, sp, #16
 802a438:	7002      	strb	r2, [r0, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 802a43a:	0a22      	lsrs	r2, r4, #8
    b0[6] = devAddr & 0xFF;
 802a43c:	7184      	strb	r4, [r0, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 802a43e:	71c2      	strb	r2, [r0, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 802a440:	0c22      	lsrs	r2, r4, #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 802a442:	0e24      	lsrs	r4, r4, #24
 802a444:	7244      	strb	r4, [r0, #9]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 802a446:	0a34      	lsrs	r4, r6, #8
        b0[1] = 0x00;
 802a448:	7043      	strb	r3, [r0, #1]
        b0[2] = 0x00;
 802a44a:	7083      	strb	r3, [r0, #2]
    b0[3] = 0x00;
 802a44c:	70c3      	strb	r3, [r0, #3]
    b0[4] = 0x00;
 802a44e:	7103      	strb	r3, [r0, #4]
    b0[5] = dir;
 802a450:	7143      	strb	r3, [r0, #5]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 802a452:	72c4      	strb	r4, [r0, #11]
    b0[14] = 0x00;
 802a454:	7383      	strb	r3, [r0, #14]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 802a456:	0c34      	lsrs	r4, r6, #16
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 802a458:	9b02      	ldr	r3, [sp, #8]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 802a45a:	7304      	strb	r4, [r0, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 802a45c:	0e34      	lsrs	r4, r6, #24
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 802a45e:	7202      	strb	r2, [r0, #8]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 802a460:	7344      	strb	r4, [r0, #13]
    b0[10] = fCnt & 0xFF;
 802a462:	7286      	strb	r6, [r0, #10]
    b0[15] = msgLen & 0xFF;
 802a464:	73c7      	strb	r7, [r0, #15]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 802a466:	9a03      	ldr	r2, [sp, #12]
 802a468:	9300      	str	r3, [sp, #0]
 802a46a:	2302      	movs	r3, #2
 802a46c:	f005 f87c 	bl	802f568 <SecureElementComputeAesCmac>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 802a470:	240f      	movs	r4, #15
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 802a472:	2800      	cmp	r0, #0
 802a474:	d1c5      	bne.n	802a402 <LoRaMacCryptoSecureMessage+0x4e>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 802a476:	0028      	movs	r0, r5
 802a478:	f005 fc24 	bl	802fcc4 <LoRaMacSerializerData>
 802a47c:	1e04      	subs	r4, r0, #0
 802a47e:	d1b2      	bne.n	802a3e6 <LoRaMacCryptoSecureMessage+0x32>
    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 802a480:	4b02      	ldr	r3, [pc, #8]	; (802a48c <LoRaMacCryptoSecureMessage+0xd8>)
 802a482:	681a      	ldr	r2, [r3, #0]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 802a484:	685b      	ldr	r3, [r3, #4]
    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 802a486:	60d6      	str	r6, [r2, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 802a488:	4798      	blx	r3
    return LORAMAC_CRYPTO_SUCCESS;
 802a48a:	e7ba      	b.n	802a402 <LoRaMacCryptoSecureMessage+0x4e>
 802a48c:	2000910c 	.word	0x2000910c

0802a490 <LoRaMacCryptoUnsecureMessage>:
{
 802a490:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a492:	b087      	sub	sp, #28
 802a494:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802a496:	000f      	movs	r7, r1
 802a498:	001d      	movs	r5, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 802a49a:	240a      	movs	r4, #10
{
 802a49c:	9002      	str	r0, [sp, #8]
 802a49e:	9203      	str	r2, [sp, #12]
    if( macMsg == 0 )
 802a4a0:	2e00      	cmp	r6, #0
 802a4a2:	d008      	beq.n	802a4b6 <LoRaMacCryptoUnsecureMessage+0x26>
    uint32_t lastDown = 0;
 802a4a4:	2300      	movs	r3, #0
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 802a4a6:	0010      	movs	r0, r2
 802a4a8:	a905      	add	r1, sp, #20
    uint32_t lastDown = 0;
 802a4aa:	9305      	str	r3, [sp, #20]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 802a4ac:	f7ff fe96 	bl	802a1dc <GetLastFcntDown.constprop.0>
 802a4b0:	2800      	cmp	r0, #0
 802a4b2:	d003      	beq.n	802a4bc <LoRaMacCryptoUnsecureMessage+0x2c>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 802a4b4:	2406      	movs	r4, #6
}
 802a4b6:	0020      	movs	r0, r4
 802a4b8:	b007      	add	sp, #28
 802a4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( currentDown > lastDown ) ||
 802a4bc:	9b05      	ldr	r3, [sp, #20]
 802a4be:	429d      	cmp	r5, r3
 802a4c0:	d801      	bhi.n	802a4c6 <LoRaMacCryptoUnsecureMessage+0x36>
 802a4c2:	3301      	adds	r3, #1
 802a4c4:	d1f6      	bne.n	802a4b4 <LoRaMacCryptoUnsecureMessage+0x24>
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 802a4c6:	0030      	movs	r0, r6
 802a4c8:	f005 fb6b 	bl	802fba2 <LoRaMacParserData>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 802a4cc:	2410      	movs	r4, #16
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 802a4ce:	2800      	cmp	r0, #0
 802a4d0:	d1f1      	bne.n	802a4b6 <LoRaMacCryptoUnsecureMessage+0x26>
        if( KeyAddrList[i].AddrID == addrID )
 802a4d2:	4b23      	ldr	r3, [pc, #140]	; (802a560 <LoRaMacCryptoUnsecureMessage+0xd0>)
 802a4d4:	9902      	ldr	r1, [sp, #8]
 802a4d6:	781a      	ldrb	r2, [r3, #0]
 802a4d8:	428a      	cmp	r2, r1
 802a4da:	d004      	beq.n	802a4e6 <LoRaMacCryptoUnsecureMessage+0x56>
 802a4dc:	791a      	ldrb	r2, [r3, #4]
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 802a4de:	3c04      	subs	r4, #4
        if( KeyAddrList[i].AddrID == addrID )
 802a4e0:	428a      	cmp	r2, r1
 802a4e2:	d1e8      	bne.n	802a4b6 <LoRaMacCryptoUnsecureMessage+0x26>
 802a4e4:	3001      	adds	r0, #1
    if( address != macMsg->FHDR.DevAddr )
 802a4e6:	68b2      	ldr	r2, [r6, #8]
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 802a4e8:	2402      	movs	r4, #2
    if( address != macMsg->FHDR.DevAddr )
 802a4ea:	42ba      	cmp	r2, r7
 802a4ec:	d1e3      	bne.n	802a4b6 <LoRaMacCryptoUnsecureMessage+0x26>
    payloadDecryptionKeyID = curItem->AppSkey;
 802a4ee:	40a0      	lsls	r0, r4
 802a4f0:	1818      	adds	r0, r3, r0
 802a4f2:	7843      	ldrb	r3, [r0, #1]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 802a4f4:	7882      	ldrb	r2, [r0, #2]
    payloadDecryptionKeyID = curItem->AppSkey;
 802a4f6:	9302      	str	r3, [sp, #8]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 802a4f8:	7931      	ldrb	r1, [r6, #4]
 802a4fa:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 802a4fc:	3904      	subs	r1, #4
 802a4fe:	9301      	str	r3, [sp, #4]
 802a500:	9500      	str	r5, [sp, #0]
 802a502:	003b      	movs	r3, r7
 802a504:	6830      	ldr	r0, [r6, #0]
 802a506:	b289      	uxth	r1, r1
 802a508:	f005 faa7 	bl	802fa5a <VerifyCmacB0.constprop.0.isra.0>
 802a50c:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 802a50e:	d1d2      	bne.n	802a4b6 <LoRaMacCryptoUnsecureMessage+0x26>
    if( macMsg->FPort == 0 )
 802a510:	1c73      	adds	r3, r6, #1
 802a512:	7fdb      	ldrb	r3, [r3, #31]
 802a514:	2b00      	cmp	r3, #0
 802a516:	d101      	bne.n	802a51c <LoRaMacCryptoUnsecureMessage+0x8c>
        payloadDecryptionKeyID = NWK_S_KEY;
 802a518:	3302      	adds	r3, #2
 802a51a:	9302      	str	r3, [sp, #8]
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 802a51c:	0033      	movs	r3, r6
 802a51e:	3328      	adds	r3, #40	; 0x28
 802a520:	7819      	ldrb	r1, [r3, #0]
 802a522:	2301      	movs	r3, #1
 802a524:	9501      	str	r5, [sp, #4]
 802a526:	9300      	str	r3, [sp, #0]
 802a528:	9a02      	ldr	r2, [sp, #8]
 802a52a:	003b      	movs	r3, r7
 802a52c:	6a70      	ldr	r0, [r6, #36]	; 0x24
 802a52e:	f005 fa35 	bl	802f99c <PayloadEncrypt>
 802a532:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 802a534:	d1bf      	bne.n	802a4b6 <LoRaMacCryptoUnsecureMessage+0x26>
    switch( fCntID )
 802a536:	9803      	ldr	r0, [sp, #12]
 802a538:	4b0a      	ldr	r3, [pc, #40]	; (802a564 <LoRaMacCryptoUnsecureMessage+0xd4>)
 802a53a:	3801      	subs	r0, #1
 802a53c:	2803      	cmp	r0, #3
 802a53e:	d805      	bhi.n	802a54c <LoRaMacCryptoUnsecureMessage+0xbc>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 802a540:	681a      	ldr	r2, [r3, #0]
 802a542:	f7f5 fdc7 	bl	80200d4 <__gnu_thumb1_case_uqi>
 802a546:	0602      	.short	0x0602
 802a548:	0a08      	.short	0x0a08
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 802a54a:	6115      	str	r5, [r2, #16]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 802a54c:	685b      	ldr	r3, [r3, #4]
 802a54e:	4798      	blx	r3
}
 802a550:	e7b1      	b.n	802a4b6 <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 802a552:	6155      	str	r5, [r2, #20]
            break;
 802a554:	e7fa      	b.n	802a54c <LoRaMacCryptoUnsecureMessage+0xbc>
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 802a556:	6195      	str	r5, [r2, #24]
            break;
 802a558:	e7f8      	b.n	802a54c <LoRaMacCryptoUnsecureMessage+0xbc>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 802a55a:	61d5      	str	r5, [r2, #28]
            break;
 802a55c:	e7f6      	b.n	802a54c <LoRaMacCryptoUnsecureMessage+0xbc>
 802a55e:	46c0      	nop			; (mov r8, r8)
 802a560:	200081f5 	.word	0x200081f5
 802a564:	2000910c 	.word	0x2000910c

0802a568 <LoRaMacCryptoDeriveMcRootKey>:
{
 802a568:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802a56a:	0001      	movs	r1, r0
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 802a56c:	200b      	movs	r0, #11
    if( keyID != APP_KEY )
 802a56e:	2900      	cmp	r1, #0
 802a570:	d115      	bne.n	802a59e <LoRaMacCryptoDeriveMcRootKey+0x36>
    uint8_t compBase[16] = { 0 };
 802a572:	220c      	movs	r2, #12
 802a574:	a801      	add	r0, sp, #4
 802a576:	9100      	str	r1, [sp, #0]
 802a578:	f006 fbfb 	bl	8030d72 <memset>
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 802a57c:	4b09      	ldr	r3, [pc, #36]	; (802a5a4 <LoRaMacCryptoDeriveMcRootKey+0x3c>)
 802a57e:	6818      	ldr	r0, [r3, #0]
 802a580:	7883      	ldrb	r3, [r0, #2]
 802a582:	2b01      	cmp	r3, #1
 802a584:	d102      	bne.n	802a58c <LoRaMacCryptoDeriveMcRootKey+0x24>
        compBase[0] = 0x20;
 802a586:	466a      	mov	r2, sp
 802a588:	331f      	adds	r3, #31
 802a58a:	7013      	strb	r3, [r2, #0]
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 802a58c:	2304      	movs	r3, #4
 802a58e:	2200      	movs	r2, #0
 802a590:	4669      	mov	r1, sp
 802a592:	6800      	ldr	r0, [r0, #0]
 802a594:	f005 f845 	bl	802f622 <SecureElementDeriveAndStoreKey>
 802a598:	2800      	cmp	r0, #0
 802a59a:	d000      	beq.n	802a59e <LoRaMacCryptoDeriveMcRootKey+0x36>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 802a59c:	200f      	movs	r0, #15
}
 802a59e:	b005      	add	sp, #20
 802a5a0:	bd00      	pop	{pc}
 802a5a2:	46c0      	nop			; (mov r8, r8)
 802a5a4:	2000910c 	.word	0x2000910c

0802a5a8 <LoRaMacCryptoHandleJoinAccept>:
{
 802a5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a5aa:	b091      	sub	sp, #68	; 0x44
 802a5ac:	0015      	movs	r5, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 802a5ae:	240a      	movs	r4, #10
{
 802a5b0:	9005      	str	r0, [sp, #20]
 802a5b2:	9104      	str	r1, [sp, #16]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 802a5b4:	2a00      	cmp	r2, #0
 802a5b6:	d050      	beq.n	802a65a <LoRaMacCryptoHandleJoinAccept+0xb2>
 802a5b8:	2900      	cmp	r1, #0
 802a5ba:	d04e      	beq.n	802a65a <LoRaMacCryptoHandleJoinAccept+0xb2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 802a5bc:	2400      	movs	r4, #0
 802a5be:	221d      	movs	r2, #29
 802a5c0:	0021      	movs	r1, r4
 802a5c2:	a808      	add	r0, sp, #32
 802a5c4:	9407      	str	r4, [sp, #28]
 802a5c6:	f006 fbd4 	bl	8030d72 <memset>
    uint8_t* nonce               = ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce;
 802a5ca:	4e25      	ldr	r6, [pc, #148]	; (802a660 <LoRaMacCryptoHandleJoinAccept+0xb8>)
    uint8_t versionMinor         = 0;
 802a5cc:	ab02      	add	r3, sp, #8
 802a5ce:	74dc      	strb	r4, [r3, #19]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, ( int16_t )*nonce, macMsg->Buffer,
 802a5d0:	6833      	ldr	r3, [r6, #0]
 802a5d2:	a902      	add	r1, sp, #8
 802a5d4:	791a      	ldrb	r2, [r3, #4]
 802a5d6:	2313      	movs	r3, #19
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 802a5d8:	af07      	add	r7, sp, #28
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, ( int16_t )*nonce, macMsg->Buffer,
 802a5da:	185b      	adds	r3, r3, r1
 802a5dc:	9302      	str	r3, [sp, #8]
 802a5de:	9701      	str	r7, [sp, #4]
 802a5e0:	792b      	ldrb	r3, [r5, #4]
 802a5e2:	9904      	ldr	r1, [sp, #16]
 802a5e4:	9300      	str	r3, [sp, #0]
 802a5e6:	682b      	ldr	r3, [r5, #0]
 802a5e8:	9805      	ldr	r0, [sp, #20]
 802a5ea:	f005 f83a 	bl	802f662 <SecureElementProcessJoinAccept>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 802a5ee:	340f      	adds	r4, #15
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, ( int16_t )*nonce, macMsg->Buffer,
 802a5f0:	2800      	cmp	r0, #0
 802a5f2:	d132      	bne.n	802a65a <LoRaMacCryptoHandleJoinAccept+0xb2>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 802a5f4:	0039      	movs	r1, r7
 802a5f6:	792a      	ldrb	r2, [r5, #4]
 802a5f8:	6828      	ldr	r0, [r5, #0]
 802a5fa:	f004 fd9a 	bl	802f132 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 802a5fe:	0028      	movs	r0, r5
 802a600:	f005 fa82 	bl	802fb08 <LoRaMacParserJoinAccept>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 802a604:	3401      	adds	r4, #1
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 802a606:	2800      	cmp	r0, #0
 802a608:	d127      	bne.n	802a65a <LoRaMacCryptoHandleJoinAccept+0xb2>
    retval = LoRaMacCryptoDeriveMcRootKey( APP_KEY );
 802a60a:	f7ff ffad 	bl	802a568 <LoRaMacCryptoDeriveMcRootKey>
 802a60e:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 802a610:	d123      	bne.n	802a65a <LoRaMacCryptoHandleJoinAccept+0xb2>
    if( keyID != MC_ROOT_KEY )
 802a612:	f7ff fdcd 	bl	802a1b0 <LoRaMacCryptoDeriveMcKEKey.part.0>
 802a616:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 802a618:	d11f      	bne.n	802a65a <LoRaMacCryptoHandleJoinAccept+0xb2>
    retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce );
 802a61a:	6833      	ldr	r3, [r6, #0]
 802a61c:	1daf      	adds	r7, r5, #6
 802a61e:	3509      	adds	r5, #9
 802a620:	002a      	movs	r2, r5
 802a622:	0039      	movs	r1, r7
 802a624:	2003      	movs	r0, #3
 802a626:	3304      	adds	r3, #4
 802a628:	f7ff fd8c 	bl	802a144 <DeriveSessionKey10x>
 802a62c:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 802a62e:	d114      	bne.n	802a65a <LoRaMacCryptoHandleJoinAccept+0xb2>
    retval = DeriveSessionKey10x( NWK_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce );
 802a630:	6833      	ldr	r3, [r6, #0]
 802a632:	002a      	movs	r2, r5
 802a634:	0039      	movs	r1, r7
 802a636:	2002      	movs	r0, #2
 802a638:	3304      	adds	r3, #4
 802a63a:	f7ff fd83 	bl	802a144 <DeriveSessionKey10x>
 802a63e:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 802a640:	d10b      	bne.n	802a65a <LoRaMacCryptoHandleJoinAccept+0xb2>
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = versionMinor;
 802a642:	aa02      	add	r2, sp, #8
 802a644:	6833      	ldr	r3, [r6, #0]
 802a646:	7cd2      	ldrb	r2, [r2, #19]
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 802a648:	60d8      	str	r0, [r3, #12]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = versionMinor;
 802a64a:	709a      	strb	r2, [r3, #2]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 802a64c:	2201      	movs	r2, #1
 802a64e:	4252      	negs	r2, r2
 802a650:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 802a652:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 802a654:	615a      	str	r2, [r3, #20]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 802a656:	6873      	ldr	r3, [r6, #4]
 802a658:	4798      	blx	r3
}
 802a65a:	0020      	movs	r0, r4
 802a65c:	b011      	add	sp, #68	; 0x44
 802a65e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a660:	2000910c 	.word	0x2000910c

0802a664 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 802a664:	4800      	ldr	r0, [pc, #0]	; (802a668 <RegionGetVersion+0x4>)
 802a666:	4770      	bx	lr
 802a668:	01000300 	.word	0x01000300

0802a66c <RegionCommonSetBandTxDone>:
        }
    }
}

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 802a66c:	b082      	sub	sp, #8
 802a66e:	b570      	push	{r4, r5, r6, lr}
 802a670:	8805      	ldrh	r5, [r0, #0]
 802a672:	9305      	str	r3, [sp, #20]
    if( joined == false )
 802a674:	2a00      	cmp	r2, #0
 802a676:	d111      	bne.n	802a69c <RegionCommonSetBandTxDone+0x30>
    if( elapsedTime.Seconds < 3600 )
 802a678:	26e1      	movs	r6, #225	; 0xe1
        dutyCycle = BACKOFF_DC_1_HOUR;
 802a67a:	2464      	movs	r4, #100	; 0x64
    if( elapsedTime.Seconds < 3600 )
 802a67c:	0136      	lsls	r6, r6, #4
 802a67e:	42b3      	cmp	r3, r6
 802a680:	d307      	bcc.n	802a692 <RegionCommonSetBandTxDone+0x26>
    else if( elapsedTime.Seconds < ( 3600 + 36000 ) )
 802a682:	4c0e      	ldr	r4, [pc, #56]	; (802a6bc <RegionCommonSetBandTxDone+0x50>)
        dutyCycle = BACKOFF_DC_24_HOURS;
 802a684:	429c      	cmp	r4, r3
 802a686:	4152      	adcs	r2, r2
 802a688:	4254      	negs	r4, r2
 802a68a:	4a0d      	ldr	r2, [pc, #52]	; (802a6c0 <RegionCommonSetBandTxDone+0x54>)
 802a68c:	4b0d      	ldr	r3, [pc, #52]	; (802a6c4 <RegionCommonSetBandTxDone+0x58>)
 802a68e:	4014      	ands	r4, r2
 802a690:	18e4      	adds	r4, r4, r3
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 802a692:	1c2b      	adds	r3, r5, #0
 802a694:	42a5      	cmp	r5, r4
 802a696:	d200      	bcs.n	802a69a <RegionCommonSetBandTxDone+0x2e>
 802a698:	1c23      	adds	r3, r4, #0
 802a69a:	b29d      	uxth	r5, r3
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 802a69c:	6882      	ldr	r2, [r0, #8]
 802a69e:	1c2b      	adds	r3, r5, #0
 802a6a0:	2d00      	cmp	r5, #0
 802a6a2:	d100      	bne.n	802a6a6 <RegionCommonSetBandTxDone+0x3a>
 802a6a4:	2301      	movs	r3, #1
 802a6a6:	b29b      	uxth	r3, r3
 802a6a8:	4359      	muls	r1, r3
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
    }
    else
    {
        band->TimeCredits = 0;
 802a6aa:	2300      	movs	r3, #0
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 802a6ac:	428a      	cmp	r2, r1
 802a6ae:	d900      	bls.n	802a6b2 <RegionCommonSetBandTxDone+0x46>
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 802a6b0:	1a53      	subs	r3, r2, r1
 802a6b2:	6083      	str	r3, [r0, #8]
    }
}
 802a6b4:	bc70      	pop	{r4, r5, r6}
 802a6b6:	bc08      	pop	{r3}
 802a6b8:	b002      	add	sp, #8
 802a6ba:	4718      	bx	r3
 802a6bc:	00009aaf 	.word	0x00009aaf
 802a6c0:	ffffdcd8 	.word	0xffffdcd8
 802a6c4:	00002710 	.word	0x00002710

0802a6c8 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 802a6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a6ca:	b087      	sub	sp, #28
 802a6cc:	9302      	str	r3, [sp, #8]
 802a6ce:	ab0c      	add	r3, sp, #48	; 0x30
 802a6d0:	781b      	ldrb	r3, [r3, #0]
 802a6d2:	0015      	movs	r5, r2
 802a6d4:	000c      	movs	r4, r1
 802a6d6:	9305      	str	r3, [sp, #20]
 802a6d8:	0007      	movs	r7, r0
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 802a6da:	f004 fcf3 	bl	802f0c4 <TimerGetCurrentTime>
 802a6de:	2214      	movs	r2, #20
 802a6e0:	4355      	muls	r5, r2
 802a6e2:	1963      	adds	r3, r4, r5
 802a6e4:	9304      	str	r3, [sp, #16]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 802a6e6:	2301      	movs	r3, #1
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;
 802a6e8:	2600      	movs	r6, #0
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 802a6ea:	425b      	negs	r3, r3
    TimerTime_t currentTime = TimerGetCurrentTime( );
 802a6ec:	9003      	str	r0, [sp, #12]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 802a6ee:	9301      	str	r3, [sp, #4]

    for( uint8_t i = 0; i < nbBands; i++ )
 802a6f0:	9b04      	ldr	r3, [sp, #16]
 802a6f2:	42a3      	cmp	r3, r4
 802a6f4:	d107      	bne.n	802a706 <RegionCommonUpdateBandTimeOff+0x3e>
            }
        }
    }


    if( validBands == 0 )
 802a6f6:	2e00      	cmp	r6, #0
 802a6f8:	d102      	bne.n	802a700 <RegionCommonUpdateBandTimeOff+0x38>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 802a6fa:	2301      	movs	r3, #1
 802a6fc:	425b      	negs	r3, r3
 802a6fe:	9301      	str	r3, [sp, #4]
    }
    return minTimeToWait;
}
 802a700:	9801      	ldr	r0, [sp, #4]
 802a702:	b007      	add	sp, #28
 802a704:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 802a706:	990d      	ldr	r1, [sp, #52]	; 0x34
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 802a708:	8822      	ldrh	r2, [r4, #0]
    if( joined == false )
 802a70a:	2f00      	cmp	r7, #0
 802a70c:	d112      	bne.n	802a734 <RegionCommonUpdateBandTimeOff+0x6c>
    if( elapsedTime.Seconds < 3600 )
 802a70e:	20e1      	movs	r0, #225	; 0xe1
        dutyCycle = BACKOFF_DC_1_HOUR;
 802a710:	2364      	movs	r3, #100	; 0x64
    if( elapsedTime.Seconds < 3600 )
 802a712:	0100      	lsls	r0, r0, #4
 802a714:	4281      	cmp	r1, r0
 802a716:	d308      	bcc.n	802a72a <RegionCommonUpdateBandTimeOff+0x62>
        dutyCycle = BACKOFF_DC_24_HOURS;
 802a718:	0038      	movs	r0, r7
    else if( elapsedTime.Seconds < ( 3600 + 36000 ) )
 802a71a:	4b27      	ldr	r3, [pc, #156]	; (802a7b8 <RegionCommonUpdateBandTimeOff+0xf0>)
        dutyCycle = BACKOFF_DC_24_HOURS;
 802a71c:	428b      	cmp	r3, r1
 802a71e:	4178      	adcs	r0, r7
 802a720:	4926      	ldr	r1, [pc, #152]	; (802a7bc <RegionCommonUpdateBandTimeOff+0xf4>)
 802a722:	4243      	negs	r3, r0
 802a724:	400b      	ands	r3, r1
 802a726:	4926      	ldr	r1, [pc, #152]	; (802a7c0 <RegionCommonUpdateBandTimeOff+0xf8>)
 802a728:	185b      	adds	r3, r3, r1
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 802a72a:	1c11      	adds	r1, r2, #0
 802a72c:	429a      	cmp	r2, r3
 802a72e:	d200      	bcs.n	802a732 <RegionCommonUpdateBandTimeOff+0x6a>
 802a730:	1c19      	adds	r1, r3, #0
 802a732:	b28a      	uxth	r2, r1
    if( dutyCycle == 0 )
 802a734:	1c15      	adds	r5, r2, #0
 802a736:	2a00      	cmp	r2, #0
 802a738:	d100      	bne.n	802a73c <RegionCommonUpdateBandTimeOff+0x74>
 802a73a:	2501      	movs	r5, #1
    uint8_t timePeriodFactor = 1;
 802a73c:	2001      	movs	r0, #1
 802a73e:	b2ad      	uxth	r5, r5
    if( joined == false )
 802a740:	2f00      	cmp	r7, #0
 802a742:	d104      	bne.n	802a74e <RegionCommonUpdateBandTimeOff+0x86>
        timePeriodFactor = dutyCycle / BACKOFF_DC_TIMER_PERIOD_FACTOR;
 802a744:	2164      	movs	r1, #100	; 0x64
 802a746:	0028      	movs	r0, r5
 802a748:	f7f5 fce2 	bl	8020110 <__udivsi3>
 802a74c:	b2c0      	uxtb	r0, r0
    band->MaxTimeCredits = DUTY_CYCLE_TIME_PERIOD * timePeriodFactor;
 802a74e:	4b1d      	ldr	r3, [pc, #116]	; (802a7c4 <RegionCommonUpdateBandTimeOff+0xfc>)
 802a750:	4343      	muls	r3, r0
    if( band->LastBandUpdateTime == 0 )
 802a752:	6860      	ldr	r0, [r4, #4]
    band->MaxTimeCredits = DUTY_CYCLE_TIME_PERIOD * timePeriodFactor;
 802a754:	60e3      	str	r3, [r4, #12]
    if( band->LastBandUpdateTime == 0 )
 802a756:	2800      	cmp	r0, #0
 802a758:	d100      	bne.n	802a75c <RegionCommonUpdateBandTimeOff+0x94>
        band->TimeCredits = band->MaxTimeCredits;
 802a75a:	60a3      	str	r3, [r4, #8]
        if( ( dutyCycleEnabled == false ) &&
 802a75c:	9a02      	ldr	r2, [sp, #8]
    if( joined == false )
 802a75e:	2f00      	cmp	r7, #0
 802a760:	d102      	bne.n	802a768 <RegionCommonUpdateBandTimeOff+0xa0>
        if( ( dutyCycleEnabled == false ) &&
 802a762:	2a00      	cmp	r2, #0
 802a764:	d103      	bne.n	802a76e <RegionCommonUpdateBandTimeOff+0xa6>
 802a766:	9a05      	ldr	r2, [sp, #20]
        if( dutyCycleEnabled == false )
 802a768:	2a00      	cmp	r2, #0
 802a76a:	d100      	bne.n	802a76e <RegionCommonUpdateBandTimeOff+0xa6>
            band->TimeCredits = band->MaxTimeCredits;
 802a76c:	60a3      	str	r3, [r4, #8]
    band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 802a76e:	f004 fcaf 	bl	802f0d0 <TimerGetElapsedTime>
 802a772:	68a3      	ldr	r3, [r4, #8]
 802a774:	18c0      	adds	r0, r0, r3
    if( band->TimeCredits > band->MaxTimeCredits )
 802a776:	68e3      	ldr	r3, [r4, #12]
    band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 802a778:	60a0      	str	r0, [r4, #8]
    if( band->TimeCredits > band->MaxTimeCredits )
 802a77a:	4298      	cmp	r0, r3
 802a77c:	d900      	bls.n	802a780 <RegionCommonUpdateBandTimeOff+0xb8>
        band->TimeCredits = band->MaxTimeCredits;
 802a77e:	60a3      	str	r3, [r4, #8]
    band->LastBandUpdateTime = currentTime;
 802a780:	9a03      	ldr	r2, [sp, #12]
 802a782:	6062      	str	r2, [r4, #4]
        creditCosts = expectedTimeOnAir * dutyCycle;
 802a784:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802a786:	4355      	muls	r5, r2
        if( ( bands[i].TimeCredits > creditCosts ) ||
 802a788:	68a2      	ldr	r2, [r4, #8]
 802a78a:	42aa      	cmp	r2, r5
 802a78c:	d802      	bhi.n	802a794 <RegionCommonUpdateBandTimeOff+0xcc>
 802a78e:	9902      	ldr	r1, [sp, #8]
 802a790:	2900      	cmp	r1, #0
 802a792:	d105      	bne.n	802a7a0 <RegionCommonUpdateBandTimeOff+0xd8>
            bands[i].ReadyForTransmission = true;
 802a794:	2301      	movs	r3, #1
 802a796:	7423      	strb	r3, [r4, #16]
            validBands++;
 802a798:	18f6      	adds	r6, r6, r3
                validBands++;
 802a79a:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 802a79c:	3414      	adds	r4, #20
 802a79e:	e7a7      	b.n	802a6f0 <RegionCommonUpdateBandTimeOff+0x28>
            bands[i].ReadyForTransmission = false;
 802a7a0:	2100      	movs	r1, #0
 802a7a2:	7421      	strb	r1, [r4, #16]
            if( bands[i].MaxTimeCredits > creditCosts )
 802a7a4:	429d      	cmp	r5, r3
 802a7a6:	d2f9      	bcs.n	802a79c <RegionCommonUpdateBandTimeOff+0xd4>
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 802a7a8:	9b01      	ldr	r3, [sp, #4]
 802a7aa:	1aad      	subs	r5, r5, r2
 802a7ac:	42ab      	cmp	r3, r5
 802a7ae:	d900      	bls.n	802a7b2 <RegionCommonUpdateBandTimeOff+0xea>
 802a7b0:	9501      	str	r5, [sp, #4]
                validBands++;
 802a7b2:	3601      	adds	r6, #1
 802a7b4:	e7f1      	b.n	802a79a <RegionCommonUpdateBandTimeOff+0xd2>
 802a7b6:	46c0      	nop			; (mov r8, r8)
 802a7b8:	00009aaf 	.word	0x00009aaf
 802a7bc:	ffffdcd8 	.word	0xffffdcd8
 802a7c0:	00002710 	.word	0x00002710
 802a7c4:	0036ee80 	.word	0x0036ee80

0802a7c8 <RegionCommonComputeSymbolTimeLoRa>:
    return status;
}

/* ST_WORKAROUND_BEGIN: remove float/double */
uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 802a7c8:	b510      	push	{r4, lr}
 802a7ca:	0004      	movs	r4, r0
    return (1000000000UL/bandwidth) * (1 << phyDr);
 802a7cc:	4802      	ldr	r0, [pc, #8]	; (802a7d8 <RegionCommonComputeSymbolTimeLoRa+0x10>)
 802a7ce:	f7f5 fc9f 	bl	8020110 <__udivsi3>
 802a7d2:	40a0      	lsls	r0, r4
}
 802a7d4:	bd10      	pop	{r4, pc}
 802a7d6:	46c0      	nop			; (mov r8, r8)
 802a7d8:	3b9aca00 	.word	0x3b9aca00

0802a7dc <RegionCommonComputeRxWindowParameters>:
    // ((8 * 1000000) / 50);
    return 160000UL;
}

void RegionCommonComputeRxWindowParameters( uint32_t tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 802a7dc:	b570      	push	{r4, r5, r6, lr}
 802a7de:	0004      	movs	r4, r0
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 802a7e0:	480f      	ldr	r0, [pc, #60]	; (802a820 <RegionCommonComputeRxWindowParameters+0x44>)
{
 802a7e2:	000e      	movs	r6, r1
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 802a7e4:	4350      	muls	r0, r2
 802a7e6:	1e62      	subs	r2, r4, #1
 802a7e8:	0021      	movs	r1, r4
 802a7ea:	1880      	adds	r0, r0, r2
{
 802a7ec:	001d      	movs	r5, r3
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 802a7ee:	f7f5 fc8f 	bl	8020110 <__udivsi3>
 802a7f2:	4b0c      	ldr	r3, [pc, #48]	; (802a824 <RegionCommonComputeRxWindowParameters+0x48>)
 802a7f4:	18f3      	adds	r3, r6, r3
 802a7f6:	005b      	lsls	r3, r3, #1
 802a7f8:	18c0      	adds	r0, r0, r3
 802a7fa:	42b0      	cmp	r0, r6
 802a7fc:	d200      	bcs.n	802a800 <RegionCommonComputeRxWindowParameters+0x24>
 802a7fe:	0030      	movs	r0, r6
 802a800:	9b04      	ldr	r3, [sp, #16]
  *windowOffset = DIVC((int32_t)(4 * tSymbol - ((*windowTimeout * tSymbol) >> 1)), 1000000L) - 1 - wakeUpTime;
 802a802:	4909      	ldr	r1, [pc, #36]	; (802a828 <RegionCommonComputeRxWindowParameters+0x4c>)
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 802a804:	6018      	str	r0, [r3, #0]
  *windowOffset = DIVC((int32_t)(4 * tSymbol - ((*windowTimeout * tSymbol) >> 1)), 1000000L) - 1 - wakeUpTime;
 802a806:	00a3      	lsls	r3, r4, #2
 802a808:	4344      	muls	r4, r0
 802a80a:	0864      	lsrs	r4, r4, #1
 802a80c:	1b18      	subs	r0, r3, r4
 802a80e:	4b07      	ldr	r3, [pc, #28]	; (802a82c <RegionCommonComputeRxWindowParameters+0x50>)
 802a810:	43ed      	mvns	r5, r5
 802a812:	18c0      	adds	r0, r0, r3
 802a814:	f7f5 fd06 	bl	8020224 <__divsi3>
 802a818:	9b05      	ldr	r3, [sp, #20]
 802a81a:	1940      	adds	r0, r0, r5
 802a81c:	6018      	str	r0, [r3, #0]
}
 802a81e:	bd70      	pop	{r4, r5, r6, pc}
 802a820:	001e8480 	.word	0x001e8480
 802a824:	7ffffffc 	.word	0x7ffffffc
 802a828:	000f4240 	.word	0x000f4240
 802a82c:	000f423f 	.word	0x000f423f

0802a830 <RegionCommonRxBeaconSetup>:

    return phyTxPower;
}

void RegionCommonRxBeaconSetup( RegionCommonRxBeaconSetupParams_t* rxBeaconSetupParams )
{
 802a830:	b570      	push	{r4, r5, r6, lr}
 802a832:	0004      	movs	r4, r0
    bool rxContinuous = true;
    uint8_t datarate;

    // Set the radio into sleep mode
    Radio.Sleep( );
 802a834:	4d14      	ldr	r5, [pc, #80]	; (802a888 <RegionCommonRxBeaconSetup+0x58>)
{
 802a836:	b08a      	sub	sp, #40	; 0x28
    Radio.Sleep( );
 802a838:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 802a83a:	4798      	blx	r3

    // Setup frequency and payload length
    Radio.SetChannel( rxBeaconSetupParams->Frequency );
 802a83c:	6860      	ldr	r0, [r4, #4]
 802a83e:	68eb      	ldr	r3, [r5, #12]
 802a840:	4798      	blx	r3
    Radio.SetMaxPayloadLength( MODEM_LORA, rxBeaconSetupParams->BeaconSize );
 802a842:	7a21      	ldrb	r1, [r4, #8]
 802a844:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 802a846:	2001      	movs	r0, #1
 802a848:	4798      	blx	r3
    {
        rxContinuous = false;
    }

    // Get region specific datarate
    datarate = rxBeaconSetupParams->Datarates[rxBeaconSetupParams->BeaconDatarate];
 802a84a:	7a63      	ldrb	r3, [r4, #9]
    if( rxBeaconSetupParams->RxTime != 0 )
 802a84c:	68e0      	ldr	r0, [r4, #12]

    // Setup radio
    Radio.SetRxConfig( MODEM_LORA, rxBeaconSetupParams->BeaconChannelBW, datarate,
 802a84e:	6822      	ldr	r2, [r4, #0]
 802a850:	2600      	movs	r6, #0
 802a852:	5cd2      	ldrb	r2, [r2, r3]
    if( rxBeaconSetupParams->RxTime != 0 )
 802a854:	4243      	negs	r3, r0
 802a856:	4143      	adcs	r3, r0
    Radio.SetRxConfig( MODEM_LORA, rxBeaconSetupParams->BeaconChannelBW, datarate,
 802a858:	9309      	str	r3, [sp, #36]	; 0x24
 802a85a:	7a23      	ldrb	r3, [r4, #8]
 802a85c:	2001      	movs	r0, #1
 802a85e:	9304      	str	r3, [sp, #16]
 802a860:	8a23      	ldrh	r3, [r4, #16]
 802a862:	7aa1      	ldrb	r1, [r4, #10]
 802a864:	9302      	str	r3, [sp, #8]
 802a866:	230a      	movs	r3, #10
 802a868:	9608      	str	r6, [sp, #32]
 802a86a:	9607      	str	r6, [sp, #28]
 802a86c:	9606      	str	r6, [sp, #24]
 802a86e:	9605      	str	r6, [sp, #20]
 802a870:	9003      	str	r0, [sp, #12]
 802a872:	9301      	str	r3, [sp, #4]
 802a874:	9600      	str	r6, [sp, #0]
 802a876:	0003      	movs	r3, r0
 802a878:	69ae      	ldr	r6, [r5, #24]
 802a87a:	47b0      	blx	r6
                       1, 0, 10, rxBeaconSetupParams->SymbolTimeout, true, rxBeaconSetupParams->BeaconSize, false, 0, 0, false, rxContinuous );

    Radio.Rx( rxBeaconSetupParams->RxTime );
 802a87c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 802a87e:	68e0      	ldr	r0, [r4, #12]
 802a880:	4798      	blx	r3
    
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}
 802a882:	b00a      	add	sp, #40	; 0x28
 802a884:	bd70      	pop	{r4, r5, r6, pc}
 802a886:	46c0      	nop			; (mov r8, r8)
 802a888:	08031484 	.word	0x08031484

0802a88c <GetBandwidth>:
    return nextLowerDr;
}

static uint32_t GetBandwidth( uint32_t drIndex )
{
    switch( BandwidthsCN470[drIndex] )
 802a88c:	4b06      	ldr	r3, [pc, #24]	; (802a8a8 <GetBandwidth+0x1c>)
 802a88e:	0080      	lsls	r0, r0, #2
 802a890:	58c3      	ldr	r3, [r0, r3]
 802a892:	4a06      	ldr	r2, [pc, #24]	; (802a8ac <GetBandwidth+0x20>)
 802a894:	2001      	movs	r0, #1
 802a896:	4293      	cmp	r3, r2
 802a898:	d004      	beq.n	802a8a4 <GetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 802a89a:	4a05      	ldr	r2, [pc, #20]	; (802a8b0 <GetBandwidth+0x24>)
 802a89c:	189b      	adds	r3, r3, r2
 802a89e:	425a      	negs	r2, r3
 802a8a0:	4153      	adcs	r3, r2
 802a8a2:	0058      	lsls	r0, r3, #1
    }
}
 802a8a4:	4770      	bx	lr
 802a8a6:	46c0      	nop			; (mov r8, r8)
 802a8a8:	08031500 	.word	0x08031500
 802a8ac:	0003d090 	.word	0x0003d090
 802a8b0:	fff85ee0 	.word	0xfff85ee0

0802a8b4 <GetTimeOnAir>:
    }
    return true;
}

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 802a8b4:	b530      	push	{r4, r5, lr}
 802a8b6:	0005      	movs	r5, r0
 802a8b8:	b085      	sub	sp, #20
 802a8ba:	000c      	movs	r4, r1
    int8_t phyDr = DataratesCN470[datarate];
    uint32_t bandwidth = GetBandwidth( datarate );
 802a8bc:	f7ff ffe6 	bl	802a88c <GetBandwidth>
    int8_t phyDr = DataratesCN470[datarate];
 802a8c0:	4b08      	ldr	r3, [pc, #32]	; (802a8e4 <GetTimeOnAir+0x30>)
    uint32_t bandwidth = GetBandwidth( datarate );
 802a8c2:	0001      	movs	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 802a8c4:	575a      	ldrsb	r2, [r3, r5]
 802a8c6:	2300      	movs	r3, #0
 802a8c8:	2001      	movs	r0, #1
 802a8ca:	9301      	str	r3, [sp, #4]
 802a8cc:	3308      	adds	r3, #8
 802a8ce:	9300      	str	r3, [sp, #0]
 802a8d0:	4b05      	ldr	r3, [pc, #20]	; (802a8e8 <GetTimeOnAir+0x34>)
 802a8d2:	b2e4      	uxtb	r4, r4
 802a8d4:	9402      	str	r4, [sp, #8]
 802a8d6:	9003      	str	r0, [sp, #12]
 802a8d8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 802a8da:	0003      	movs	r3, r0
 802a8dc:	47a0      	blx	r4
}
 802a8de:	b005      	add	sp, #20
 802a8e0:	bd30      	pop	{r4, r5, pc}
 802a8e2:	46c0      	nop			; (mov r8, r8)
 802a8e4:	08031e09 	.word	0x08031e09
 802a8e8:	08031484 	.word	0x08031484

0802a8ec <VerifyRfFreq>:
{
 802a8ec:	b513      	push	{r0, r1, r4, lr}
    if( Radio.CheckRfFrequency( freq ) == false )
 802a8ee:	4b0a      	ldr	r3, [pc, #40]	; (802a918 <VerifyRfFreq+0x2c>)
{
 802a8f0:	0004      	movs	r4, r0
    if( Radio.CheckRfFrequency( freq ) == false )
 802a8f2:	6a1b      	ldr	r3, [r3, #32]
 802a8f4:	9301      	str	r3, [sp, #4]
 802a8f6:	4798      	blx	r3
 802a8f8:	1e01      	subs	r1, r0, #0
 802a8fa:	d00b      	beq.n	802a914 <VerifyRfFreq+0x28>
    if( ( freq < CN470_FIRST_RX1_CHANNEL ) ||
 802a8fc:	4b07      	ldr	r3, [pc, #28]	; (802a91c <VerifyRfFreq+0x30>)
        return false;
 802a8fe:	2100      	movs	r1, #0
    if( ( freq < CN470_FIRST_RX1_CHANNEL ) ||
 802a900:	18e0      	adds	r0, r4, r3
 802a902:	4b07      	ldr	r3, [pc, #28]	; (802a920 <VerifyRfFreq+0x34>)
 802a904:	4298      	cmp	r0, r3
 802a906:	d805      	bhi.n	802a914 <VerifyRfFreq+0x28>
        ( freq > CN470_LAST_RX1_CHANNEL ) ||
 802a908:	4906      	ldr	r1, [pc, #24]	; (802a924 <VerifyRfFreq+0x38>)
 802a90a:	f7f5 fc87 	bl	802021c <__aeabi_uidivmod>
 802a90e:	424b      	negs	r3, r1
 802a910:	4159      	adcs	r1, r3
 802a912:	b2c9      	uxtb	r1, r1
}
 802a914:	0008      	movs	r0, r1
 802a916:	bd16      	pop	{r1, r2, r4, pc}
 802a918:	08031484 	.word	0x08031484
 802a91c:	e22e0720 	.word	0xe22e0720
 802a920:	008f6ec0 	.word	0x008f6ec0
 802a924:	00030d40 	.word	0x00030d40

0802a928 <RegionCN470GetPhyParam>:

PhyParam_t RegionCN470GetPhyParam( GetPhyParams_t* getPhy )
{
 802a928:	b507      	push	{r0, r1, r2, lr}
    PhyParam_t phyParam = { 0 };
 802a92a:	2200      	movs	r2, #0
{
 802a92c:	0003      	movs	r3, r0
 802a92e:	7800      	ldrb	r0, [r0, #0]
    PhyParam_t phyParam = { 0 };
 802a930:	9200      	str	r2, [sp, #0]

    switch( getPhy->Attribute )
 802a932:	380b      	subs	r0, #11
 802a934:	282e      	cmp	r0, #46	; 0x2e
 802a936:	d821      	bhi.n	802a97c <RegionCN470GetPhyParam+0x54>
 802a938:	f7f5 fbcc 	bl	80200d4 <__gnu_thumb1_case_uqi>
 802a93c:	2c272522 	.word	0x2c272522
 802a940:	35323020 	.word	0x35323020
 802a944:	3f3c3a38 	.word	0x3f3c3a38
 802a948:	4b204920 	.word	0x4b204920
 802a94c:	20514f4d 	.word	0x20514f4d
 802a950:	18565320 	.word	0x18565320
 802a954:	20202020 	.word	0x20202020
 802a958:	20202020 	.word	0x20202020
 802a95c:	20202020 	.word	0x20202020
 802a960:	605a5820 	.word	0x605a5820
 802a964:	60586462 	.word	0x60586462
 802a968:	6664      	.short	0x6664
 802a96a:	6a          	.byte	0x6a
 802a96b:	00          	.byte	0x00
            phyParam.Value = CN470_DEFAULT_DATARATE;
            break;
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, CN470_TX_MIN_DATARATE );
 802a96c:	785b      	ldrb	r3, [r3, #1]
 802a96e:	b25b      	sxtb	r3, r3
        nextLowerDr = minDr;
 802a970:	1e1a      	subs	r2, r3, #0
    if( dr == minDr )
 802a972:	d001      	beq.n	802a978 <RegionCN470GetPhyParam+0x50>
        nextLowerDr = dr - 1;
 802a974:	3b01      	subs	r3, #1
 802a976:	b2da      	uxtb	r2, r3
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, CN470_TX_MIN_DATARATE );
 802a978:	b252      	sxtb	r2, r2
 802a97a:	9200      	str	r2, [sp, #0]
            break;
        }
    }

    return phyParam;
}
 802a97c:	9800      	ldr	r0, [sp, #0]
 802a97e:	bd0e      	pop	{r1, r2, r3, pc}
            phyParam.Value = CN470_ADR_ACK_LIMIT;
 802a980:	2340      	movs	r3, #64	; 0x40
            phyParam.Value = CN470_PING_SLOT_NB_CHANNELS;
 802a982:	9300      	str	r3, [sp, #0]
            break;
 802a984:	e7fa      	b.n	802a97c <RegionCN470GetPhyParam+0x54>
            phyParam.Value = CN470_ADR_ACK_DELAY;
 802a986:	2320      	movs	r3, #32
 802a988:	e7fb      	b.n	802a982 <RegionCN470GetPhyParam+0x5a>
            phyParam.Value = MaxPayloadOfDatarateCN470[getPhy->Datarate];
 802a98a:	785b      	ldrb	r3, [r3, #1]
 802a98c:	4a23      	ldr	r2, [pc, #140]	; (802aa1c <RegionCN470GetPhyParam+0xf4>)
 802a98e:	b25b      	sxtb	r3, r3
            phyParam.Value = DataratesCN470[getPhy->Datarate];
 802a990:	5cd3      	ldrb	r3, [r2, r3]
 802a992:	e7f6      	b.n	802a982 <RegionCN470GetPhyParam+0x5a>
            phyParam.Value = MaxPayloadOfDatarateRepeaterCN470[getPhy->Datarate];
 802a994:	785b      	ldrb	r3, [r3, #1]
 802a996:	4a22      	ldr	r2, [pc, #136]	; (802aa20 <RegionCN470GetPhyParam+0xf8>)
 802a998:	b25b      	sxtb	r3, r3
 802a99a:	e7f9      	b.n	802a990 <RegionCN470GetPhyParam+0x68>
            phyParam.Value = CN470_MAX_RX_WINDOW;
 802a99c:	4b21      	ldr	r3, [pc, #132]	; (802aa24 <RegionCN470GetPhyParam+0xfc>)
 802a99e:	e7f0      	b.n	802a982 <RegionCN470GetPhyParam+0x5a>
            phyParam.Value = CN470_RECEIVE_DELAY1;
 802a9a0:	23fa      	movs	r3, #250	; 0xfa
 802a9a2:	009b      	lsls	r3, r3, #2
 802a9a4:	e7ed      	b.n	802a982 <RegionCN470GetPhyParam+0x5a>
            phyParam.Value = CN470_RECEIVE_DELAY2;
 802a9a6:	23fa      	movs	r3, #250	; 0xfa
 802a9a8:	00db      	lsls	r3, r3, #3
 802a9aa:	e7ea      	b.n	802a982 <RegionCN470GetPhyParam+0x5a>
            phyParam.Value = CN470_JOIN_ACCEPT_DELAY1;
 802a9ac:	4b1e      	ldr	r3, [pc, #120]	; (802aa28 <RegionCN470GetPhyParam+0x100>)
 802a9ae:	e7e8      	b.n	802a982 <RegionCN470GetPhyParam+0x5a>
            phyParam.Value = CN470_JOIN_ACCEPT_DELAY2;
 802a9b0:	4b1e      	ldr	r3, [pc, #120]	; (802aa2c <RegionCN470GetPhyParam+0x104>)
 802a9b2:	e7e6      	b.n	802a982 <RegionCN470GetPhyParam+0x5a>
            phyParam.Value = CN470_MAX_FCNT_GAP;
 802a9b4:	2380      	movs	r3, #128	; 0x80
 802a9b6:	01db      	lsls	r3, r3, #7
 802a9b8:	e7e3      	b.n	802a982 <RegionCN470GetPhyParam+0x5a>
            phyParam.Value = ( CN470_ACKTIMEOUT + randr( -CN470_ACK_TIMEOUT_RND, CN470_ACK_TIMEOUT_RND ) );
 802a9ba:	21fa      	movs	r1, #250	; 0xfa
 802a9bc:	481c      	ldr	r0, [pc, #112]	; (802aa30 <RegionCN470GetPhyParam+0x108>)
 802a9be:	0089      	lsls	r1, r1, #2
 802a9c0:	f7f9 fb0e 	bl	8023fe0 <randr>
 802a9c4:	23fa      	movs	r3, #250	; 0xfa
 802a9c6:	00db      	lsls	r3, r3, #3
 802a9c8:	18c0      	adds	r0, r0, r3
            phyParam.Value = GetBandwidth( getPhy->Datarate );
 802a9ca:	9000      	str	r0, [sp, #0]
            break;
 802a9cc:	e7d6      	b.n	802a97c <RegionCN470GetPhyParam+0x54>
            phyParam.Value = CN470_RX_WND_2_FREQ;
 802a9ce:	4b19      	ldr	r3, [pc, #100]	; (802aa34 <RegionCN470GetPhyParam+0x10c>)
 802a9d0:	e7d7      	b.n	802a982 <RegionCN470GetPhyParam+0x5a>
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 802a9d2:	4b19      	ldr	r3, [pc, #100]	; (802aa38 <RegionCN470GetPhyParam+0x110>)
 802a9d4:	e7d5      	b.n	802a982 <RegionCN470GetPhyParam+0x5a>
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 802a9d6:	4b19      	ldr	r3, [pc, #100]	; (802aa3c <RegionCN470GetPhyParam+0x114>)
 802a9d8:	e7d3      	b.n	802a982 <RegionCN470GetPhyParam+0x5a>
            phyParam.Value = CN470_MAX_NB_CHANNELS;
 802a9da:	2360      	movs	r3, #96	; 0x60
 802a9dc:	e7d1      	b.n	802a982 <RegionCN470GetPhyParam+0x5a>
            phyParam.Channels = NvmCtx.Channels;
 802a9de:	4b18      	ldr	r3, [pc, #96]	; (802aa40 <RegionCN470GetPhyParam+0x118>)
 802a9e0:	e7cf      	b.n	802a982 <RegionCN470GetPhyParam+0x5a>
            phyParam.fValue = CN470_DEFAULT_MAX_EIRP;
 802a9e2:	4b18      	ldr	r3, [pc, #96]	; (802aa44 <RegionCN470GetPhyParam+0x11c>)
            phyParam.fValue = CN470_DEFAULT_ANTENNA_GAIN;
 802a9e4:	9300      	str	r3, [sp, #0]
            break;
 802a9e6:	e7c9      	b.n	802a97c <RegionCN470GetPhyParam+0x54>
            phyParam.fValue = CN470_DEFAULT_ANTENNA_GAIN;
 802a9e8:	4b17      	ldr	r3, [pc, #92]	; (802aa48 <RegionCN470GetPhyParam+0x120>)
 802a9ea:	e7fb      	b.n	802a9e4 <RegionCN470GetPhyParam+0xbc>
            phyParam.Value = CN470_BEACON_CHANNEL_FREQ;
 802a9ec:	4b17      	ldr	r3, [pc, #92]	; (802aa4c <RegionCN470GetPhyParam+0x124>)
 802a9ee:	e7c8      	b.n	802a982 <RegionCN470GetPhyParam+0x5a>
            phyParam.BeaconFormat.BeaconSize = CN470_BEACON_SIZE;
 802a9f0:	466a      	mov	r2, sp
 802a9f2:	4b17      	ldr	r3, [pc, #92]	; (802aa50 <RegionCN470GetPhyParam+0x128>)
 802a9f4:	8013      	strh	r3, [r2, #0]
            phyParam.BeaconFormat.Rfu2Size = CN470_RFU2_SIZE;
 802a9f6:	2301      	movs	r3, #1
 802a9f8:	7093      	strb	r3, [r2, #2]
            break;
 802a9fa:	e7bf      	b.n	802a97c <RegionCN470GetPhyParam+0x54>
            phyParam.Value = CN470_BEACON_CHANNEL_DR;
 802a9fc:	2302      	movs	r3, #2
 802a9fe:	e7c0      	b.n	802a982 <RegionCN470GetPhyParam+0x5a>
            phyParam.Value = CN470_BEACON_CHANNEL_STEPWIDTH;
 802aa00:	4b14      	ldr	r3, [pc, #80]	; (802aa54 <RegionCN470GetPhyParam+0x12c>)
 802aa02:	e7be      	b.n	802a982 <RegionCN470GetPhyParam+0x5a>
            phyParam.Value = CN470_PING_SLOT_NB_CHANNELS;
 802aa04:	2308      	movs	r3, #8
 802aa06:	e7bc      	b.n	802a982 <RegionCN470GetPhyParam+0x5a>
            phyParam.Value = DataratesCN470[getPhy->Datarate];
 802aa08:	785b      	ldrb	r3, [r3, #1]
 802aa0a:	4a13      	ldr	r2, [pc, #76]	; (802aa58 <RegionCN470GetPhyParam+0x130>)
 802aa0c:	b25b      	sxtb	r3, r3
 802aa0e:	e7bf      	b.n	802a990 <RegionCN470GetPhyParam+0x68>
            phyParam.Value = GetBandwidth( getPhy->Datarate );
 802aa10:	2001      	movs	r0, #1
 802aa12:	5618      	ldrsb	r0, [r3, r0]
 802aa14:	f7ff ff3a 	bl	802a88c <GetBandwidth>
 802aa18:	e7d7      	b.n	802a9ca <RegionCN470GetPhyParam+0xa2>
 802aa1a:	46c0      	nop			; (mov r8, r8)
 802aa1c:	08031e0f 	.word	0x08031e0f
 802aa20:	08031e15 	.word	0x08031e15
 802aa24:	00000bb8 	.word	0x00000bb8
 802aa28:	00001388 	.word	0x00001388
 802aa2c:	00001770 	.word	0x00001770
 802aa30:	fffffc18 	.word	0xfffffc18
 802aa34:	1e1e4420 	.word	0x1e1e4420
 802aa38:	200095cc 	.word	0x200095cc
 802aa3c:	200095d8 	.word	0x200095d8
 802aa40:	20009138 	.word	0x20009138
 802aa44:	41993333 	.word	0x41993333
 802aa48:	4009999a 	.word	0x4009999a
 802aa4c:	1e4c0ae0 	.word	0x1e4c0ae0
 802aa50:	00000313 	.word	0x00000313
 802aa54:	00030d40 	.word	0x00030d40
 802aa58:	08031e09 	.word	0x08031e09

0802aa5c <RegionCN470SetBandTxDone>:

void RegionCN470SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
    RegionCommonSetBandTxDone( &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band],
 802aa5c:	230c      	movs	r3, #12
{
 802aa5e:	b513      	push	{r0, r1, r4, lr}
 802aa60:	0001      	movs	r1, r0
    RegionCommonSetBandTxDone( &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band],
 802aa62:	7842      	ldrb	r2, [r0, #1]
 802aa64:	7800      	ldrb	r0, [r0, #0]
 802aa66:	4c08      	ldr	r4, [pc, #32]	; (802aa88 <RegionCN470SetBandTxDone+0x2c>)
 802aa68:	4343      	muls	r3, r0
 802aa6a:	2014      	movs	r0, #20
 802aa6c:	18e3      	adds	r3, r4, r3
 802aa6e:	7a5b      	ldrb	r3, [r3, #9]
 802aa70:	4358      	muls	r0, r3
 802aa72:	2390      	movs	r3, #144	; 0x90
 802aa74:	00db      	lsls	r3, r3, #3
 802aa76:	18c0      	adds	r0, r0, r3
 802aa78:	690b      	ldr	r3, [r1, #16]
 802aa7a:	1900      	adds	r0, r0, r4
 802aa7c:	9300      	str	r3, [sp, #0]
 802aa7e:	68cb      	ldr	r3, [r1, #12]
 802aa80:	6889      	ldr	r1, [r1, #8]
 802aa82:	f7ff fdf3 	bl	802a66c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
}
 802aa86:	bd13      	pop	{r0, r1, r4, pc}
 802aa88:	20009138 	.word	0x20009138

0802aa8c <RegionCN470InitDefaults>:

void RegionCN470InitDefaults( InitDefaultsParams_t* params )
{
    Band_t bands[CN470_MAX_NB_BANDS] =
 802aa8c:	2301      	movs	r3, #1
{
 802aa8e:	b570      	push	{r4, r5, r6, lr}
 802aa90:	b086      	sub	sp, #24
    Band_t bands[CN470_MAX_NB_BANDS] =
 802aa92:	a901      	add	r1, sp, #4
 802aa94:	800b      	strh	r3, [r1, #0]
 802aa96:	2300      	movs	r3, #0
 802aa98:	708b      	strb	r3, [r1, #2]
 802aa9a:	604b      	str	r3, [r1, #4]
 802aa9c:	608b      	str	r3, [r1, #8]
 802aa9e:	60cb      	str	r3, [r1, #12]
 802aaa0:	740b      	strb	r3, [r1, #16]
    {
        CN470_BAND0
    };

    switch( params->Type )
 802aaa2:	7904      	ldrb	r4, [r0, #4]
 802aaa4:	2c02      	cmp	r4, #2
 802aaa6:	d803      	bhi.n	802aab0 <RegionCN470InitDefaults+0x24>
 802aaa8:	429c      	cmp	r4, r3
 802aaaa:	d005      	beq.n	802aab8 <RegionCN470InitDefaults+0x2c>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 802aaac:	2206      	movs	r2, #6
 802aaae:	e01d      	b.n	802aaec <RegionCN470InitDefaults+0x60>
    switch( params->Type )
 802aab0:	2c03      	cmp	r4, #3
 802aab2:	d020      	beq.n	802aaf6 <RegionCN470InitDefaults+0x6a>
        default:
        {
            break;
        }
    }
}
 802aab4:	b006      	add	sp, #24
 802aab6:	bd70      	pop	{r4, r5, r6, pc}
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * CN470_MAX_NB_BANDS );
 802aab8:	2214      	movs	r2, #20
 802aaba:	4813      	ldr	r0, [pc, #76]	; (802ab08 <RegionCN470InitDefaults+0x7c>)
 802aabc:	f004 fb39 	bl	802f132 <memcpy1>
            for( uint8_t i = 0; i < CN470_MAX_NB_CHANNELS; i++ )
 802aac0:	4b12      	ldr	r3, [pc, #72]	; (802ab0c <RegionCN470InitDefaults+0x80>)
                NvmCtx.Channels[i].DrRange.Value = ( DR_5 << 4 ) | DR_0;
 802aac2:	2550      	movs	r5, #80	; 0x50
 802aac4:	0019      	movs	r1, r3
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * CN470_MAX_NB_BANDS );
 802aac6:	4a12      	ldr	r2, [pc, #72]	; (802ab10 <RegionCN470InitDefaults+0x84>)
            for( uint8_t i = 0; i < CN470_MAX_NB_CHANNELS; i++ )
 802aac8:	4812      	ldr	r0, [pc, #72]	; (802ab14 <RegionCN470InitDefaults+0x88>)
 802aaca:	4e13      	ldr	r6, [pc, #76]	; (802ab18 <RegionCN470InitDefaults+0x8c>)
                NvmCtx.Channels[i].Frequency = 470300000 + i * 200000;
 802aacc:	601a      	str	r2, [r3, #0]
            for( uint8_t i = 0; i < CN470_MAX_NB_CHANNELS; i++ )
 802aace:	1992      	adds	r2, r2, r6
                NvmCtx.Channels[i].DrRange.Value = ( DR_5 << 4 ) | DR_0;
 802aad0:	721d      	strb	r5, [r3, #8]
                NvmCtx.Channels[i].Band = 0;
 802aad2:	725c      	strb	r4, [r3, #9]
            for( uint8_t i = 0; i < CN470_MAX_NB_CHANNELS; i++ )
 802aad4:	330c      	adds	r3, #12
 802aad6:	4282      	cmp	r2, r0
 802aad8:	d1f7      	bne.n	802aaca <RegionCN470InitDefaults+0x3e>
            NvmCtx.ChannelsDefaultMask[0] = 0x00FF;
 802aada:	2394      	movs	r3, #148	; 0x94
 802aadc:	22ff      	movs	r2, #255	; 0xff
 802aade:	00db      	lsls	r3, r3, #3
 802aae0:	50ca      	str	r2, [r1, r3]
            NvmCtx.ChannelsDefaultMask[2] = 0x0000;
 802aae2:	4b0e      	ldr	r3, [pc, #56]	; (802ab1c <RegionCN470InitDefaults+0x90>)
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 802aae4:	3af9      	subs	r2, #249	; 0xf9
            NvmCtx.ChannelsDefaultMask[2] = 0x0000;
 802aae6:	50cc      	str	r4, [r1, r3]
            NvmCtx.ChannelsDefaultMask[4] = 0x0000;
 802aae8:	3304      	adds	r3, #4
 802aaea:	50cc      	str	r4, [r1, r3]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 802aaec:	490c      	ldr	r1, [pc, #48]	; (802ab20 <RegionCN470InitDefaults+0x94>)
 802aaee:	480d      	ldr	r0, [pc, #52]	; (802ab24 <RegionCN470InitDefaults+0x98>)
 802aaf0:	f005 fa8f 	bl	8030012 <RegionCommonChanMaskCopy>
            break;
 802aaf4:	e7de      	b.n	802aab4 <RegionCN470InitDefaults+0x28>
            if( params->NvmCtx != 0 )
 802aaf6:	6801      	ldr	r1, [r0, #0]
 802aaf8:	2900      	cmp	r1, #0
 802aafa:	d0db      	beq.n	802aab4 <RegionCN470InitDefaults+0x28>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 802aafc:	4a0a      	ldr	r2, [pc, #40]	; (802ab28 <RegionCN470InitDefaults+0x9c>)
 802aafe:	4803      	ldr	r0, [pc, #12]	; (802ab0c <RegionCN470InitDefaults+0x80>)
 802ab00:	f004 fb17 	bl	802f132 <memcpy1>
}
 802ab04:	e7d6      	b.n	802aab4 <RegionCN470InitDefaults+0x28>
 802ab06:	46c0      	nop			; (mov r8, r8)
 802ab08:	200095b8 	.word	0x200095b8
 802ab0c:	20009138 	.word	0x20009138
 802ab10:	1c083560 	.word	0x1c083560
 802ab14:	1d2d2d60 	.word	0x1d2d2d60
 802ab18:	00030d40 	.word	0x00030d40
 802ab1c:	000004a4 	.word	0x000004a4
 802ab20:	200095d8 	.word	0x200095d8
 802ab24:	200095cc 	.word	0x200095cc
 802ab28:	000004ac 	.word	0x000004ac

0802ab2c <RegionCN470GetNvmCtx>:

void* RegionCN470GetNvmCtx( GetNvmCtxParams_t* params )
{
    params->nvmCtxSize = sizeof( RegionCN470NvmCtx_t );
 802ab2c:	4b01      	ldr	r3, [pc, #4]	; (802ab34 <RegionCN470GetNvmCtx+0x8>)
 802ab2e:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 802ab30:	4801      	ldr	r0, [pc, #4]	; (802ab38 <RegionCN470GetNvmCtx+0xc>)
 802ab32:	4770      	bx	lr
 802ab34:	000004ac 	.word	0x000004ac
 802ab38:	20009138 	.word	0x20009138

0802ab3c <RegionCN470ApplyCFList>:
            return false;
    }
}

void RegionCN470ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 802ab3c:	b510      	push	{r4, lr}
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 802ab3e:	7903      	ldrb	r3, [r0, #4]
 802ab40:	2b10      	cmp	r3, #16
 802ab42:	d110      	bne.n	802ab66 <RegionCN470ApplyCFList+0x2a>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 802ab44:	6803      	ldr	r3, [r0, #0]
 802ab46:	7bda      	ldrb	r2, [r3, #15]
 802ab48:	2a01      	cmp	r2, #1
 802ab4a:	d10c      	bne.n	802ab66 <RegionCN470ApplyCFList+0x2a>
 802ab4c:	001c      	movs	r4, r3
 802ab4e:	4a06      	ldr	r2, [pc, #24]	; (802ab68 <RegionCN470ApplyCFList+0x2c>)
 802ab50:	340c      	adds	r4, #12
    }

    // ChMask0 - ChMask5 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 5; chMaskItr++, cntPayload+=2 )
    {
        NvmCtx.ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 802ab52:	7819      	ldrb	r1, [r3, #0]
 802ab54:	8011      	strh	r1, [r2, #0]
        NvmCtx.ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 802ab56:	7858      	ldrb	r0, [r3, #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 5; chMaskItr++, cntPayload+=2 )
 802ab58:	3302      	adds	r3, #2
        NvmCtx.ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 802ab5a:	0200      	lsls	r0, r0, #8
 802ab5c:	4301      	orrs	r1, r0
 802ab5e:	8011      	strh	r1, [r2, #0]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 5; chMaskItr++, cntPayload+=2 )
 802ab60:	3202      	adds	r2, #2
 802ab62:	42a3      	cmp	r3, r4
 802ab64:	d1f5      	bne.n	802ab52 <RegionCN470ApplyCFList+0x16>
    }
}
 802ab66:	bd10      	pop	{r4, pc}
 802ab68:	200095cc 	.word	0x200095cc

0802ab6c <RegionCN470ChanMaskSet>:

bool RegionCN470ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 802ab6c:	b510      	push	{r4, lr}
    switch( chanMaskSet->ChannelsMaskType )
 802ab6e:	7904      	ldrb	r4, [r0, #4]
 802ab70:	2c00      	cmp	r4, #0
 802ab72:	d003      	beq.n	802ab7c <RegionCN470ChanMaskSet+0x10>
 802ab74:	2c01      	cmp	r4, #1
 802ab76:	d008      	beq.n	802ab8a <RegionCN470ChanMaskSet+0x1e>
 802ab78:	2000      	movs	r0, #0
        }
        default:
            return false;
    }
    return true;
}
 802ab7a:	bd10      	pop	{r4, pc}
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 6 );
 802ab7c:	6801      	ldr	r1, [r0, #0]
 802ab7e:	2206      	movs	r2, #6
 802ab80:	4805      	ldr	r0, [pc, #20]	; (802ab98 <RegionCN470ChanMaskSet+0x2c>)
 802ab82:	f005 fa46 	bl	8030012 <RegionCommonChanMaskCopy>
    return true;
 802ab86:	2001      	movs	r0, #1
            break;
 802ab88:	e7f7      	b.n	802ab7a <RegionCN470ChanMaskSet+0xe>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 6 );
 802ab8a:	6801      	ldr	r1, [r0, #0]
 802ab8c:	2206      	movs	r2, #6
 802ab8e:	4803      	ldr	r0, [pc, #12]	; (802ab9c <RegionCN470ChanMaskSet+0x30>)
 802ab90:	f005 fa3f 	bl	8030012 <RegionCommonChanMaskCopy>
    return true;
 802ab94:	0020      	movs	r0, r4
            break;
 802ab96:	e7f0      	b.n	802ab7a <RegionCN470ChanMaskSet+0xe>
 802ab98:	200095cc 	.word	0x200095cc
 802ab9c:	200095d8 	.word	0x200095d8

0802aba0 <RegionCN470ComputeRxWindowParameters>:

void RegionCN470ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 802aba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 802aba2:	001c      	movs	r4, r3
 802aba4:	000e      	movs	r6, r1
 802aba6:	0017      	movs	r7, r2
 802aba8:	b085      	sub	sp, #20
    /* ST_WORKAROUND_BEGIN: remove float/double */
    uint32_t tSymbol = 0;
    /* ST_WORKAROUND_END */

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, CN470_RX_MAX_DATARATE );
 802abaa:	1c03      	adds	r3, r0, #0
 802abac:	2805      	cmp	r0, #5
 802abae:	dd00      	ble.n	802abb2 <RegionCN470ComputeRxWindowParameters+0x12>
 802abb0:	2305      	movs	r3, #5
 802abb2:	b25d      	sxtb	r5, r3
 802abb4:	7063      	strb	r3, [r4, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 802abb6:	0028      	movs	r0, r5
 802abb8:	f7ff fe68 	bl	802a88c <GetBandwidth>

    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesCN470[rxConfigParams->Datarate], BandwidthsCN470[rxConfigParams->Datarate] );
 802abbc:	4b0c      	ldr	r3, [pc, #48]	; (802abf0 <RegionCN470ComputeRxWindowParameters+0x50>)
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 802abbe:	70a0      	strb	r0, [r4, #2]
    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesCN470[rxConfigParams->Datarate], BandwidthsCN470[rxConfigParams->Datarate] );
 802abc0:	5d58      	ldrb	r0, [r3, r5]
 802abc2:	4b0c      	ldr	r3, [pc, #48]	; (802abf4 <RegionCN470ComputeRxWindowParameters+0x54>)
 802abc4:	00aa      	lsls	r2, r5, #2
 802abc6:	58d1      	ldr	r1, [r2, r3]
 802abc8:	f7ff fdfe 	bl	802a7c8 <RegionCommonComputeSymbolTimeLoRa>

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 802abcc:	4b0a      	ldr	r3, [pc, #40]	; (802abf8 <RegionCN470ComputeRxWindowParameters+0x58>)
    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesCN470[rxConfigParams->Datarate], BandwidthsCN470[rxConfigParams->Datarate] );
 802abce:	0005      	movs	r5, r0
    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 802abd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802abd2:	9303      	str	r3, [sp, #12]
 802abd4:	4798      	blx	r3
 802abd6:	0022      	movs	r2, r4
 802abd8:	3408      	adds	r4, #8
 802abda:	320c      	adds	r2, #12
 802abdc:	0003      	movs	r3, r0
 802abde:	9201      	str	r2, [sp, #4]
 802abe0:	0031      	movs	r1, r6
 802abe2:	003a      	movs	r2, r7
 802abe4:	0028      	movs	r0, r5
 802abe6:	9400      	str	r4, [sp, #0]
 802abe8:	f7ff fdf8 	bl	802a7dc <RegionCommonComputeRxWindowParameters>
}
 802abec:	b005      	add	sp, #20
 802abee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802abf0:	08031e09 	.word	0x08031e09
 802abf4:	08031500 	.word	0x08031500
 802abf8:	08031484 	.word	0x08031484

0802abfc <RegionCN470RxConfig>:

bool RegionCN470RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 802abfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    int8_t dr = rxConfig->Datarate;
 802abfe:	2601      	movs	r6, #1
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;

    if( Radio.GetStatus( ) != RF_IDLE )
 802ac00:	4f27      	ldr	r7, [pc, #156]	; (802aca0 <RegionCN470RxConfig+0xa4>)
{
 802ac02:	b08f      	sub	sp, #60	; 0x3c
    if( Radio.GetStatus( ) != RF_IDLE )
 802ac04:	687b      	ldr	r3, [r7, #4]
{
 802ac06:	910c      	str	r1, [sp, #48]	; 0x30
    int8_t dr = rxConfig->Datarate;
 802ac08:	5786      	ldrsb	r6, [r0, r6]
{
 802ac0a:	0004      	movs	r4, r0
    if( Radio.GetStatus( ) != RF_IDLE )
 802ac0c:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32_t frequency = rxConfig->Frequency;
 802ac0e:	6845      	ldr	r5, [r0, #4]
    if( Radio.GetStatus( ) != RF_IDLE )
 802ac10:	4798      	blx	r3
    {
        return false;
 802ac12:	2300      	movs	r3, #0
    if( Radio.GetStatus( ) != RF_IDLE )
 802ac14:	4298      	cmp	r0, r3
 802ac16:	d13d      	bne.n	802ac94 <RegionCN470RxConfig+0x98>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 802ac18:	7ce3      	ldrb	r3, [r4, #19]
 802ac1a:	2b00      	cmp	r3, #0
 802ac1c:	d108      	bne.n	802ac30 <RegionCN470RxConfig+0x34>
    {
        // Apply window 1 frequency
        frequency = CN470_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 48 ) * CN470_STEPWIDTH_RX1_CHANNEL;
 802ac1e:	2130      	movs	r1, #48	; 0x30
 802ac20:	7820      	ldrb	r0, [r4, #0]
 802ac22:	f7f5 fafb 	bl	802021c <__aeabi_uidivmod>
 802ac26:	4d1f      	ldr	r5, [pc, #124]	; (802aca4 <RegionCN470RxConfig+0xa8>)
 802ac28:	b2c9      	uxtb	r1, r1
 802ac2a:	434d      	muls	r5, r1
 802ac2c:	4b1e      	ldr	r3, [pc, #120]	; (802aca8 <RegionCN470RxConfig+0xac>)
 802ac2e:	18ed      	adds	r5, r5, r3
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesCN470[dr];
 802ac30:	4b1e      	ldr	r3, [pc, #120]	; (802acac <RegionCN470RxConfig+0xb0>)

    Radio.SetChannel( frequency );
 802ac32:	0028      	movs	r0, r5
    phyDr = DataratesCN470[dr];
 802ac34:	579b      	ldrsb	r3, [r3, r6]
 802ac36:	930b      	str	r3, [sp, #44]	; 0x2c
    Radio.SetChannel( frequency );
 802ac38:	68fb      	ldr	r3, [r7, #12]
 802ac3a:	930d      	str	r3, [sp, #52]	; 0x34
 802ac3c:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 802ac3e:	7ca3      	ldrb	r3, [r4, #18]
 802ac40:	2200      	movs	r2, #0
 802ac42:	9309      	str	r3, [sp, #36]	; 0x24
 802ac44:	68a3      	ldr	r3, [r4, #8]
 802ac46:	2001      	movs	r0, #1
 802ac48:	b29b      	uxth	r3, r3
 802ac4a:	9302      	str	r3, [sp, #8]
 802ac4c:	2308      	movs	r3, #8
 802ac4e:	9301      	str	r3, [sp, #4]
 802ac50:	69bb      	ldr	r3, [r7, #24]
 802ac52:	9207      	str	r2, [sp, #28]
 802ac54:	930d      	str	r3, [sp, #52]	; 0x34
 802ac56:	9206      	str	r2, [sp, #24]
 802ac58:	0003      	movs	r3, r0
 802ac5a:	9205      	str	r2, [sp, #20]
 802ac5c:	9204      	str	r2, [sp, #16]
 802ac5e:	9203      	str	r2, [sp, #12]
 802ac60:	9200      	str	r2, [sp, #0]
 802ac62:	78a1      	ldrb	r1, [r4, #2]
 802ac64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802ac66:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802ac68:	9008      	str	r0, [sp, #32]
 802ac6a:	47b8      	blx	r7

    if( rxConfig->RepeaterSupport == true )
 802ac6c:	7c63      	ldrb	r3, [r4, #17]
 802ac6e:	2b00      	cmp	r3, #0
 802ac70:	d013      	beq.n	802ac9a <RegionCN470RxConfig+0x9e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterCN470[dr];
 802ac72:	4b0f      	ldr	r3, [pc, #60]	; (802acb0 <RegionCN470RxConfig+0xb4>)
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateCN470[dr];
 802ac74:	5d99      	ldrb	r1, [r3, r6]
    }
    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 802ac76:	4b0a      	ldr	r3, [pc, #40]	; (802aca0 <RegionCN470RxConfig+0xa4>)
 802ac78:	310d      	adds	r1, #13
 802ac7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802ac7c:	2001      	movs	r0, #1
 802ac7e:	b2c9      	uxtb	r1, r1
 802ac80:	930b      	str	r3, [sp, #44]	; 0x2c
 802ac82:	4798      	blx	r3
    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 802ac84:	0032      	movs	r2, r6
 802ac86:	0029      	movs	r1, r5
 802ac88:	7ce0      	ldrb	r0, [r4, #19]
 802ac8a:	f005 fae5 	bl	8030258 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 802ac8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802ac90:	701e      	strb	r6, [r3, #0]
    return true;
 802ac92:	2301      	movs	r3, #1
}
 802ac94:	0018      	movs	r0, r3
 802ac96:	b00f      	add	sp, #60	; 0x3c
 802ac98:	bdf0      	pop	{r4, r5, r6, r7, pc}
        maxPayload = MaxPayloadOfDatarateCN470[dr];
 802ac9a:	4b06      	ldr	r3, [pc, #24]	; (802acb4 <RegionCN470RxConfig+0xb8>)
 802ac9c:	e7ea      	b.n	802ac74 <RegionCN470RxConfig+0x78>
 802ac9e:	46c0      	nop			; (mov r8, r8)
 802aca0:	08031484 	.word	0x08031484
 802aca4:	00030d40 	.word	0x00030d40
 802aca8:	1dd1f8e0 	.word	0x1dd1f8e0
 802acac:	08031e09 	.word	0x08031e09
 802acb0:	08031e15 	.word	0x08031e15
 802acb4:	08031e0f 	.word	0x08031e0f

0802acb8 <RegionCN470TxConfig>:

bool RegionCN470TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
    int8_t phyDr = DataratesCN470[txConfig->Datarate];
 802acb8:	2301      	movs	r3, #1
{
 802acba:	b5f0      	push	{r4, r5, r6, r7, lr}
 802acbc:	b08f      	sub	sp, #60	; 0x3c
 802acbe:	910a      	str	r1, [sp, #40]	; 0x28
 802acc0:	920b      	str	r2, [sp, #44]	; 0x2c
    int8_t phyDr = DataratesCN470[txConfig->Datarate];
 802acc2:	56c3      	ldrsb	r3, [r0, r3]
 802acc4:	4a2c      	ldr	r2, [pc, #176]	; (802ad78 <RegionCN470TxConfig+0xc0>)
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 802acc6:	7801      	ldrb	r1, [r0, #0]
    int8_t phyDr = DataratesCN470[txConfig->Datarate];
 802acc8:	56d3      	ldrsb	r3, [r2, r3]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 802acca:	220c      	movs	r2, #12
 802accc:	434a      	muls	r2, r1
    int8_t phyDr = DataratesCN470[txConfig->Datarate];
 802acce:	001f      	movs	r7, r3
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 802acd0:	4b2a      	ldr	r3, [pc, #168]	; (802ad7c <RegionCN470TxConfig+0xc4>)
{
 802acd2:	0004      	movs	r4, r0
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 802acd4:	189a      	adds	r2, r3, r2
 802acd6:	7a51      	ldrb	r1, [r2, #9]
 802acd8:	2214      	movs	r2, #20
 802acda:	434a      	muls	r2, r1
    txPowerResult =  MAX( txPower, maxBandTxPower );
 802acdc:	2102      	movs	r1, #2
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 802acde:	189b      	adds	r3, r3, r2
 802ace0:	4a27      	ldr	r2, [pc, #156]	; (802ad80 <RegionCN470TxConfig+0xc8>)
    txPowerResult =  MAX( txPower, maxBandTxPower );
 802ace2:	5641      	ldrsb	r1, [r0, r1]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 802ace4:	189b      	adds	r3, r3, r2
    txPowerResult =  MAX( txPower, maxBandTxPower );
 802ace6:	781b      	ldrb	r3, [r3, #0]
 802ace8:	7882      	ldrb	r2, [r0, #2]
 802acea:	1c1e      	adds	r6, r3, #0
 802acec:	b25b      	sxtb	r3, r3
 802acee:	428b      	cmp	r3, r1
 802acf0:	da00      	bge.n	802acf4 <RegionCN470TxConfig+0x3c>
 802acf2:	1c16      	adds	r6, r2, #0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 802acf4:	68a2      	ldr	r2, [r4, #8]
 802acf6:	6861      	ldr	r1, [r4, #4]
    txPowerResult =  MAX( txPower, maxBandTxPower );
 802acf8:	b270      	sxtb	r0, r6
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 802acfa:	f005 f9f9 	bl	80300f0 <RegionCommonComputeTxPower>

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 802acfe:	220c      	movs	r2, #12
 802ad00:	7823      	ldrb	r3, [r4, #0]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 802ad02:	900c      	str	r0, [sp, #48]	; 0x30
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 802ad04:	4353      	muls	r3, r2
 802ad06:	4a1f      	ldr	r2, [pc, #124]	; (802ad84 <RegionCN470TxConfig+0xcc>)

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, 0, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 802ad08:	2501      	movs	r5, #1
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 802ad0a:	68d1      	ldr	r1, [r2, #12]
 802ad0c:	910d      	str	r1, [sp, #52]	; 0x34
 802ad0e:	491b      	ldr	r1, [pc, #108]	; (802ad7c <RegionCN470TxConfig+0xc4>)
 802ad10:	5858      	ldr	r0, [r3, r1]
 802ad12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802ad14:	4798      	blx	r3
    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, 0, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 802ad16:	23fa      	movs	r3, #250	; 0xfa
 802ad18:	011b      	lsls	r3, r3, #4
 802ad1a:	9308      	str	r3, [sp, #32]
 802ad1c:	2308      	movs	r3, #8
 802ad1e:	2200      	movs	r2, #0
 802ad20:	9302      	str	r3, [sp, #8]
 802ad22:	4b18      	ldr	r3, [pc, #96]	; (802ad84 <RegionCN470TxConfig+0xcc>)
 802ad24:	0028      	movs	r0, r5
 802ad26:	69db      	ldr	r3, [r3, #28]
 802ad28:	990c      	ldr	r1, [sp, #48]	; 0x30
 802ad2a:	930d      	str	r3, [sp, #52]	; 0x34
 802ad2c:	9207      	str	r2, [sp, #28]
 802ad2e:	0013      	movs	r3, r2
 802ad30:	9206      	str	r2, [sp, #24]
 802ad32:	9205      	str	r2, [sp, #20]
 802ad34:	9203      	str	r2, [sp, #12]
 802ad36:	9700      	str	r7, [sp, #0]
 802ad38:	9504      	str	r5, [sp, #16]
 802ad3a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802ad3c:	9501      	str	r5, [sp, #4]
 802ad3e:	47b8      	blx	r7
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 802ad40:	220c      	movs	r2, #12
 802ad42:	2101      	movs	r1, #1
 802ad44:	7823      	ldrb	r3, [r4, #0]
 802ad46:	5661      	ldrsb	r1, [r4, r1]
 802ad48:	4353      	muls	r3, r2
 802ad4a:	4a0c      	ldr	r2, [pc, #48]	; (802ad7c <RegionCN470TxConfig+0xc4>)
 802ad4c:	5898      	ldr	r0, [r3, r2]
 802ad4e:	f005 fa84 	bl	803025a <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 802ad52:	4b0c      	ldr	r3, [pc, #48]	; (802ad84 <RegionCN470TxConfig+0xcc>)
 802ad54:	0028      	movs	r0, r5
 802ad56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802ad58:	7b21      	ldrb	r1, [r4, #12]
 802ad5a:	930c      	str	r3, [sp, #48]	; 0x30
 802ad5c:	4798      	blx	r3
    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 802ad5e:	2001      	movs	r0, #1
 802ad60:	89a1      	ldrh	r1, [r4, #12]
 802ad62:	5620      	ldrsb	r0, [r4, r0]
 802ad64:	f7ff fda6 	bl	802a8b4 <GetTimeOnAir>
 802ad68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802ad6a:	6018      	str	r0, [r3, #0]
    *txPower = txPowerLimited;

    return true;
}
 802ad6c:	0028      	movs	r0, r5
    *txPower = txPowerLimited;
 802ad6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802ad70:	701e      	strb	r6, [r3, #0]
}
 802ad72:	b00f      	add	sp, #60	; 0x3c
 802ad74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802ad76:	46c0      	nop			; (mov r8, r8)
 802ad78:	08031e09 	.word	0x08031e09
 802ad7c:	20009138 	.word	0x20009138
 802ad80:	00000482 	.word	0x00000482
 802ad84:	08031484 	.word	0x08031484

0802ad88 <RegionCN470LinkAdrReq>:

uint8_t RegionCN470LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 802ad88:	b5f0      	push	{r4, r5, r6, r7, lr}
 802ad8a:	b095      	sub	sp, #84	; 0x54
 802ad8c:	9101      	str	r1, [sp, #4]
 802ad8e:	9202      	str	r2, [sp, #8]
    uint8_t status = 0x07;
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 802ad90:	2100      	movs	r1, #0
 802ad92:	2206      	movs	r2, #6
{
 802ad94:	0004      	movs	r4, r0
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 802ad96:	a807      	add	r0, sp, #28
{
 802ad98:	9303      	str	r3, [sp, #12]
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 802ad9a:	f005 ffea 	bl	8030d72 <memset>
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 802ad9e:	220c      	movs	r2, #12
 802ada0:	2100      	movs	r1, #0
 802ada2:	a809      	add	r0, sp, #36	; 0x24
 802ada4:	f005 ffe5 	bl	8030d72 <memset>
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, NvmCtx.ChannelsMask, 6 );
 802ada8:	2206      	movs	r2, #6
 802adaa:	4943      	ldr	r1, [pc, #268]	; (802aeb8 <RegionCN470LinkAdrReq+0x130>)
 802adac:	a809      	add	r0, sp, #36	; 0x24
 802adae:	f005 f930 	bl	8030012 <RegionCommonChanMaskCopy>
    uint8_t bytesProcessed = 0;
 802adb2:	2500      	movs	r5, #0

        // Update bytes processed
        bytesProcessed += nextIndex;

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 802adb4:	2607      	movs	r6, #7
    while( bytesProcessed < linkAdrReq->PayloadSize )
 802adb6:	7a23      	ldrb	r3, [r4, #8]
 802adb8:	42ab      	cmp	r3, r5
 802adba:	d906      	bls.n	802adca <RegionCN470LinkAdrReq+0x42>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 802adbc:	6863      	ldr	r3, [r4, #4]
 802adbe:	a907      	add	r1, sp, #28
 802adc0:	1958      	adds	r0, r3, r5
 802adc2:	f005 f934 	bl	803002e <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 802adc6:	2800      	cmp	r0, #0
 802adc8:	d145      	bne.n	802ae56 <RegionCN470LinkAdrReq+0xce>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 802adca:	2302      	movs	r3, #2
 802adcc:	aa04      	add	r2, sp, #16
 802adce:	7113      	strb	r3, [r2, #4]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 802add0:	7a63      	ldrb	r3, [r4, #9]
    phyParam = RegionCN470GetPhyParam( &getPhy );
 802add2:	a805      	add	r0, sp, #20
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 802add4:	7193      	strb	r3, [r2, #6]
    phyParam = RegionCN470GetPhyParam( &getPhy );
 802add6:	f7ff fda7 	bl	802a928 <RegionCN470GetPhyParam>
 802adda:	0003      	movs	r3, r0

    linkAdrVerifyParams.Status = status;
 802addc:	a80c      	add	r0, sp, #48	; 0x30
 802adde:	7106      	strb	r6, [r0, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 802ade0:	7aa2      	ldrb	r2, [r4, #10]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 802ade2:	ae07      	add	r6, sp, #28
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 802ade4:	7142      	strb	r2, [r0, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 802ade6:	7872      	ldrb	r2, [r6, #1]
    linkAdrVerifyParams.MinTxPower = CN470_MIN_TX_POWER;
    linkAdrVerifyParams.MaxTxPower = CN470_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 802ade8:	a904      	add	r1, sp, #16
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 802adea:	7182      	strb	r2, [r0, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 802adec:	78b2      	ldrb	r2, [r6, #2]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 802adee:	af09      	add	r7, sp, #36	; 0x24
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 802adf0:	71c2      	strb	r2, [r0, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 802adf2:	7832      	ldrb	r2, [r6, #0]
 802adf4:	7202      	strb	r2, [r0, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 802adf6:	7ae2      	ldrb	r2, [r4, #11]
 802adf8:	7242      	strb	r2, [r0, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 802adfa:	7b22      	ldrb	r2, [r4, #12]
 802adfc:	7282      	strb	r2, [r0, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 802adfe:	7b62      	ldrb	r2, [r4, #13]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 802ae00:	7503      	strb	r3, [r0, #20]
    linkAdrVerifyParams.MaxDatarate = CN470_TX_MAX_DATARATE;
 802ae02:	2305      	movs	r3, #5
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 802ae04:	72c2      	strb	r2, [r0, #11]
    linkAdrVerifyParams.NbChannels = CN470_MAX_NB_CHANNELS;
 802ae06:	2260      	movs	r2, #96	; 0x60
    linkAdrVerifyParams.MaxDatarate = CN470_TX_MAX_DATARATE;
 802ae08:	7543      	strb	r3, [r0, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 802ae0a:	4b2c      	ldr	r3, [pc, #176]	; (802aebc <RegionCN470LinkAdrReq+0x134>)
    linkAdrVerifyParams.NbChannels = CN470_MAX_NB_CHANNELS;
 802ae0c:	7302      	strb	r2, [r0, #12]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 802ae0e:	6183      	str	r3, [r0, #24]
    linkAdrVerifyParams.MinTxPower = CN470_MIN_TX_POWER;
 802ae10:	2307      	movs	r3, #7
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 802ae12:	3a52      	subs	r2, #82	; 0x52
 802ae14:	1852      	adds	r2, r2, r1
 802ae16:	210d      	movs	r1, #13
    linkAdrVerifyParams.MinTxPower = CN470_MIN_TX_POWER;
 802ae18:	8383      	strh	r3, [r0, #28]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 802ae1a:	6823      	ldr	r3, [r4, #0]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 802ae1c:	ac04      	add	r4, sp, #16
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 802ae1e:	930c      	str	r3, [sp, #48]	; 0x30
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 802ae20:	1909      	adds	r1, r1, r4
 802ae22:	0033      	movs	r3, r6
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 802ae24:	6107      	str	r7, [r0, #16]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 802ae26:	f005 f91d 	bl	8030064 <RegionCommonLinkAdrReqVerifyParams>
 802ae2a:	0004      	movs	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 802ae2c:	2807      	cmp	r0, #7
 802ae2e:	d104      	bne.n	802ae3a <RegionCN470LinkAdrReq+0xb2>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, channelsMask, 6 );
 802ae30:	2206      	movs	r2, #6
 802ae32:	0039      	movs	r1, r7
 802ae34:	4820      	ldr	r0, [pc, #128]	; (802aeb8 <RegionCN470LinkAdrReq+0x130>)
 802ae36:	f005 f8ec 	bl	8030012 <RegionCommonChanMaskCopy>
    *txPowOut = linkAdrParams.TxPower;
    *nbRepOut = linkAdrParams.NbRep;
    *nbBytesParsed = bytesProcessed;

    return status;
}
 802ae3a:	0020      	movs	r0, r4
    *drOut = linkAdrParams.Datarate;
 802ae3c:	7873      	ldrb	r3, [r6, #1]
 802ae3e:	9a01      	ldr	r2, [sp, #4]
 802ae40:	7013      	strb	r3, [r2, #0]
    *txPowOut = linkAdrParams.TxPower;
 802ae42:	78b3      	ldrb	r3, [r6, #2]
 802ae44:	9a02      	ldr	r2, [sp, #8]
 802ae46:	7013      	strb	r3, [r2, #0]
    *nbRepOut = linkAdrParams.NbRep;
 802ae48:	7833      	ldrb	r3, [r6, #0]
 802ae4a:	9a03      	ldr	r2, [sp, #12]
 802ae4c:	7013      	strb	r3, [r2, #0]
    *nbBytesParsed = bytesProcessed;
 802ae4e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802ae50:	701d      	strb	r5, [r3, #0]
}
 802ae52:	b015      	add	sp, #84	; 0x54
 802ae54:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( linkAdrParams.ChMaskCtrl == 6 )
 802ae56:	ab04      	add	r3, sp, #16
 802ae58:	7bdb      	ldrb	r3, [r3, #15]
        bytesProcessed += nextIndex;
 802ae5a:	182d      	adds	r5, r5, r0
 802ae5c:	b2ed      	uxtb	r5, r5
        if( linkAdrParams.ChMaskCtrl == 6 )
 802ae5e:	2b06      	cmp	r3, #6
 802ae60:	d109      	bne.n	802ae76 <RegionCN470LinkAdrReq+0xee>
            channelsMask[0] = 0xFFFF;
 802ae62:	2201      	movs	r2, #1
 802ae64:	ab09      	add	r3, sp, #36	; 0x24
 802ae66:	4252      	negs	r2, r2
 802ae68:	801a      	strh	r2, [r3, #0]
            channelsMask[1] = 0xFFFF;
 802ae6a:	805a      	strh	r2, [r3, #2]
            channelsMask[2] = 0xFFFF;
 802ae6c:	809a      	strh	r2, [r3, #4]
            channelsMask[3] = 0xFFFF;
 802ae6e:	80da      	strh	r2, [r3, #6]
            channelsMask[4] = 0xFFFF;
 802ae70:	811a      	strh	r2, [r3, #8]
            channelsMask[5] = 0xFFFF;
 802ae72:	815a      	strh	r2, [r3, #10]
 802ae74:	e79e      	b.n	802adb4 <RegionCN470LinkAdrReq+0x2c>
            status &= 0xFE; // Channel mask KO
 802ae76:	2606      	movs	r6, #6
        else if( linkAdrParams.ChMaskCtrl == 7 )
 802ae78:	2b07      	cmp	r3, #7
 802ae7a:	d09c      	beq.n	802adb6 <RegionCN470LinkAdrReq+0x2e>
                if( ( ( linkAdrParams.ChMask & ( 1 << i ) ) != 0 ) &&
 802ae7c:	aa04      	add	r2, sp, #16
 802ae7e:	8a10      	ldrh	r0, [r2, #16]
 802ae80:	220c      	movs	r2, #12
                    ( NvmCtx.Channels[linkAdrParams.ChMaskCtrl * 16 + i].Frequency == 0 ) )
 802ae82:	0119      	lsls	r1, r3, #4
 802ae84:	4351      	muls	r1, r2
 802ae86:	4a0d      	ldr	r2, [pc, #52]	; (802aebc <RegionCN470LinkAdrReq+0x134>)
        status = 0x07;
 802ae88:	3601      	adds	r6, #1
 802ae8a:	188a      	adds	r2, r1, r2
 802ae8c:	9200      	str	r2, [sp, #0]
                    ( NvmCtx.Channels[linkAdrParams.ChMaskCtrl * 16 + i].Frequency == 0 ) )
 802ae8e:	2200      	movs	r2, #0
                if( ( ( linkAdrParams.ChMask & ( 1 << i ) ) != 0 ) &&
 802ae90:	0001      	movs	r1, r0
 802ae92:	2701      	movs	r7, #1
 802ae94:	4111      	asrs	r1, r2
 802ae96:	4239      	tst	r1, r7
 802ae98:	d006      	beq.n	802aea8 <RegionCN470LinkAdrReq+0x120>
                    ( NvmCtx.Channels[linkAdrParams.ChMaskCtrl * 16 + i].Frequency == 0 ) )
 802ae9a:	210c      	movs	r1, #12
 802ae9c:	4351      	muls	r1, r2
                if( ( ( linkAdrParams.ChMask & ( 1 << i ) ) != 0 ) &&
 802ae9e:	9f00      	ldr	r7, [sp, #0]
 802aea0:	5879      	ldr	r1, [r7, r1]
 802aea2:	2900      	cmp	r1, #0
 802aea4:	d100      	bne.n	802aea8 <RegionCN470LinkAdrReq+0x120>
                    status &= 0xFE; // Channel mask KO
 802aea6:	2606      	movs	r6, #6
            for( uint8_t i = 0; i < 16; i++ )
 802aea8:	3201      	adds	r2, #1
 802aeaa:	2a10      	cmp	r2, #16
 802aeac:	d1f0      	bne.n	802ae90 <RegionCN470LinkAdrReq+0x108>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 802aeae:	005b      	lsls	r3, r3, #1
 802aeb0:	aa09      	add	r2, sp, #36	; 0x24
 802aeb2:	5298      	strh	r0, [r3, r2]
 802aeb4:	e77f      	b.n	802adb6 <RegionCN470LinkAdrReq+0x2e>
 802aeb6:	46c0      	nop			; (mov r8, r8)
 802aeb8:	200095cc 	.word	0x200095cc
 802aebc:	20009138 	.word	0x20009138

0802aec0 <RegionCN470NextChannel>:
{
    return currentDr;
}

LoRaMacStatus_t RegionCN470NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 802aec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 802aec2:	b0ad      	sub	sp, #180	; 0xb4
 802aec4:	9305      	str	r3, [sp, #20]
    uint8_t nbEnabledChannels = 0;
 802aec6:	230a      	movs	r3, #10
 802aec8:	2500      	movs	r5, #0
{
 802aeca:	9204      	str	r2, [sp, #16]
    uint8_t nbEnabledChannels = 0;
 802aecc:	aa04      	add	r2, sp, #16
 802aece:	189b      	adds	r3, r3, r2
 802aed0:	701d      	strb	r5, [r3, #0]
    uint8_t nbRestrictedChannels = 0;
 802aed2:	230b      	movs	r3, #11
{
 802aed4:	9103      	str	r1, [sp, #12]
    uint8_t nbRestrictedChannels = 0;
 802aed6:	189b      	adds	r3, r3, r2
    uint8_t enabledChannels[CN470_MAX_NB_CHANNELS] = { 0 };
 802aed8:	0029      	movs	r1, r5
 802aeda:	225c      	movs	r2, #92	; 0x5c
{
 802aedc:	0004      	movs	r4, r0
    uint8_t enabledChannels[CN470_MAX_NB_CHANNELS] = { 0 };
 802aede:	a815      	add	r0, sp, #84	; 0x54
    uint8_t nbRestrictedChannels = 0;
 802aee0:	701d      	strb	r5, [r3, #0]
    uint8_t enabledChannels[CN470_MAX_NB_CHANNELS] = { 0 };
 802aee2:	9514      	str	r5, [sp, #80]	; 0x50
 802aee4:	f005 ff45 	bl	8030d72 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 6 ) == 0 )
 802aee8:	2206      	movs	r2, #6
 802aeea:	0029      	movs	r1, r5
 802aeec:	4826      	ldr	r0, [pc, #152]	; (802af88 <RegionCN470NextChannel+0xc8>)
 802aeee:	f005 f871 	bl	802ffd4 <RegionCommonCountChannels>
 802aef2:	42a8      	cmp	r0, r5
 802aef4:	d108      	bne.n	802af08 <RegionCN470NextChannel+0x48>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] = 0xFFFF;
 802aef6:	2201      	movs	r2, #1
 802aef8:	4b24      	ldr	r3, [pc, #144]	; (802af8c <RegionCN470NextChannel+0xcc>)
 802aefa:	4925      	ldr	r1, [pc, #148]	; (802af90 <RegionCN470NextChannel+0xd0>)
 802aefc:	4252      	negs	r2, r2
 802aefe:	505a      	str	r2, [r3, r1]
        NvmCtx.ChannelsMask[1] = 0xFFFF;
        NvmCtx.ChannelsMask[2] = 0xFFFF;
 802af00:	3104      	adds	r1, #4
 802af02:	505a      	str	r2, [r3, r1]
        NvmCtx.ChannelsMask[3] = 0xFFFF;
        NvmCtx.ChannelsMask[4] = 0xFFFF;
 802af04:	4923      	ldr	r1, [pc, #140]	; (802af94 <RegionCN470NextChannel+0xd4>)
 802af06:	505a      	str	r2, [r3, r1]
        NvmCtx.ChannelsMask[5] = 0xFFFF;
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
    countChannelsParams.Datarate = nextChanParams->Datarate;
 802af08:	2008      	movs	r0, #8
    countChannelsParams.Joined = nextChanParams->Joined;
 802af0a:	7a63      	ldrb	r3, [r4, #9]
 802af0c:	ae07      	add	r6, sp, #28
 802af0e:	7033      	strb	r3, [r6, #0]
    countChannelsParams.ChannelsMask = NvmCtx.ChannelsMask;
 802af10:	4b1d      	ldr	r3, [pc, #116]	; (802af88 <RegionCN470NextChannel+0xc8>)
    countChannelsParams.Datarate = nextChanParams->Datarate;
 802af12:	5620      	ldrsb	r0, [r4, r0]
    countChannelsParams.ChannelsMask = NvmCtx.ChannelsMask;
 802af14:	9308      	str	r3, [sp, #32]
    countChannelsParams.Channels = NvmCtx.Channels;
 802af16:	4b1d      	ldr	r3, [pc, #116]	; (802af8c <RegionCN470NextChannel+0xcc>)
    countChannelsParams.Datarate = nextChanParams->Datarate;
 802af18:	7070      	strb	r0, [r6, #1]
    countChannelsParams.Channels = NvmCtx.Channels;
 802af1a:	9309      	str	r3, [sp, #36]	; 0x24
    countChannelsParams.Bands = NvmCtx.Bands;
 802af1c:	4b1e      	ldr	r3, [pc, #120]	; (802af98 <RegionCN470NextChannel+0xd8>)
    countChannelsParams.MaxNbChannels = CN470_MAX_NB_CHANNELS;
    countChannelsParams.JoinChannels = 0;

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 802af1e:	ad0c      	add	r5, sp, #48	; 0x30
    countChannelsParams.Bands = NvmCtx.Bands;
 802af20:	930a      	str	r3, [sp, #40]	; 0x28
    countChannelsParams.MaxNbChannels = CN470_MAX_NB_CHANNELS;
 802af22:	2360      	movs	r3, #96	; 0x60
 802af24:	930b      	str	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 802af26:	6823      	ldr	r3, [r4, #0]
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
    identifyChannelsParam.MaxBands = CN470_MAX_NB_BANDS;

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 802af28:	0022      	movs	r2, r4
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 802af2a:	930c      	str	r3, [sp, #48]	; 0x30
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 802af2c:	6863      	ldr	r3, [r4, #4]
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 802af2e:	320c      	adds	r2, #12
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 802af30:	930d      	str	r3, [sp, #52]	; 0x34
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 802af32:	7aa3      	ldrb	r3, [r4, #10]
 802af34:	722b      	strb	r3, [r5, #8]
    identifyChannelsParam.MaxBands = CN470_MAX_NB_BANDS;
 802af36:	2301      	movs	r3, #1
 802af38:	726b      	strb	r3, [r5, #9]
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 802af3a:	ab0f      	add	r3, sp, #60	; 0x3c
 802af3c:	ca82      	ldmia	r2!, {r1, r7}
 802af3e:	c382      	stmia	r3!, {r1, r7}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 802af40:	7d23      	ldrb	r3, [r4, #20]
 802af42:	752b      	strb	r3, [r5, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 802af44:	8ae1      	ldrh	r1, [r4, #22]
 802af46:	f7ff fcb5 	bl	802a8b4 <GetTimeOnAir>

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 802af4a:	9613      	str	r6, [sp, #76]	; 0x4c

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 802af4c:	260a      	movs	r6, #10
 802af4e:	ab04      	add	r3, sp, #16
 802af50:	18f6      	adds	r6, r6, r3
 802af52:	9b04      	ldr	r3, [sp, #16]
 802af54:	aa04      	add	r2, sp, #16
 802af56:	9301      	str	r3, [sp, #4]
 802af58:	230b      	movs	r3, #11
 802af5a:	ac14      	add	r4, sp, #80	; 0x50
 802af5c:	189b      	adds	r3, r3, r2
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 802af5e:	9012      	str	r0, [sp, #72]	; 0x48
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 802af60:	9300      	str	r3, [sp, #0]
 802af62:	0028      	movs	r0, r5
 802af64:	0033      	movs	r3, r6
 802af66:	0022      	movs	r2, r4
 802af68:	9905      	ldr	r1, [sp, #20]
 802af6a:	f005 f931 	bl	80301d0 <RegionCommonIdentifyChannels>
 802af6e:	1e05      	subs	r5, r0, #0
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 802af70:	d106      	bne.n	802af80 <RegionCN470NextChannel+0xc0>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 802af72:	7831      	ldrb	r1, [r6, #0]
 802af74:	3901      	subs	r1, #1
 802af76:	f7f9 f833 	bl	8023fe0 <randr>
 802af7a:	9a03      	ldr	r2, [sp, #12]
 802af7c:	5c23      	ldrb	r3, [r4, r0]
 802af7e:	7013      	strb	r3, [r2, #0]
    }
    return status;
}
 802af80:	0028      	movs	r0, r5
 802af82:	b02d      	add	sp, #180	; 0xb4
 802af84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802af86:	46c0      	nop			; (mov r8, r8)
 802af88:	200095cc 	.word	0x200095cc
 802af8c:	20009138 	.word	0x20009138
 802af90:	00000494 	.word	0x00000494
 802af94:	0000049c 	.word	0x0000049c
 802af98:	200095b8 	.word	0x200095b8

0802af9c <RegionCN470SetContinuousWave>:
{
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionCN470SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 802af9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
    int8_t phyTxPower = 0;
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 802af9e:	220c      	movs	r2, #12
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 802afa0:	7801      	ldrb	r1, [r0, #0]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 802afa2:	4b10      	ldr	r3, [pc, #64]	; (802afe4 <RegionCN470SetContinuousWave+0x48>)
 802afa4:	434a      	muls	r2, r1
 802afa6:	58d5      	ldr	r5, [r2, r3]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 802afa8:	189a      	adds	r2, r3, r2
 802afaa:	7a51      	ldrb	r1, [r2, #9]
 802afac:	2214      	movs	r2, #20
{
 802afae:	0004      	movs	r4, r0
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 802afb0:	434a      	muls	r2, r1
    txPowerResult =  MAX( txPower, maxBandTxPower );
 802afb2:	2102      	movs	r1, #2
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 802afb4:	189b      	adds	r3, r3, r2
 802afb6:	4a0c      	ldr	r2, [pc, #48]	; (802afe8 <RegionCN470SetContinuousWave+0x4c>)
    txPowerResult =  MAX( txPower, maxBandTxPower );
 802afb8:	5661      	ldrsb	r1, [r4, r1]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 802afba:	189b      	adds	r3, r3, r2
    txPowerResult =  MAX( txPower, maxBandTxPower );
 802afbc:	781b      	ldrb	r3, [r3, #0]
 802afbe:	7882      	ldrb	r2, [r0, #2]
 802afc0:	1c18      	adds	r0, r3, #0
 802afc2:	b25b      	sxtb	r3, r3
 802afc4:	428b      	cmp	r3, r1
 802afc6:	da00      	bge.n	802afca <RegionCN470SetContinuousWave+0x2e>
 802afc8:	1c10      	adds	r0, r2, #0

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 802afca:	68a2      	ldr	r2, [r4, #8]
 802afcc:	6861      	ldr	r1, [r4, #4]
 802afce:	b240      	sxtb	r0, r0
 802afd0:	f005 f88e 	bl	80300f0 <RegionCommonComputeTxPower>

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 802afd4:	4b05      	ldr	r3, [pc, #20]	; (802afec <RegionCN470SetContinuousWave+0x50>)
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 802afd6:	0001      	movs	r1, r0
    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 802afd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802afda:	0028      	movs	r0, r5
 802afdc:	89a2      	ldrh	r2, [r4, #12]
 802afde:	9301      	str	r3, [sp, #4]
 802afe0:	4798      	blx	r3
}
 802afe2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 802afe4:	20009138 	.word	0x20009138
 802afe8:	00000482 	.word	0x00000482
 802afec:	08031484 	.word	0x08031484

0802aff0 <RegionCN470RxBeaconSetup>:
    }
    return datarate;
}

void RegionCN470RxBeaconSetup( RxBeaconSetup_t* rxBeaconSetup, uint8_t* outDr )
{
 802aff0:	0003      	movs	r3, r0
 802aff2:	b510      	push	{r4, lr}
    RegionCommonRxBeaconSetupParams_t regionCommonRxBeaconSetup;

    regionCommonRxBeaconSetup.Datarates = DataratesCN470;
 802aff4:	4a0a      	ldr	r2, [pc, #40]	; (802b020 <RegionCN470RxBeaconSetup+0x30>)
{
 802aff6:	b086      	sub	sp, #24
    regionCommonRxBeaconSetup.Datarates = DataratesCN470;
 802aff8:	9201      	str	r2, [sp, #4]
    regionCommonRxBeaconSetup.Frequency = rxBeaconSetup->Frequency;
 802affa:	689a      	ldr	r2, [r3, #8]
    regionCommonRxBeaconSetup.Datarates = DataratesCN470;
 802affc:	a801      	add	r0, sp, #4
    regionCommonRxBeaconSetup.Frequency = rxBeaconSetup->Frequency;
 802affe:	6042      	str	r2, [r0, #4]
    regionCommonRxBeaconSetup.BeaconSize = CN470_BEACON_SIZE;
 802b000:	4a08      	ldr	r2, [pc, #32]	; (802b024 <RegionCN470RxBeaconSetup+0x34>)
{
 802b002:	000c      	movs	r4, r1
    regionCommonRxBeaconSetup.BeaconSize = CN470_BEACON_SIZE;
 802b004:	8102      	strh	r2, [r0, #8]
    regionCommonRxBeaconSetup.BeaconDatarate = CN470_BEACON_CHANNEL_DR;
    regionCommonRxBeaconSetup.BeaconChannelBW = CN470_BEACON_CHANNEL_BW;
 802b006:	2200      	movs	r2, #0
 802b008:	7282      	strb	r2, [r0, #10]
    regionCommonRxBeaconSetup.RxTime = rxBeaconSetup->RxTime;
 802b00a:	685a      	ldr	r2, [r3, #4]
    regionCommonRxBeaconSetup.SymbolTimeout = rxBeaconSetup->SymbolTimeout;
 802b00c:	881b      	ldrh	r3, [r3, #0]
    regionCommonRxBeaconSetup.RxTime = rxBeaconSetup->RxTime;
 802b00e:	60c2      	str	r2, [r0, #12]
    regionCommonRxBeaconSetup.SymbolTimeout = rxBeaconSetup->SymbolTimeout;
 802b010:	8203      	strh	r3, [r0, #16]

    RegionCommonRxBeaconSetup( &regionCommonRxBeaconSetup );
 802b012:	f7ff fc0d 	bl	802a830 <RegionCommonRxBeaconSetup>

    // Store downlink datarate
    *outDr = CN470_BEACON_CHANNEL_DR;
 802b016:	2302      	movs	r3, #2
 802b018:	7023      	strb	r3, [r4, #0]
}
 802b01a:	b006      	add	sp, #24
 802b01c:	bd10      	pop	{r4, pc}
 802b01e:	46c0      	nop			; (mov r8, r8)
 802b020:	08031e09 	.word	0x08031e09
 802b024:	00000213 	.word	0x00000213

0802b028 <MlmeIndication>:
      break;
  }
}

static void MlmeIndication(MlmeIndication_t *mlmeIndication)
{
 802b028:	b570      	push	{r4, r5, r6, lr}
  RxParams.IsMcpsIndication = 0;
 802b02a:	2400      	movs	r4, #0
 802b02c:	491b      	ldr	r1, [pc, #108]	; (802b09c <MlmeIndication+0x74>)
{
 802b02e:	0003      	movs	r3, r0
  RxParams.IsMcpsIndication = 0;
 802b030:	700c      	strb	r4, [r1, #0]
  RxParams.Status = mlmeIndication->Status;
 802b032:	7842      	ldrb	r2, [r0, #1]
{
 802b034:	b08a      	sub	sp, #40	; 0x28
  RxParams.Status = mlmeIndication->Status;
 802b036:	704a      	strb	r2, [r1, #1]

  switch (mlmeIndication->MlmeIndication)
 802b038:	7801      	ldrb	r1, [r0, #0]
 802b03a:	290b      	cmp	r1, #11
 802b03c:	d01d      	beq.n	802b07a <MlmeIndication+0x52>
 802b03e:	290f      	cmp	r1, #15
 802b040:	d119      	bne.n	802b076 <MlmeIndication+0x4e>
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    case MLME_BEACON_LOST:
    {
      MibRequestConfirm_t mibReq;
      /* Switch to class A again */
      mibReq.Type = MIB_DEVICE_CLASS;
 802b042:	466b      	mov	r3, sp
      mibReq.Param.Class = CLASS_A;
      LoRaMacMibSetRequestConfirm(&mibReq);
 802b044:	a801      	add	r0, sp, #4
      mibReq.Type = MIB_DEVICE_CLASS;
 802b046:	711c      	strb	r4, [r3, #4]
      mibReq.Param.Class = CLASS_A;
 802b048:	721c      	strb	r4, [r3, #8]
      LoRaMacMibSetRequestConfirm(&mibReq);
 802b04a:	f7fd f8b9 	bl	80281c0 <LoRaMacMibSetRequestConfirm>

      BeaconParams.State = LORAMAC_HANDLER_BEACON_LOST;
 802b04e:	4d14      	ldr	r5, [pc, #80]	; (802b0a0 <MlmeIndication+0x78>)
 802b050:	2301      	movs	r3, #1
      BeaconParams.Info.Time.Seconds = 0;
      BeaconParams.Info.GwSpecific.InfoDesc = 0;
      UTIL_MEM_set_8(BeaconParams.Info.GwSpecific.Info, 0, 6);
 802b052:	0028      	movs	r0, r5
 802b054:	2206      	movs	r2, #6
 802b056:	0021      	movs	r1, r4
 802b058:	3016      	adds	r0, #22
      BeaconParams.State = LORAMAC_HANDLER_BEACON_LOST;
 802b05a:	706b      	strb	r3, [r5, #1]
      BeaconParams.Info.Time.Seconds = 0;
 802b05c:	606c      	str	r4, [r5, #4]
      BeaconParams.Info.GwSpecific.InfoDesc = 0;
 802b05e:	756c      	strb	r4, [r5, #21]
      UTIL_MEM_set_8(BeaconParams.Info.GwSpecific.Info, 0, 6);
 802b060:	f7f8 ffe6 	bl	8024030 <UTIL_MEM_set_8>

      LmHandlerCallbacks.OnBeaconStatusChange(&BeaconParams);
 802b064:	4e0f      	ldr	r6, [pc, #60]	; (802b0a4 <MlmeIndication+0x7c>)
 802b066:	0028      	movs	r0, r5
 802b068:	69f3      	ldr	r3, [r6, #28]
 802b06a:	4798      	blx	r3
      LmHandlerCallbacks.OnClassChange(CLASS_A);
 802b06c:	0020      	movs	r0, r4
 802b06e:	69b3      	ldr	r3, [r6, #24]
 802b070:	4798      	blx	r3

      DisplayClassUpdate(CLASS_A);
      DisplayBeaconUpdate(&BeaconParams);

      LmHandlerDeviceTimeReq();
 802b072:	f005 f942 	bl	80302fa <LmHandlerDeviceTimeReq>
    }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
      break;
  }
}
 802b076:	b00a      	add	sp, #40	; 0x28
 802b078:	bd70      	pop	{r4, r5, r6, pc}
        LmHandlerCallbacks.OnBeaconStatusChange( &BeaconParams );
 802b07a:	490a      	ldr	r1, [pc, #40]	; (802b0a4 <MlmeIndication+0x7c>)
 802b07c:	4808      	ldr	r0, [pc, #32]	; (802b0a0 <MlmeIndication+0x78>)
 802b07e:	69c9      	ldr	r1, [r1, #28]
 802b080:	3304      	adds	r3, #4
      if (mlmeIndication->Status == LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED)
 802b082:	2a0e      	cmp	r2, #14
 802b084:	d108      	bne.n	802b098 <MlmeIndication+0x70>
        BeaconParams.State = LORAMAC_HANDLER_BEACON_RX;
 802b086:	3a0c      	subs	r2, #12
        BeaconParams.State = LORAMAC_HANDLER_BEACON_NRX;
 802b088:	7042      	strb	r2, [r0, #1]
        BeaconParams.Info = mlmeIndication->BeaconInfo;
 802b08a:	1d02      	adds	r2, r0, #4
 802b08c:	cb70      	ldmia	r3!, {r4, r5, r6}
 802b08e:	c270      	stmia	r2!, {r4, r5, r6}
 802b090:	cb70      	ldmia	r3!, {r4, r5, r6}
 802b092:	c270      	stmia	r2!, {r4, r5, r6}
        LmHandlerCallbacks.OnBeaconStatusChange( &BeaconParams );
 802b094:	4788      	blx	r1
}
 802b096:	e7ee      	b.n	802b076 <MlmeIndication+0x4e>
        BeaconParams.State = LORAMAC_HANDLER_BEACON_NRX;
 802b098:	2203      	movs	r2, #3
 802b09a:	e7f5      	b.n	802b088 <MlmeIndication+0x60>
 802b09c:	20008074 	.word	0x20008074
 802b0a0:	200095e4 	.word	0x200095e4
 802b0a4:	20009600 	.word	0x20009600

0802b0a8 <McpsConfirm>:
  TxParams.IsMcpsConfirm = 1;
 802b0a8:	2301      	movs	r3, #1
{
 802b0aa:	b570      	push	{r4, r5, r6, lr}
 802b0ac:	0004      	movs	r4, r0
  TxParams.IsMcpsConfirm = 1;
 802b0ae:	4810      	ldr	r0, [pc, #64]	; (802b0f0 <McpsConfirm+0x48>)
 802b0b0:	7003      	strb	r3, [r0, #0]
  TxParams.Status = mcpsConfirm->Status;
 802b0b2:	7863      	ldrb	r3, [r4, #1]
 802b0b4:	7043      	strb	r3, [r0, #1]
  TxParams.Datarate = mcpsConfirm->Datarate;
 802b0b6:	78a3      	ldrb	r3, [r4, #2]
 802b0b8:	7103      	strb	r3, [r0, #4]
  TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 802b0ba:	68e3      	ldr	r3, [r4, #12]
 802b0bc:	6083      	str	r3, [r0, #8]
  TxParams.TxPower = mcpsConfirm->TxPower;
 802b0be:	78e3      	ldrb	r3, [r4, #3]
 802b0c0:	7503      	strb	r3, [r0, #20]
  TxParams.Channel = mcpsConfirm->Channel;
 802b0c2:	6923      	ldr	r3, [r4, #16]
 802b0c4:	7543      	strb	r3, [r0, #21]
  TxParams.AckReceived = mcpsConfirm->AckReceived;
 802b0c6:	7923      	ldrb	r3, [r4, #4]
 802b0c8:	70c3      	strb	r3, [r0, #3]
  LmHandlerCallbacks.OnTxData(&TxParams);
 802b0ca:	4b0a      	ldr	r3, [pc, #40]	; (802b0f4 <McpsConfirm+0x4c>)
 802b0cc:	691b      	ldr	r3, [r3, #16]
 802b0ce:	4798      	blx	r3
  }
}

static void LmHandlerPackagesNotify(PackageNotifyTypes_t notifyType, void *params)
{
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 802b0d0:	4d09      	ldr	r5, [pc, #36]	; (802b0f8 <McpsConfirm+0x50>)
 802b0d2:	002e      	movs	r6, r5
 802b0d4:	3614      	adds	r6, #20
  {
    if (LmHandlerPackages[i] != NULL)
 802b0d6:	682b      	ldr	r3, [r5, #0]
 802b0d8:	2b00      	cmp	r3, #0
 802b0da:	d004      	beq.n	802b0e6 <McpsConfirm+0x3e>
    {
      switch (notifyType)
      {
        case PACKAGE_MCPS_CONFIRM:
        {
          if (LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL)
 802b0dc:	695b      	ldr	r3, [r3, #20]
 802b0de:	2b00      	cmp	r3, #0
 802b0e0:	d001      	beq.n	802b0e6 <McpsConfirm+0x3e>
          {
            LmHandlerPackages[i]->OnMcpsConfirmProcess(params);
 802b0e2:	0020      	movs	r0, r4
 802b0e4:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 802b0e6:	3504      	adds	r5, #4
 802b0e8:	42b5      	cmp	r5, r6
 802b0ea:	d1f4      	bne.n	802b0d6 <McpsConfirm+0x2e>
}
 802b0ec:	bd70      	pop	{r4, r5, r6, pc}
 802b0ee:	46c0      	nop			; (mov r8, r8)
 802b0f0:	20009654 	.word	0x20009654
 802b0f4:	20009600 	.word	0x20009600
 802b0f8:	20009620 	.word	0x20009620

0802b0fc <LmHandlerConfigure>:
{
 802b0fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 802b0fe:	4e33      	ldr	r6, [pc, #204]	; (802b1cc <LmHandlerConfigure+0xd0>)
{
 802b100:	0001      	movs	r1, r0
  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 802b102:	2206      	movs	r2, #6
 802b104:	0030      	movs	r0, r6
{
 802b106:	b08d      	sub	sp, #52	; 0x34
  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 802b108:	f004 f828 	bl	802f15c <UTIL_MEM_cpy_8>
  if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 802b10c:	2701      	movs	r7, #1
  IsClassBSwitchPending = false;
 802b10e:	2200      	movs	r2, #0
 802b110:	4b2f      	ldr	r3, [pc, #188]	; (802b1d0 <LmHandlerConfigure+0xd4>)
 802b112:	701a      	strb	r2, [r3, #0]
  loraInfo = LoraInfo_GetPtr();
 802b114:	f7f9 f864 	bl	80241e0 <LoraInfo_GetPtr>
  if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 802b118:	003b      	movs	r3, r7
 802b11a:	7832      	ldrb	r2, [r6, #0]
 802b11c:	6841      	ldr	r1, [r0, #4]
 802b11e:	4093      	lsls	r3, r2
 802b120:	4219      	tst	r1, r3
 802b122:	d008      	beq.n	802b136 <LmHandlerConfigure+0x3a>
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 802b124:	492b      	ldr	r1, [pc, #172]	; (802b1d4 <LmHandlerConfigure+0xd8>)
 802b126:	482c      	ldr	r0, [pc, #176]	; (802b1d8 <LmHandlerConfigure+0xdc>)
 802b128:	f7fc fcd6 	bl	8027ad8 <LoRaMacInitialization>
 802b12c:	1e05      	subs	r5, r0, #0
 802b12e:	d003      	beq.n	802b138 <LmHandlerConfigure+0x3c>
      return LORAMAC_HANDLER_ERROR;
 802b130:	2001      	movs	r0, #1
 802b132:	4240      	negs	r0, r0
 802b134:	e02f      	b.n	802b196 <LmHandlerConfigure+0x9a>
    while (1) {}  /* error: Region is not defined in the MW */
 802b136:	e7fe      	b.n	802b136 <LmHandlerConfigure+0x3a>
  if (NvmCtxMgmtRestore() == NVMCTXMGMT_STATUS_SUCCESS)
 802b138:	f005 f91a 	bl	8030370 <NvmCtxMgmtRestore>
 802b13c:	ac03      	add	r4, sp, #12
 802b13e:	4b27      	ldr	r3, [pc, #156]	; (802b1dc <LmHandlerConfigure+0xe0>)
 802b140:	2800      	cmp	r0, #0
 802b142:	d12a      	bne.n	802b19a <LmHandlerConfigure+0x9e>
    CtxRestoreDone = true;
 802b144:	701f      	strb	r7, [r3, #0]
  mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 802b146:	2301      	movs	r3, #1
  mibReq.Type = MIB_PUBLIC_NETWORK;
 802b148:	270f      	movs	r7, #15
  LoRaMacMibSetRequestConfirm(&mibReq);
 802b14a:	0020      	movs	r0, r4
  mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 802b14c:	2500      	movs	r5, #0
  mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 802b14e:	7123      	strb	r3, [r4, #4]
  mibReq.Type = MIB_PUBLIC_NETWORK;
 802b150:	7027      	strb	r7, [r4, #0]
  LoRaMacMibSetRequestConfirm(&mibReq);
 802b152:	f7fd f835 	bl	80281c0 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_REPEATER_SUPPORT;
 802b156:	2310      	movs	r3, #16
  LoRaMacMibSetRequestConfirm(&mibReq);
 802b158:	0020      	movs	r0, r4
  mibReq.Type = MIB_REPEATER_SUPPORT;
 802b15a:	7023      	strb	r3, [r4, #0]
  mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 802b15c:	7125      	strb	r5, [r4, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 802b15e:	f7fd f82f 	bl	80281c0 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_ADR;
 802b162:	2304      	movs	r3, #4
 802b164:	7023      	strb	r3, [r4, #0]
  mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 802b166:	78b3      	ldrb	r3, [r6, #2]
  LoRaMacMibSetRequestConfirm(&mibReq);
 802b168:	0020      	movs	r0, r4
  mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 802b16a:	7123      	strb	r3, [r4, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 802b16c:	f7fd f828 	bl	80281c0 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 802b170:	2322      	movs	r3, #34	; 0x22
  LoRaMacMibSetRequestConfirm(&mibReq);
 802b172:	0020      	movs	r0, r4
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 802b174:	7023      	strb	r3, [r4, #0]
  mibReq.Param.SystemMaxRxError = 20;
 802b176:	3b0e      	subs	r3, #14
 802b178:	6063      	str	r3, [r4, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 802b17a:	f7fd f821 	bl	80281c0 <LoRaMacMibSetRequestConfirm>
  getPhy.Attribute = PHY_DUTY_CYCLE;
 802b17e:	a901      	add	r1, sp, #4
  phyParam = RegionGetPhyParam(LmHandlerParams.ActiveRegion, &getPhy);
 802b180:	7830      	ldrb	r0, [r6, #0]
  getPhy.Attribute = PHY_DUTY_CYCLE;
 802b182:	700f      	strb	r7, [r1, #0]
  phyParam = RegionGetPhyParam(LmHandlerParams.ActiveRegion, &getPhy);
 802b184:	f004 fe12 	bl	802fdac <RegionGetPhyParam>
  LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 802b188:	1e43      	subs	r3, r0, #1
 802b18a:	4198      	sbcs	r0, r3
 802b18c:	b2c0      	uxtb	r0, r0
 802b18e:	7130      	strb	r0, [r6, #4]
  LoRaMacTestSetDutyCycleOn(LmHandlerParams.DutyCycleEnabled);
 802b190:	f7fd fd0a 	bl	8028ba8 <LoRaMacTestSetDutyCycleOn>
  return LORAMAC_HANDLER_SUCCESS;
 802b194:	0028      	movs	r0, r5
}
 802b196:	b00d      	add	sp, #52	; 0x34
 802b198:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CtxRestoreDone = false;
 802b19a:	701d      	strb	r5, [r3, #0]
    mibReq.Type = MIB_DEV_EUI;
 802b19c:	2302      	movs	r3, #2
    LoRaMacMibGetRequestConfirm(&mibReq);
 802b19e:	0020      	movs	r0, r4
    mibReq.Type = MIB_DEV_EUI;
 802b1a0:	7023      	strb	r3, [r4, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 802b1a2:	f7fc fef1 	bl	8027f88 <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.DevEui, mibReq.Param.DevEui, 8);
 802b1a6:	4d0e      	ldr	r5, [pc, #56]	; (802b1e0 <LmHandlerConfigure+0xe4>)
 802b1a8:	6861      	ldr	r1, [r4, #4]
 802b1aa:	2208      	movs	r2, #8
 802b1ac:	0028      	movs	r0, r5
 802b1ae:	f003 ffc0 	bl	802f132 <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 802b1b2:	2303      	movs	r3, #3
    LoRaMacMibGetRequestConfirm(&mibReq);
 802b1b4:	0020      	movs	r0, r4
    mibReq.Type = MIB_JOIN_EUI;
 802b1b6:	7023      	strb	r3, [r4, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 802b1b8:	f7fc fee6 	bl	8027f88 <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8);
 802b1bc:	0028      	movs	r0, r5
 802b1be:	2208      	movs	r2, #8
 802b1c0:	6861      	ldr	r1, [r4, #4]
 802b1c2:	3008      	adds	r0, #8
 802b1c4:	f003 ffb5 	bl	802f132 <memcpy1>
 802b1c8:	e7bd      	b.n	802b146 <LmHandlerConfigure+0x4a>
 802b1ca:	46c0      	nop			; (mov r8, r8)
 802b1cc:	20009b1a 	.word	0x20009b1a
 802b1d0:	20009b19 	.word	0x20009b19
 802b1d4:	20009634 	.word	0x20009634
 802b1d8:	20009644 	.word	0x20009644
 802b1dc:	20009b18 	.word	0x20009b18
 802b1e0:	20008050 	.word	0x20008050

0802b1e4 <LmHandlerProcess>:
{
 802b1e4:	b570      	push	{r4, r5, r6, lr}
  LoRaMacProcess();
 802b1e6:	f7fb ff7d 	bl	80270e4 <LoRaMacProcess>
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 802b1ea:	4c0c      	ldr	r4, [pc, #48]	; (802b21c <LmHandlerProcess+0x38>)
 802b1ec:	0025      	movs	r5, r4
 802b1ee:	3514      	adds	r5, #20
    if ((LmHandlerPackages[i] != NULL) &&
 802b1f0:	6823      	ldr	r3, [r4, #0]
 802b1f2:	2b00      	cmp	r3, #0
 802b1f4:	d00b      	beq.n	802b20e <LmHandlerProcess+0x2a>
 802b1f6:	691a      	ldr	r2, [r3, #16]
 802b1f8:	2a00      	cmp	r2, #0
 802b1fa:	d008      	beq.n	802b20e <LmHandlerProcess+0x2a>
  if ((id < PKG_MAX_NUMBER) && (LmHandlerPackages[id]->IsInitialized != NULL))
 802b1fc:	689b      	ldr	r3, [r3, #8]
 802b1fe:	2b00      	cmp	r3, #0
 802b200:	d005      	beq.n	802b20e <LmHandlerProcess+0x2a>
    return LmHandlerPackages[id]->IsInitialized();
 802b202:	4798      	blx	r3
        (LmHandlerPackages[i]->Process != NULL) &&
 802b204:	2800      	cmp	r0, #0
 802b206:	d002      	beq.n	802b20e <LmHandlerProcess+0x2a>
      LmHandlerPackages[i]->Process();
 802b208:	6823      	ldr	r3, [r4, #0]
 802b20a:	691b      	ldr	r3, [r3, #16]
 802b20c:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 802b20e:	3404      	adds	r4, #4
 802b210:	42a5      	cmp	r5, r4
 802b212:	d1ed      	bne.n	802b1f0 <LmHandlerProcess+0xc>
  NvmCtxMgmtStore();
 802b214:	f005 f8aa 	bl	803036c <NvmCtxMgmtStore>
}
 802b218:	bd70      	pop	{r4, r5, r6, pc}
 802b21a:	46c0      	nop			; (mov r8, r8)
 802b21c:	20009620 	.word	0x20009620

0802b220 <LmHandlerRequestClass>:
{
 802b220:	b570      	push	{r4, r5, r6, lr}
 802b222:	b08a      	sub	sp, #40	; 0x28
 802b224:	0005      	movs	r5, r0
  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 802b226:	f005 f873 	bl	8030310 <LmHandlerJoinStatus>
 802b22a:	2801      	cmp	r0, #1
 802b22c:	d137      	bne.n	802b29e <LmHandlerRequestClass+0x7e>
  mibReq.Type = MIB_DEVICE_CLASS;
 802b22e:	2300      	movs	r3, #0
 802b230:	ae01      	add	r6, sp, #4
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 802b232:	0030      	movs	r0, r6
  mibReq.Type = MIB_DEVICE_CLASS;
 802b234:	7033      	strb	r3, [r6, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 802b236:	f7fc fea7 	bl	8027f88 <LoRaMacMibGetRequestConfirm>
 802b23a:	2800      	cmp	r0, #0
 802b23c:	d002      	beq.n	802b244 <LmHandlerRequestClass+0x24>
    return LORAMAC_HANDLER_ERROR;
 802b23e:	2401      	movs	r4, #1
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 802b240:	4264      	negs	r4, r4
 802b242:	e01d      	b.n	802b280 <LmHandlerRequestClass+0x60>
  currentClass = mibReq.Param.Class;
 802b244:	7933      	ldrb	r3, [r6, #4]
  LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 802b246:	0004      	movs	r4, r0
  if (currentClass != newClass)
 802b248:	42ab      	cmp	r3, r5
 802b24a:	d019      	beq.n	802b280 <LmHandlerRequestClass+0x60>
    switch (newClass)
 802b24c:	2d01      	cmp	r5, #1
 802b24e:	d010      	beq.n	802b272 <LmHandlerRequestClass+0x52>
 802b250:	2d02      	cmp	r5, #2
 802b252:	d018      	beq.n	802b286 <LmHandlerRequestClass+0x66>
 802b254:	2d00      	cmp	r5, #0
 802b256:	d113      	bne.n	802b280 <LmHandlerRequestClass+0x60>
        if (currentClass != CLASS_A)
 802b258:	2b00      	cmp	r3, #0
 802b25a:	d011      	beq.n	802b280 <LmHandlerRequestClass+0x60>
          mibReq.Param.Class = CLASS_A;
 802b25c:	7130      	strb	r0, [r6, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 802b25e:	0030      	movs	r0, r6
 802b260:	f7fc ffae 	bl	80281c0 <LoRaMacMibSetRequestConfirm>
 802b264:	2800      	cmp	r0, #0
 802b266:	d1ea      	bne.n	802b23e <LmHandlerRequestClass+0x1e>
            LmHandlerCallbacks.OnClassChange( CLASS_A );
 802b268:	0020      	movs	r0, r4
 802b26a:	4b0e      	ldr	r3, [pc, #56]	; (802b2a4 <LmHandlerRequestClass+0x84>)
 802b26c:	699b      	ldr	r3, [r3, #24]
            LmHandlerCallbacks.OnClassChange( CLASS_C );
 802b26e:	4798      	blx	r3
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
  MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
}
 802b270:	e006      	b.n	802b280 <LmHandlerRequestClass+0x60>
        if (currentClass != CLASS_A)
 802b272:	2b00      	cmp	r3, #0
 802b274:	d1e3      	bne.n	802b23e <LmHandlerRequestClass+0x1e>
          errorStatus = LmHandlerDeviceTimeReq();
 802b276:	f005 f840 	bl	80302fa <LmHandlerDeviceTimeReq>
 802b27a:	0004      	movs	r4, r0
          IsClassBSwitchPending = true;
 802b27c:	4b0a      	ldr	r3, [pc, #40]	; (802b2a8 <LmHandlerRequestClass+0x88>)
 802b27e:	701d      	strb	r5, [r3, #0]
}
 802b280:	0020      	movs	r0, r4
 802b282:	b00a      	add	sp, #40	; 0x28
 802b284:	bd70      	pop	{r4, r5, r6, pc}
        if (currentClass != CLASS_A)
 802b286:	2b00      	cmp	r3, #0
 802b288:	d1d9      	bne.n	802b23e <LmHandlerRequestClass+0x1e>
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 802b28a:	0030      	movs	r0, r6
          mibReq.Param.Class = CLASS_C;
 802b28c:	7135      	strb	r5, [r6, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 802b28e:	f7fc ff97 	bl	80281c0 <LoRaMacMibSetRequestConfirm>
 802b292:	1e04      	subs	r4, r0, #0
 802b294:	d1d3      	bne.n	802b23e <LmHandlerRequestClass+0x1e>
            LmHandlerCallbacks.OnClassChange( CLASS_C );
 802b296:	4b03      	ldr	r3, [pc, #12]	; (802b2a4 <LmHandlerRequestClass+0x84>)
 802b298:	0028      	movs	r0, r5
 802b29a:	699b      	ldr	r3, [r3, #24]
 802b29c:	e7e7      	b.n	802b26e <LmHandlerRequestClass+0x4e>
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 802b29e:	2403      	movs	r4, #3
 802b2a0:	e7ce      	b.n	802b240 <LmHandlerRequestClass+0x20>
 802b2a2:	46c0      	nop			; (mov r8, r8)
 802b2a4:	20009600 	.word	0x20009600
 802b2a8:	20009b19 	.word	0x20009b19

0802b2ac <LmHandlerJoin>:
{
 802b2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b2ae:	b08b      	sub	sp, #44	; 0x2c
 802b2b0:	4d1f      	ldr	r5, [pc, #124]	; (802b330 <LmHandlerJoin+0x84>)
 802b2b2:	4e20      	ldr	r6, [pc, #128]	; (802b334 <LmHandlerJoin+0x88>)
 802b2b4:	ac01      	add	r4, sp, #4
  if (mode == ACTIVATION_TYPE_OTAA)
 802b2b6:	2802      	cmp	r0, #2
 802b2b8:	d10b      	bne.n	802b2d2 <LmHandlerJoin+0x26>
    JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 802b2ba:	70a8      	strb	r0, [r5, #2]
    LoRaMacStart();
 802b2bc:	f7fc fe00 	bl	8027ec0 <LoRaMacStart>
    mlmeReq.Type = MLME_JOIN;
 802b2c0:	2301      	movs	r3, #1
 802b2c2:	7023      	strb	r3, [r4, #0]
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 802b2c4:	78f3      	ldrb	r3, [r6, #3]
    LoRaMacMlmeRequest(&mlmeReq);
 802b2c6:	0020      	movs	r0, r4
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 802b2c8:	7123      	strb	r3, [r4, #4]
    LoRaMacMlmeRequest(&mlmeReq);
 802b2ca:	f7fd f9a5 	bl	8028618 <LoRaMacMlmeRequest>
}
 802b2ce:	b00b      	add	sp, #44	; 0x2c
 802b2d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    JoinParams.Mode = ACTIVATION_TYPE_ABP;
 802b2d2:	2301      	movs	r3, #1
 802b2d4:	70ab      	strb	r3, [r5, #2]
    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 802b2d6:	2300      	movs	r3, #0
 802b2d8:	706b      	strb	r3, [r5, #1]
    if (CtxRestoreDone == false)
 802b2da:	4b17      	ldr	r3, [pc, #92]	; (802b338 <LmHandlerJoin+0x8c>)
 802b2dc:	781b      	ldrb	r3, [r3, #0]
 802b2de:	2b00      	cmp	r3, #0
 802b2e0:	d115      	bne.n	802b30e <LmHandlerJoin+0x62>
      mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 802b2e2:	3327      	adds	r3, #39	; 0x27
 802b2e4:	7023      	strb	r3, [r4, #0]
      mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 802b2e6:	4b15      	ldr	r3, [pc, #84]	; (802b33c <LmHandlerJoin+0x90>)
      LoRaMacMibSetRequestConfirm(&mibReq);
 802b2e8:	0020      	movs	r0, r4
      mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 802b2ea:	6063      	str	r3, [r4, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 802b2ec:	f7fc ff68 	bl	80281c0 <LoRaMacMibSetRequestConfirm>
      mibReq.Type = MIB_NET_ID;
 802b2f0:	2305      	movs	r3, #5
      mibReq.Param.NetID = CommissioningParams.NetworkId;
 802b2f2:	4f13      	ldr	r7, [pc, #76]	; (802b340 <LmHandlerJoin+0x94>)
      mibReq.Type = MIB_NET_ID;
 802b2f4:	7023      	strb	r3, [r4, #0]
      mibReq.Param.NetID = CommissioningParams.NetworkId;
 802b2f6:	693b      	ldr	r3, [r7, #16]
      LoRaMacMibSetRequestConfirm(&mibReq);
 802b2f8:	0020      	movs	r0, r4
      mibReq.Param.NetID = CommissioningParams.NetworkId;
 802b2fa:	6063      	str	r3, [r4, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 802b2fc:	f7fc ff60 	bl	80281c0 <LoRaMacMibSetRequestConfirm>
      mibReq.Type = MIB_DEV_ADDR;
 802b300:	2306      	movs	r3, #6
 802b302:	7023      	strb	r3, [r4, #0]
      mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 802b304:	697b      	ldr	r3, [r7, #20]
      LoRaMacMibSetRequestConfirm(&mibReq);
 802b306:	0020      	movs	r0, r4
      mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 802b308:	6063      	str	r3, [r4, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 802b30a:	f7fc ff59 	bl	80281c0 <LoRaMacMibSetRequestConfirm>
    LoRaMacStart();
 802b30e:	f7fc fdd7 	bl	8027ec0 <LoRaMacStart>
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 802b312:	2301      	movs	r3, #1
    LoRaMacMibSetRequestConfirm(&mibReq);
 802b314:	0020      	movs	r0, r4
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 802b316:	7023      	strb	r3, [r4, #0]
    mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 802b318:	7123      	strb	r3, [r4, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 802b31a:	f7fc ff51 	bl	80281c0 <LoRaMacMibSetRequestConfirm>
    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 802b31e:	4b09      	ldr	r3, [pc, #36]	; (802b344 <LmHandlerJoin+0x98>)
 802b320:	0028      	movs	r0, r5
 802b322:	68db      	ldr	r3, [r3, #12]
 802b324:	4798      	blx	r3
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 802b326:	7870      	ldrb	r0, [r6, #1]
 802b328:	f7ff ff7a 	bl	802b220 <LmHandlerRequestClass>
}
 802b32c:	e7cf      	b.n	802b2ce <LmHandlerJoin+0x22>
 802b32e:	46c0      	nop			; (mov r8, r8)
 802b330:	200081fd 	.word	0x200081fd
 802b334:	20009b1a 	.word	0x20009b1a
 802b338:	20009b18 	.word	0x20009b18
 802b33c:	01000300 	.word	0x01000300
 802b340:	20008050 	.word	0x20008050
 802b344:	20009600 	.word	0x20009600

0802b348 <LmHandlerIsBusy>:
{
 802b348:	b510      	push	{r4, lr}
  if (LoRaMacIsBusy() == true)
 802b34a:	f7fb feb9 	bl	80270c0 <LoRaMacIsBusy>
 802b34e:	2800      	cmp	r0, #0
 802b350:	d108      	bne.n	802b364 <LmHandlerIsBusy+0x1c>
  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 802b352:	f004 ffdd 	bl	8030310 <LmHandlerJoinStatus>
 802b356:	2801      	cmp	r0, #1
 802b358:	d005      	beq.n	802b366 <LmHandlerIsBusy+0x1e>
    LmHandlerJoin(JoinParams.Mode);
 802b35a:	4b05      	ldr	r3, [pc, #20]	; (802b370 <LmHandlerIsBusy+0x28>)
 802b35c:	7898      	ldrb	r0, [r3, #2]
 802b35e:	f7ff ffa5 	bl	802b2ac <LmHandlerJoin>
    return true;
 802b362:	2001      	movs	r0, #1
}
 802b364:	bd10      	pop	{r4, pc}
  if (LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() == true)
 802b366:	4b03      	ldr	r3, [pc, #12]	; (802b374 <LmHandlerIsBusy+0x2c>)
 802b368:	681b      	ldr	r3, [r3, #0]
 802b36a:	68db      	ldr	r3, [r3, #12]
 802b36c:	4798      	blx	r3
 802b36e:	e7f9      	b.n	802b364 <LmHandlerIsBusy+0x1c>
 802b370:	200081fd 	.word	0x200081fd
 802b374:	20009620 	.word	0x20009620

0802b378 <LmHandlerSend>:
{
 802b378:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b37a:	b089      	sub	sp, #36	; 0x24
 802b37c:	0005      	movs	r5, r0
 802b37e:	000e      	movs	r6, r1
 802b380:	0017      	movs	r7, r2
 802b382:	9301      	str	r3, [sp, #4]
  if (LoRaMacIsBusy() == true)
 802b384:	f7fb fe9c 	bl	80270c0 <LoRaMacIsBusy>
 802b388:	2800      	cmp	r0, #0
 802b38a:	d14c      	bne.n	802b426 <LmHandlerSend+0xae>
  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 802b38c:	f004 ffc0 	bl	8030310 <LmHandlerJoinStatus>
 802b390:	2801      	cmp	r0, #1
 802b392:	d006      	beq.n	802b3a2 <LmHandlerSend+0x2a>
    LmHandlerJoin(JoinParams.Mode);
 802b394:	4b27      	ldr	r3, [pc, #156]	; (802b434 <LmHandlerSend+0xbc>)
 802b396:	7898      	ldrb	r0, [r3, #2]
 802b398:	f7ff ff88 	bl	802b2ac <LmHandlerJoin>
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 802b39c:	2003      	movs	r0, #3
    return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 802b39e:	4240      	negs	r0, r0
 802b3a0:	e02f      	b.n	802b402 <LmHandlerSend+0x8a>
  if ((LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() == true)
 802b3a2:	4c25      	ldr	r4, [pc, #148]	; (802b438 <LmHandlerSend+0xc0>)
 802b3a4:	6823      	ldr	r3, [r4, #0]
 802b3a6:	68db      	ldr	r3, [r3, #12]
 802b3a8:	4798      	blx	r3
 802b3aa:	2800      	cmp	r0, #0
 802b3ac:	d006      	beq.n	802b3bc <LmHandlerSend+0x44>
      && (appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port) && (appData->Port != 0))
 802b3ae:	6822      	ldr	r2, [r4, #0]
 802b3b0:	782b      	ldrb	r3, [r5, #0]
 802b3b2:	7812      	ldrb	r2, [r2, #0]
 802b3b4:	429a      	cmp	r2, r3
 802b3b6:	d001      	beq.n	802b3bc <LmHandlerSend+0x44>
 802b3b8:	2b00      	cmp	r3, #0
 802b3ba:	d136      	bne.n	802b42a <LmHandlerSend+0xb2>
  mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 802b3bc:	4b1f      	ldr	r3, [pc, #124]	; (802b43c <LmHandlerSend+0xc4>)
 802b3be:	ac03      	add	r4, sp, #12
 802b3c0:	78db      	ldrb	r3, [r3, #3]
  if (LoRaMacQueryTxPossible(appData->BufferSize, &txInfo) != LORAMAC_STATUS_OK)
 802b3c2:	a902      	add	r1, sp, #8
  mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 802b3c4:	73a3      	strb	r3, [r4, #14]
  if (LoRaMacQueryTxPossible(appData->BufferSize, &txInfo) != LORAMAC_STATUS_OK)
 802b3c6:	7868      	ldrb	r0, [r5, #1]
 802b3c8:	f7fc fd82 	bl	8027ed0 <LoRaMacQueryTxPossible>
 802b3cc:	4b1c      	ldr	r3, [pc, #112]	; (802b440 <LmHandlerSend+0xc8>)
 802b3ce:	2800      	cmp	r0, #0
 802b3d0:	d019      	beq.n	802b406 <LmHandlerSend+0x8e>
    TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 802b3d2:	2200      	movs	r2, #0
 802b3d4:	709a      	strb	r2, [r3, #2]
    mcpsReq.Type = MCPS_UNCONFIRMED;
 802b3d6:	7022      	strb	r2, [r4, #0]
    mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 802b3d8:	60a2      	str	r2, [r4, #8]
    mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 802b3da:	81a2      	strh	r2, [r4, #12]
  TxParams.AppData = *appData;
 802b3dc:	001a      	movs	r2, r3
 802b3de:	320c      	adds	r2, #12
 802b3e0:	cd03      	ldmia	r5!, {r0, r1}
 802b3e2:	c203      	stmia	r2!, {r0, r1}
  TxParams.Datarate = LmHandlerParams.TxDatarate;
 802b3e4:	4a15      	ldr	r2, [pc, #84]	; (802b43c <LmHandlerSend+0xc4>)
  status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 802b3e6:	0020      	movs	r0, r4
  TxParams.Datarate = LmHandlerParams.TxDatarate;
 802b3e8:	78d2      	ldrb	r2, [r2, #3]
  status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 802b3ea:	9901      	ldr	r1, [sp, #4]
  TxParams.Datarate = LmHandlerParams.TxDatarate;
 802b3ec:	711a      	strb	r2, [r3, #4]
  status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 802b3ee:	f7fd fa1b 	bl	8028828 <LoRaMacMcpsRequest>
  if (nextTxIn != NULL)
 802b3f2:	2f00      	cmp	r7, #0
 802b3f4:	d001      	beq.n	802b3fa <LmHandlerSend+0x82>
    *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 802b3f6:	6923      	ldr	r3, [r4, #16]
 802b3f8:	603b      	str	r3, [r7, #0]
  switch(status)
 802b3fa:	2811      	cmp	r0, #17
 802b3fc:	d817      	bhi.n	802b42e <LmHandlerSend+0xb6>
 802b3fe:	4b11      	ldr	r3, [pc, #68]	; (802b444 <LmHandlerSend+0xcc>)
 802b400:	5618      	ldrsb	r0, [r3, r0]
}
 802b402:	b009      	add	sp, #36	; 0x24
 802b404:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TxParams.MsgType = isTxConfirmed;
 802b406:	709e      	strb	r6, [r3, #2]
    mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 802b408:	782a      	ldrb	r2, [r5, #0]
 802b40a:	7122      	strb	r2, [r4, #4]
    mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 802b40c:	786a      	ldrb	r2, [r5, #1]
 802b40e:	81a2      	strh	r2, [r4, #12]
    mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 802b410:	686a      	ldr	r2, [r5, #4]
 802b412:	60a2      	str	r2, [r4, #8]
    if (isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG)
 802b414:	2e00      	cmp	r6, #0
 802b416:	d101      	bne.n	802b41c <LmHandlerSend+0xa4>
      mcpsReq.Type = MCPS_UNCONFIRMED;
 802b418:	7026      	strb	r6, [r4, #0]
 802b41a:	e7df      	b.n	802b3dc <LmHandlerSend+0x64>
      mcpsReq.Type = MCPS_CONFIRMED;
 802b41c:	2201      	movs	r2, #1
 802b41e:	7022      	strb	r2, [r4, #0]
      mcpsReq.Req.Confirmed.NbTrials = 8;
 802b420:	3207      	adds	r2, #7
 802b422:	73e2      	strb	r2, [r4, #15]
 802b424:	e7da      	b.n	802b3dc <LmHandlerSend+0x64>
    return LORAMAC_HANDLER_BUSY_ERROR;
 802b426:	2002      	movs	r0, #2
 802b428:	e7b9      	b.n	802b39e <LmHandlerSend+0x26>
    return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 802b42a:	2004      	movs	r0, #4
 802b42c:	e7b7      	b.n	802b39e <LmHandlerSend+0x26>
 802b42e:	2001      	movs	r0, #1
 802b430:	e7b5      	b.n	802b39e <LmHandlerSend+0x26>
 802b432:	46c0      	nop			; (mov r8, r8)
 802b434:	200081fd 	.word	0x200081fd
 802b438:	20009620 	.word	0x20009620
 802b43c:	20009b1a 	.word	0x20009b1a
 802b440:	20009654 	.word	0x20009654
 802b444:	08031e1b 	.word	0x08031e1b

0802b448 <LmHandlerPingSlotReq>:
{
 802b448:	b510      	push	{r4, lr}
 802b44a:	b088      	sub	sp, #32
  mlmeReq.Type = MLME_PING_SLOT_INFO;
 802b44c:	466a      	mov	r2, sp
 802b44e:	230d      	movs	r3, #13
 802b450:	7313      	strb	r3, [r2, #12]
  mlmeReq.Req.PingSlotInfo.PingSlot.Fields.Periodicity = periodicity;
 802b452:	3b06      	subs	r3, #6
 802b454:	4003      	ands	r3, r0
{
 802b456:	0004      	movs	r4, r0
  mlmeReq.Req.PingSlotInfo.PingSlot.Fields.Periodicity = periodicity;
 802b458:	7413      	strb	r3, [r2, #16]
  status = LoRaMacMlmeRequest(&mlmeReq);
 802b45a:	a803      	add	r0, sp, #12
 802b45c:	f7fd f8dc 	bl	8028618 <LoRaMacMlmeRequest>
 802b460:	1e01      	subs	r1, r0, #0
  if (status == LORAMAC_STATUS_OK)
 802b462:	d10a      	bne.n	802b47a <LmHandlerPingSlotReq+0x32>
    LmHandlerParams.PingPeriodicity = periodicity;
 802b464:	4b06      	ldr	r3, [pc, #24]	; (802b480 <LmHandlerPingSlotReq+0x38>)
    LmHandlerAppData_t appData =
 802b466:	a801      	add	r0, sp, #4
    LmHandlerParams.PingPeriodicity = periodicity;
 802b468:	715c      	strb	r4, [r3, #5]
    return LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, false);
 802b46a:	000a      	movs	r2, r1
 802b46c:	000b      	movs	r3, r1
    LmHandlerAppData_t appData =
 802b46e:	8001      	strh	r1, [r0, #0]
 802b470:	6041      	str	r1, [r0, #4]
    return LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, false);
 802b472:	f7ff ff81 	bl	802b378 <LmHandlerSend>
}
 802b476:	b008      	add	sp, #32
 802b478:	bd10      	pop	{r4, pc}
    return LORAMAC_HANDLER_ERROR;
 802b47a:	2001      	movs	r0, #1
 802b47c:	4240      	negs	r0, r0
 802b47e:	e7fa      	b.n	802b476 <LmHandlerPingSlotReq+0x2e>
 802b480:	20009b1a 	.word	0x20009b1a

0802b484 <LmHandlerPackageRegister>:
{
 802b484:	b570      	push	{r4, r5, r6, lr}
 802b486:	0004      	movs	r4, r0
 802b488:	000d      	movs	r5, r1
  switch (id)
 802b48a:	2800      	cmp	r0, #0
 802b48c:	d002      	beq.n	802b494 <LmHandlerPackageRegister+0x10>
    return LORAMAC_HANDLER_ERROR;
 802b48e:	2001      	movs	r0, #1
 802b490:	4240      	negs	r0, r0
}
 802b492:	bd70      	pop	{r4, r5, r6, pc}
      package = LmphCompliancePackageFactory();
 802b494:	f000 fab8 	bl	802ba08 <LmphCompliancePackageFactory>
  if (package != NULL)
 802b498:	2800      	cmp	r0, #0
 802b49a:	d0f8      	beq.n	802b48e <LmHandlerPackageRegister+0xa>
    LmHandlerPackages[id] = package;
 802b49c:	4b07      	ldr	r3, [pc, #28]	; (802b4bc <LmHandlerPackageRegister+0x38>)
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 802b49e:	22f2      	movs	r2, #242	; 0xf2
    LmHandlerPackages[id] = package;
 802b4a0:	6018      	str	r0, [r3, #0]
    LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 802b4a2:	4b07      	ldr	r3, [pc, #28]	; (802b4c0 <LmHandlerPackageRegister+0x3c>)
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 802b4a4:	4907      	ldr	r1, [pc, #28]	; (802b4c4 <LmHandlerPackageRegister+0x40>)
    LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 802b4a6:	6203      	str	r3, [r0, #32]
    LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 802b4a8:	4b07      	ldr	r3, [pc, #28]	; (802b4c8 <LmHandlerPackageRegister+0x44>)
 802b4aa:	6243      	str	r3, [r0, #36]	; 0x24
    LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 802b4ac:	4b07      	ldr	r3, [pc, #28]	; (802b4cc <LmHandlerPackageRegister+0x48>)
 802b4ae:	6283      	str	r3, [r0, #40]	; 0x28
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 802b4b0:	6843      	ldr	r3, [r0, #4]
 802b4b2:	0028      	movs	r0, r5
 802b4b4:	4798      	blx	r3
    return LORAMAC_HANDLER_SUCCESS;
 802b4b6:	0020      	movs	r0, r4
 802b4b8:	e7eb      	b.n	802b492 <LmHandlerPackageRegister+0xe>
 802b4ba:	46c0      	nop			; (mov r8, r8)
 802b4bc:	20009620 	.word	0x20009620
 802b4c0:	0802b2ad 	.word	0x0802b2ad
 802b4c4:	20009a26 	.word	0x20009a26
 802b4c8:	0802b379 	.word	0x0802b379
 802b4cc:	080302fb 	.word	0x080302fb

0802b4d0 <LmHandlerInit>:
{
 802b4d0:	b510      	push	{r4, lr}
  UTIL_MEM_cpy_8((void *)&LmHandlerCallbacks, (const void *)handlerCallbacks, sizeof(LmHandlerCallbacks_t));
 802b4d2:	4c10      	ldr	r4, [pc, #64]	; (802b514 <LmHandlerInit+0x44>)
{
 802b4d4:	0001      	movs	r1, r0
  UTIL_MEM_cpy_8((void *)&LmHandlerCallbacks, (const void *)handlerCallbacks, sizeof(LmHandlerCallbacks_t));
 802b4d6:	0020      	movs	r0, r4
 802b4d8:	2220      	movs	r2, #32
 802b4da:	f003 fe3f 	bl	802f15c <UTIL_MEM_cpy_8>
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 802b4de:	4b0e      	ldr	r3, [pc, #56]	; (802b518 <LmHandlerInit+0x48>)
 802b4e0:	4a0e      	ldr	r2, [pc, #56]	; (802b51c <LmHandlerInit+0x4c>)
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 802b4e2:	490f      	ldr	r1, [pc, #60]	; (802b520 <LmHandlerInit+0x50>)
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 802b4e4:	601a      	str	r2, [r3, #0]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 802b4e6:	4a0f      	ldr	r2, [pc, #60]	; (802b524 <LmHandlerInit+0x54>)
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 802b4e8:	2000      	movs	r0, #0
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 802b4ea:	605a      	str	r2, [r3, #4]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 802b4ec:	4a0e      	ldr	r2, [pc, #56]	; (802b528 <LmHandlerInit+0x58>)
 802b4ee:	609a      	str	r2, [r3, #8]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 802b4f0:	4a0e      	ldr	r2, [pc, #56]	; (802b52c <LmHandlerInit+0x5c>)
 802b4f2:	60da      	str	r2, [r3, #12]
  LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks.GetBatteryLevel;
 802b4f4:	4b0e      	ldr	r3, [pc, #56]	; (802b530 <LmHandlerInit+0x60>)
 802b4f6:	6822      	ldr	r2, [r4, #0]
 802b4f8:	601a      	str	r2, [r3, #0]
  LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks.GetTemperature;
 802b4fa:	6862      	ldr	r2, [r4, #4]
 802b4fc:	605a      	str	r2, [r3, #4]
  LoRaMacCallbacks.NvmContextChange = NvmCtxMgmtEvent;
 802b4fe:	4a0d      	ldr	r2, [pc, #52]	; (802b534 <LmHandlerInit+0x64>)
 802b500:	609a      	str	r2, [r3, #8]
  LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks.OnMacProcess;
 802b502:	68a2      	ldr	r2, [r4, #8]
 802b504:	60da      	str	r2, [r3, #12]
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 802b506:	f7ff ffbd 	bl	802b484 <LmHandlerPackageRegister>
 802b50a:	1e43      	subs	r3, r0, #1
 802b50c:	4198      	sbcs	r0, r3
}
 802b50e:	4240      	negs	r0, r0
 802b510:	bd10      	pop	{r4, pc}
 802b512:	46c0      	nop			; (mov r8, r8)
 802b514:	20009600 	.word	0x20009600
 802b518:	20009644 	.word	0x20009644
 802b51c:	0802b0a9 	.word	0x0802b0a9
 802b520:	20008068 	.word	0x20008068
 802b524:	0802b539 	.word	0x0802b539
 802b528:	0802b61d 	.word	0x0802b61d
 802b52c:	0802b029 	.word	0x0802b029
 802b530:	20009634 	.word	0x20009634
 802b534:	0803036b 	.word	0x0803036b

0802b538 <McpsIndication>:
  RxParams.IsMcpsIndication = 1;
 802b538:	2301      	movs	r3, #1
{
 802b53a:	b5f0      	push	{r4, r5, r6, r7, lr}
  RxParams.IsMcpsIndication = 1;
 802b53c:	4927      	ldr	r1, [pc, #156]	; (802b5dc <McpsIndication+0xa4>)
{
 802b53e:	0004      	movs	r4, r0
  RxParams.IsMcpsIndication = 1;
 802b540:	700b      	strb	r3, [r1, #0]
  RxParams.Status = mcpsIndication->Status;
 802b542:	7843      	ldrb	r3, [r0, #1]
{
 802b544:	b087      	sub	sp, #28
  RxParams.Status = mcpsIndication->Status;
 802b546:	704b      	strb	r3, [r1, #1]
  if (RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK)
 802b548:	2b00      	cmp	r3, #0
 802b54a:	d13d      	bne.n	802b5c8 <McpsIndication+0x90>
  if (mcpsIndication->BufferSize > 0)
 802b54c:	7b03      	ldrb	r3, [r0, #12]
 802b54e:	2b00      	cmp	r3, #0
 802b550:	d013      	beq.n	802b57a <McpsIndication+0x42>
    RxParams.Datarate = mcpsIndication->RxDatarate;
 802b552:	7902      	ldrb	r2, [r0, #4]
 802b554:	708a      	strb	r2, [r1, #2]
    RxParams.Rssi = mcpsIndication->Rssi;
 802b556:	89c2      	ldrh	r2, [r0, #14]
 802b558:	70ca      	strb	r2, [r1, #3]
    RxParams.Snr = mcpsIndication->Snr;
 802b55a:	7c02      	ldrb	r2, [r0, #16]
 802b55c:	710a      	strb	r2, [r1, #4]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 802b55e:	6942      	ldr	r2, [r0, #20]
 802b560:	608a      	str	r2, [r1, #8]
    RxParams.RxSlot = mcpsIndication->RxSlot;
 802b562:	7c42      	ldrb	r2, [r0, #17]
 802b564:	730a      	strb	r2, [r1, #12]
    appData.Port = mcpsIndication->Port;
 802b566:	78c2      	ldrb	r2, [r0, #3]
 802b568:	4668      	mov	r0, sp
    appData.BufferSize = mcpsIndication->BufferSize;
 802b56a:	7243      	strb	r3, [r0, #9]
    appData.Buffer = mcpsIndication->Buffer;
 802b56c:	68a3      	ldr	r3, [r4, #8]
    appData.Port = mcpsIndication->Port;
 802b56e:	7202      	strb	r2, [r0, #8]
    appData.Buffer = mcpsIndication->Buffer;
 802b570:	9303      	str	r3, [sp, #12]
    LmHandlerCallbacks.OnRxData(&appData, &RxParams);
 802b572:	4b1b      	ldr	r3, [pc, #108]	; (802b5e0 <McpsIndication+0xa8>)
 802b574:	a802      	add	r0, sp, #8
 802b576:	695b      	ldr	r3, [r3, #20]
 802b578:	4798      	blx	r3
 802b57a:	4e1a      	ldr	r6, [pc, #104]	; (802b5e4 <McpsIndication+0xac>)
{
 802b57c:	2500      	movs	r5, #0
 802b57e:	0037      	movs	r7, r6
    if (LmHandlerPackages[i] != NULL)
 802b580:	6833      	ldr	r3, [r6, #0]
 802b582:	2b00      	cmp	r3, #0
 802b584:	d00a      	beq.n	802b59c <McpsIndication+0x64>
          if ((LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL) &&
 802b586:	699a      	ldr	r2, [r3, #24]
 802b588:	2a00      	cmp	r2, #0
 802b58a:	d007      	beq.n	802b59c <McpsIndication+0x64>
 802b58c:	781a      	ldrb	r2, [r3, #0]
 802b58e:	78e3      	ldrb	r3, [r4, #3]
 802b590:	429a      	cmp	r2, r3
 802b592:	d11b      	bne.n	802b5cc <McpsIndication+0x94>
            LmHandlerPackages[i]->OnMcpsIndicationProcess(params);
 802b594:	6833      	ldr	r3, [r6, #0]
 802b596:	0020      	movs	r0, r4
 802b598:	699b      	ldr	r3, [r3, #24]
 802b59a:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 802b59c:	3501      	adds	r5, #1
 802b59e:	b26d      	sxtb	r5, r5
 802b5a0:	3604      	adds	r6, #4
 802b5a2:	2d05      	cmp	r5, #5
 802b5a4:	d1ec      	bne.n	802b580 <McpsIndication+0x48>
  LmHandlerGetCurrentClass(&deviceClass);
 802b5a6:	466b      	mov	r3, sp
 802b5a8:	1ddd      	adds	r5, r3, #7
 802b5aa:	0028      	movs	r0, r5
 802b5ac:	f004 fec3 	bl	8030336 <LmHandlerGetCurrentClass>
  if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 802b5b0:	7963      	ldrb	r3, [r4, #5]
 802b5b2:	2b01      	cmp	r3, #1
 802b5b4:	d108      	bne.n	802b5c8 <McpsIndication+0x90>
 802b5b6:	7829      	ldrb	r1, [r5, #0]
 802b5b8:	2900      	cmp	r1, #0
 802b5ba:	d105      	bne.n	802b5c8 <McpsIndication+0x90>
    LmHandlerAppData_t appData =
 802b5bc:	a804      	add	r0, sp, #16
    LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 802b5be:	000a      	movs	r2, r1
    LmHandlerAppData_t appData =
 802b5c0:	8001      	strh	r1, [r0, #0]
 802b5c2:	6041      	str	r1, [r0, #4]
    LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 802b5c4:	f7ff fed8 	bl	802b378 <LmHandlerSend>
}
 802b5c8:	b007      	add	sp, #28
 802b5ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
 802b5cc:	2d00      	cmp	r5, #0
 802b5ce:	d1e5      	bne.n	802b59c <McpsIndication+0x64>
               ((i == PACKAGE_ID_COMPLIANCE) && (LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning()))))
 802b5d0:	683b      	ldr	r3, [r7, #0]
 802b5d2:	68db      	ldr	r3, [r3, #12]
 802b5d4:	4798      	blx	r3
 802b5d6:	2800      	cmp	r0, #0
 802b5d8:	d1dc      	bne.n	802b594 <McpsIndication+0x5c>
 802b5da:	e7df      	b.n	802b59c <McpsIndication+0x64>
 802b5dc:	20008074 	.word	0x20008074
 802b5e0:	20009600 	.word	0x20009600
 802b5e4:	20009620 	.word	0x20009620

0802b5e8 <LmHandlerGetTxDatarate>:
{
 802b5e8:	b510      	push	{r4, lr}
 802b5ea:	0004      	movs	r4, r0
 802b5ec:	b08a      	sub	sp, #40	; 0x28
  if (txDatarate == NULL)
 802b5ee:	2800      	cmp	r0, #0
 802b5f0:	d103      	bne.n	802b5fa <LmHandlerGetTxDatarate+0x12>
    return LORAMAC_HANDLER_ERROR;
 802b5f2:	2001      	movs	r0, #1
 802b5f4:	4240      	negs	r0, r0
}
 802b5f6:	b00a      	add	sp, #40	; 0x28
 802b5f8:	bd10      	pop	{r4, pc}
  mibGet.Type = MIB_CHANNELS_DATARATE;
 802b5fa:	231f      	movs	r3, #31
 802b5fc:	466a      	mov	r2, sp
  if (LoRaMacMibGetRequestConfirm(&mibGet) != LORAMAC_STATUS_OK)
 802b5fe:	a801      	add	r0, sp, #4
  mibGet.Type = MIB_CHANNELS_DATARATE;
 802b600:	7113      	strb	r3, [r2, #4]
  if (LoRaMacMibGetRequestConfirm(&mibGet) != LORAMAC_STATUS_OK)
 802b602:	f7fc fcc1 	bl	8027f88 <LoRaMacMibGetRequestConfirm>
 802b606:	2800      	cmp	r0, #0
 802b608:	d1f3      	bne.n	802b5f2 <LmHandlerGetTxDatarate+0xa>
  *txDatarate = mibGet.Param.ChannelsDatarate;
 802b60a:	466b      	mov	r3, sp
 802b60c:	7a1b      	ldrb	r3, [r3, #8]
  LmHandlerParams.TxDatarate = mibGet.Param.ChannelsDatarate;
 802b60e:	4a02      	ldr	r2, [pc, #8]	; (802b618 <LmHandlerGetTxDatarate+0x30>)
  *txDatarate = mibGet.Param.ChannelsDatarate;
 802b610:	b25b      	sxtb	r3, r3
 802b612:	7023      	strb	r3, [r4, #0]
  LmHandlerParams.TxDatarate = mibGet.Param.ChannelsDatarate;
 802b614:	70d3      	strb	r3, [r2, #3]
  return LORAMAC_HANDLER_SUCCESS;
 802b616:	e7ee      	b.n	802b5f6 <LmHandlerGetTxDatarate+0xe>
 802b618:	20009b1a 	.word	0x20009b1a

0802b61c <MlmeConfirm>:
  TxParams.IsMcpsConfirm = 0;
 802b61c:	2200      	movs	r2, #0
{
 802b61e:	b570      	push	{r4, r5, r6, lr}
 802b620:	4d31      	ldr	r5, [pc, #196]	; (802b6e8 <MlmeConfirm+0xcc>)
 802b622:	0004      	movs	r4, r0
 802b624:	002e      	movs	r6, r5
  TxParams.IsMcpsConfirm = 0;
 802b626:	4b31      	ldr	r3, [pc, #196]	; (802b6ec <MlmeConfirm+0xd0>)
{
 802b628:	b08a      	sub	sp, #40	; 0x28
  TxParams.IsMcpsConfirm = 0;
 802b62a:	701a      	strb	r2, [r3, #0]
  TxParams.Status = mlmeConfirm->Status;
 802b62c:	7842      	ldrb	r2, [r0, #1]
 802b62e:	3614      	adds	r6, #20
 802b630:	705a      	strb	r2, [r3, #1]
    if (LmHandlerPackages[i] != NULL)
 802b632:	682b      	ldr	r3, [r5, #0]
 802b634:	2b00      	cmp	r3, #0
 802b636:	d004      	beq.n	802b642 <MlmeConfirm+0x26>
          if (LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL)
 802b638:	69db      	ldr	r3, [r3, #28]
 802b63a:	2b00      	cmp	r3, #0
 802b63c:	d001      	beq.n	802b642 <MlmeConfirm+0x26>
            LmHandlerPackages[i]->OnMlmeConfirmProcess(params);
 802b63e:	0020      	movs	r0, r4
 802b640:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 802b642:	3504      	adds	r5, #4
 802b644:	42ae      	cmp	r6, r5
 802b646:	d1f4      	bne.n	802b632 <MlmeConfirm+0x16>
  switch (mlmeConfirm->MlmeRequest)
 802b648:	7823      	ldrb	r3, [r4, #0]
 802b64a:	2b0c      	cmp	r3, #12
 802b64c:	d040      	beq.n	802b6d0 <MlmeConfirm+0xb4>
 802b64e:	d805      	bhi.n	802b65c <MlmeConfirm+0x40>
 802b650:	2b01      	cmp	r3, #1
 802b652:	d016      	beq.n	802b682 <MlmeConfirm+0x66>
 802b654:	2b0a      	cmp	r3, #10
 802b656:	d031      	beq.n	802b6bc <MlmeConfirm+0xa0>
}
 802b658:	b00a      	add	sp, #40	; 0x28
 802b65a:	bd70      	pop	{r4, r5, r6, pc}
  switch (mlmeConfirm->MlmeRequest)
 802b65c:	2b0d      	cmp	r3, #13
 802b65e:	d1fb      	bne.n	802b658 <MlmeConfirm+0x3c>
      if (mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK)
 802b660:	7864      	ldrb	r4, [r4, #1]
 802b662:	2c00      	cmp	r4, #0
 802b664:	d137      	bne.n	802b6d6 <MlmeConfirm+0xba>
        mibReq.Type = MIB_DEVICE_CLASS;
 802b666:	466b      	mov	r3, sp
        mibReq.Param.Class = CLASS_B;
 802b668:	2501      	movs	r5, #1
        mibReq.Type = MIB_DEVICE_CLASS;
 802b66a:	711c      	strb	r4, [r3, #4]
        mibReq.Param.Class = CLASS_B;
 802b66c:	721d      	strb	r5, [r3, #8]
        LoRaMacMibSetRequestConfirm(&mibReq);
 802b66e:	a801      	add	r0, sp, #4
 802b670:	f7fc fda6 	bl	80281c0 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks.OnClassChange(CLASS_B);
 802b674:	4b1e      	ldr	r3, [pc, #120]	; (802b6f0 <MlmeConfirm+0xd4>)
 802b676:	0028      	movs	r0, r5
 802b678:	699b      	ldr	r3, [r3, #24]
 802b67a:	4798      	blx	r3
        IsClassBSwitchPending = false;
 802b67c:	4b1d      	ldr	r3, [pc, #116]	; (802b6f4 <MlmeConfirm+0xd8>)
 802b67e:	701c      	strb	r4, [r3, #0]
}
 802b680:	e7ea      	b.n	802b658 <MlmeConfirm+0x3c>
      mibReq.Type = MIB_DEV_ADDR;
 802b682:	2306      	movs	r3, #6
 802b684:	ad01      	add	r5, sp, #4
 802b686:	702b      	strb	r3, [r5, #0]
      LoRaMacMibGetRequestConfirm(&mibReq);
 802b688:	0028      	movs	r0, r5
 802b68a:	f7fc fc7d 	bl	8027f88 <LoRaMacMibGetRequestConfirm>
      LmHandlerGetTxDatarate(&JoinParams.Datarate);
 802b68e:	4d1a      	ldr	r5, [pc, #104]	; (802b6f8 <MlmeConfirm+0xdc>)
      CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 802b690:	4b1a      	ldr	r3, [pc, #104]	; (802b6fc <MlmeConfirm+0xe0>)
 802b692:	9a02      	ldr	r2, [sp, #8]
      LmHandlerGetTxDatarate(&JoinParams.Datarate);
 802b694:	0028      	movs	r0, r5
      CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 802b696:	615a      	str	r2, [r3, #20]
      LmHandlerGetTxDatarate(&JoinParams.Datarate);
 802b698:	f7ff ffa6 	bl	802b5e8 <LmHandlerGetTxDatarate>
      if (mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK)
 802b69c:	7863      	ldrb	r3, [r4, #1]
 802b69e:	2b00      	cmp	r3, #0
 802b6a0:	d109      	bne.n	802b6b6 <MlmeConfirm+0x9a>
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 802b6a2:	706b      	strb	r3, [r5, #1]
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 802b6a4:	4b16      	ldr	r3, [pc, #88]	; (802b700 <MlmeConfirm+0xe4>)
 802b6a6:	7858      	ldrb	r0, [r3, #1]
 802b6a8:	f7ff fdba 	bl	802b220 <LmHandlerRequestClass>
      LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 802b6ac:	4b10      	ldr	r3, [pc, #64]	; (802b6f0 <MlmeConfirm+0xd4>)
 802b6ae:	0028      	movs	r0, r5
 802b6b0:	68db      	ldr	r3, [r3, #12]
 802b6b2:	4798      	blx	r3
    break;
 802b6b4:	e7d0      	b.n	802b658 <MlmeConfirm+0x3c>
        JoinParams.Status = LORAMAC_HANDLER_ERROR;
 802b6b6:	23ff      	movs	r3, #255	; 0xff
 802b6b8:	706b      	strb	r3, [r5, #1]
 802b6ba:	e7f7      	b.n	802b6ac <MlmeConfirm+0x90>
      if (IsClassBSwitchPending == true)
 802b6bc:	4b0d      	ldr	r3, [pc, #52]	; (802b6f4 <MlmeConfirm+0xd8>)
 802b6be:	781b      	ldrb	r3, [r3, #0]
 802b6c0:	2b00      	cmp	r3, #0
 802b6c2:	d0c9      	beq.n	802b658 <MlmeConfirm+0x3c>
  mlmeReq.Type = MLME_BEACON_ACQUISITION;
 802b6c4:	230c      	movs	r3, #12
 802b6c6:	a801      	add	r0, sp, #4
 802b6c8:	7003      	strb	r3, [r0, #0]
  status = LoRaMacMlmeRequest(&mlmeReq);
 802b6ca:	f7fc ffa5 	bl	8028618 <LoRaMacMlmeRequest>
  if (status == LORAMAC_STATUS_OK)
 802b6ce:	e7c3      	b.n	802b658 <MlmeConfirm+0x3c>
      if (mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK)
 802b6d0:	7863      	ldrb	r3, [r4, #1]
 802b6d2:	2b00      	cmp	r3, #0
 802b6d4:	d104      	bne.n	802b6e0 <MlmeConfirm+0xc4>
        LmHandlerPingSlotReq(LmHandlerParams.PingPeriodicity);
 802b6d6:	4b0a      	ldr	r3, [pc, #40]	; (802b700 <MlmeConfirm+0xe4>)
 802b6d8:	7958      	ldrb	r0, [r3, #5]
 802b6da:	f7ff feb5 	bl	802b448 <LmHandlerPingSlotReq>
 802b6de:	e7bb      	b.n	802b658 <MlmeConfirm+0x3c>
        LmHandlerDeviceTimeReq();
 802b6e0:	f004 fe0b 	bl	80302fa <LmHandlerDeviceTimeReq>
 802b6e4:	e7b8      	b.n	802b658 <MlmeConfirm+0x3c>
 802b6e6:	46c0      	nop			; (mov r8, r8)
 802b6e8:	20009620 	.word	0x20009620
 802b6ec:	20009654 	.word	0x20009654
 802b6f0:	20009600 	.word	0x20009600
 802b6f4:	20009b19 	.word	0x20009b19
 802b6f8:	200081fd 	.word	0x200081fd
 802b6fc:	20008050 	.word	0x20008050
 802b700:	20009b1a 	.word	0x20009b1a

0802b704 <LmhpComplianceInit>:
  return &LmhpCompliancePackage;
}

/* Private  functions ---------------------------------------------------------*/
static void LmhpComplianceInit(void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize)
{
 802b704:	b510      	push	{r4, lr}
 802b706:	4b07      	ldr	r3, [pc, #28]	; (802b724 <LmhpComplianceInit+0x20>)
 802b708:	4c07      	ldr	r4, [pc, #28]	; (802b728 <LmhpComplianceInit+0x24>)
  if ((params != NULL) && (dataBuffer != NULL))
 802b70a:	2800      	cmp	r0, #0
 802b70c:	d007      	beq.n	802b71e <LmhpComplianceInit+0x1a>
 802b70e:	2900      	cmp	r1, #0
 802b710:	d005      	beq.n	802b71e <LmhpComplianceInit+0x1a>
  {
    LmhpComplianceParams = (LmhpComplianceParams_t *)params;
    ComplianceTestState.DataBuffer = dataBuffer;
    ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 802b712:	719a      	strb	r2, [r3, #6]
    ComplianceTestState.Initialized = true;
 802b714:	2201      	movs	r2, #1
    LmhpComplianceParams = (LmhpComplianceParams_t *)params;
 802b716:	6020      	str	r0, [r4, #0]
    ComplianceTestState.DataBuffer = dataBuffer;
 802b718:	6099      	str	r1, [r3, #8]
  }
  else
  {
    LmhpComplianceParams = NULL;
    ComplianceTestState.Initialized = false;
 802b71a:	701a      	strb	r2, [r3, #0]
  }
}
 802b71c:	bd10      	pop	{r4, pc}
    LmhpComplianceParams = NULL;
 802b71e:	2200      	movs	r2, #0
 802b720:	6022      	str	r2, [r4, #0]
 802b722:	e7fa      	b.n	802b71a <LmhpComplianceInit+0x16>
 802b724:	2000966c 	.word	0x2000966c
 802b728:	20009698 	.word	0x20009698

0802b72c <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized(void)
{
  return ComplianceTestState.Initialized;
 802b72c:	4b01      	ldr	r3, [pc, #4]	; (802b734 <LmhpComplianceIsInitialized+0x8>)
 802b72e:	7818      	ldrb	r0, [r3, #0]
}
 802b730:	4770      	bx	lr
 802b732:	46c0      	nop			; (mov r8, r8)
 802b734:	2000966c 	.word	0x2000966c

0802b738 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning(void)
{
  if (ComplianceTestState.Initialized == false)
 802b738:	4b02      	ldr	r3, [pc, #8]	; (802b744 <LmhpComplianceIsRunning+0xc>)
 802b73a:	7818      	ldrb	r0, [r3, #0]
 802b73c:	2800      	cmp	r0, #0
 802b73e:	d000      	beq.n	802b742 <LmhpComplianceIsRunning+0xa>
  {
    return false;
  }

  return ComplianceTestState.IsRunning;
 802b740:	7858      	ldrb	r0, [r3, #1]
}
 802b742:	4770      	bx	lr
 802b744:	2000966c 	.word	0x2000966c

0802b748 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
  if (ComplianceTestState.Initialized == false)
 802b748:	4b08      	ldr	r3, [pc, #32]	; (802b76c <LmhpComplianceOnMcpsConfirm+0x24>)
 802b74a:	781a      	ldrb	r2, [r3, #0]
 802b74c:	2a00      	cmp	r2, #0
 802b74e:	d00b      	beq.n	802b768 <LmhpComplianceOnMcpsConfirm+0x20>
  {
    return;
  }

  if ((ComplianceTestState.IsRunning == true) &&
 802b750:	785a      	ldrb	r2, [r3, #1]
 802b752:	2a00      	cmp	r2, #0
 802b754:	d008      	beq.n	802b768 <LmhpComplianceOnMcpsConfirm+0x20>
 802b756:	7802      	ldrb	r2, [r0, #0]
 802b758:	2a01      	cmp	r2, #1
 802b75a:	d105      	bne.n	802b768 <LmhpComplianceOnMcpsConfirm+0x20>
      (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 802b75c:	7902      	ldrb	r2, [r0, #4]
 802b75e:	2a00      	cmp	r2, #0
 802b760:	d002      	beq.n	802b768 <LmhpComplianceOnMcpsConfirm+0x20>
      (mcpsConfirm->AckReceived != 0))
  {
    /* Increment the compliance certification protocol downlink counter */
    ComplianceTestState.DownLinkCounter++;
 802b762:	899a      	ldrh	r2, [r3, #12]
 802b764:	3201      	adds	r2, #1
 802b766:	819a      	strh	r2, [r3, #12]
  }
}
 802b768:	4770      	bx	lr
 802b76a:	46c0      	nop			; (mov r8, r8)
 802b76c:	2000966c 	.word	0x2000966c

0802b770 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm(MlmeConfirm_t *mlmeConfirm)
{
  if (ComplianceTestState.Initialized == false)
 802b770:	4b06      	ldr	r3, [pc, #24]	; (802b78c <LmhpComplianceOnMlmeConfirm+0x1c>)
 802b772:	781a      	ldrb	r2, [r3, #0]
 802b774:	2a00      	cmp	r2, #0
 802b776:	d008      	beq.n	802b78a <LmhpComplianceOnMlmeConfirm+0x1a>
  {
    return;
  }

  if (mlmeConfirm->MlmeRequest == MLME_LINK_CHECK)
 802b778:	7802      	ldrb	r2, [r0, #0]
 802b77a:	2a04      	cmp	r2, #4
 802b77c:	d105      	bne.n	802b78a <LmhpComplianceOnMlmeConfirm+0x1a>
 802b77e:	7a01      	ldrb	r1, [r0, #8]
 802b780:	7a42      	ldrb	r2, [r0, #9]
  {
    ComplianceTestState.LinkCheck = true;
 802b782:	2001      	movs	r0, #1
    ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 802b784:	73d9      	strb	r1, [r3, #15]
    ComplianceTestState.LinkCheck = true;
 802b786:	7398      	strb	r0, [r3, #14]
    ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 802b788:	741a      	strb	r2, [r3, #16]
  }
}
 802b78a:	4770      	bx	lr
 802b78c:	2000966c 	.word	0x2000966c

0802b790 <LmhpComplianceTxProcess.isra.0>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess(void)
 802b790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
  if (ComplianceTestState.Initialized == false)
 802b792:	4c1a      	ldr	r4, [pc, #104]	; (802b7fc <LmhpComplianceTxProcess.isra.0+0x6c>)
 802b794:	7823      	ldrb	r3, [r4, #0]
 802b796:	2b00      	cmp	r3, #0
 802b798:	d021      	beq.n	802b7de <LmhpComplianceTxProcess.isra.0+0x4e>
  {
    return LORAMAC_HANDLER_ERROR;
  }

  if (ComplianceTestState.LinkCheck == true)
 802b79a:	7ba2      	ldrb	r2, [r4, #14]
  {
    ComplianceTestState.LinkCheck = false;
    ComplianceTestState.DataBufferSize = 3;
    ComplianceTestState.DataBuffer[0] = 5;
 802b79c:	68a3      	ldr	r3, [r4, #8]
  if (ComplianceTestState.LinkCheck == true)
 802b79e:	2a00      	cmp	r2, #0
 802b7a0:	d01e      	beq.n	802b7e0 <LmhpComplianceTxProcess.isra.0+0x50>
    ComplianceTestState.LinkCheck = false;
 802b7a2:	2200      	movs	r2, #0
 802b7a4:	73a2      	strb	r2, [r4, #14]
    ComplianceTestState.DataBufferSize = 3;
 802b7a6:	3203      	adds	r2, #3
 802b7a8:	71e2      	strb	r2, [r4, #7]
    ComplianceTestState.DataBuffer[0] = 5;
 802b7aa:	3202      	adds	r2, #2
 802b7ac:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 802b7ae:	7be2      	ldrb	r2, [r4, #15]
 802b7b0:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 802b7b2:	7c22      	ldrb	r2, [r4, #16]
 802b7b4:	709a      	strb	r2, [r3, #2]
    ComplianceTestState.State = 1;
 802b7b6:	2201      	movs	r2, #1
 802b7b8:	70a2      	strb	r2, [r4, #2]
        ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
        break;
    }
  }
  LmHandlerAppData_t appData =
 802b7ba:	4669      	mov	r1, sp
 802b7bc:	22e0      	movs	r2, #224	; 0xe0
 802b7be:	720a      	strb	r2, [r1, #8]
 802b7c0:	79e2      	ldrb	r2, [r4, #7]
 802b7c2:	9303      	str	r3, [sp, #12]
  {
    .Buffer = ComplianceTestState.DataBuffer,
    .BufferSize = ComplianceTestState.DataBufferSize,
    .Port = COMPLIANCE_PORT
  };
  TimerTime_t nextTxIn = 0;
 802b7c4:	2300      	movs	r3, #0

  /* Schedule next transmission */
  TimerStart(&ComplianceTxNextPacketTimer);
 802b7c6:	480e      	ldr	r0, [pc, #56]	; (802b800 <LmhpComplianceTxProcess.isra.0+0x70>)
  LmHandlerAppData_t appData =
 802b7c8:	724a      	strb	r2, [r1, #9]
  TimerTime_t nextTxIn = 0;
 802b7ca:	9301      	str	r3, [sp, #4]
  TimerStart(&ComplianceTxNextPacketTimer);
 802b7cc:	f7f8 fb10 	bl	8023df0 <TimerStart>

  return LmhpCompliancePackage.OnSendRequest(&appData, (LmHandlerMsgTypes_t)ComplianceTestState.IsTxConfirmed, &nextTxIn,
 802b7d0:	4b0c      	ldr	r3, [pc, #48]	; (802b804 <LmhpComplianceTxProcess.isra.0+0x74>)
 802b7d2:	7921      	ldrb	r1, [r4, #4]
 802b7d4:	aa01      	add	r2, sp, #4
 802b7d6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 802b7d8:	a802      	add	r0, sp, #8
 802b7da:	2301      	movs	r3, #1
 802b7dc:	47a0      	blx	r4
                                             true);
}
 802b7de:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    switch (ComplianceTestState.State)
 802b7e0:	78a2      	ldrb	r2, [r4, #2]
 802b7e2:	2a01      	cmp	r2, #1
 802b7e4:	d002      	beq.n	802b7ec <LmhpComplianceTxProcess.isra.0+0x5c>
 802b7e6:	2a04      	cmp	r2, #4
 802b7e8:	d1e7      	bne.n	802b7ba <LmhpComplianceTxProcess.isra.0+0x2a>
 802b7ea:	e7e4      	b.n	802b7b6 <LmhpComplianceTxProcess.isra.0+0x26>
        ComplianceTestState.DataBufferSize = 2;
 802b7ec:	2202      	movs	r2, #2
 802b7ee:	71e2      	strb	r2, [r4, #7]
        ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 802b7f0:	89a2      	ldrh	r2, [r4, #12]
 802b7f2:	0a11      	lsrs	r1, r2, #8
 802b7f4:	7019      	strb	r1, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 802b7f6:	705a      	strb	r2, [r3, #1]
        break;
 802b7f8:	e7df      	b.n	802b7ba <LmhpComplianceTxProcess.isra.0+0x2a>
 802b7fa:	46c0      	nop			; (mov r8, r8)
 802b7fc:	2000966c 	.word	0x2000966c
 802b800:	20009680 	.word	0x20009680
 802b804:	20008084 	.word	0x20008084

0802b808 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication(McpsIndication_t *mcpsIndication)
{
 802b808:	b530      	push	{r4, r5, lr}
  if (ComplianceTestState.Initialized == false)
 802b80a:	4c78      	ldr	r4, [pc, #480]	; (802b9ec <LmhpComplianceOnMcpsIndication+0x1e4>)
{
 802b80c:	0002      	movs	r2, r0
  if (ComplianceTestState.Initialized == false)
 802b80e:	7823      	ldrb	r3, [r4, #0]
{
 802b810:	b08b      	sub	sp, #44	; 0x2c
  if (ComplianceTestState.Initialized == false)
 802b812:	2b00      	cmp	r3, #0
 802b814:	d042      	beq.n	802b89c <LmhpComplianceOnMcpsIndication+0x94>
  {
    return;
  }

  if (mcpsIndication->RxData == false)
 802b816:	7b43      	ldrb	r3, [r0, #13]
 802b818:	2b00      	cmp	r3, #0
 802b81a:	d03f      	beq.n	802b89c <LmhpComplianceOnMcpsIndication+0x94>
  {
    return;
  }

  if ((ComplianceTestState.IsRunning == true) &&
 802b81c:	7865      	ldrb	r5, [r4, #1]
 802b81e:	2d00      	cmp	r5, #0
 802b820:	d005      	beq.n	802b82e <LmhpComplianceOnMcpsIndication+0x26>
 802b822:	7c83      	ldrb	r3, [r0, #18]
 802b824:	2b00      	cmp	r3, #0
 802b826:	d102      	bne.n	802b82e <LmhpComplianceOnMcpsIndication+0x26>
      (mcpsIndication->AckReceived == 0))
  {
    /* Increment the compliance certification protocol downlink counter */
    ComplianceTestState.DownLinkCounter++;
 802b828:	89a3      	ldrh	r3, [r4, #12]
 802b82a:	3301      	adds	r3, #1
 802b82c:	81a3      	strh	r3, [r4, #12]
  }

  if (mcpsIndication->Port != COMPLIANCE_PORT)
 802b82e:	78d3      	ldrb	r3, [r2, #3]
 802b830:	2be0      	cmp	r3, #224	; 0xe0
 802b832:	d133      	bne.n	802b89c <LmhpComplianceOnMcpsIndication+0x94>
  {
    return;
  }

  if (ComplianceTestState.IsRunning == false)
 802b834:	2d00      	cmp	r5, #0
 802b836:	d133      	bne.n	802b8a0 <LmhpComplianceOnMcpsIndication+0x98>
  {
    /* Check compliance test enable command (i) */
    if ((mcpsIndication->BufferSize == 4) &&
 802b838:	7b11      	ldrb	r1, [r2, #12]
 802b83a:	2904      	cmp	r1, #4
 802b83c:	d12e      	bne.n	802b89c <LmhpComplianceOnMcpsIndication+0x94>
        (mcpsIndication->Buffer[0] == 0x01) &&
 802b83e:	6893      	ldr	r3, [r2, #8]
    if ((mcpsIndication->BufferSize == 4) &&
 802b840:	781a      	ldrb	r2, [r3, #0]
 802b842:	2a01      	cmp	r2, #1
 802b844:	d12a      	bne.n	802b89c <LmhpComplianceOnMcpsIndication+0x94>
        (mcpsIndication->Buffer[0] == 0x01) &&
 802b846:	785a      	ldrb	r2, [r3, #1]
 802b848:	2a01      	cmp	r2, #1
 802b84a:	d127      	bne.n	802b89c <LmhpComplianceOnMcpsIndication+0x94>
        (mcpsIndication->Buffer[1] == 0x01) &&
 802b84c:	789a      	ldrb	r2, [r3, #2]
 802b84e:	2a01      	cmp	r2, #1
 802b850:	d124      	bne.n	802b89c <LmhpComplianceOnMcpsIndication+0x94>
        (mcpsIndication->Buffer[2] == 0x01) &&
 802b852:	78db      	ldrb	r3, [r3, #3]
 802b854:	2b01      	cmp	r3, #1
 802b856:	d121      	bne.n	802b89c <LmhpComplianceOnMcpsIndication+0x94>
        (mcpsIndication->Buffer[3] == 0x01))
    {
      MibRequestConfirm_t mibReq;

      /* Initialize compliance test mode context */
      ComplianceTestState.IsTxConfirmed = false;
 802b858:	4a65      	ldr	r2, [pc, #404]	; (802b9f0 <LmhpComplianceOnMcpsIndication+0x1e8>)
      ComplianceTestState.Port = 224;
      ComplianceTestState.DataBufferSize = 2;
      ComplianceTestState.DownLinkCounter = 0;
 802b85a:	60e5      	str	r5, [r4, #12]
      ComplianceTestState.IsTxConfirmed = false;
 802b85c:	80a2      	strh	r2, [r4, #4]
      ComplianceTestState.DataBufferSize = 2;
 802b85e:	2202      	movs	r2, #2
 802b860:	71e2      	strb	r2, [r4, #7]
      ComplianceTestState.NbGateways = 0;
      ComplianceTestState.IsRunning = true;
      ComplianceTestState.State = 1;

      /* Enable ADR while in compliance test mode */
      mibReq.Type = MIB_ADR;
 802b862:	466a      	mov	r2, sp
      mibReq.Param.AdrEnable = true;
      LoRaMacMibSetRequestConfirm(&mibReq);
 802b864:	a801      	add	r0, sp, #4
      mibReq.Param.AdrEnable = true;
 802b866:	7213      	strb	r3, [r2, #8]
      mibReq.Type = MIB_ADR;
 802b868:	7111      	strb	r1, [r2, #4]
      ComplianceTestState.IsRunning = true;
 802b86a:	7063      	strb	r3, [r4, #1]
      ComplianceTestState.State = 1;
 802b86c:	70a3      	strb	r3, [r4, #2]
      ComplianceTestState.NbGateways = 0;
 802b86e:	7425      	strb	r5, [r4, #16]
      LoRaMacMibSetRequestConfirm(&mibReq);
 802b870:	f7fc fca6 	bl	80281c0 <LoRaMacMibSetRequestConfirm>

      /* Disable duty cycle enforcement while in compliance test mode */
      LoRaMacTestSetDutyCycleOn(false);
 802b874:	0028      	movs	r0, r5
 802b876:	f7fd f997 	bl	8028ba8 <LoRaMacTestSetDutyCycleOn>

      /* Stop peripherals */
      if (LmhpComplianceParams->StopPeripherals != NULL)
 802b87a:	4b5e      	ldr	r3, [pc, #376]	; (802b9f4 <LmhpComplianceOnMcpsIndication+0x1ec>)
 802b87c:	681b      	ldr	r3, [r3, #0]
 802b87e:	685b      	ldr	r3, [r3, #4]
 802b880:	2b00      	cmp	r3, #0
 802b882:	d000      	beq.n	802b886 <LmhpComplianceOnMcpsIndication+0x7e>
      {
        LmhpComplianceParams->StopPeripherals();
 802b884:	4798      	blx	r3
      }
      /* Initialize compliance protocol transmission timer */
      TimerInit(&ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent);
 802b886:	4c5c      	ldr	r4, [pc, #368]	; (802b9f8 <LmhpComplianceOnMcpsIndication+0x1f0>)
 802b888:	495c      	ldr	r1, [pc, #368]	; (802b9fc <LmhpComplianceOnMcpsIndication+0x1f4>)
 802b88a:	0020      	movs	r0, r4
 802b88c:	f003 fc01 	bl	802f092 <TimerInit>
      TimerSetValue(&ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE);
 802b890:	0020      	movs	r0, r4
 802b892:	495b      	ldr	r1, [pc, #364]	; (802ba00 <LmhpComplianceOnMcpsIndication+0x1f8>)
 802b894:	f003 fc05 	bl	802f0a2 <TimerSetValue>

      /* Confirm compliance test protocol activation */
      LmhpComplianceTxProcess();
 802b898:	f7ff ff7a 	bl	802b790 <LmhpComplianceTxProcess.isra.0>
      break;
      default:
        break;
    }
  }
}
 802b89c:	b00b      	add	sp, #44	; 0x2c
 802b89e:	bd30      	pop	{r4, r5, pc}
    ComplianceTestState.State = mcpsIndication->Buffer[0];
 802b8a0:	6893      	ldr	r3, [r2, #8]
 802b8a2:	7818      	ldrb	r0, [r3, #0]
 802b8a4:	70a0      	strb	r0, [r4, #2]
    switch (ComplianceTestState.State)
 802b8a6:	280a      	cmp	r0, #10
 802b8a8:	d8f8      	bhi.n	802b89c <LmhpComplianceOnMcpsIndication+0x94>
 802b8aa:	f7f4 fc13 	bl	80200d4 <__gnu_thumb1_case_uqi>
 802b8ae:	2006      	.short	0x2006
 802b8b0:	402b2723 	.word	0x402b2723
 802b8b4:	8e8b6446 	.word	0x8e8b6446
 802b8b8:	97          	.byte	0x97
 802b8b9:	00          	.byte	0x00
        TimerStop(&ComplianceTxNextPacketTimer);
 802b8ba:	484f      	ldr	r0, [pc, #316]	; (802b9f8 <LmhpComplianceOnMcpsIndication+0x1f0>)
 802b8bc:	f7f8 fb12 	bl	8023ee4 <TimerStop>
        ComplianceTestState.DownLinkCounter = 0;
 802b8c0:	2300      	movs	r3, #0
        mibReq.Type = MIB_ADR;
 802b8c2:	466a      	mov	r2, sp
        ComplianceTestState.IsRunning = false;
 802b8c4:	7063      	strb	r3, [r4, #1]
        ComplianceTestState.DownLinkCounter = 0;
 802b8c6:	81a3      	strh	r3, [r4, #12]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 802b8c8:	4c4a      	ldr	r4, [pc, #296]	; (802b9f4 <LmhpComplianceOnMcpsIndication+0x1ec>)
        mibReq.Type = MIB_ADR;
 802b8ca:	3304      	adds	r3, #4
 802b8cc:	7113      	strb	r3, [r2, #4]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 802b8ce:	6823      	ldr	r3, [r4, #0]
        LoRaMacMibSetRequestConfirm(&mibReq);
 802b8d0:	a801      	add	r0, sp, #4
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 802b8d2:	781b      	ldrb	r3, [r3, #0]
 802b8d4:	7213      	strb	r3, [r2, #8]
        LoRaMacMibSetRequestConfirm(&mibReq);
 802b8d6:	f7fc fc73 	bl	80281c0 <LoRaMacMibSetRequestConfirm>
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 802b8da:	6823      	ldr	r3, [r4, #0]
 802b8dc:	7858      	ldrb	r0, [r3, #1]
 802b8de:	f7fd f963 	bl	8028ba8 <LoRaMacTestSetDutyCycleOn>
        if (LmhpComplianceParams->StartPeripherals != NULL)
 802b8e2:	6823      	ldr	r3, [r4, #0]
 802b8e4:	689b      	ldr	r3, [r3, #8]
 802b8e6:	2b00      	cmp	r3, #0
 802b8e8:	d0d8      	beq.n	802b89c <LmhpComplianceOnMcpsIndication+0x94>
          LmhpComplianceParams->StartPeripherals();
 802b8ea:	4798      	blx	r3
      break;
 802b8ec:	e7d6      	b.n	802b89c <LmhpComplianceOnMcpsIndication+0x94>
        ComplianceTestState.DataBufferSize = 2;
 802b8ee:	2302      	movs	r3, #2
 802b8f0:	71e3      	strb	r3, [r4, #7]
        break;
 802b8f2:	e7d3      	b.n	802b89c <LmhpComplianceOnMcpsIndication+0x94>
        ComplianceTestState.IsTxConfirmed = true;
 802b8f4:	2301      	movs	r3, #1
 802b8f6:	7123      	strb	r3, [r4, #4]
        ComplianceTestState.State = 1;
 802b8f8:	70a3      	strb	r3, [r4, #2]
        break;
 802b8fa:	e7cf      	b.n	802b89c <LmhpComplianceOnMcpsIndication+0x94>
        ComplianceTestState.IsTxConfirmed = false;
 802b8fc:	2300      	movs	r3, #0
 802b8fe:	7123      	strb	r3, [r4, #4]
        ComplianceTestState.State = 1;
 802b900:	3301      	adds	r3, #1
 802b902:	e7f9      	b.n	802b8f8 <LmhpComplianceOnMcpsIndication+0xf0>
        ComplianceTestState.DataBuffer[0] = 4;
 802b904:	2304      	movs	r3, #4
 802b906:	68a5      	ldr	r5, [r4, #8]
        ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 802b908:	7b11      	ldrb	r1, [r2, #12]
        ComplianceTestState.DataBuffer[0] = 4;
 802b90a:	702b      	strb	r3, [r5, #0]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 802b90c:	79a0      	ldrb	r0, [r4, #6]
        ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 802b90e:	71e1      	strb	r1, [r4, #7]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 802b910:	1c03      	adds	r3, r0, #0
 802b912:	4288      	cmp	r0, r1
 802b914:	d900      	bls.n	802b918 <LmhpComplianceOnMcpsIndication+0x110>
 802b916:	1c0b      	adds	r3, r1, #0
 802b918:	b2d9      	uxtb	r1, r3
 802b91a:	2300      	movs	r3, #0
 802b91c:	3301      	adds	r3, #1
 802b91e:	b2d8      	uxtb	r0, r3
 802b920:	4281      	cmp	r1, r0
 802b922:	d9bb      	bls.n	802b89c <LmhpComplianceOnMcpsIndication+0x94>
          ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 802b924:	6890      	ldr	r0, [r2, #8]
 802b926:	5cc0      	ldrb	r0, [r0, r3]
 802b928:	3001      	adds	r0, #1
 802b92a:	54e8      	strb	r0, [r5, r3]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 802b92c:	e7f6      	b.n	802b91c <LmhpComplianceOnMcpsIndication+0x114>
        mlmeReq.Type = MLME_LINK_CHECK;
 802b92e:	2304      	movs	r3, #4
 802b930:	a801      	add	r0, sp, #4
        mlmeReq.Type = MLME_DEVICE_TIME;
 802b932:	7003      	strb	r3, [r0, #0]
        LoRaMacMlmeRequest(&mlmeReq);
 802b934:	f7fc fe70 	bl	8028618 <LoRaMacMlmeRequest>
      break;
 802b938:	e7b0      	b.n	802b89c <LmhpComplianceOnMcpsIndication+0x94>
        TimerStop(&ComplianceTxNextPacketTimer);
 802b93a:	482f      	ldr	r0, [pc, #188]	; (802b9f8 <LmhpComplianceOnMcpsIndication+0x1f0>)
 802b93c:	f7f8 fad2 	bl	8023ee4 <TimerStop>
        ComplianceTestState.DownLinkCounter = 0;
 802b940:	2300      	movs	r3, #0
        mibReq.Type = MIB_ADR;
 802b942:	466a      	mov	r2, sp
        ComplianceTestState.IsRunning = false;
 802b944:	7063      	strb	r3, [r4, #1]
        ComplianceTestState.DownLinkCounter = 0;
 802b946:	81a3      	strh	r3, [r4, #12]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 802b948:	4c2a      	ldr	r4, [pc, #168]	; (802b9f4 <LmhpComplianceOnMcpsIndication+0x1ec>)
        mibReq.Type = MIB_ADR;
 802b94a:	3304      	adds	r3, #4
 802b94c:	7113      	strb	r3, [r2, #4]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 802b94e:	6823      	ldr	r3, [r4, #0]
        LoRaMacMibSetRequestConfirm(&mibReq);
 802b950:	a801      	add	r0, sp, #4
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 802b952:	781b      	ldrb	r3, [r3, #0]
 802b954:	7213      	strb	r3, [r2, #8]
        LoRaMacMibSetRequestConfirm(&mibReq);
 802b956:	f7fc fc33 	bl	80281c0 <LoRaMacMibSetRequestConfirm>
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 802b95a:	6823      	ldr	r3, [r4, #0]
 802b95c:	7858      	ldrb	r0, [r3, #1]
 802b95e:	f7fd f923 	bl	8028ba8 <LoRaMacTestSetDutyCycleOn>
        if (LmhpComplianceParams->StartPeripherals != NULL)
 802b962:	6823      	ldr	r3, [r4, #0]
 802b964:	689b      	ldr	r3, [r3, #8]
 802b966:	2b00      	cmp	r3, #0
 802b968:	d000      	beq.n	802b96c <LmhpComplianceOnMcpsIndication+0x164>
          LmhpComplianceParams->StartPeripherals();
 802b96a:	4798      	blx	r3
        LmhpCompliancePackage.OnJoinRequest(ACTIVATION_TYPE_OTAA);
 802b96c:	4b25      	ldr	r3, [pc, #148]	; (802ba04 <LmhpComplianceOnMcpsIndication+0x1fc>)
 802b96e:	2002      	movs	r0, #2
 802b970:	6a1b      	ldr	r3, [r3, #32]
 802b972:	4798      	blx	r3
      break;
 802b974:	e792      	b.n	802b89c <LmhpComplianceOnMcpsIndication+0x94>
        if (mcpsIndication->BufferSize == 3)
 802b976:	7b12      	ldrb	r2, [r2, #12]
 802b978:	a801      	add	r0, sp, #4
 802b97a:	2a03      	cmp	r2, #3
 802b97c:	d10b      	bne.n	802b996 <LmhpComplianceOnMcpsIndication+0x18e>
          mlmeReq.Type = MLME_TXCW;
 802b97e:	3202      	adds	r2, #2
 802b980:	7002      	strb	r2, [r0, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 802b982:	7859      	ldrb	r1, [r3, #1]
 802b984:	789b      	ldrb	r3, [r3, #2]
 802b986:	021b      	lsls	r3, r3, #8
 802b988:	430b      	orrs	r3, r1
 802b98a:	ba5b      	rev16	r3, r3
 802b98c:	8083      	strh	r3, [r0, #4]
        LoRaMacMlmeRequest(&mlmeReq);
 802b98e:	f7fc fe43 	bl	8028618 <LoRaMacMlmeRequest>
        ComplianceTestState.State = 1;
 802b992:	2301      	movs	r3, #1
 802b994:	e7b0      	b.n	802b8f8 <LmhpComplianceOnMcpsIndication+0xf0>
        else if (mcpsIndication->BufferSize == 7)
 802b996:	2a07      	cmp	r2, #7
 802b998:	d1f9      	bne.n	802b98e <LmhpComplianceOnMcpsIndication+0x186>
          mlmeReq.Type = MLME_TXCW_1;
 802b99a:	3a01      	subs	r2, #1
 802b99c:	7002      	strb	r2, [r0, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 802b99e:	789a      	ldrb	r2, [r3, #2]
 802b9a0:	785d      	ldrb	r5, [r3, #1]
 802b9a2:	0212      	lsls	r2, r2, #8
 802b9a4:	432a      	orrs	r2, r5
 802b9a6:	ba52      	rev16	r2, r2
 802b9a8:	8082      	strh	r2, [r0, #4]
          mlmeReq.Req.TxCw.Frequency = (uint32_t)((mcpsIndication->Buffer[3] << 16) | (mcpsIndication->Buffer[4] << 8) | mcpsIndication->Buffer[5]) * 100;
 802b9aa:	78da      	ldrb	r2, [r3, #3]
 802b9ac:	7919      	ldrb	r1, [r3, #4]
 802b9ae:	0412      	lsls	r2, r2, #16
 802b9b0:	0209      	lsls	r1, r1, #8
 802b9b2:	430a      	orrs	r2, r1
 802b9b4:	7959      	ldrb	r1, [r3, #5]
 802b9b6:	430a      	orrs	r2, r1
 802b9b8:	2164      	movs	r1, #100	; 0x64
 802b9ba:	434a      	muls	r2, r1
 802b9bc:	6082      	str	r2, [r0, #8]
          mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 802b9be:	799b      	ldrb	r3, [r3, #6]
 802b9c0:	7303      	strb	r3, [r0, #12]
 802b9c2:	e7e4      	b.n	802b98e <LmhpComplianceOnMcpsIndication+0x186>
        mlmeReq.Type = MLME_DEVICE_TIME;
 802b9c4:	230a      	movs	r3, #10
 802b9c6:	a801      	add	r0, sp, #4
 802b9c8:	e7b3      	b.n	802b932 <LmhpComplianceOnMcpsIndication+0x12a>
        mibReq.Type = MIB_DEVICE_CLASS;
 802b9ca:	4669      	mov	r1, sp
 802b9cc:	2200      	movs	r2, #0
 802b9ce:	710a      	strb	r2, [r1, #4]
        mibReq.Param.Class = (DeviceClass_t)mcpsIndication->Buffer[1];;
 802b9d0:	785b      	ldrb	r3, [r3, #1]
        LoRaMacMibSetRequestConfirm(&mibReq);
 802b9d2:	a801      	add	r0, sp, #4
        mibReq.Param.Class = (DeviceClass_t)mcpsIndication->Buffer[1];;
 802b9d4:	720b      	strb	r3, [r1, #8]
        LoRaMacMibSetRequestConfirm(&mibReq);
 802b9d6:	f7fc fbf3 	bl	80281c0 <LoRaMacMibSetRequestConfirm>
      break;
 802b9da:	e75f      	b.n	802b89c <LmhpComplianceOnMcpsIndication+0x94>
        mlmeReq.Type = MLME_PING_SLOT_INFO;
 802b9dc:	4669      	mov	r1, sp
 802b9de:	220d      	movs	r2, #13
 802b9e0:	710a      	strb	r2, [r1, #4]
        mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 802b9e2:	785b      	ldrb	r3, [r3, #1]
        LoRaMacMlmeRequest(&mlmeReq);
 802b9e4:	a801      	add	r0, sp, #4
        mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 802b9e6:	720b      	strb	r3, [r1, #8]
        LoRaMacMlmeRequest(&mlmeReq);
 802b9e8:	e7a4      	b.n	802b934 <LmhpComplianceOnMcpsIndication+0x12c>
 802b9ea:	46c0      	nop			; (mov r8, r8)
 802b9ec:	2000966c 	.word	0x2000966c
 802b9f0:	ffffe000 	.word	0xffffe000
 802b9f4:	20009698 	.word	0x20009698
 802b9f8:	20009680 	.word	0x20009680
 802b9fc:	08030363 	.word	0x08030363
 802ba00:	00001388 	.word	0x00001388
 802ba04:	20008084 	.word	0x20008084

0802ba08 <LmphCompliancePackageFactory>:
}
 802ba08:	4800      	ldr	r0, [pc, #0]	; (802ba0c <LmphCompliancePackageFactory+0x4>)
 802ba0a:	4770      	bx	lr
 802ba0c:	20008084 	.word	0x20008084

0802ba10 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 802ba10:	4a08      	ldr	r2, [pc, #32]	; (802ba34 <arch_swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
 802ba12:	4909      	ldr	r1, [pc, #36]	; (802ba38 <arch_swap+0x28>)
	_current->arch.basepri = key;
 802ba14:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 802ba16:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
 802ba18:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
 802ba1a:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 802ba1c:	2380      	movs	r3, #128	; 0x80
 802ba1e:	4907      	ldr	r1, [pc, #28]	; (802ba3c <arch_swap+0x2c>)
 802ba20:	055b      	lsls	r3, r3, #21
 802ba22:	6848      	ldr	r0, [r1, #4]
 802ba24:	4303      	orrs	r3, r0
 802ba26:	604b      	str	r3, [r1, #4]
 802ba28:	b662      	cpsie	i
 802ba2a:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 802ba2e:	6893      	ldr	r3, [r2, #8]
 802ba30:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
 802ba32:	4770      	bx	lr
 802ba34:	200098ac 	.word	0x200098ac
 802ba38:	08031650 	.word	0x08031650
 802ba3c:	e000ed00 	.word	0xe000ed00

0802ba40 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 802ba40:	4913      	ldr	r1, [pc, #76]	; (802ba90 <_thread_irq_disabled+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
 802ba42:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 802ba44:	4813      	ldr	r0, [pc, #76]	; (802ba94 <_thread_irq_disabled+0x22>)
    add r0, r2
 802ba46:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 802ba48:	f3ef 8c09 	mrs	ip, PSP
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    /* Store current r4-r7 */
    stmea r0!, {r4-r7}
 802ba4c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    /* copy r8-r12 into r3-r7 */
    mov r3, r8
 802ba4e:	4643      	mov	r3, r8
    mov r4, r9
 802ba50:	464c      	mov	r4, r9
    mov r5, r10
 802ba52:	4655      	mov	r5, sl
    mov r6, r11
 802ba54:	465e      	mov	r6, fp
    mov r7, ip
 802ba56:	4667      	mov	r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
 802ba58:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
 802ba5a:	b672      	cpsid	i
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 802ba5c:	4f0e      	ldr	r7, [pc, #56]	; (802ba98 <_thread_irq_disabled+0x26>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 802ba5e:	4e0f      	ldr	r6, [pc, #60]	; (802ba9c <_thread_irq_disabled+0x2a>)
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 802ba60:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
 802ba62:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 802ba64:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 802ba66:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
 802ba68:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 802ba6a:	6753      	str	r3, [r2, #116]	; 0x74
     * maps to PRIMASK.
     *
     * Only enable interrupts if value is 0, meaning interrupts
     * were enabled before irq_lock was called.
     */
    cmp r0, #0
 802ba6c:	2800      	cmp	r0, #0
    bne _thread_irq_disabled
 802ba6e:	d100      	bne.n	802ba72 <_thread_irq_disabled>
    cpsie i
 802ba70:	b662      	cpsie	i

0802ba72 <_thread_irq_disabled>:
     */
    isb

#endif

    ldr r4, =_thread_offset_to_callee_saved
 802ba72:	4c08      	ldr	r4, [pc, #32]	; (802ba94 <_thread_irq_disabled+0x22>)
    adds r0, r2, r4
 802ba74:	1910      	adds	r0, r2, r4

    /* restore r4-r12 for new thread */
    /* first restore r8-r12 located after r4-r7 (4*4bytes) */
    adds r0, #16
 802ba76:	3010      	adds	r0, #16
    ldmia r0!, {r3-r7}
 802ba78:	c8f8      	ldmia	r0!, {r3, r4, r5, r6, r7}
    /* move to correct registers */
    mov r8, r3
 802ba7a:	4698      	mov	r8, r3
    mov r9, r4
 802ba7c:	46a1      	mov	r9, r4
    mov r10, r5
 802ba7e:	46aa      	mov	sl, r5
    mov r11, r6
 802ba80:	46b3      	mov	fp, r6
    mov ip, r7
 802ba82:	46bc      	mov	ip, r7
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
 802ba84:	3824      	subs	r0, #36	; 0x24
    ldmia r0!, {r4-r7}
 802ba86:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 802ba88:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 802ba8c:	4770      	bx	lr
 802ba8e:	0000      	.short	0x0000
    ldr r1, =_kernel
 802ba90:	200098ac 	.word	0x200098ac
    ldr r0, =_thread_offset_to_callee_saved
 802ba94:	00000030 	.word	0x00000030
    ldr v4, =_SCS_ICSR
 802ba98:	e000ed04 	.word	0xe000ed04
    ldr v3, =_SCS_ICSR_UNPENDSV
 802ba9c:	08000000 	.word	0x08000000

0802baa0 <z_arm_svc>:
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
  movs r0, #0x4
 802baa0:	2004      	movs	r0, #4
  mov r1, lr
 802baa2:	4671      	mov	r1, lr
  tst r1, r0
 802baa4:	4201      	tst	r1, r0
  beq _stack_frame_msp
 802baa6:	d002      	beq.n	802baae <_stack_frame_msp>
  mrs r0, PSP
 802baa8:	f3ef 8009 	mrs	r0, PSP
  bne _stack_frame_endif
 802baac:	d101      	bne.n	802bab2 <_stack_frame_endif>

0802baae <_stack_frame_msp>:
_stack_frame_msp:
  mrs r0, MSP
 802baae:	f3ef 8008 	mrs	r0, MSP

0802bab2 <_stack_frame_endif>:
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 802bab2:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
 802bab4:	3902      	subs	r1, #2
    ldrb r1, [r1]
 802bab6:	7809      	ldrb	r1, [r1, #0]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 802bab8:	2902      	cmp	r1, #2
    beq _oops
 802baba:	d0ff      	beq.n	802babc <_oops>

0802babc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 802babc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 802babe:	f004 fc5f 	bl	8030380 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 802bac2:	bd01      	pop	{r0, pc}

0802bac4 <arch_irq_enable>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 802bac4:	0603      	lsls	r3, r0, #24
 802bac6:	d405      	bmi.n	802bad4 <arch_irq_enable+0x10>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802bac8:	231f      	movs	r3, #31
 802baca:	4018      	ands	r0, r3
 802bacc:	3b1e      	subs	r3, #30
 802bace:	4083      	lsls	r3, r0
 802bad0:	4a01      	ldr	r2, [pc, #4]	; (802bad8 <arch_irq_enable+0x14>)
 802bad2:	6013      	str	r3, [r2, #0]
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
}
 802bad4:	4770      	bx	lr
 802bad6:	46c0      	nop			; (mov r8, r8)
 802bad8:	e000e100 	.word	0xe000e100

0802badc <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
 802badc:	b570      	push	{r4, r5, r6, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 802bade:	26ff      	movs	r6, #255	; 0xff
 802bae0:	2503      	movs	r5, #3
 802bae2:	0032      	movs	r2, r6
 802bae4:	4005      	ands	r5, r0
 802bae6:	00ed      	lsls	r5, r5, #3
 802bae8:	40aa      	lsls	r2, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 802baea:	0189      	lsls	r1, r1, #6
 802baec:	4031      	ands	r1, r6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 802baee:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 802baf0:	40a9      	lsls	r1, r5
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 802baf2:	b244      	sxtb	r4, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 802baf4:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 802baf6:	0600      	lsls	r0, r0, #24
 802baf8:	d40a      	bmi.n	802bb10 <z_arm_irq_priority_set+0x34>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 802bafa:	08a3      	lsrs	r3, r4, #2
 802bafc:	24c0      	movs	r4, #192	; 0xc0
 802bafe:	480a      	ldr	r0, [pc, #40]	; (802bb28 <z_arm_irq_priority_set+0x4c>)
 802bb00:	009b      	lsls	r3, r3, #2
 802bb02:	181b      	adds	r3, r3, r0
 802bb04:	00a4      	lsls	r4, r4, #2
 802bb06:	5918      	ldr	r0, [r3, r4]
 802bb08:	4002      	ands	r2, r0
 802bb0a:	4311      	orrs	r1, r2
 802bb0c:	5119      	str	r1, [r3, r4]
}
 802bb0e:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 802bb10:	200f      	movs	r0, #15
 802bb12:	4003      	ands	r3, r0
 802bb14:	3b08      	subs	r3, #8
 802bb16:	4805      	ldr	r0, [pc, #20]	; (802bb2c <z_arm_irq_priority_set+0x50>)
 802bb18:	089b      	lsrs	r3, r3, #2
 802bb1a:	009b      	lsls	r3, r3, #2
 802bb1c:	181b      	adds	r3, r3, r0
 802bb1e:	69d8      	ldr	r0, [r3, #28]
 802bb20:	4002      	ands	r2, r0
 802bb22:	4311      	orrs	r1, r2
 802bb24:	61d9      	str	r1, [r3, #28]
 802bb26:	e7f2      	b.n	802bb0e <z_arm_irq_priority_set+0x32>
 802bb28:	e000e100 	.word	0xe000e100
 802bb2c:	e000ed00 	.word	0xe000ed00

0802bb30 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
 802bb30:	b510      	push	{r4, lr}
	iframe->pc = (uint32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
 802bb32:	3a20      	subs	r2, #32
#endif
	iframe->a1 = (uint32_t)entry;
 802bb34:	6013      	str	r3, [r2, #0]
	iframe->a2 = (uint32_t)p1;
 802bb36:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
 802bb38:	2401      	movs	r4, #1
	iframe->a2 = (uint32_t)p1;
 802bb3a:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
 802bb3c:	9b03      	ldr	r3, [sp, #12]
	iframe->pc &= 0xfffffffe;
 802bb3e:	4906      	ldr	r1, [pc, #24]	; (802bb58 <arch_new_thread+0x28>)
	iframe->a3 = (uint32_t)p2;
 802bb40:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
 802bb42:	9b04      	ldr	r3, [sp, #16]
	iframe->pc &= 0xfffffffe;
 802bb44:	43a1      	bics	r1, r4
	iframe->a4 = (uint32_t)p3;
 802bb46:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 802bb48:	2380      	movs	r3, #128	; 0x80
 802bb4a:	045b      	lsls	r3, r3, #17
 802bb4c:	61d3      	str	r3, [r2, #28]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 802bb4e:	2300      	movs	r3, #0
	iframe->pc &= 0xfffffffe;
 802bb50:	6191      	str	r1, [r2, #24]
	thread->callee_saved.psp = (uint32_t)iframe;
 802bb52:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 802bb54:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 802bb56:	bd10      	pop	{r4, pc}
 802bb58:	0802e6f1 	.word	0x0802e6f1

0802bb5c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 802bb5c:	4b06      	ldr	r3, [pc, #24]	; (802bb78 <arch_switch_to_main_thread+0x1c>)
 802bb5e:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 802bb60:	1c10      	adds	r0, r2, #0
 802bb62:	f381 8809 	msr	PSP, r1
 802bb66:	2100      	movs	r1, #0
 802bb68:	b662      	cpsie	i
 802bb6a:	f3bf 8f6f 	isb	sy
 802bb6e:	2200      	movs	r2, #0
 802bb70:	2300      	movs	r3, #0
 802bb72:	f002 fdbd 	bl	802e6f0 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 802bb76:	46c0      	nop			; (mov r8, r8)
 802bb78:	200098ac 	.word	0x200098ac

0802bb7c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 802bb7c:	4901      	ldr	r1, [pc, #4]	; (802bb84 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 802bb7e:	2210      	movs	r2, #16
	str	r2, [r1]
 802bb80:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 802bb82:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 802bb84:	e000ed10 	.word	0xe000ed10

0802bb88 <arch_cpu_idle>:

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 802bb88:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 802bb8c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 802bb8e:	b662      	cpsie	i
	isb
 802bb90:	f3bf 8f6f 	isb	sy

	bx	lr
 802bb94:	4770      	bx	lr
 802bb96:	46c0      	nop			; (mov r8, r8)

0802bb98 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 802bb98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802bb9a:	0005      	movs	r5, r0
 802bb9c:	1e0c      	subs	r4, r1, #0

	if (esf != NULL) {
 802bb9e:	d01f      	beq.n	802bbe0 <z_arm_fatal_error+0x48>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 802bba0:	2601      	movs	r6, #1
 802bba2:	466f      	mov	r7, sp
 802bba4:	4a11      	ldr	r2, [pc, #68]	; (802bbec <z_arm_fatal_error+0x54>)
 802bba6:	4b12      	ldr	r3, [pc, #72]	; (802bbf0 <z_arm_fatal_error+0x58>)
 802bba8:	4812      	ldr	r0, [pc, #72]	; (802bbf4 <z_arm_fatal_error+0x5c>)
 802bbaa:	1a9b      	subs	r3, r3, r2
 802bbac:	08db      	lsrs	r3, r3, #3
 802bbae:	019b      	lsls	r3, r3, #6
 802bbb0:	431e      	orrs	r6, r3
 802bbb2:	803e      	strh	r6, [r7, #0]
 802bbb4:	688b      	ldr	r3, [r1, #8]
 802bbb6:	684a      	ldr	r2, [r1, #4]
 802bbb8:	6809      	ldr	r1, [r1, #0]
 802bbba:	f002 fe20 	bl	802e7fe <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 802bbbe:	6963      	ldr	r3, [r4, #20]
 802bbc0:	6922      	ldr	r2, [r4, #16]
 802bbc2:	68e1      	ldr	r1, [r4, #12]
 802bbc4:	480c      	ldr	r0, [pc, #48]	; (802bbf8 <z_arm_fatal_error+0x60>)
 802bbc6:	803e      	strh	r6, [r7, #0]
 802bbc8:	f002 fe19 	bl	802e7fe <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 802bbcc:	69e1      	ldr	r1, [r4, #28]
 802bbce:	480b      	ldr	r0, [pc, #44]	; (802bbfc <z_arm_fatal_error+0x64>)
 802bbd0:	1c32      	adds	r2, r6, #0
 802bbd2:	f002 fdea 	bl	802e7aa <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 802bbd6:	69a1      	ldr	r1, [r4, #24]
 802bbd8:	4809      	ldr	r0, [pc, #36]	; (802bc00 <z_arm_fatal_error+0x68>)
 802bbda:	1c32      	adds	r2, r6, #0
 802bbdc:	f002 fde5 	bl	802e7aa <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 802bbe0:	0028      	movs	r0, r5
 802bbe2:	0021      	movs	r1, r4
 802bbe4:	f000 ff52 	bl	802ca8c <z_fatal_error>
}
 802bbe8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 802bbea:	46c0      	nop			; (mov r8, r8)
 802bbec:	08031164 	.word	0x08031164
 802bbf0:	08031184 	.word	0x08031184
 802bbf4:	08031e2d 	.word	0x08031e2d
 802bbf8:	08031e5c 	.word	0x08031e5c
 802bbfc:	08031e8b 	.word	0x08031e8b
 802bc00:	08031e9a 	.word	0x08031e9a

0802bc04 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 802bc04:	bf30      	wfi
    b z_SysNmiOnReset
 802bc06:	e7fd      	b.n	802bc04 <z_SysNmiOnReset>

0802bc08 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 802bc08:	22ff      	movs	r2, #255	; 0xff
 802bc0a:	4b08      	ldr	r3, [pc, #32]	; (802bc2c <z_arm_prep_c+0x24>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 802bc0c:	b510      	push	{r4, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 802bc0e:	4393      	bics	r3, r2
 802bc10:	4a07      	ldr	r2, [pc, #28]	; (802bc30 <z_arm_prep_c+0x28>)
 802bc12:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 802bc14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 802bc18:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 802bc1c:	f000 ff96 	bl	802cb4c <z_bss_zero>
	z_data_copy();
 802bc20:	f001 fba4 	bl	802d36c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 802bc24:	f000 f8c8 	bl	802bdb8 <z_arm_interrupt_init>
	z_cstart();
 802bc28:	f000 ffb6 	bl	802cb98 <z_cstart>
 802bc2c:	08020000 	.word	0x08020000
 802bc30:	e000ed00 	.word	0xe000ed00

0802bc34 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 802bc34:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
 802bc36:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
 802bc38:	4a0a      	ldr	r2, [pc, #40]	; (802bc64 <_idle_state_cleared+0x1c>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
 802bc3a:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
 802bc3c:	2800      	cmp	r0, #0

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	beq _idle_state_cleared
 802bc3e:	d003      	beq.n	802bc48 <_idle_state_cleared>
	movs.n r1, #0
 802bc40:	2100      	movs	r1, #0
	/* clear kernel idle state */
	str r1, [r2, #_kernel_offset_to_idle]
 802bc42:	61d1      	str	r1, [r2, #28]
	bl z_pm_save_idle_exit
 802bc44:	f004 ff3c 	bl	8030ac0 <z_pm_save_idle_exit>

0802bc48 <_idle_state_cleared>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
 802bc48:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 802bc4a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
 802bc4e:	4906      	ldr	r1, [pc, #24]	; (802bc68 <_idle_state_cleared+0x20>)
	subs r0, r1	/* get IRQ number */
 802bc50:	1a40      	subs	r0, r0, r1
	lsls r0, #3	/* table is 8-byte wide */
 802bc52:	00c0      	lsls	r0, r0, #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 802bc54:	4905      	ldr	r1, [pc, #20]	; (802bc6c <_idle_state_cleared+0x24>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 802bc56:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 802bc58:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 802bc5a:	4798      	blx	r3
#ifdef CONFIG_TRACING_ISR
	bl sys_trace_isr_exit
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
 802bc5c:	bc09      	pop	{r0, r3}
	mov lr, r3
 802bc5e:	469e      	mov	lr, r3
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 802bc60:	4903      	ldr	r1, [pc, #12]	; (802bc70 <_idle_state_cleared+0x28>)
	bx r1
 802bc62:	4708      	bx	r1
	ldr r2, =_kernel
 802bc64:	200098ac 	.word	0x200098ac
	ldr r1, =16
 802bc68:	00000010 	.word	0x00000010
	ldr r1, =_sw_isr_table
 802bc6c:	08031064 	.word	0x08031064
	ldr r1, =z_arm_int_exit
 802bc70:	0802bd99 	.word	0x0802bd99

0802bc74 <__start>:
    bl z_arm_init_arch_hw_at_boot
#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
 802bc74:	b672      	cpsid	i

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 802bc76:	4807      	ldr	r0, [pc, #28]	; (802bc94 <__start+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 802bc78:	4907      	ldr	r1, [pc, #28]	; (802bc98 <__start+0x24>)
    adds r0, r0, r1
 802bc7a:	1840      	adds	r0, r0, r1
    msr PSP, r0
 802bc7c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 802bc80:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 802bc84:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 802bc86:	4308      	orrs	r0, r1
    msr CONTROL, r0
 802bc88:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 802bc8c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 802bc90:	f7ff ffba 	bl	802bc08 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
 802bc94:	2000af28 	.word	0x2000af28
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 802bc98:	00000800 	.word	0x00000800

0802bc9c <z_arm_exc_spurious>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 802bc9c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 802bca0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 802bca4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 802bca6:	4672      	mov	r2, lr
	bl z_arm_fault
 802bca8:	f000 f802 	bl	802bcb0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 802bcac:	bd01      	pop	{r0, pc}
 802bcae:	46c0      	nop			; (mov r8, r8)

0802bcb0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 802bcb0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 802bcb2:	4b2e      	ldr	r3, [pc, #184]	; (802bd6c <z_arm_fault+0xbc>)
{
 802bcb4:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 802bcb6:	685f      	ldr	r7, [r3, #4]
 802bcb8:	05fb      	lsls	r3, r7, #23
 802bcba:	0ddb      	lsrs	r3, r3, #23
 802bcbc:	9301      	str	r3, [sp, #4]
 802bcbe:	b662      	cpsie	i
 802bcc0:	f3bf 8f6f 	isb	sy
	*nested_exc = false;
 802bcc4:	2600      	movs	r6, #0
 802bcc6:	4b2a      	ldr	r3, [pc, #168]	; (802bd70 <z_arm_fault+0xc0>)
 802bcc8:	4c2a      	ldr	r4, [pc, #168]	; (802bd74 <z_arm_fault+0xc4>)
		return NULL;
 802bcca:	0035      	movs	r5, r6
 802bccc:	1ae4      	subs	r4, r4, r3
 802bcce:	08e4      	lsrs	r4, r4, #3
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 802bcd0:	0e13      	lsrs	r3, r2, #24
 802bcd2:	01a4      	lsls	r4, r4, #6
 802bcd4:	2bff      	cmp	r3, #255	; 0xff
 802bcd6:	d108      	bne.n	802bcea <z_arm_fault+0x3a>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 802bcd8:	3bf3      	subs	r3, #243	; 0xf3
 802bcda:	4013      	ands	r3, r2
 802bcdc:	2b08      	cmp	r3, #8
 802bcde:	d12d      	bne.n	802bd3c <z_arm_fault+0x8c>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 802bce0:	2101      	movs	r1, #1
 802bce2:	4825      	ldr	r0, [pc, #148]	; (802bd78 <z_arm_fault+0xc8>)
 802bce4:	4321      	orrs	r1, r4
 802bce6:	f002 fd54 	bl	802e792 <log_0>
	switch (fault) {
 802bcea:	9a01      	ldr	r2, [sp, #4]
 802bcec:	2301      	movs	r3, #1
 802bcee:	2a03      	cmp	r2, #3
 802bcf0:	d12b      	bne.n	802bd4a <z_arm_fault+0x9a>
	PR_FAULT_INFO("***** HARD FAULT *****");
 802bcf2:	431c      	orrs	r4, r3
 802bcf4:	4821      	ldr	r0, [pc, #132]	; (802bd7c <z_arm_fault+0xcc>)
 802bcf6:	1c21      	adds	r1, r4, #0
 802bcf8:	f002 fd4b 	bl	802e792 <log_0>
	uint16_t fault_insn = *(ret_addr - 1);
 802bcfc:	69ab      	ldr	r3, [r5, #24]
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 802bcfe:	2700      	movs	r7, #0
	uint16_t fault_insn = *(ret_addr - 1);
 802bd00:	3b02      	subs	r3, #2
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 802bd02:	881a      	ldrh	r2, [r3, #0]
 802bd04:	4b1e      	ldr	r3, [pc, #120]	; (802bd80 <z_arm_fault+0xd0>)
 802bd06:	429a      	cmp	r2, r3
 802bd08:	d105      	bne.n	802bd16 <z_arm_fault+0x66>
		PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
 802bd0a:	6829      	ldr	r1, [r5, #0]
 802bd0c:	481d      	ldr	r0, [pc, #116]	; (802bd84 <z_arm_fault+0xd4>)
 802bd0e:	1c22      	adds	r2, r4, #0
 802bd10:	f002 fd4b 	bl	802e7aa <log_1>
		reason = esf->basic.r0;
 802bd14:	682f      	ldr	r7, [r5, #0]
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 802bd16:	2220      	movs	r2, #32
 802bd18:	0029      	movs	r1, r5
 802bd1a:	a802      	add	r0, sp, #8
 802bd1c:	f005 f820 	bl	8030d60 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 802bd20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802bd22:	2e00      	cmp	r6, #0
 802bd24:	d01f      	beq.n	802bd66 <z_arm_fault+0xb6>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 802bd26:	05da      	lsls	r2, r3, #23
 802bd28:	d102      	bne.n	802bd30 <z_arm_fault+0x80>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 802bd2a:	4a17      	ldr	r2, [pc, #92]	; (802bd88 <z_arm_fault+0xd8>)
 802bd2c:	4313      	orrs	r3, r2
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 802bd2e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 802bd30:	0038      	movs	r0, r7
 802bd32:	a902      	add	r1, sp, #8
 802bd34:	f7ff ff30 	bl	802bb98 <z_arm_fatal_error>
}
 802bd38:	b00b      	add	sp, #44	; 0x2c
 802bd3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ptr_esf = (z_arch_esf_t *)msp;
 802bd3c:	0005      	movs	r5, r0
			*nested_exc = true;
 802bd3e:	2601      	movs	r6, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 802bd40:	0713      	lsls	r3, r2, #28
 802bd42:	d5d2      	bpl.n	802bcea <z_arm_fault+0x3a>
			ptr_esf =  (z_arch_esf_t *)psp;
 802bd44:	000d      	movs	r5, r1
	*nested_exc = false;
 802bd46:	2600      	movs	r6, #0
 802bd48:	e7cf      	b.n	802bcea <z_arm_fault+0x3a>
	PR_FAULT_INFO("***** %s %d) *****",
 802bd4a:	22f8      	movs	r2, #248	; 0xf8
 802bd4c:	0052      	lsls	r2, r2, #1
 802bd4e:	490f      	ldr	r1, [pc, #60]	; (802bd8c <z_arm_fault+0xdc>)
 802bd50:	4323      	orrs	r3, r4
 802bd52:	4217      	tst	r7, r2
 802bd54:	d100      	bne.n	802bd58 <z_arm_fault+0xa8>
 802bd56:	490e      	ldr	r1, [pc, #56]	; (802bd90 <z_arm_fault+0xe0>)
 802bd58:	9a01      	ldr	r2, [sp, #4]
 802bd5a:	480e      	ldr	r0, [pc, #56]	; (802bd94 <z_arm_fault+0xe4>)
 802bd5c:	3a10      	subs	r2, #16
 802bd5e:	f002 fd38 	bl	802e7d2 <log_2>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 802bd62:	2700      	movs	r7, #0
}
 802bd64:	e7d7      	b.n	802bd16 <z_arm_fault+0x66>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 802bd66:	0a5b      	lsrs	r3, r3, #9
 802bd68:	025b      	lsls	r3, r3, #9
 802bd6a:	e7e0      	b.n	802bd2e <z_arm_fault+0x7e>
 802bd6c:	e000ed00 	.word	0xe000ed00
 802bd70:	08031164 	.word	0x08031164
 802bd74:	08031184 	.word	0x08031184
 802bd78:	08031ec8 	.word	0x08031ec8
 802bd7c:	08031ef3 	.word	0x08031ef3
 802bd80:	0000df02 	.word	0x0000df02
 802bd84:	08031f0a 	.word	0x08031f0a
 802bd88:	000001ff 	.word	0x000001ff
 802bd8c:	08031f3b 	.word	0x08031f3b
 802bd90:	08031f26 	.word	0x08031f26
 802bd94:	08031f54 	.word	0x08031f54

0802bd98 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 802bd98:	4b04      	ldr	r3, [pc, #16]	; (802bdac <_EXIT_EXC+0x4>)

	ldr r1, [r3, #_kernel_offset_to_current]
 802bd9a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 802bd9c:	6a18      	ldr	r0, [r3, #32]
	cmp r0, r1
 802bd9e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 802bda0:	d002      	beq.n	802bda8 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 802bda2:	4903      	ldr	r1, [pc, #12]	; (802bdb0 <_EXIT_EXC+0x8>)
	ldr r2, =_SCS_ICSR_PENDSV
 802bda4:	4a03      	ldr	r2, [pc, #12]	; (802bdb4 <_EXIT_EXC+0xc>)
	str r2, [r1]
 802bda6:	600a      	str	r2, [r1, #0]

0802bda8 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 802bda8:	4770      	bx	lr
 802bdaa:	0000      	.short	0x0000
	ldr r3, =_kernel
 802bdac:	200098ac 	.word	0x200098ac
	ldr r1, =_SCS_ICSR
 802bdb0:	e000ed04 	.word	0xe000ed04
	ldr r2, =_SCS_ICSR_PENDSV
 802bdb4:	10000000 	.word	0x10000000

0802bdb8 <z_arm_interrupt_init>:
 *
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
 802bdb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 802bdba:	24c0      	movs	r4, #192	; 0xc0
	int irq = 0;
 802bdbc:	2200      	movs	r2, #0
 802bdbe:	2603      	movs	r6, #3
 802bdc0:	25ff      	movs	r5, #255	; 0xff
 802bdc2:	00a4      	lsls	r4, r4, #2
 802bdc4:	0010      	movs	r0, r2
 802bdc6:	002f      	movs	r7, r5
 802bdc8:	4030      	ands	r0, r6
 802bdca:	00c0      	lsls	r0, r0, #3
 802bdcc:	4087      	lsls	r7, r0
 802bdce:	4905      	ldr	r1, [pc, #20]	; (802bde4 <z_arm_interrupt_init+0x2c>)
 802bdd0:	0893      	lsrs	r3, r2, #2
 802bdd2:	009b      	lsls	r3, r3, #2
 802bdd4:	185b      	adds	r3, r3, r1
 802bdd6:	5919      	ldr	r1, [r3, r4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 802bdd8:	3201      	adds	r2, #1
 802bdda:	43b9      	bics	r1, r7
 802bddc:	5119      	str	r1, [r3, r4]
 802bdde:	2a20      	cmp	r2, #32
 802bde0:	d1f0      	bne.n	802bdc4 <z_arm_interrupt_init+0xc>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 802bde2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802bde4:	e000e100 	.word	0xe000e100

0802bde8 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 802bde8:	4b08      	ldr	r3, [pc, #32]	; (802be0c <z_impl_k_thread_abort+0x24>)
{
 802bdea:	b510      	push	{r4, lr}
	if (_current == thread) {
 802bdec:	689b      	ldr	r3, [r3, #8]
 802bdee:	4283      	cmp	r3, r0
 802bdf0:	d109      	bne.n	802be06 <z_impl_k_thread_abort+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802bdf2:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 802bdf6:	2b00      	cmp	r3, #0
 802bdf8:	d005      	beq.n	802be06 <z_impl_k_thread_abort+0x1e>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 802bdfa:	2380      	movs	r3, #128	; 0x80
 802bdfc:	4a04      	ldr	r2, [pc, #16]	; (802be10 <z_impl_k_thread_abort+0x28>)
 802bdfe:	055b      	lsls	r3, r3, #21
 802be00:	6851      	ldr	r1, [r2, #4]
 802be02:	430b      	orrs	r3, r1
 802be04:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
 802be06:	f001 fa61 	bl	802d2cc <z_thread_abort>
}
 802be0a:	bd10      	pop	{r4, pc}
 802be0c:	200098ac 	.word	0x200098ac
 802be10:	e000ed00 	.word	0xe000ed00

0802be14 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
 802be14:	b510      	push	{r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 802be16:	2101      	movs	r1, #1
 802be18:	4b02      	ldr	r3, [pc, #8]	; (802be24 <z_arm_configure_static_mpu_regions+0x10>)
 802be1a:	4a03      	ldr	r2, [pc, #12]	; (802be28 <z_arm_configure_static_mpu_regions+0x14>)
 802be1c:	4803      	ldr	r0, [pc, #12]	; (802be2c <z_arm_configure_static_mpu_regions+0x18>)
 802be1e:	f000 f87d 	bl	802bf1c <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
 802be22:	bd10      	pop	{r4, pc}
 802be24:	20010000 	.word	0x20010000
 802be28:	20008000 	.word	0x20008000
 802be2c:	08031518 	.word	0x08031518

0802be30 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 802be30:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i;
	int reg_index = start_reg_index;
 802be32:	0014      	movs	r4, r2

	for (i = 0; i < regions_num; i++) {
 802be34:	0005      	movs	r5, r0
 802be36:	2600      	movs	r6, #0
{
 802be38:	b085      	sub	sp, #20
 802be3a:	9102      	str	r1, [sp, #8]
 802be3c:	9303      	str	r3, [sp, #12]
	for (i = 0; i < regions_num; i++) {
 802be3e:	9b02      	ldr	r3, [sp, #8]
 802be40:	429e      	cmp	r6, r3
 802be42:	da15      	bge.n	802be70 <mpu_configure_regions+0x40>
		if (regions[i].size == 0U) {
 802be44:	6868      	ldr	r0, [r5, #4]
 802be46:	2800      	cmp	r0, #0
 802be48:	d049      	beq.n	802bede <mpu_configure_regions+0xae>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
 802be4a:	9b03      	ldr	r3, [sp, #12]
 802be4c:	2b00      	cmp	r3, #0
 802be4e:	d017      	beq.n	802be80 <mpu_configure_regions+0x50>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 802be50:	1e43      	subs	r3, r0, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 802be52:	4203      	tst	r3, r0
 802be54:	d00f      	beq.n	802be76 <mpu_configure_regions+0x46>
 802be56:	4b23      	ldr	r3, [pc, #140]	; (802bee4 <mpu_configure_regions+0xb4>)
 802be58:	4a23      	ldr	r2, [pc, #140]	; (802bee8 <mpu_configure_regions+0xb8>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
 802be5a:	0031      	movs	r1, r6
 802be5c:	1ad2      	subs	r2, r2, r3
 802be5e:	2301      	movs	r3, #1
 802be60:	08d2      	lsrs	r2, r2, #3
 802be62:	0192      	lsls	r2, r2, #6
 802be64:	4821      	ldr	r0, [pc, #132]	; (802beec <mpu_configure_regions+0xbc>)
 802be66:	431a      	orrs	r2, r3
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
 802be68:	2416      	movs	r4, #22
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 802be6a:	f002 fc9e 	bl	802e7aa <log_1>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 802be6e:	4264      	negs	r4, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 802be70:	0020      	movs	r0, r4
 802be72:	b005      	add	sp, #20
 802be74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		&&
 802be76:	28ff      	cmp	r0, #255	; 0xff
 802be78:	d9ed      	bls.n	802be56 <mpu_configure_regions+0x26>
		&&
 802be7a:	682a      	ldr	r2, [r5, #0]
 802be7c:	421a      	tst	r2, r3
 802be7e:	d1ea      	bne.n	802be56 <mpu_configure_regions+0x26>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 802be80:	b2e3      	uxtb	r3, r4
 802be82:	9300      	str	r3, [sp, #0]
	region_conf.base = new_region->start;
 802be84:	682b      	ldr	r3, [r5, #0]
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 802be86:	68af      	ldr	r7, [r5, #8]
 802be88:	9301      	str	r3, [sp, #4]
		return REGION_32B;
 802be8a:	2308      	movs	r3, #8
	if (size <= 32U) {
 802be8c:	2820      	cmp	r0, #32
 802be8e:	d90a      	bls.n	802bea6 <mpu_configure_regions+0x76>
	if (size > (1UL << 31)) {
 802be90:	2280      	movs	r2, #128	; 0x80
		return REGION_4G;
 802be92:	3336      	adds	r3, #54	; 0x36
	if (size > (1UL << 31)) {
 802be94:	0612      	lsls	r2, r2, #24
 802be96:	4290      	cmp	r0, r2
 802be98:	d805      	bhi.n	802bea6 <mpu_configure_regions+0x76>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 802be9a:	3801      	subs	r0, #1
 802be9c:	f7f4 fae8 	bl	8020470 <__clzsi2>
 802bea0:	231f      	movs	r3, #31
 802bea2:	1a1b      	subs	r3, r3, r0
 802bea4:	005b      	lsls	r3, r3, #1
 802bea6:	21ff      	movs	r1, #255	; 0xff
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 802bea8:	431f      	orrs	r7, r3
	if (index > (get_num_regions() - 1U)) {
 802beaa:	9b00      	ldr	r3, [sp, #0]
 802beac:	4021      	ands	r1, r4
 802beae:	2b07      	cmp	r3, #7
 802beb0:	d908      	bls.n	802bec4 <mpu_configure_regions+0x94>
 802beb2:	4b0c      	ldr	r3, [pc, #48]	; (802bee4 <mpu_configure_regions+0xb4>)
 802beb4:	4a0c      	ldr	r2, [pc, #48]	; (802bee8 <mpu_configure_regions+0xb8>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 802beb6:	480e      	ldr	r0, [pc, #56]	; (802bef0 <mpu_configure_regions+0xc0>)
 802beb8:	1ad2      	subs	r2, r2, r3
 802beba:	2301      	movs	r3, #1
 802bebc:	08d2      	lsrs	r2, r2, #3
 802bebe:	0192      	lsls	r2, r2, #6
 802bec0:	431a      	orrs	r2, r3
 802bec2:	e7d1      	b.n	802be68 <mpu_configure_regions+0x38>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 802bec4:	20ff      	movs	r0, #255	; 0xff
 802bec6:	9b01      	ldr	r3, [sp, #4]
	MPU->RNR = index;
 802bec8:	4a0a      	ldr	r2, [pc, #40]	; (802bef4 <mpu_configure_regions+0xc4>)
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 802beca:	4383      	bics	r3, r0
				| MPU_RBAR_VALID_Msk | index;
 802becc:	430b      	orrs	r3, r1
 802bece:	38ef      	subs	r0, #239	; 0xef
 802bed0:	4303      	orrs	r3, r0
	MPU->RNR = index;
 802bed2:	6091      	str	r1, [r2, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 802bed4:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 802bed6:	2301      	movs	r3, #1
 802bed8:	431f      	orrs	r7, r3
 802beda:	6117      	str	r7, [r2, #16]
		reg_index++;
 802bedc:	18cc      	adds	r4, r1, r3
	for (i = 0; i < regions_num; i++) {
 802bede:	3601      	adds	r6, #1
 802bee0:	350c      	adds	r5, #12
 802bee2:	e7ac      	b.n	802be3e <mpu_configure_regions+0xe>
 802bee4:	08031164 	.word	0x08031164
 802bee8:	08031174 	.word	0x08031174
 802beec:	08031f6b 	.word	0x08031f6b
 802bef0:	08031f8e 	.word	0x08031f8e
 802bef4:	e000ed90 	.word	0xe000ed90

0802bef8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 802bef8:	2205      	movs	r2, #5
 802befa:	4b03      	ldr	r3, [pc, #12]	; (802bf08 <arm_core_mpu_enable+0x10>)
 802befc:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 802befe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 802bf02:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 802bf06:	4770      	bx	lr
 802bf08:	e000ed90 	.word	0xe000ed90

0802bf0c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 802bf0c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 802bf10:	2200      	movs	r2, #0
 802bf12:	4b01      	ldr	r3, [pc, #4]	; (802bf18 <arm_core_mpu_disable+0xc>)
 802bf14:	605a      	str	r2, [r3, #4]
}
 802bf16:	4770      	bx	lr
 802bf18:	e000ed90 	.word	0xe000ed90

0802bf1c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 802bf1c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 802bf1e:	4c03      	ldr	r4, [pc, #12]	; (802bf2c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 802bf20:	2301      	movs	r3, #1
 802bf22:	7822      	ldrb	r2, [r4, #0]
 802bf24:	f7ff ff84 	bl	802be30 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 802bf28:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 802bf2a:	bd10      	pop	{r4, pc}
 802bf2c:	20009b20 	.word	0x20009b20

0802bf30 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
 802bf30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 802bf32:	4d11      	ldr	r5, [pc, #68]	; (802bf78 <z_arm_mpu_init+0x48>)
 802bf34:	682c      	ldr	r4, [r5, #0]
 802bf36:	2c08      	cmp	r4, #8
 802bf38:	d81b      	bhi.n	802bf72 <z_arm_mpu_init+0x42>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 802bf3a:	f7ff ffe7 	bl	802bf0c <arm_core_mpu_disable>
				| MPU_RBAR_VALID_Msk | index;
 802bf3e:	2610      	movs	r6, #16
 802bf40:	6869      	ldr	r1, [r5, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 802bf42:	2200      	movs	r2, #0
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 802bf44:	25ff      	movs	r5, #255	; 0xff
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 802bf46:	2701      	movs	r7, #1
	MPU->RNR = index;
 802bf48:	480c      	ldr	r0, [pc, #48]	; (802bf7c <z_arm_mpu_init+0x4c>)
 802bf4a:	4294      	cmp	r4, r2
 802bf4c:	d105      	bne.n	802bf5a <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 802bf4e:	4b0c      	ldr	r3, [pc, #48]	; (802bf80 <z_arm_mpu_init+0x50>)
 802bf50:	701c      	strb	r4, [r3, #0]


	arm_core_mpu_enable();
 802bf52:	f7ff ffd1 	bl	802bef8 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 802bf56:	2000      	movs	r0, #0
}
 802bf58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802bf5a:	6082      	str	r2, [r0, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 802bf5c:	680b      	ldr	r3, [r1, #0]
 802bf5e:	43ab      	bics	r3, r5
				| MPU_RBAR_VALID_Msk | index;
 802bf60:	4313      	orrs	r3, r2
 802bf62:	4333      	orrs	r3, r6
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 802bf64:	60c3      	str	r3, [r0, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 802bf66:	688b      	ldr	r3, [r1, #8]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 802bf68:	3201      	adds	r2, #1
 802bf6a:	433b      	orrs	r3, r7
 802bf6c:	6103      	str	r3, [r0, #16]
 802bf6e:	310c      	adds	r1, #12
 802bf70:	e7eb      	b.n	802bf4a <z_arm_mpu_init+0x1a>
		return -1;
 802bf72:	2001      	movs	r0, #1
 802bf74:	4240      	negs	r0, r0
 802bf76:	e7ef      	b.n	802bf58 <z_arm_mpu_init+0x28>
 802bf78:	08031524 	.word	0x08031524
 802bf7c:	e000ed90 	.word	0xe000ed90
 802bf80:	20009b20 	.word	0x20009b20

0802bf84 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 802bf84:	4b01      	ldr	r3, [pc, #4]	; (802bf8c <__stdout_hook_install+0x8>)
 802bf86:	6018      	str	r0, [r3, #0]
}
 802bf88:	4770      	bx	lr
 802bf8a:	46c0      	nop			; (mov r8, r8)
 802bf8c:	200080b4 	.word	0x200080b4

0802bf90 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
 802bf90:	b570      	push	{r4, r5, r6, lr}
 802bf92:	0006      	movs	r6, r0
 802bf94:	000d      	movs	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
 802bf96:	2400      	movs	r4, #0
 802bf98:	42ac      	cmp	r4, r5
 802bf9a:	da08      	bge.n	802bfae <z_impl_zephyr_read_stdin+0x1e>
		*(buf + i) = _stdin_hook();
 802bf9c:	4b05      	ldr	r3, [pc, #20]	; (802bfb4 <z_impl_zephyr_read_stdin+0x24>)
 802bf9e:	681b      	ldr	r3, [r3, #0]
 802bfa0:	4798      	blx	r3
 802bfa2:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
 802bfa4:	3401      	adds	r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 802bfa6:	280a      	cmp	r0, #10
 802bfa8:	d001      	beq.n	802bfae <z_impl_zephyr_read_stdin+0x1e>
 802bfaa:	280d      	cmp	r0, #13
 802bfac:	d1f4      	bne.n	802bf98 <z_impl_zephyr_read_stdin+0x8>
			i++;
			break;
		}
	}
	return i;
}
 802bfae:	0020      	movs	r0, r4
 802bfb0:	bd70      	pop	{r4, r5, r6, pc}
 802bfb2:	46c0      	nop			; (mov r8, r8)
 802bfb4:	200080b0 	.word	0x200080b0

0802bfb8 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
 802bfb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bfba:	0006      	movs	r6, r0
 802bfbc:	000d      	movs	r5, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
 802bfbe:	2400      	movs	r4, #0
 802bfc0:	42ac      	cmp	r4, r5
 802bfc2:	db01      	blt.n	802bfc8 <z_impl_zephyr_write_stdout+0x10>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
 802bfc4:	0028      	movs	r0, r5
 802bfc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
 802bfc8:	5d33      	ldrb	r3, [r6, r4]
 802bfca:	4f05      	ldr	r7, [pc, #20]	; (802bfe0 <z_impl_zephyr_write_stdout+0x28>)
 802bfcc:	2b0a      	cmp	r3, #10
 802bfce:	d102      	bne.n	802bfd6 <z_impl_zephyr_write_stdout+0x1e>
			_stdout_hook('\r');
 802bfd0:	200d      	movs	r0, #13
 802bfd2:	683b      	ldr	r3, [r7, #0]
 802bfd4:	4798      	blx	r3
		_stdout_hook(*(buf + i));
 802bfd6:	5d30      	ldrb	r0, [r6, r4]
 802bfd8:	683b      	ldr	r3, [r7, #0]
 802bfda:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 802bfdc:	3401      	adds	r4, #1
 802bfde:	e7ef      	b.n	802bfc0 <z_impl_zephyr_write_stdout+0x8>
 802bfe0:	200080b4 	.word	0x200080b4

0802bfe4 <_exit>:

int _write(int fd, const void *buf, int nbytes)
{
	ARG_UNUSED(fd);

	return z_impl_zephyr_write_stdout(buf, nbytes);
 802bfe4:	2105      	movs	r1, #5
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
 802bfe6:	b510      	push	{r4, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
 802bfe8:	4801      	ldr	r0, [pc, #4]	; (802bff0 <_exit+0xc>)
 802bfea:	f7ff ffe5 	bl	802bfb8 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
 802bfee:	e7fe      	b.n	802bfee <_exit+0xa>
 802bff0:	08031fb4 	.word	0x08031fb4

0802bff4 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(intptr_t count)
{
 802bff4:	b570      	push	{r4, r5, r6, lr}
 802bff6:	0004      	movs	r4, r0
	void *ret, *ptr;

	/* coverity[CHECKED_RETURN] */
	sys_sem_take(&heap_sem, K_FOREVER);
 802bff8:	4d0c      	ldr	r5, [pc, #48]	; (802c02c <_sbrk+0x38>)
 802bffa:	2201      	movs	r2, #1
 802bffc:	4252      	negs	r2, r2
 802bffe:	17d3      	asrs	r3, r2, #31
 802c000:	0028      	movs	r0, r5
 802c002:	f002 fb69 	bl	802e6d8 <sys_sem_take>
	ptr = ((char *)HEAP_BASE) + heap_sz;
 802c006:	480a      	ldr	r0, [pc, #40]	; (802c030 <_sbrk+0x3c>)

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 802c008:	490a      	ldr	r1, [pc, #40]	; (802c034 <_sbrk+0x40>)
	ptr = ((char *)HEAP_BASE) + heap_sz;
 802c00a:	6802      	ldr	r2, [r0, #0]
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 802c00c:	18a3      	adds	r3, r4, r2
 802c00e:	4c0a      	ldr	r4, [pc, #40]	; (802c038 <_sbrk+0x44>)
 802c010:	1b09      	subs	r1, r1, r4
 802c012:	428b      	cmp	r3, r1
 802c014:	d206      	bcs.n	802c024 <_sbrk+0x30>
	ptr = ((char *)HEAP_BASE) + heap_sz;
 802c016:	1914      	adds	r4, r2, r4
		heap_sz += count;
 802c018:	6003      	str	r3, [r0, #0]
	} else {
		ret = (void *)-1;
	}

	/* coverity[CHECKED_RETURN] */
	sys_sem_give(&heap_sem);
 802c01a:	0028      	movs	r0, r5
 802c01c:	f002 fb57 	bl	802e6ce <sys_sem_give>

	return ret;
}
 802c020:	0020      	movs	r0, r4
 802c022:	bd70      	pop	{r4, r5, r6, pc}
		ret = (void *)-1;
 802c024:	2401      	movs	r4, #1
 802c026:	4264      	negs	r4, r4
 802c028:	e7f7      	b.n	802c01a <_sbrk+0x26>
 802c02a:	46c0      	nop			; (mov r8, r8)
 802c02c:	20008358 	.word	0x20008358
 802c030:	2000969c 	.word	0x2000969c
 802c034:	20010000 	.word	0x20010000
 802c038:	2000bfc8 	.word	0x2000bfc8

0802c03c <gpio_stm32_pin_interrupt_configure>:

static int gpio_stm32_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
 802c03c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802c03e:	001d      	movs	r5, r3
	const struct gpio_stm32_config *cfg = dev->config;
	struct gpio_stm32_data *data = dev->data;
	int edge = 0;
	int err = 0;

	if (mode == GPIO_INT_MODE_DISABLED) {
 802c040:	2380      	movs	r3, #128	; 0x80
{
 802c042:	000c      	movs	r4, r1
	const struct gpio_stm32_config *cfg = dev->config;
 802c044:	6847      	ldr	r7, [r0, #4]
{
 802c046:	0011      	movs	r1, r2
	if (mode == GPIO_INT_MODE_DISABLED) {
 802c048:	019b      	lsls	r3, r3, #6
	struct gpio_stm32_data *data = dev->data;
 802c04a:	6902      	ldr	r2, [r0, #16]
	if (mode == GPIO_INT_MODE_DISABLED) {
 802c04c:	4299      	cmp	r1, r3
 802c04e:	d125      	bne.n	802c09c <gpio_stm32_pin_interrupt_configure+0x60>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 802c050:	2203      	movs	r2, #3
 802c052:	0021      	movs	r1, r4
 802c054:	230f      	movs	r3, #15
 802c056:	4011      	ands	r1, r2
 802c058:	3104      	adds	r1, #4
 802c05a:	0089      	lsls	r1, r1, #2
 802c05c:	408b      	lsls	r3, r1
 802c05e:	10a1      	asrs	r1, r4, #2
 802c060:	430b      	orrs	r3, r1
  *         @arg @ref LL_SYSCFG_EXTI_PORTC
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
#if defined(CORE_CM0PLUS)
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0x03U], (SYSCFG_EXTICR1_EXTI0 << ((Line >> LL_SYSCFG_EXTI_REGISTER_PINPOS_SHFT) & 12UL))) >> ((Line >> LL_SYSCFG_EXTI_REGISTER_PINPOS_SHFT) & 12UL));
 802c062:	401a      	ands	r2, r3
 802c064:	492f      	ldr	r1, [pc, #188]	; (802c124 <gpio_stm32_pin_interrupt_configure+0xe8>)
 802c066:	3202      	adds	r2, #2
 802c068:	0092      	lsls	r2, r2, #2
 802c06a:	5852      	ldr	r2, [r2, r1]
 802c06c:	210c      	movs	r1, #12
 802c06e:	0c1b      	lsrs	r3, r3, #16
 802c070:	400b      	ands	r3, r1
 802c072:	3905      	subs	r1, #5
 802c074:	4099      	lsls	r1, r3
 802c076:	400a      	ands	r2, r1
 802c078:	40da      	lsrs	r2, r3
 802c07a:	0013      	movs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 802c07c:	68ba      	ldr	r2, [r7, #8]
	int err = 0;
 802c07e:	2600      	movs	r6, #0
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 802c080:	429a      	cmp	r2, r3
 802c082:	d109      	bne.n	802c098 <gpio_stm32_pin_interrupt_configure+0x5c>
			stm32_exti_disable(pin);
 802c084:	0020      	movs	r0, r4
 802c086:	f7f7 fb5b 	bl	8023740 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 802c08a:	0020      	movs	r0, r4
 802c08c:	f7f7 fb9e 	bl	80237cc <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 802c090:	0031      	movs	r1, r6
 802c092:	0020      	movs	r0, r4
 802c094:	f7f7 fb60 	bl	8023758 <stm32_exti_trigger>

	stm32_exti_enable(pin);

exit:
	return err;
}
 802c098:	0030      	movs	r0, r6
 802c09a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
 802c09c:	2380      	movs	r3, #128	; 0x80
 802c09e:	01db      	lsls	r3, r3, #7
 802c0a0:	4299      	cmp	r1, r3
 802c0a2:	d039      	beq.n	802c118 <gpio_stm32_pin_interrupt_configure+0xdc>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 802c0a4:	0020      	movs	r0, r4
 802c0a6:	4920      	ldr	r1, [pc, #128]	; (802c128 <gpio_stm32_pin_interrupt_configure+0xec>)
 802c0a8:	f7f7 fb80 	bl	80237ac <stm32_exti_set_callback>
 802c0ac:	1e06      	subs	r6, r0, #0
 802c0ae:	d136      	bne.n	802c11e <gpio_stm32_pin_interrupt_configure+0xe2>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 802c0b0:	2003      	movs	r0, #3
 802c0b2:	0022      	movs	r2, r4
 802c0b4:	230f      	movs	r3, #15
 802c0b6:	4002      	ands	r2, r0
 802c0b8:	3204      	adds	r2, #4
 802c0ba:	0092      	lsls	r2, r2, #2
 802c0bc:	4093      	lsls	r3, r2
 802c0be:	10a2      	asrs	r2, r4, #2
 802c0c0:	4313      	orrs	r3, r2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x03U], SYSCFG_EXTICR1_EXTI0 << ((Line >> LL_SYSCFG_EXTI_REGISTER_PINPOS_SHFT) & 12UL), (Port << ((Line >> LL_SYSCFG_EXTI_REGISTER_PINPOS_SHFT) & 12UL)));
 802c0c2:	001a      	movs	r2, r3
 802c0c4:	4917      	ldr	r1, [pc, #92]	; (802c124 <gpio_stm32_pin_interrupt_configure+0xe8>)
 802c0c6:	4002      	ands	r2, r0
 802c0c8:	0092      	lsls	r2, r2, #2
 802c0ca:	1852      	adds	r2, r2, r1
 802c0cc:	6891      	ldr	r1, [r2, #8]
 802c0ce:	0c1b      	lsrs	r3, r3, #16
 802c0d0:	9101      	str	r1, [sp, #4]
 802c0d2:	210c      	movs	r1, #12
 802c0d4:	400b      	ands	r3, r1
 802c0d6:	3905      	subs	r1, #5
 802c0d8:	4099      	lsls	r1, r3
 802c0da:	9300      	str	r3, [sp, #0]
 802c0dc:	9b01      	ldr	r3, [sp, #4]
 802c0de:	68bf      	ldr	r7, [r7, #8]
 802c0e0:	438b      	bics	r3, r1
 802c0e2:	0019      	movs	r1, r3
 802c0e4:	9b00      	ldr	r3, [sp, #0]
 802c0e6:	409f      	lsls	r7, r3
	switch (trig) {
 802c0e8:	2380      	movs	r3, #128	; 0x80
 802c0ea:	4339      	orrs	r1, r7
 802c0ec:	6091      	str	r1, [r2, #8]
 802c0ee:	02db      	lsls	r3, r3, #11
		edge = STM32_EXTI_TRIG_RISING;
 802c0f0:	2101      	movs	r1, #1
	switch (trig) {
 802c0f2:	429d      	cmp	r5, r3
 802c0f4:	d009      	beq.n	802c10a <gpio_stm32_pin_interrupt_configure+0xce>
 802c0f6:	23c0      	movs	r3, #192	; 0xc0
		edge = STM32_EXTI_TRIG_BOTH;
 802c0f8:	0001      	movs	r1, r0
	switch (trig) {
 802c0fa:	02db      	lsls	r3, r3, #11
 802c0fc:	429d      	cmp	r5, r3
 802c0fe:	d004      	beq.n	802c10a <gpio_stm32_pin_interrupt_configure+0xce>
 802c100:	4b0a      	ldr	r3, [pc, #40]	; (802c12c <gpio_stm32_pin_interrupt_configure+0xf0>)
 802c102:	18ed      	adds	r5, r5, r3
 802c104:	426b      	negs	r3, r5
 802c106:	415d      	adcs	r5, r3
 802c108:	0069      	lsls	r1, r5, #1
	stm32_exti_trigger(pin, edge);
 802c10a:	0020      	movs	r0, r4
 802c10c:	f7f7 fb24 	bl	8023758 <stm32_exti_trigger>
	stm32_exti_enable(pin);
 802c110:	0020      	movs	r0, r4
 802c112:	f7f7 fb03 	bl	802371c <stm32_exti_enable>
 802c116:	e7bf      	b.n	802c098 <gpio_stm32_pin_interrupt_configure+0x5c>
		err = -ENOTSUP;
 802c118:	2686      	movs	r6, #134	; 0x86
		err = -EBUSY;
 802c11a:	4276      	negs	r6, r6
	return err;
 802c11c:	e7bc      	b.n	802c098 <gpio_stm32_pin_interrupt_configure+0x5c>
		err = -EBUSY;
 802c11e:	2610      	movs	r6, #16
 802c120:	e7fb      	b.n	802c11a <gpio_stm32_pin_interrupt_configure+0xde>
 802c122:	46c0      	nop			; (mov r8, r8)
 802c124:	40010000 	.word	0x40010000
 802c128:	08030483 	.word	0x08030483
 802c12c:	fffe0000 	.word	0xfffe0000

0802c130 <gpio_stm32_clock_request>:
{
 802c130:	b570      	push	{r4, r5, r6, lr}
					(clock_control_subsys_t *)&cfg->pclken);
 802c132:	6845      	ldr	r5, [r0, #4]
 802c134:	4c0c      	ldr	r4, [pc, #48]	; (802c168 <gpio_stm32_clock_request+0x38>)
 802c136:	350c      	adds	r5, #12
	if (on) {
 802c138:	2900      	cmp	r1, #0
 802c13a:	d00d      	beq.n	802c158 <gpio_stm32_clock_request+0x28>
 802c13c:	0020      	movs	r0, r4
 802c13e:	f004 fc69 	bl	8030a14 <z_device_ready>
 802c142:	2800      	cmp	r0, #0
 802c144:	d102      	bne.n	802c14c <gpio_stm32_clock_request+0x1c>
 802c146:	2013      	movs	r0, #19
 802c148:	4240      	negs	r0, r0
}
 802c14a:	bd70      	pop	{r4, r5, r6, pc}
 802c14c:	68a3      	ldr	r3, [r4, #8]
 802c14e:	681b      	ldr	r3, [r3, #0]
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->off(dev, sys);
 802c150:	0029      	movs	r1, r5
 802c152:	0020      	movs	r0, r4
 802c154:	4798      	blx	r3
 802c156:	e7f8      	b.n	802c14a <gpio_stm32_clock_request+0x1a>
 802c158:	0020      	movs	r0, r4
 802c15a:	f004 fc5b 	bl	8030a14 <z_device_ready>
 802c15e:	2800      	cmp	r0, #0
 802c160:	d0f1      	beq.n	802c146 <gpio_stm32_clock_request+0x16>
 802c162:	68a3      	ldr	r3, [r4, #8]
 802c164:	685b      	ldr	r3, [r3, #4]
 802c166:	e7f3      	b.n	802c150 <gpio_stm32_clock_request+0x20>
 802c168:	20008200 	.word	0x20008200

0802c16c <uart_stm32_set_baudrate>:

#define TIMEOUT 1000

static inline void uart_stm32_set_baudrate(const struct device *dev,
					   uint32_t baud_rate)
{
 802c16c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);

	uint32_t clock_rate;

	/* Get clock rate */
	if (clock_control_get_rate(data->clock,
 802c16e:	6903      	ldr	r3, [r0, #16]
	const struct uart_stm32_config *config = DEV_CFG(dev);
 802c170:	6846      	ldr	r6, [r0, #4]
{
 802c172:	000c      	movs	r4, r1
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 802c174:	6835      	ldr	r5, [r6, #0]
	if (clock_control_get_rate(data->clock,
 802c176:	685f      	ldr	r7, [r3, #4]
			       (clock_control_subsys_t *)&config->pclken,
 802c178:	3608      	adds	r6, #8
 802c17a:	0038      	movs	r0, r7
 802c17c:	f004 fc4a 	bl	8030a14 <z_device_ready>
 802c180:	2800      	cmp	r0, #0
 802c182:	d10a      	bne.n	802c19a <uart_stm32_set_baudrate+0x2e>
 802c184:	4b19      	ldr	r3, [pc, #100]	; (802c1ec <uart_stm32_set_baudrate+0x80>)
 802c186:	491a      	ldr	r1, [pc, #104]	; (802c1f0 <uart_stm32_set_baudrate+0x84>)
			       &clock_rate) < 0) {
		LOG_ERR("Failed call clock_control_get_rate");
 802c188:	481a      	ldr	r0, [pc, #104]	; (802c1f4 <uart_stm32_set_baudrate+0x88>)
 802c18a:	1ac9      	subs	r1, r1, r3
 802c18c:	2301      	movs	r3, #1
 802c18e:	08c9      	lsrs	r1, r1, #3
 802c190:	0189      	lsls	r1, r1, #6
 802c192:	4319      	orrs	r1, r3
 802c194:	f002 fafd 	bl	802e792 <log_0>
				     baud_rate);

#if HAS_LPUART_1
	}
#endif /* HAS_LPUART_1 */
}
 802c198:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 802c19a:	68bb      	ldr	r3, [r7, #8]
 802c19c:	68db      	ldr	r3, [r3, #12]
 802c19e:	2b00      	cmp	r3, #0
 802c1a0:	d0f0      	beq.n	802c184 <uart_stm32_set_baudrate+0x18>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 802c1a2:	0031      	movs	r1, r6
 802c1a4:	0038      	movs	r0, r7
 802c1a6:	aa01      	add	r2, sp, #4
 802c1a8:	4798      	blx	r3
	if (clock_control_get_rate(data->clock,
 802c1aa:	2800      	cmp	r0, #0
 802c1ac:	dbea      	blt.n	802c184 <uart_stm32_set_baudrate+0x18>
	if (IS_LPUART_INSTANCE(UartInstance)) {
 802c1ae:	4a12      	ldr	r2, [pc, #72]	; (802c1f8 <uart_stm32_set_baudrate+0x8c>)
		LL_LPUART_SetBaudRate(UartInstance,
 802c1b0:	9b01      	ldr	r3, [sp, #4]
	if (IS_LPUART_INSTANCE(UartInstance)) {
 802c1b2:	4295      	cmp	r5, r2
 802c1b4:	d10f      	bne.n	802c1d6 <uart_stm32_set_baudrate+0x6a>
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetBaudRate(USART_TypeDef *LPUARTx, uint32_t PeriphClk, uint32_t PrescalerValue,
                                           uint32_t BaudRate)
{
  if (BaudRate != 0U)
 802c1b6:	2c00      	cmp	r4, #0
 802c1b8:	d0ee      	beq.n	802c198 <uart_stm32_set_baudrate+0x2c>
  {
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, PrescalerValue, BaudRate);
 802c1ba:	2700      	movs	r7, #0
 802c1bc:	0e19      	lsrs	r1, r3, #24
 802c1be:	0218      	lsls	r0, r3, #8
 802c1c0:	0866      	lsrs	r6, r4, #1
 802c1c2:	1980      	adds	r0, r0, r6
 802c1c4:	4179      	adcs	r1, r7
 802c1c6:	0022      	movs	r2, r4
 802c1c8:	003b      	movs	r3, r7
 802c1ca:	f7f4 f96f 	bl	80204ac <__aeabi_uldivmod>
 802c1ce:	0300      	lsls	r0, r0, #12
 802c1d0:	0b00      	lsrs	r0, r0, #12
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    USARTx->BRR = brrtemp;
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 802c1d2:	60e8      	str	r0, [r5, #12]
 802c1d4:	e7e0      	b.n	802c198 <uart_stm32_set_baudrate+0x2c>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 802c1d6:	682a      	ldr	r2, [r5, #0]
 802c1d8:	4908      	ldr	r1, [pc, #32]	; (802c1fc <uart_stm32_set_baudrate+0x90>)
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 802c1da:	0860      	lsrs	r0, r4, #1
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 802c1dc:	400a      	ands	r2, r1
 802c1de:	602a      	str	r2, [r5, #0]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 802c1e0:	0021      	movs	r1, r4
 802c1e2:	18c0      	adds	r0, r0, r3
 802c1e4:	f7f3 ff94 	bl	8020110 <__udivsi3>
 802c1e8:	b280      	uxth	r0, r0
 802c1ea:	e7f2      	b.n	802c1d2 <uart_stm32_set_baudrate+0x66>
 802c1ec:	08031164 	.word	0x08031164
 802c1f0:	08031194 	.word	0x08031194
 802c1f4:	08031fd5 	.word	0x08031fd5
 802c1f8:	40008000 	.word	0x40008000
 802c1fc:	ffff7fff 	.word	0xffff7fff

0802c200 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 802c200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct uart_stm32_config *config = DEV_CFG(dev);
	struct uart_stm32_data *data = DEV_DATA(dev);
 802c202:	6903      	ldr	r3, [r0, #16]
	const struct uart_stm32_config *config = DEV_CFG(dev);
 802c204:	6846      	ldr	r6, [r0, #4]
	data->clock = clk;
 802c206:	4f38      	ldr	r7, [pc, #224]	; (802c2e8 <uart_stm32_init+0xe8>)
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 802c208:	6834      	ldr	r4, [r6, #0]
	struct uart_stm32_data *data = DEV_DATA(dev);
 802c20a:	9300      	str	r3, [sp, #0]
	data->clock = clk;
 802c20c:	605f      	str	r7, [r3, #4]
	int err;

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
			(clock_control_subsys_t *)&config->pclken) != 0) {
 802c20e:	0033      	movs	r3, r6
 802c210:	3308      	adds	r3, #8
{
 802c212:	0005      	movs	r5, r0
			(clock_control_subsys_t *)&config->pclken) != 0) {
 802c214:	9301      	str	r3, [sp, #4]
 802c216:	0038      	movs	r0, r7
 802c218:	f004 fbfc 	bl	8030a14 <z_device_ready>
 802c21c:	2800      	cmp	r0, #0
 802c21e:	d102      	bne.n	802c226 <uart_stm32_init+0x26>
		return -EIO;
 802c220:	2005      	movs	r0, #5
 802c222:	4240      	negs	r0, r0
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 802c224:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	return api->on(dev, sys);
 802c226:	68bb      	ldr	r3, [r7, #8]
 802c228:	0038      	movs	r0, r7
 802c22a:	681b      	ldr	r3, [r3, #0]
 802c22c:	9901      	ldr	r1, [sp, #4]
 802c22e:	4798      	blx	r3
 802c230:	1e07      	subs	r7, r0, #0
	if (clock_control_on(data->clock,
 802c232:	d1f5      	bne.n	802c220 <uart_stm32_init+0x20>
					 (uint32_t)UART_STRUCT(dev));
 802c234:	686b      	ldr	r3, [r5, #4]
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
 802c236:	69f1      	ldr	r1, [r6, #28]
 802c238:	681a      	ldr	r2, [r3, #0]
 802c23a:	69b0      	ldr	r0, [r6, #24]
 802c23c:	f7f7 fb2c 	bl	8023898 <stm32_dt_pinctrl_configure>
	if (err < 0) {
 802c240:	2800      	cmp	r0, #0
 802c242:	dbef      	blt.n	802c224 <uart_stm32_init+0x24>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 802c244:	2201      	movs	r2, #1
 802c246:	6823      	ldr	r3, [r4, #0]
	if (config->parity == 2) {
 802c248:	6971      	ldr	r1, [r6, #20]
 802c24a:	4393      	bics	r3, r2
 802c24c:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 802c24e:	6823      	ldr	r3, [r4, #0]
 802c250:	320b      	adds	r2, #11
 802c252:	4313      	orrs	r3, r2
 802c254:	6023      	str	r3, [r4, #0]
 802c256:	2902      	cmp	r1, #2
 802c258:	d03b      	beq.n	802c2d2 <uart_stm32_init+0xd2>
	} else if (config->parity == 1) {
 802c25a:	2901      	cmp	r1, #1
 802c25c:	d03f      	beq.n	802c2de <uart_stm32_init+0xde>
		ll_parity = LL_USART_PARITY_NONE;
 802c25e:	9701      	str	r7, [sp, #4]
		if (config->parity != 0) {
 802c260:	2900      	cmp	r1, #0
 802c262:	d009      	beq.n	802c278 <uart_stm32_init+0x78>
 802c264:	4b21      	ldr	r3, [pc, #132]	; (802c2ec <uart_stm32_init+0xec>)
 802c266:	4a22      	ldr	r2, [pc, #136]	; (802c2f0 <uart_stm32_init+0xf0>)
			LOG_WRN("Invalid parity setting '%d'."
 802c268:	4822      	ldr	r0, [pc, #136]	; (802c2f4 <uart_stm32_init+0xf4>)
 802c26a:	1ad2      	subs	r2, r2, r3
 802c26c:	2302      	movs	r3, #2
 802c26e:	08d2      	lsrs	r2, r2, #3
 802c270:	0192      	lsls	r2, r2, #6
 802c272:	431a      	orrs	r2, r3
 802c274:	f002 fa99 	bl	802e7aa <log_1>
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 802c278:	6820      	ldr	r0, [r4, #0]
 802c27a:	4b1f      	ldr	r3, [pc, #124]	; (802c2f8 <uart_stm32_init+0xf8>)
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 802c27c:	4a1f      	ldr	r2, [pc, #124]	; (802c2fc <uart_stm32_init+0xfc>)
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 802c27e:	4018      	ands	r0, r3
 802c280:	9b01      	ldr	r3, [sp, #4]
 802c282:	431f      	orrs	r7, r3
 802c284:	4307      	orrs	r7, r0
 802c286:	6027      	str	r7, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 802c288:	6863      	ldr	r3, [r4, #4]
 802c28a:	4013      	ands	r3, r2
 802c28c:	6063      	str	r3, [r4, #4]
	if (config->hw_flow_control) {
 802c28e:	7c33      	ldrb	r3, [r6, #16]
 802c290:	2b00      	cmp	r3, #0
 802c292:	d006      	beq.n	802c2a2 <uart_stm32_init+0xa2>
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 802c294:	21c0      	movs	r1, #192	; 0xc0
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 802c296:	686b      	ldr	r3, [r5, #4]
 802c298:	0089      	lsls	r1, r1, #2
 802c29a:	681a      	ldr	r2, [r3, #0]
 802c29c:	6893      	ldr	r3, [r2, #8]
 802c29e:	430b      	orrs	r3, r1
 802c2a0:	6093      	str	r3, [r2, #8]
	uart_stm32_set_baudrate(dev, data->baud_rate);
 802c2a2:	9b00      	ldr	r3, [sp, #0]
 802c2a4:	0028      	movs	r0, r5
 802c2a6:	6819      	ldr	r1, [r3, #0]
 802c2a8:	f7ff ff60 	bl	802c16c <uart_stm32_set_baudrate>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 802c2ac:	2301      	movs	r3, #1
 802c2ae:	6822      	ldr	r2, [r4, #0]
 802c2b0:	4313      	orrs	r3, r2
 802c2b2:	6023      	str	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 802c2b4:	2380      	movs	r3, #128	; 0x80
 802c2b6:	039b      	lsls	r3, r3, #14
 802c2b8:	69e2      	ldr	r2, [r4, #28]
 802c2ba:	421a      	tst	r2, r3
 802c2bc:	d0fc      	beq.n	802c2b8 <uart_stm32_init+0xb8>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 802c2be:	2380      	movs	r3, #128	; 0x80
 802c2c0:	03db      	lsls	r3, r3, #15
 802c2c2:	69e2      	ldr	r2, [r4, #28]
 802c2c4:	421a      	tst	r2, r3
 802c2c6:	d0fc      	beq.n	802c2c2 <uart_stm32_init+0xc2>
	data->pm_state = PM_DEVICE_ACTIVE_STATE;
 802c2c8:	2301      	movs	r3, #1
 802c2ca:	9a00      	ldr	r2, [sp, #0]
	return 0;
 802c2cc:	2000      	movs	r0, #0
	data->pm_state = PM_DEVICE_ACTIVE_STATE;
 802c2ce:	6093      	str	r3, [r2, #8]
	return 0;
 802c2d0:	e7a8      	b.n	802c224 <uart_stm32_init+0x24>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 802c2d2:	2780      	movs	r7, #128	; 0x80
		ll_parity = LL_USART_PARITY_EVEN;
 802c2d4:	2380      	movs	r3, #128	; 0x80
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 802c2d6:	017f      	lsls	r7, r7, #5
		ll_parity = LL_USART_PARITY_ODD;
 802c2d8:	00db      	lsls	r3, r3, #3
 802c2da:	9301      	str	r3, [sp, #4]
 802c2dc:	e7cc      	b.n	802c278 <uart_stm32_init+0x78>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 802c2de:	2780      	movs	r7, #128	; 0x80
		ll_parity = LL_USART_PARITY_ODD;
 802c2e0:	23c0      	movs	r3, #192	; 0xc0
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 802c2e2:	017f      	lsls	r7, r7, #5
 802c2e4:	e7f8      	b.n	802c2d8 <uart_stm32_init+0xd8>
 802c2e6:	46c0      	nop			; (mov r8, r8)
 802c2e8:	20008200 	.word	0x20008200
 802c2ec:	08031164 	.word	0x08031164
 802c2f0:	08031194 	.word	0x08031194
 802c2f4:	08031ff8 	.word	0x08031ff8
 802c2f8:	efffe9ff 	.word	0xefffe9ff
 802c2fc:	ffffcfff 	.word	0xffffcfff

0802c300 <uart_stm32_configure>:
{
 802c300:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uart_stm32_data *data = DEV_DATA(dev);
 802c302:	6903      	ldr	r3, [r0, #16]
{
 802c304:	b087      	sub	sp, #28
	struct uart_stm32_data *data = DEV_DATA(dev);
 802c306:	9305      	str	r3, [sp, #20]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 802c308:	6843      	ldr	r3, [r0, #4]
{
 802c30a:	000d      	movs	r5, r1
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 802c30c:	681c      	ldr	r4, [r3, #0]
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 802c30e:	790b      	ldrb	r3, [r1, #4]
	switch (parity) {
 802c310:	2b01      	cmp	r3, #1
 802c312:	d016      	beq.n	802c342 <uart_stm32_configure+0x42>
		return LL_USART_PARITY_NONE;
 802c314:	1e9a      	subs	r2, r3, #2
 802c316:	4251      	negs	r1, r2
 802c318:	414a      	adcs	r2, r1
 802c31a:	0292      	lsls	r2, r2, #10
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 802c31c:	7969      	ldrb	r1, [r5, #5]
	switch (parity) {
 802c31e:	9204      	str	r2, [sp, #16]
	switch (sb) {
 802c320:	2902      	cmp	r1, #2
 802c322:	d811      	bhi.n	802c348 <uart_stm32_configure+0x48>
 802c324:	4a46      	ldr	r2, [pc, #280]	; (802c440 <uart_stm32_configure+0x140>)
 802c326:	004f      	lsls	r7, r1, #1
 802c328:	5aba      	ldrh	r2, [r7, r2]
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 802c32a:	9203      	str	r2, [sp, #12]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 802c32c:	79aa      	ldrb	r2, [r5, #6]
	switch (db) {
 802c32e:	2a02      	cmp	r2, #2
 802c330:	d00d      	beq.n	802c34e <uart_stm32_configure+0x4e>
 802c332:	2a04      	cmp	r2, #4
 802c334:	d100      	bne.n	802c338 <uart_stm32_configure+0x38>
 802c336:	e07c      	b.n	802c432 <uart_stm32_configure+0x132>
			return LL_USART_DATAWIDTH_8B;
 802c338:	001f      	movs	r7, r3
 802c33a:	1e7e      	subs	r6, r7, #1
 802c33c:	41b7      	sbcs	r7, r6
 802c33e:	033f      	lsls	r7, r7, #12
 802c340:	e008      	b.n	802c354 <uart_stm32_configure+0x54>
	switch (parity) {
 802c342:	22c0      	movs	r2, #192	; 0xc0
 802c344:	00d2      	lsls	r2, r2, #3
 802c346:	e7e9      	b.n	802c31c <uart_stm32_configure+0x1c>
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 802c348:	2280      	movs	r2, #128	; 0x80
 802c34a:	0192      	lsls	r2, r2, #6
 802c34c:	e7ed      	b.n	802c32a <uart_stm32_configure+0x2a>
			return LL_USART_DATAWIDTH_8B;
 802c34e:	425f      	negs	r7, r3
 802c350:	415f      	adcs	r7, r3
 802c352:	073f      	lsls	r7, r7, #28
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 802c354:	79ee      	ldrb	r6, [r5, #7]
 802c356:	9601      	str	r6, [sp, #4]
	return LL_USART_HWCONTROL_NONE;
 802c358:	2600      	movs	r6, #0
 802c35a:	9602      	str	r6, [sp, #8]
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 802c35c:	9e01      	ldr	r6, [sp, #4]
 802c35e:	2e01      	cmp	r6, #1
 802c360:	d102      	bne.n	802c368 <uart_stm32_configure+0x68>
		return LL_USART_HWCONTROL_RTS_CTS;
 802c362:	26c0      	movs	r6, #192	; 0xc0
 802c364:	00b6      	lsls	r6, r6, #2
 802c366:	9602      	str	r6, [sp, #8]
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 802c368:	1ede      	subs	r6, r3, #3
 802c36a:	2e01      	cmp	r6, #1
 802c36c:	d964      	bls.n	802c438 <uart_stm32_configure+0x138>
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 802c36e:	2b00      	cmp	r3, #0
 802c370:	d001      	beq.n	802c376 <uart_stm32_configure+0x76>
 802c372:	2a04      	cmp	r2, #4
 802c374:	d060      	beq.n	802c438 <uart_stm32_configure+0x138>
	if (IS_LPUART_INSTANCE(UartInstance) &&
 802c376:	4b33      	ldr	r3, [pc, #204]	; (802c444 <uart_stm32_configure+0x144>)
 802c378:	429c      	cmp	r4, r3
 802c37a:	d102      	bne.n	802c382 <uart_stm32_configure+0x82>
 802c37c:	2602      	movs	r6, #2
 802c37e:	43b1      	bics	r1, r6
 802c380:	d05a      	beq.n	802c438 <uart_stm32_configure+0x138>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 802c382:	2a01      	cmp	r2, #1
 802c384:	d958      	bls.n	802c438 <uart_stm32_configure+0x138>
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 802c386:	2a04      	cmp	r2, #4
 802c388:	d056      	beq.n	802c438 <uart_stm32_configure+0x138>
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 802c38a:	9a01      	ldr	r2, [sp, #4]
 802c38c:	2a00      	cmp	r2, #0
 802c38e:	d00a      	beq.n	802c3a6 <uart_stm32_configure+0xa6>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 802c390:	4a2d      	ldr	r2, [pc, #180]	; (802c448 <uart_stm32_configure+0x148>)
 802c392:	4294      	cmp	r4, r2
 802c394:	d004      	beq.n	802c3a0 <uart_stm32_configure+0xa0>
 802c396:	4a2d      	ldr	r2, [pc, #180]	; (802c44c <uart_stm32_configure+0x14c>)
 802c398:	4294      	cmp	r4, r2
 802c39a:	d001      	beq.n	802c3a0 <uart_stm32_configure+0xa0>
 802c39c:	429c      	cmp	r4, r3
 802c39e:	d14b      	bne.n	802c438 <uart_stm32_configure+0x138>
 802c3a0:	9b01      	ldr	r3, [sp, #4]
 802c3a2:	2b01      	cmp	r3, #1
 802c3a4:	d148      	bne.n	802c438 <uart_stm32_configure+0x138>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 802c3a6:	2201      	movs	r2, #1
 802c3a8:	6823      	ldr	r3, [r4, #0]
 802c3aa:	4393      	bics	r3, r2
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 802c3ac:	22c0      	movs	r2, #192	; 0xc0
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 802c3ae:	6023      	str	r3, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 802c3b0:	6823      	ldr	r3, [r4, #0]
 802c3b2:	00d2      	lsls	r2, r2, #3
 802c3b4:	4013      	ands	r3, r2
	if (parity != uart_stm32_get_parity(dev)) {
 802c3b6:	9a04      	ldr	r2, [sp, #16]
 802c3b8:	429a      	cmp	r2, r3
 802c3ba:	d005      	beq.n	802c3c8 <uart_stm32_configure+0xc8>
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 802c3bc:	6823      	ldr	r3, [r4, #0]
 802c3be:	4a24      	ldr	r2, [pc, #144]	; (802c450 <uart_stm32_configure+0x150>)
 802c3c0:	4013      	ands	r3, r2
 802c3c2:	9a04      	ldr	r2, [sp, #16]
 802c3c4:	4313      	orrs	r3, r2
 802c3c6:	6023      	str	r3, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 802c3c8:	22c0      	movs	r2, #192	; 0xc0
 802c3ca:	6863      	ldr	r3, [r4, #4]
 802c3cc:	0192      	lsls	r2, r2, #6
 802c3ce:	4013      	ands	r3, r2
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 802c3d0:	9a03      	ldr	r2, [sp, #12]
 802c3d2:	429a      	cmp	r2, r3
 802c3d4:	d005      	beq.n	802c3e2 <uart_stm32_configure+0xe2>
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 802c3d6:	6863      	ldr	r3, [r4, #4]
 802c3d8:	4a1e      	ldr	r2, [pc, #120]	; (802c454 <uart_stm32_configure+0x154>)
 802c3da:	4013      	ands	r3, r2
 802c3dc:	9a03      	ldr	r2, [sp, #12]
 802c3de:	4313      	orrs	r3, r2
 802c3e0:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 802c3e2:	6823      	ldr	r3, [r4, #0]
 802c3e4:	4a1c      	ldr	r2, [pc, #112]	; (802c458 <uart_stm32_configure+0x158>)
 802c3e6:	4013      	ands	r3, r2
	if (databits != uart_stm32_get_databits(dev)) {
 802c3e8:	429f      	cmp	r7, r3
 802c3ea:	d004      	beq.n	802c3f6 <uart_stm32_configure+0xf6>
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 802c3ec:	6823      	ldr	r3, [r4, #0]
 802c3ee:	4a1b      	ldr	r2, [pc, #108]	; (802c45c <uart_stm32_configure+0x15c>)
 802c3f0:	4013      	ands	r3, r2
 802c3f2:	433b      	orrs	r3, r7
 802c3f4:	6023      	str	r3, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 802c3f6:	22c0      	movs	r2, #192	; 0xc0
 802c3f8:	68a3      	ldr	r3, [r4, #8]
 802c3fa:	0092      	lsls	r2, r2, #2
 802c3fc:	4013      	ands	r3, r2
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 802c3fe:	9a02      	ldr	r2, [sp, #8]
 802c400:	429a      	cmp	r2, r3
 802c402:	d005      	beq.n	802c410 <uart_stm32_configure+0x110>
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 802c404:	68a3      	ldr	r3, [r4, #8]
 802c406:	4a16      	ldr	r2, [pc, #88]	; (802c460 <uart_stm32_configure+0x160>)
 802c408:	4013      	ands	r3, r2
 802c40a:	9a02      	ldr	r2, [sp, #8]
 802c40c:	4313      	orrs	r3, r2
 802c40e:	60a3      	str	r3, [r4, #8]
	if (cfg->baudrate != data->baud_rate) {
 802c410:	9b05      	ldr	r3, [sp, #20]
 802c412:	6829      	ldr	r1, [r5, #0]
 802c414:	681b      	ldr	r3, [r3, #0]
 802c416:	4299      	cmp	r1, r3
 802c418:	d004      	beq.n	802c424 <uart_stm32_configure+0x124>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 802c41a:	f7ff fea7 	bl	802c16c <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 802c41e:	682b      	ldr	r3, [r5, #0]
 802c420:	9a05      	ldr	r2, [sp, #20]
 802c422:	6013      	str	r3, [r2, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 802c424:	2301      	movs	r3, #1
	return 0;
 802c426:	2000      	movs	r0, #0
 802c428:	6822      	ldr	r2, [r4, #0]
 802c42a:	4313      	orrs	r3, r2
 802c42c:	6023      	str	r3, [r4, #0]
};
 802c42e:	b007      	add	sp, #28
 802c430:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (db) {
 802c432:	2780      	movs	r7, #128	; 0x80
 802c434:	017f      	lsls	r7, r7, #5
 802c436:	e78d      	b.n	802c354 <uart_stm32_configure+0x54>
		return -ENOTSUP;
 802c438:	2086      	movs	r0, #134	; 0x86
 802c43a:	4240      	negs	r0, r0
 802c43c:	e7f7      	b.n	802c42e <uart_stm32_configure+0x12e>
 802c43e:	46c0      	nop			; (mov r8, r8)
 802c440:	080316cc 	.word	0x080316cc
 802c444:	40008000 	.word	0x40008000
 802c448:	40013800 	.word	0x40013800
 802c44c:	40004400 	.word	0x40004400
 802c450:	fffff9ff 	.word	0xfffff9ff
 802c454:	ffffcfff 	.word	0xffffcfff
 802c458:	10001000 	.word	0x10001000
 802c45c:	efffefff 	.word	0xefffefff
 802c460:	fffffcff 	.word	0xfffffcff

0802c464 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 802c464:	6903      	ldr	r3, [r0, #16]
{
 802c466:	b530      	push	{r4, r5, lr}
	cfg->baudrate = data->baud_rate;
 802c468:	681b      	ldr	r3, [r3, #0]
	switch (parity) {
 802c46a:	2480      	movs	r4, #128	; 0x80
	cfg->baudrate = data->baud_rate;
 802c46c:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 802c46e:	6843      	ldr	r3, [r0, #4]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 802c470:	20c0      	movs	r0, #192	; 0xc0
 802c472:	681a      	ldr	r2, [r3, #0]
 802c474:	00c0      	lsls	r0, r0, #3
 802c476:	6813      	ldr	r3, [r2, #0]
	switch (parity) {
 802c478:	00e4      	lsls	r4, r4, #3
 802c47a:	4003      	ands	r3, r0
 802c47c:	2002      	movs	r0, #2
 802c47e:	42a3      	cmp	r3, r4
 802c480:	d004      	beq.n	802c48c <uart_stm32_config_get+0x28>
 802c482:	481e      	ldr	r0, [pc, #120]	; (802c4fc <uart_stm32_config_get+0x98>)
 802c484:	181b      	adds	r3, r3, r0
 802c486:	4258      	negs	r0, r3
 802c488:	4143      	adcs	r3, r0
		return UART_CFG_PARITY_NONE;
 802c48a:	b2d8      	uxtb	r0, r3
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 802c48c:	24c0      	movs	r4, #192	; 0xc0
	switch (sb) {
 802c48e:	2580      	movs	r5, #128	; 0x80
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 802c490:	7108      	strb	r0, [r1, #4]
 802c492:	6853      	ldr	r3, [r2, #4]
 802c494:	01a4      	lsls	r4, r4, #6
		return UART_CFG_STOP_BITS_0_5;
 802c496:	2000      	movs	r0, #0
 802c498:	4023      	ands	r3, r4
	switch (sb) {
 802c49a:	016d      	lsls	r5, r5, #5
 802c49c:	42ab      	cmp	r3, r5
 802c49e:	d006      	beq.n	802c4ae <uart_stm32_config_get+0x4a>
		return UART_CFG_STOP_BITS_1_5;
 802c4a0:	3002      	adds	r0, #2
	switch (sb) {
 802c4a2:	42a3      	cmp	r3, r4
 802c4a4:	d003      	beq.n	802c4ae <uart_stm32_config_get+0x4a>
		return UART_CFG_STOP_BITS_2;
 802c4a6:	3001      	adds	r0, #1
	switch (sb) {
 802c4a8:	2b00      	cmp	r3, #0
 802c4aa:	d100      	bne.n	802c4ae <uart_stm32_config_get+0x4a>
 802c4ac:	3802      	subs	r0, #2
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 802c4ae:	24c0      	movs	r4, #192	; 0xc0
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 802c4b0:	7148      	strb	r0, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 802c4b2:	6810      	ldr	r0, [r2, #0]
 802c4b4:	4b12      	ldr	r3, [pc, #72]	; (802c500 <uart_stm32_config_get+0x9c>)
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 802c4b6:	00e4      	lsls	r4, r4, #3
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 802c4b8:	4018      	ands	r0, r3
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 802c4ba:	6813      	ldr	r3, [r2, #0]
 802c4bc:	4023      	ands	r3, r4
	switch (db) {
 802c4be:	2480      	movs	r4, #128	; 0x80
 802c4c0:	0164      	lsls	r4, r4, #5
 802c4c2:	42a0      	cmp	r0, r4
 802c4c4:	d012      	beq.n	802c4ec <uart_stm32_config_get+0x88>
 802c4c6:	2480      	movs	r4, #128	; 0x80
 802c4c8:	0564      	lsls	r4, r4, #21
 802c4ca:	42a0      	cmp	r0, r4
 802c4cc:	d112      	bne.n	802c4f4 <uart_stm32_config_get+0x90>
			return UART_CFG_DATA_BITS_6;
 802c4ce:	4258      	negs	r0, r3
 802c4d0:	4143      	adcs	r3, r0
 802c4d2:	3301      	adds	r3, #1
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 802c4d4:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 802c4d6:	6893      	ldr	r3, [r2, #8]
 802c4d8:	22c0      	movs	r2, #192	; 0xc0
 802c4da:	0092      	lsls	r2, r2, #2
 802c4dc:	4013      	ands	r3, r2
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 802c4de:	4a09      	ldr	r2, [pc, #36]	; (802c504 <uart_stm32_config_get+0xa0>)
}
 802c4e0:	2000      	movs	r0, #0
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 802c4e2:	189b      	adds	r3, r3, r2
 802c4e4:	425a      	negs	r2, r3
 802c4e6:	4153      	adcs	r3, r2
	cfg->flow_ctrl = uart_stm32_ll2cfg_hwctrl(
 802c4e8:	71cb      	strb	r3, [r1, #7]
}
 802c4ea:	bd30      	pop	{r4, r5, pc}
			return UART_CFG_DATA_BITS_9;
 802c4ec:	4258      	negs	r0, r3
 802c4ee:	4143      	adcs	r3, r0
 802c4f0:	3303      	adds	r3, #3
 802c4f2:	e7ef      	b.n	802c4d4 <uart_stm32_config_get+0x70>
			return UART_CFG_DATA_BITS_8;
 802c4f4:	4258      	negs	r0, r3
 802c4f6:	4143      	adcs	r3, r0
 802c4f8:	3302      	adds	r3, #2
 802c4fa:	e7eb      	b.n	802c4d4 <uart_stm32_config_get+0x70>
 802c4fc:	fffffa00 	.word	0xfffffa00
 802c500:	10001000 	.word	0x10001000
 802c504:	fffffd00 	.word	0xfffffd00

0802c508 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 802c508:	2380      	movs	r3, #128	; 0x80
 802c50a:	4a03      	ldr	r2, [pc, #12]	; (802c518 <LL_PWR_UnselectSUBGHZSPI_NSS+0x10>)
 802c50c:	021b      	lsls	r3, r3, #8
 802c50e:	6811      	ldr	r1, [r2, #0]
 802c510:	430b      	orrs	r3, r1
 802c512:	6013      	str	r3, [r2, #0]
}
 802c514:	4770      	bx	lr
 802c516:	46c0      	nop			; (mov r8, r8)
 802c518:	58000490 	.word	0x58000490

0802c51c <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 802c51c:	4a02      	ldr	r2, [pc, #8]	; (802c528 <LL_PWR_SelectSUBGHZSPI_NSS+0xc>)
 802c51e:	4903      	ldr	r1, [pc, #12]	; (802c52c <LL_PWR_SelectSUBGHZSPI_NSS+0x10>)
 802c520:	6813      	ldr	r3, [r2, #0]
 802c522:	400b      	ands	r3, r1
 802c524:	6013      	str	r3, [r2, #0]
}
 802c526:	4770      	bx	lr
 802c528:	58000490 	.word	0x58000490
 802c52c:	ffff7fff 	.word	0xffff7fff

0802c530 <SUBGHZSPI_Init>:
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 802c530:	21c1      	movs	r1, #193	; 0xc1
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 802c532:	2240      	movs	r2, #64	; 0x40
 802c534:	4b07      	ldr	r3, [pc, #28]	; (802c554 <SUBGHZSPI_Init+0x24>)
{
 802c536:	b510      	push	{r4, lr}
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 802c538:	681c      	ldr	r4, [r3, #0]
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 802c53a:	0089      	lsls	r1, r1, #2
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 802c53c:	4394      	bics	r4, r2
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 802c53e:	4301      	orrs	r1, r0
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 802c540:	601c      	str	r4, [r3, #0]
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 802c542:	6019      	str	r1, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 802c544:	21b8      	movs	r1, #184	; 0xb8
 802c546:	0149      	lsls	r1, r1, #5
 802c548:	6059      	str	r1, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 802c54a:	6819      	ldr	r1, [r3, #0]
 802c54c:	430a      	orrs	r2, r1
 802c54e:	601a      	str	r2, [r3, #0]
}
 802c550:	bd10      	pop	{r4, pc}
 802c552:	46c0      	nop			; (mov r8, r8)
 802c554:	58010000 	.word	0x58010000

0802c558 <HAL_SUBGHZ_Init>:
{
 802c558:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802c55a:	0004      	movs	r4, r0
    return status;
 802c55c:	2501      	movs	r5, #1
  if (hsubghz == NULL)
 802c55e:	2800      	cmp	r0, #0
 802c560:	d037      	beq.n	802c5d2 <HAL_SUBGHZ_Init+0x7a>
  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 802c562:	7983      	ldrb	r3, [r0, #6]
 802c564:	b2da      	uxtb	r2, r3
 802c566:	2b00      	cmp	r3, #0
 802c568:	d102      	bne.n	802c570 <HAL_SUBGHZ_Init+0x18>
    hsubghz->Lock = HAL_UNLOCKED;
 802c56a:	7142      	strb	r2, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 802c56c:	f7f7 fd84 	bl	8024078 <HAL_SUBGHZ_MspInit>
  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 802c570:	2302      	movs	r3, #2
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 802c572:	4a1d      	ldr	r2, [pc, #116]	; (802c5e8 <HAL_SUBGHZ_Init+0x90>)
 802c574:	71a3      	strb	r3, [r4, #6]
 802c576:	6813      	ldr	r3, [r2, #0]
 802c578:	491c      	ldr	r1, [pc, #112]	; (802c5ec <HAL_SUBGHZ_Init+0x94>)
 802c57a:	400b      	ands	r3, r1
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 802c57c:	211c      	movs	r1, #28
 802c57e:	6013      	str	r3, [r2, #0]
 802c580:	4b1b      	ldr	r3, [pc, #108]	; (802c5f0 <HAL_SUBGHZ_Init+0x98>)
 802c582:	681b      	ldr	r3, [r3, #0]
 802c584:	434b      	muls	r3, r1
 802c586:	3148      	adds	r1, #72	; 0x48
 802c588:	0cdb      	lsrs	r3, r3, #19
 802c58a:	434b      	muls	r3, r1
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 802c58c:	2180      	movs	r1, #128	; 0x80
 802c58e:	9301      	str	r3, [sp, #4]
 802c590:	01c9      	lsls	r1, r1, #7
    if (count == 0U)
 802c592:	9b01      	ldr	r3, [sp, #4]
 802c594:	2b00      	cmp	r3, #0
 802c596:	d11e      	bne.n	802c5d6 <HAL_SUBGHZ_Init+0x7e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 802c598:	2501      	movs	r5, #1
 802c59a:	60a5      	str	r5, [r4, #8]
  LL_PWR_UnselectSUBGHZSPI_NSS();
 802c59c:	f7ff ffb4 	bl	802c508 <LL_PWR_UnselectSUBGHZSPI_NSS>
  SET_BIT(EXTI->IMR2, ExtiLine);
 802c5a0:	2380      	movs	r3, #128	; 0x80
 802c5a2:	4a14      	ldr	r2, [pc, #80]	; (802c5f4 <HAL_SUBGHZ_Init+0x9c>)
 802c5a4:	015b      	lsls	r3, r3, #5
 802c5a6:	6811      	ldr	r1, [r2, #0]
 802c5a8:	430b      	orrs	r3, r1
 802c5aa:	6013      	str	r3, [r2, #0]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 802c5ac:	4a12      	ldr	r2, [pc, #72]	; (802c5f8 <HAL_SUBGHZ_Init+0xa0>)
 802c5ae:	4913      	ldr	r1, [pc, #76]	; (802c5fc <HAL_SUBGHZ_Init+0xa4>)
 802c5b0:	6893      	ldr	r3, [r2, #8]
 802c5b2:	400b      	ands	r3, r1
 802c5b4:	2180      	movs	r1, #128	; 0x80
 802c5b6:	0109      	lsls	r1, r1, #4
 802c5b8:	430b      	orrs	r3, r1
 802c5ba:	6093      	str	r3, [r2, #8]
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 802c5bc:	6191      	str	r1, [r2, #24]
  if (status == HAL_OK)
 802c5be:	2d00      	cmp	r5, #0
 802c5c0:	d105      	bne.n	802c5ce <HAL_SUBGHZ_Init+0x76>
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 802c5c2:	6820      	ldr	r0, [r4, #0]
 802c5c4:	f7ff ffb4 	bl	802c530 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 802c5c8:	2301      	movs	r3, #1
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 802c5ca:	60a5      	str	r5, [r4, #8]
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 802c5cc:	7123      	strb	r3, [r4, #4]
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 802c5ce:	2301      	movs	r3, #1
 802c5d0:	71a3      	strb	r3, [r4, #6]
}
 802c5d2:	0028      	movs	r0, r5
 802c5d4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    count--;
 802c5d6:	9b01      	ldr	r3, [sp, #4]
 802c5d8:	3b01      	subs	r3, #1
 802c5da:	9301      	str	r3, [sp, #4]
 802c5dc:	6813      	ldr	r3, [r2, #0]
 802c5de:	001d      	movs	r5, r3
 802c5e0:	400d      	ands	r5, r1
 802c5e2:	420b      	tst	r3, r1
 802c5e4:	d1d5      	bne.n	802c592 <HAL_SUBGHZ_Init+0x3a>
 802c5e6:	e7d9      	b.n	802c59c <HAL_SUBGHZ_Init+0x44>
 802c5e8:	58000094 	.word	0x58000094
 802c5ec:	ffff7fff 	.word	0xffff7fff
 802c5f0:	200080c4 	.word	0x200080c4
 802c5f4:	58000890 	.word	0x58000890
 802c5f8:	58000400 	.word	0x58000400
 802c5fc:	fffff7ff 	.word	0xfffff7ff

0802c600 <SUBGHZSPI_Transmit>:
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 802c600:	231c      	movs	r3, #28
{
 802c602:	b537      	push	{r0, r1, r2, r4, r5, lr}
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 802c604:	4d17      	ldr	r5, [pc, #92]	; (802c664 <SUBGHZSPI_Transmit+0x64>)
{
 802c606:	0002      	movs	r2, r0
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 802c608:	6828      	ldr	r0, [r5, #0]
 802c60a:	4c17      	ldr	r4, [pc, #92]	; (802c668 <SUBGHZSPI_Transmit+0x68>)
 802c60c:	4343      	muls	r3, r0
 802c60e:	2064      	movs	r0, #100	; 0x64
 802c610:	0cdb      	lsrs	r3, r3, #19
 802c612:	4343      	muls	r3, r0
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 802c614:	3862      	subs	r0, #98	; 0x62
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 802c616:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 802c618:	9b01      	ldr	r3, [sp, #4]
 802c61a:	2b00      	cmp	r3, #0
 802c61c:	d112      	bne.n	802c644 <SUBGHZSPI_Transmit+0x44>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 802c61e:	2001      	movs	r0, #1
 802c620:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 802c622:	4b12      	ldr	r3, [pc, #72]	; (802c66c <SUBGHZSPI_Transmit+0x6c>)
 802c624:	7019      	strb	r1, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 802c626:	211c      	movs	r1, #28
 802c628:	682b      	ldr	r3, [r5, #0]
 802c62a:	434b      	muls	r3, r1
 802c62c:	3148      	adds	r1, #72	; 0x48
 802c62e:	0cdb      	lsrs	r3, r3, #19
 802c630:	434b      	muls	r3, r1
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 802c632:	3963      	subs	r1, #99	; 0x63
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 802c634:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 802c636:	9b01      	ldr	r3, [sp, #4]
 802c638:	2b00      	cmp	r3, #0
 802c63a:	d10b      	bne.n	802c654 <SUBGHZSPI_Transmit+0x54>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 802c63c:	2001      	movs	r0, #1
 802c63e:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 802c640:	68e3      	ldr	r3, [r4, #12]

  return status;
}
 802c642:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    count--;
 802c644:	9b01      	ldr	r3, [sp, #4]
 802c646:	3b01      	subs	r3, #1
 802c648:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 802c64a:	68a3      	ldr	r3, [r4, #8]
 802c64c:	4203      	tst	r3, r0
 802c64e:	d0e3      	beq.n	802c618 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 802c650:	2000      	movs	r0, #0
 802c652:	e7e6      	b.n	802c622 <SUBGHZSPI_Transmit+0x22>
    count--;
 802c654:	9b01      	ldr	r3, [sp, #4]
 802c656:	3b01      	subs	r3, #1
 802c658:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 802c65a:	68a3      	ldr	r3, [r4, #8]
 802c65c:	420b      	tst	r3, r1
 802c65e:	d0ea      	beq.n	802c636 <SUBGHZSPI_Transmit+0x36>
 802c660:	e7ee      	b.n	802c640 <SUBGHZSPI_Transmit+0x40>
 802c662:	46c0      	nop			; (mov r8, r8)
 802c664:	200080c4 	.word	0x200080c4
 802c668:	58010000 	.word	0x58010000
 802c66c:	5801000c 	.word	0x5801000c

0802c670 <SUBGHZSPI_Receive>:
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 802c670:	231c      	movs	r3, #28
{
 802c672:	b573      	push	{r0, r1, r4, r5, r6, lr}
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 802c674:	4d18      	ldr	r5, [pc, #96]	; (802c6d8 <SUBGHZSPI_Receive+0x68>)
{
 802c676:	0002      	movs	r2, r0
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 802c678:	6828      	ldr	r0, [r5, #0]
 802c67a:	4c18      	ldr	r4, [pc, #96]	; (802c6dc <SUBGHZSPI_Receive+0x6c>)
 802c67c:	4343      	muls	r3, r0
 802c67e:	2064      	movs	r0, #100	; 0x64
 802c680:	0cdb      	lsrs	r3, r3, #19
 802c682:	4343      	muls	r3, r0
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 802c684:	3862      	subs	r0, #98	; 0x62
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 802c686:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 802c688:	9b01      	ldr	r3, [sp, #4]
 802c68a:	2b00      	cmp	r3, #0
 802c68c:	d114      	bne.n	802c6b8 <SUBGHZSPI_Receive+0x48>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 802c68e:	2001      	movs	r0, #1
 802c690:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 802c692:	26ff      	movs	r6, #255	; 0xff
 802c694:	4b12      	ldr	r3, [pc, #72]	; (802c6e0 <SUBGHZSPI_Receive+0x70>)
 802c696:	701e      	strb	r6, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 802c698:	682b      	ldr	r3, [r5, #0]
 802c69a:	251c      	movs	r5, #28
 802c69c:	436b      	muls	r3, r5
 802c69e:	3548      	adds	r5, #72	; 0x48
 802c6a0:	0cdb      	lsrs	r3, r3, #19
 802c6a2:	436b      	muls	r3, r5
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 802c6a4:	3d63      	subs	r5, #99	; 0x63
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 802c6a6:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 802c6a8:	9b01      	ldr	r3, [sp, #4]
 802c6aa:	2b00      	cmp	r3, #0
 802c6ac:	d10c      	bne.n	802c6c8 <SUBGHZSPI_Receive+0x58>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 802c6ae:	2001      	movs	r0, #1
 802c6b0:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 802c6b2:	68e3      	ldr	r3, [r4, #12]
 802c6b4:	700b      	strb	r3, [r1, #0]

  return status;
}
 802c6b6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    count--;
 802c6b8:	9b01      	ldr	r3, [sp, #4]
 802c6ba:	3b01      	subs	r3, #1
 802c6bc:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 802c6be:	68a3      	ldr	r3, [r4, #8]
 802c6c0:	4203      	tst	r3, r0
 802c6c2:	d0e1      	beq.n	802c688 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 802c6c4:	2000      	movs	r0, #0
 802c6c6:	e7e4      	b.n	802c692 <SUBGHZSPI_Receive+0x22>
    count--;
 802c6c8:	9b01      	ldr	r3, [sp, #4]
 802c6ca:	3b01      	subs	r3, #1
 802c6cc:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 802c6ce:	68a3      	ldr	r3, [r4, #8]
 802c6d0:	422b      	tst	r3, r5
 802c6d2:	d0e9      	beq.n	802c6a8 <SUBGHZSPI_Receive+0x38>
 802c6d4:	e7ed      	b.n	802c6b2 <SUBGHZSPI_Receive+0x42>
 802c6d6:	46c0      	nop			; (mov r8, r8)
 802c6d8:	200080c4 	.word	0x200080c4
 802c6dc:	58010000 	.word	0x58010000
 802c6e0:	5801000c 	.word	0x5801000c

0802c6e4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 802c6e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 802c6e6:	2118      	movs	r1, #24
{
 802c6e8:	0002      	movs	r2, r0
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 802c6ea:	2604      	movs	r6, #4
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 802c6ec:	2502      	movs	r5, #2
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 802c6ee:	4b0e      	ldr	r3, [pc, #56]	; (802c728 <SUBGHZ_WaitOnBusy+0x44>)
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 802c6f0:	4c0e      	ldr	r4, [pc, #56]	; (802c72c <SUBGHZ_WaitOnBusy+0x48>)
 802c6f2:	681b      	ldr	r3, [r3, #0]
 802c6f4:	434b      	muls	r3, r1
 802c6f6:	314c      	adds	r1, #76	; 0x4c
 802c6f8:	0d1b      	lsrs	r3, r3, #20
 802c6fa:	434b      	muls	r3, r1
 802c6fc:	9301      	str	r3, [sp, #4]
 802c6fe:	6963      	ldr	r3, [r4, #20]
  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
 802c700:	9901      	ldr	r1, [sp, #4]
 802c702:	4033      	ands	r3, r6
 802c704:	2900      	cmp	r1, #0
 802c706:	d103      	bne.n	802c710 <SUBGHZ_WaitOnBusy+0x2c>
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 802c708:	2302      	movs	r3, #2
      status  = HAL_ERROR;
 802c70a:	2001      	movs	r0, #1
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 802c70c:	6093      	str	r3, [r2, #8]
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 802c70e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    count--;
 802c710:	9901      	ldr	r1, [sp, #4]
 802c712:	3901      	subs	r1, #1
 802c714:	9101      	str	r1, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 802c716:	6961      	ldr	r1, [r4, #20]
 802c718:	0008      	movs	r0, r1
 802c71a:	4028      	ands	r0, r5
 802c71c:	4229      	tst	r1, r5
 802c71e:	d0f6      	beq.n	802c70e <SUBGHZ_WaitOnBusy+0x2a>
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 802c720:	2b00      	cmp	r3, #0
 802c722:	d1ec      	bne.n	802c6fe <SUBGHZ_WaitOnBusy+0x1a>
  status = HAL_OK;
 802c724:	0018      	movs	r0, r3
 802c726:	e7f2      	b.n	802c70e <SUBGHZ_WaitOnBusy+0x2a>
 802c728:	200080c4 	.word	0x200080c4
 802c72c:	58000400 	.word	0x58000400

0802c730 <LL_SetFlashLatency>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Latency has been modified
  *          - ERROR: Latency cannot be modified
  */
ErrorStatus LL_SetFlashLatency(uint32_t HCLK3_Frequency)
{
 802c730:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* Flash Clock source (HCLK3) range in MHz with a VCORE is range2 */
  const uint32_t UTILS_CLK_SRC_RANGE_VOS2[] = {6000000U, 12000000U, UTILS_MAX_FREQUENCY_SCALE2};

  /* Flash Latency range */
  const uint32_t UTILS_LATENCY_RANGE[] = {LL_FLASH_LATENCY_0, LL_FLASH_LATENCY_1, LL_FLASH_LATENCY_2};
 802c732:	a901      	add	r1, sp, #4
 802c734:	000a      	movs	r2, r1
 802c736:	4b1e      	ldr	r3, [pc, #120]	; (802c7b0 <LL_SetFlashLatency+0x80>)
 802c738:	cb70      	ldmia	r3!, {r4, r5, r6}
 802c73a:	c270      	stmia	r2!, {r4, r5, r6}

  /* Frequency cannot be equal to 0 */
  if (HCLK3_Frequency != 0U)
 802c73c:	2800      	cmp	r0, #0
 802c73e:	d025      	beq.n	802c78c <LL_SetFlashLatency+0x5c>
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 802c740:	22c0      	movs	r2, #192	; 0xc0
 802c742:	4b1c      	ldr	r3, [pc, #112]	; (802c7b4 <LL_SetFlashLatency+0x84>)
 802c744:	00d2      	lsls	r2, r2, #3
 802c746:	681b      	ldr	r3, [r3, #0]
 802c748:	4013      	ands	r3, r2
  {
    if (LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 802c74a:	2280      	movs	r2, #128	; 0x80
 802c74c:	0092      	lsls	r2, r2, #2
 802c74e:	4293      	cmp	r3, r2
 802c750:	d11f      	bne.n	802c792 <LL_SetFlashLatency+0x62>
    {
      /* Frequency cannot be greater than a defined max clock */
      if (HCLK3_Frequency <= UTILS_MAX_FREQUENCY_SCALE1)
 802c752:	4b19      	ldr	r3, [pc, #100]	; (802c7b8 <LL_SetFlashLatency+0x88>)
 802c754:	4298      	cmp	r0, r3
 802c756:	d819      	bhi.n	802c78c <LL_SetFlashLatency+0x5c>
      {
        for (index = 0; index < COUNTOF(UTILS_CLK_SRC_RANGE_VOS1); index++)
        {
          if (HCLK3_Frequency <= UTILS_CLK_SRC_RANGE_VOS1[index])
 802c758:	4b18      	ldr	r3, [pc, #96]	; (802c7bc <LL_SetFlashLatency+0x8c>)
 802c75a:	2200      	movs	r2, #0
 802c75c:	4298      	cmp	r0, r3
 802c75e:	d904      	bls.n	802c76a <LL_SetFlashLatency+0x3a>
 802c760:	4a17      	ldr	r2, [pc, #92]	; (802c7c0 <LL_SetFlashLatency+0x90>)
 802c762:	4282      	cmp	r2, r0
 802c764:	4192      	sbcs	r2, r2
 802c766:	4252      	negs	r2, r2
 802c768:	3201      	adds	r2, #1
          {
            latency = UTILS_LATENCY_RANGE[index];
 802c76a:	0092      	lsls	r2, r2, #2
 802c76c:	588a      	ldr	r2, [r1, r2]
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 802c76e:	2407      	movs	r4, #7
 802c770:	4914      	ldr	r1, [pc, #80]	; (802c7c4 <LL_SetFlashLatency+0x94>)
      do
      {
        /* Wait for Flash latency to be updated */
        getlatency = LL_FLASH_GetLatency();
        timeout--;
      } while ((getlatency != latency) && (timeout > 0U));
 802c772:	2001      	movs	r0, #1
 802c774:	680b      	ldr	r3, [r1, #0]
 802c776:	43a3      	bics	r3, r4
 802c778:	4313      	orrs	r3, r2
 802c77a:	600b      	str	r3, [r1, #0]
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 802c77c:	680b      	ldr	r3, [r1, #0]
 802c77e:	4023      	ands	r3, r4
 802c780:	429a      	cmp	r2, r3
 802c782:	d004      	beq.n	802c78e <LL_SetFlashLatency+0x5e>
 802c784:	680b      	ldr	r3, [r1, #0]
 802c786:	4023      	ands	r3, r4
 802c788:	429a      	cmp	r2, r3
 802c78a:	d000      	beq.n	802c78e <LL_SetFlashLatency+0x5e>
  ErrorStatus status = ERROR;
 802c78c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 802c78e:	b004      	add	sp, #16
 802c790:	bd70      	pop	{r4, r5, r6, pc}
      if (HCLK3_Frequency <= UTILS_MAX_FREQUENCY_SCALE2)
 802c792:	4b0d      	ldr	r3, [pc, #52]	; (802c7c8 <LL_SetFlashLatency+0x98>)
 802c794:	4298      	cmp	r0, r3
 802c796:	d8f9      	bhi.n	802c78c <LL_SetFlashLatency+0x5c>
          if (HCLK3_Frequency <= UTILS_CLK_SRC_RANGE_VOS2[index])
 802c798:	4a0c      	ldr	r2, [pc, #48]	; (802c7cc <LL_SetFlashLatency+0x9c>)
 802c79a:	2300      	movs	r3, #0
 802c79c:	4290      	cmp	r0, r2
 802c79e:	d904      	bls.n	802c7aa <LL_SetFlashLatency+0x7a>
 802c7a0:	4b0b      	ldr	r3, [pc, #44]	; (802c7d0 <LL_SetFlashLatency+0xa0>)
 802c7a2:	4283      	cmp	r3, r0
 802c7a4:	419b      	sbcs	r3, r3
 802c7a6:	425b      	negs	r3, r3
 802c7a8:	3301      	adds	r3, #1
            latency = UTILS_LATENCY_RANGE[index];
 802c7aa:	009b      	lsls	r3, r3, #2
 802c7ac:	58ca      	ldr	r2, [r1, r3]
    if (status != ERROR)
 802c7ae:	e7de      	b.n	802c76e <LL_SetFlashLatency+0x3e>
 802c7b0:	08031208 	.word	0x08031208
 802c7b4:	58000400 	.word	0x58000400
 802c7b8:	02dc6c00 	.word	0x02dc6c00
 802c7bc:	0112a880 	.word	0x0112a880
 802c7c0:	02255100 	.word	0x02255100
 802c7c4:	58004000 	.word	0x58004000
 802c7c8:	00f42400 	.word	0x00f42400
 802c7cc:	005b8d80 	.word	0x005b8d80
 802c7d0:	00b71b00 	.word	0x00b71b00

0802c7d4 <UTILS_EnablePLLAndSwitchSystem>:
  *          - SUCCESS: No problem to switch system to PLL
  *          - ERROR: Problem to switch system to PLL
  */
static ErrorStatus UTILS_EnablePLLAndSwitchSystem(uint32_t SYSCLK_Frequency,
                                                  LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 802c7d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHB3CLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK3 frequency based on SYSCLK_Frequency target */
  hclks_frequency_target = __LL_RCC_CALC_HCLK3_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHB3CLKDivider);
 802c7d6:	270f      	movs	r7, #15
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 802c7d8:	26b0      	movs	r6, #176	; 0xb0
 802c7da:	688b      	ldr	r3, [r1, #8]
 802c7dc:	4a3a      	ldr	r2, [pc, #232]	; (802c8c8 <UTILS_EnablePLLAndSwitchSystem+0xf4>)
 802c7de:	091b      	lsrs	r3, r3, #4
 802c7e0:	403b      	ands	r3, r7
 802c7e2:	009b      	lsls	r3, r3, #2
{
 802c7e4:	000c      	movs	r4, r1
  hclks_frequency_target = __LL_RCC_CALC_HCLK3_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHB3CLKDivider);
 802c7e6:	5899      	ldr	r1, [r3, r2]
{
 802c7e8:	9001      	str	r0, [sp, #4]
  hclks_frequency_target = __LL_RCC_CALC_HCLK3_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHB3CLKDivider);
 802c7ea:	f7f3 fc91 	bl	8020110 <__udivsi3>
 802c7ee:	05f6      	lsls	r6, r6, #23
 802c7f0:	68b3      	ldr	r3, [r6, #8]

  /* Calculate HCLK3 frequency current */
  sysclk_current = (SystemCoreClock * AHBPrescTable[(LL_RCC_GetAHBPrescaler() & RCC_CFGR_HPRE) >>  RCC_CFGR_HPRE_Pos]);
 802c7f2:	4935      	ldr	r1, [pc, #212]	; (802c8c8 <UTILS_EnablePLLAndSwitchSystem+0xf4>)
 802c7f4:	091b      	lsrs	r3, r3, #4
 802c7f6:	403b      	ands	r3, r7
 802c7f8:	009b      	lsls	r3, r3, #2
 802c7fa:	585b      	ldr	r3, [r3, r1]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 802c7fc:	4d33      	ldr	r5, [pc, #204]	; (802c8cc <UTILS_EnablePLLAndSwitchSystem+0xf8>)
 802c7fe:	4934      	ldr	r1, [pc, #208]	; (802c8d0 <UTILS_EnablePLLAndSwitchSystem+0xfc>)
 802c800:	68ea      	ldr	r2, [r5, #12]
  hclks_frequency_target = __LL_RCC_CALC_HCLK3_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHB3CLKDivider);
 802c802:	9000      	str	r0, [sp, #0]
  sysclk_current = (SystemCoreClock * AHBPrescTable[(LL_RCC_GetAHBPrescaler() & RCC_CFGR_HPRE) >>  RCC_CFGR_HPRE_Pos]);
 802c804:	6808      	ldr	r0, [r1, #0]
  hclks_frequency_current = __LL_RCC_CALC_HCLK3_FREQ(sysclk_current, LL_RCC_GetAHB3Prescaler());
 802c806:	4017      	ands	r7, r2
  sysclk_current = (SystemCoreClock * AHBPrescTable[(LL_RCC_GetAHBPrescaler() & RCC_CFGR_HPRE) >>  RCC_CFGR_HPRE_Pos]);
 802c808:	4358      	muls	r0, r3
  hclks_frequency_current = __LL_RCC_CALC_HCLK3_FREQ(sysclk_current, LL_RCC_GetAHB3Prescaler());
 802c80a:	4b2f      	ldr	r3, [pc, #188]	; (802c8c8 <UTILS_EnablePLLAndSwitchSystem+0xf4>)
 802c80c:	00bf      	lsls	r7, r7, #2
 802c80e:	58f9      	ldr	r1, [r7, r3]
 802c810:	f7f3 fc7e 	bl	8020110 <__udivsi3>

  /* Increasing the number of wait states because of higher CPU frequency */
  if (hclks_frequency_current < hclks_frequency_target)
 802c814:	9b00      	ldr	r3, [sp, #0]
  hclks_frequency_current = __LL_RCC_CALC_HCLK3_FREQ(sysclk_current, LL_RCC_GetAHB3Prescaler());
 802c816:	0007      	movs	r7, r0
  if (hclks_frequency_current < hclks_frequency_target)
 802c818:	4283      	cmp	r3, r0
 802c81a:	d849      	bhi.n	802c8b0 <UTILS_EnablePLLAndSwitchSystem+0xdc>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 802c81c:	2380      	movs	r3, #128	; 0x80
 802c81e:	6832      	ldr	r2, [r6, #0]
 802c820:	045b      	lsls	r3, r3, #17
 802c822:	4313      	orrs	r3, r2
 802c824:	6033      	str	r3, [r6, #0]
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 802c826:	2380      	movs	r3, #128	; 0x80
 802c828:	68f2      	ldr	r2, [r6, #12]
 802c82a:	055b      	lsls	r3, r3, #21
 802c82c:	4313      	orrs	r3, r2
 802c82e:	60f3      	str	r3, [r6, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 802c830:	2280      	movs	r2, #128	; 0x80
 802c832:	23b0      	movs	r3, #176	; 0xb0
 802c834:	0492      	lsls	r2, r2, #18
 802c836:	05db      	lsls	r3, r3, #23
 802c838:	6819      	ldr	r1, [r3, #0]
 802c83a:	4211      	tst	r1, r2
 802c83c:	d0fc      	beq.n	802c838 <UTILS_EnablePLLAndSwitchSystem+0x64>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 802c83e:	21f0      	movs	r1, #240	; 0xf0
 802c840:	689a      	ldr	r2, [r3, #8]
 802c842:	6820      	ldr	r0, [r4, #0]
 802c844:	438a      	bics	r2, r1
 802c846:	4302      	orrs	r2, r0
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 802c848:	200f      	movs	r0, #15
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 802c84a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 802c84c:	68ea      	ldr	r2, [r5, #12]
 802c84e:	438a      	bics	r2, r1
 802c850:	6861      	ldr	r1, [r4, #4]
 802c852:	430a      	orrs	r2, r1
 802c854:	60ea      	str	r2, [r5, #12]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 802c856:	68e9      	ldr	r1, [r5, #12]
 802c858:	68a2      	ldr	r2, [r4, #8]
 802c85a:	4381      	bics	r1, r0
 802c85c:	0912      	lsrs	r2, r2, #4
 802c85e:	430a      	orrs	r2, r1
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 802c860:	2103      	movs	r1, #3
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 802c862:	60ea      	str	r2, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 802c864:	689a      	ldr	r2, [r3, #8]
 802c866:	430a      	orrs	r2, r1
 802c868:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 802c86a:	23b0      	movs	r3, #176	; 0xb0
 802c86c:	3109      	adds	r1, #9
 802c86e:	05db      	lsls	r3, r3, #23
 802c870:	689a      	ldr	r2, [r3, #8]
 802c872:	400a      	ands	r2, r1
#if defined(DUAL_CORE)
    LL_C2_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->CPU2CLKDivider);
#endif /* DUAL_CORE */
    LL_RCC_SetAHB3Prescaler(UTILS_ClkInitStruct->AHB3CLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 802c874:	2a0c      	cmp	r2, #12
 802c876:	d1fb      	bne.n	802c870 <UTILS_EnablePLLAndSwitchSystem+0x9c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 802c878:	689a      	ldr	r2, [r3, #8]
 802c87a:	4916      	ldr	r1, [pc, #88]	; (802c8d4 <UTILS_EnablePLLAndSwitchSystem+0x100>)
 802c87c:	400a      	ands	r2, r1
 802c87e:	68e1      	ldr	r1, [r4, #12]
 802c880:	430a      	orrs	r2, r1
 802c882:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 802c884:	689a      	ldr	r2, [r3, #8]
 802c886:	4914      	ldr	r1, [pc, #80]	; (802c8d8 <UTILS_EnablePLLAndSwitchSystem+0x104>)
 802c888:	400a      	ands	r2, r1
 802c88a:	6921      	ldr	r1, [r4, #16]
 802c88c:	430a      	orrs	r2, r1
 802c88e:	609a      	str	r2, [r3, #8]
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (hclks_frequency_current > hclks_frequency_target)
 802c890:	9b00      	ldr	r3, [sp, #0]
 802c892:	42bb      	cmp	r3, r7
 802c894:	d312      	bcc.n	802c8bc <UTILS_EnablePLLAndSwitchSystem+0xe8>

  /* Update SystemCoreClock variable */
  if (status == SUCCESS)
  {
#if defined(CORE_CM0PLUS) && defined(DUAL_CORE)
    LL_SetSystemCoreClock(__LL_RCC_CALC_HCLK2_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->CPU2CLKDivider));
 802c896:	6863      	ldr	r3, [r4, #4]
 802c898:	4a0b      	ldr	r2, [pc, #44]	; (802c8c8 <UTILS_EnablePLLAndSwitchSystem+0xf4>)
 802c89a:	061b      	lsls	r3, r3, #24
 802c89c:	0f1b      	lsrs	r3, r3, #28
 802c89e:	009b      	lsls	r3, r3, #2
 802c8a0:	5899      	ldr	r1, [r3, r2]
 802c8a2:	9801      	ldr	r0, [sp, #4]
 802c8a4:	f7f3 fc34 	bl	8020110 <__udivsi3>
  SystemCoreClock = HCLKFrequency;
 802c8a8:	4b09      	ldr	r3, [pc, #36]	; (802c8d0 <UTILS_EnablePLLAndSwitchSystem+0xfc>)
 802c8aa:	6018      	str	r0, [r3, #0]
}
 802c8ac:	2001      	movs	r0, #1
 802c8ae:	e004      	b.n	802c8ba <UTILS_EnablePLLAndSwitchSystem+0xe6>
    status = LL_SetFlashLatency(hclks_frequency_target);
 802c8b0:	9800      	ldr	r0, [sp, #0]
 802c8b2:	f7ff ff3d 	bl	802c730 <LL_SetFlashLatency>
  if (status == SUCCESS)
 802c8b6:	2801      	cmp	r0, #1
 802c8b8:	d0b0      	beq.n	802c81c <UTILS_EnablePLLAndSwitchSystem+0x48>
    LL_SetSystemCoreClock(__LL_RCC_CALC_HCLK1_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->CPU1CLKDivider));
#endif /* CORE_CM0PLUS && DUAL_CORE */
  }

  return status;
}
 802c8ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    status = LL_SetFlashLatency(hclks_frequency_target);
 802c8bc:	9800      	ldr	r0, [sp, #0]
 802c8be:	f7ff ff37 	bl	802c730 <LL_SetFlashLatency>
  if (status == SUCCESS)
 802c8c2:	2801      	cmp	r0, #1
 802c8c4:	d1f9      	bne.n	802c8ba <UTILS_EnablePLLAndSwitchSystem+0xe6>
 802c8c6:	e7e6      	b.n	802c896 <UTILS_EnablePLLAndSwitchSystem+0xc2>
 802c8c8:	080315fc 	.word	0x080315fc
 802c8cc:	580000fc 	.word	0x580000fc
 802c8d0:	200080c4 	.word	0x200080c4
 802c8d4:	fffff8ff 	.word	0xfffff8ff
 802c8d8:	ffffc7ff 	.word	0xffffc7ff

0802c8dc <LL_PLL_ConfigSystemClock_HSE>:
{
 802c8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c8de:	0006      	movs	r6, r0
 802c8e0:	000d      	movs	r5, r1
  if (UTILS_PLL_IsBusy() == SUCCESS)
 802c8e2:	f004 f890 	bl	8030a06 <UTILS_PLL_IsBusy>
    status = ERROR;
 802c8e6:	2700      	movs	r7, #0
  if (UTILS_PLL_IsBusy() == SUCCESS)
 802c8e8:	2801      	cmp	r0, #1
 802c8ea:	d132      	bne.n	802c952 <LL_PLL_ConfigSystemClock_HSE+0x76>
    pllrfreq = UTILS_GetPLLOutputFrequency(HSE_VALUE, UTILS_PLLInitStruct);
 802c8ec:	0031      	movs	r1, r6
 802c8ee:	481a      	ldr	r0, [pc, #104]	; (802c958 <LL_PLL_ConfigSystemClock_HSE+0x7c>)
 802c8f0:	f004 f878 	bl	80309e4 <UTILS_GetPLLOutputFrequency>
    hclk2freq = __LL_RCC_CALC_HCLK2_FREQ(pllrfreq, UTILS_ClkInitStruct->CPU2CLKDivider);
 802c8f4:	686b      	ldr	r3, [r5, #4]
 802c8f6:	4a19      	ldr	r2, [pc, #100]	; (802c95c <LL_PLL_ConfigSystemClock_HSE+0x80>)
 802c8f8:	061b      	lsls	r3, r3, #24
 802c8fa:	0f1b      	lsrs	r3, r3, #28
 802c8fc:	009b      	lsls	r3, r3, #2
 802c8fe:	5899      	ldr	r1, [r3, r2]
    pllrfreq = UTILS_GetPLLOutputFrequency(HSE_VALUE, UTILS_PLLInitStruct);
 802c900:	0004      	movs	r4, r0
    hclk2freq = __LL_RCC_CALC_HCLK2_FREQ(pllrfreq, UTILS_ClkInitStruct->CPU2CLKDivider);
 802c902:	f7f3 fc05 	bl	8020110 <__udivsi3>
    if (hclk2freq > UTILS_HCLK2_MAX)
 802c906:	4b16      	ldr	r3, [pc, #88]	; (802c960 <LL_PLL_ConfigSystemClock_HSE+0x84>)
 802c908:	4298      	cmp	r0, r3
 802c90a:	d822      	bhi.n	802c952 <LL_PLL_ConfigSystemClock_HSE+0x76>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 802c90c:	23b0      	movs	r3, #176	; 0xb0
 802c90e:	2180      	movs	r1, #128	; 0x80
 802c910:	05db      	lsls	r3, r3, #23
 802c912:	681a      	ldr	r2, [r3, #0]
 802c914:	0289      	lsls	r1, r1, #10
 802c916:	420a      	tst	r2, r1
 802c918:	d107      	bne.n	802c92a <LL_PLL_ConfigSystemClock_HSE+0x4e>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 802c91a:	2280      	movs	r2, #128	; 0x80
 802c91c:	6818      	ldr	r0, [r3, #0]
 802c91e:	0252      	lsls	r2, r2, #9
 802c920:	4302      	orrs	r2, r0
 802c922:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 802c924:	681a      	ldr	r2, [r3, #0]
 802c926:	420a      	tst	r2, r1
 802c928:	d0fc      	beq.n	802c924 <LL_PLL_ConfigSystemClock_HSE+0x48>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 802c92a:	22b0      	movs	r2, #176	; 0xb0
 802c92c:	05d2      	lsls	r2, r2, #23
 802c92e:	68d1      	ldr	r1, [r2, #12]
 802c930:	6873      	ldr	r3, [r6, #4]
 802c932:	480c      	ldr	r0, [pc, #48]	; (802c964 <LL_PLL_ConfigSystemClock_HSE+0x88>)
 802c934:	021b      	lsls	r3, r3, #8
 802c936:	4001      	ands	r1, r0
 802c938:	430b      	orrs	r3, r1
 802c93a:	6831      	ldr	r1, [r6, #0]
      status = UTILS_EnablePLLAndSwitchSystem(pllrfreq, UTILS_ClkInitStruct);
 802c93c:	0020      	movs	r0, r4
 802c93e:	430b      	orrs	r3, r1
 802c940:	68b1      	ldr	r1, [r6, #8]
 802c942:	430b      	orrs	r3, r1
 802c944:	2103      	movs	r1, #3
 802c946:	430b      	orrs	r3, r1
 802c948:	60d3      	str	r3, [r2, #12]
 802c94a:	0029      	movs	r1, r5
 802c94c:	f7ff ff42 	bl	802c7d4 <UTILS_EnablePLLAndSwitchSystem>
 802c950:	0007      	movs	r7, r0
}
 802c952:	0038      	movs	r0, r7
 802c954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802c956:	46c0      	nop			; (mov r8, r8)
 802c958:	01e84800 	.word	0x01e84800
 802c95c:	080315fc 	.word	0x080315fc
 802c960:	02dc6c00 	.word	0x02dc6c00
 802c964:	1fff808c 	.word	0x1fff808c

0802c968 <z_device_state_init>:
 *
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
 802c968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	*dev->pm = (struct pm_device){
 802c96a:	2701      	movs	r7, #1
	const struct device *dev = __device_start;
 802c96c:	4d0c      	ldr	r5, [pc, #48]	; (802c9a0 <z_device_state_init+0x38>)

	while (dev < __device_end) {
 802c96e:	4b0d      	ldr	r3, [pc, #52]	; (802c9a4 <z_device_state_init+0x3c>)
 802c970:	429d      	cmp	r5, r3
 802c972:	d300      	bcc.n	802c976 <z_device_state_init+0xe>
		device_pm_state_init(dev);
		z_object_init(dev);
		++dev;
	}
}
 802c974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		device_pm_state_init(dev);
 802c976:	69ec      	ldr	r4, [r5, #28]
	*dev->pm = (struct pm_device){
 802c978:	2258      	movs	r2, #88	; 0x58
		.event = K_POLL_EVENT_INITIALIZER(
 802c97a:	0026      	movs	r6, r4
	*dev->pm = (struct pm_device){
 802c97c:	2100      	movs	r1, #0
 802c97e:	0020      	movs	r0, r4
 802c980:	f004 f9f7 	bl	8030d72 <memset>
 802c984:	1d23      	adds	r3, r4, #4
		.event = K_POLL_EVENT_INITIALIZER(
 802c986:	3648      	adds	r6, #72	; 0x48
	*dev->pm = (struct pm_device){
 802c988:	6063      	str	r3, [r4, #4]
 802c98a:	60a3      	str	r3, [r4, #8]
 802c98c:	333c      	adds	r3, #60	; 0x3c
 802c98e:	60e7      	str	r7, [r4, #12]
 802c990:	6127      	str	r7, [r4, #16]
		++dev;
 802c992:	3520      	adds	r5, #32
	*dev->pm = (struct pm_device){
 802c994:	705f      	strb	r7, [r3, #1]
 802c996:	6466      	str	r6, [r4, #68]	; 0x44
 802c998:	64a6      	str	r6, [r4, #72]	; 0x48
 802c99a:	64e6      	str	r6, [r4, #76]	; 0x4c
		++dev;
 802c99c:	e7e7      	b.n	802c96e <z_device_state_init+0x6>
 802c99e:	46c0      	nop			; (mov r8, r8)
 802c9a0:	20008200 	.word	0x20008200
 802c9a4:	20008320 	.word	0x20008320

0802c9a8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
 802c9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 802c9aa:	4f0f      	ldr	r7, [pc, #60]	; (802c9e8 <z_sys_init_run_level+0x40>)
 802c9ac:	0083      	lsls	r3, r0, #2
 802c9ae:	59dd      	ldr	r5, [r3, r7]
 802c9b0:	3001      	adds	r0, #1
 802c9b2:	0084      	lsls	r4, r0, #2
 802c9b4:	593b      	ldr	r3, [r7, r4]
 802c9b6:	42ab      	cmp	r3, r5
 802c9b8:	d800      	bhi.n	802c9bc <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 802c9ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		const struct device *dev = entry->dev;
 802c9bc:	686e      	ldr	r6, [r5, #4]
		int rc = entry->init(dev);
 802c9be:	682b      	ldr	r3, [r5, #0]
 802c9c0:	0030      	movs	r0, r6
 802c9c2:	4798      	blx	r3
		if (dev != NULL) {
 802c9c4:	2e00      	cmp	r6, #0
 802c9c6:	d00d      	beq.n	802c9e4 <z_sys_init_run_level+0x3c>
				dev->state->init_res = rc;
 802c9c8:	68f3      	ldr	r3, [r6, #12]
			if (rc != 0) {
 802c9ca:	2800      	cmp	r0, #0
 802c9cc:	d006      	beq.n	802c9dc <z_sys_init_run_level+0x34>
				dev->state->init_res = rc;
 802c9ce:	17c2      	asrs	r2, r0, #31
 802c9d0:	1880      	adds	r0, r0, r2
 802c9d2:	4050      	eors	r0, r2
 802c9d4:	28ff      	cmp	r0, #255	; 0xff
 802c9d6:	dd00      	ble.n	802c9da <z_sys_init_run_level+0x32>
 802c9d8:	20ff      	movs	r0, #255	; 0xff
 802c9da:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 802c9dc:	2101      	movs	r1, #1
 802c9de:	785a      	ldrb	r2, [r3, #1]
 802c9e0:	430a      	orrs	r2, r1
 802c9e2:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 802c9e4:	3508      	adds	r5, #8
 802c9e6:	e7e5      	b.n	802c9b4 <z_sys_init_run_level+0xc>
 802c9e8:	0803163c 	.word	0x0803163c

0802c9ec <z_device_get_all_static>:
#include <syscalls/device_usable_check_mrsh.c>
#endif /* CONFIG_USERSPACE */

size_t z_device_get_all_static(struct device const **devices)
{
	*devices = __device_start;
 802c9ec:	4b02      	ldr	r3, [pc, #8]	; (802c9f8 <z_device_get_all_static+0xc>)
 802c9ee:	6003      	str	r3, [r0, #0]
	return __device_end - __device_start;
 802c9f0:	4802      	ldr	r0, [pc, #8]	; (802c9fc <z_device_get_all_static+0x10>)
 802c9f2:	1ac0      	subs	r0, r0, r3
 802c9f4:	1140      	asrs	r0, r0, #5
}
 802c9f6:	4770      	bx	lr
 802c9f8:	20008200 	.word	0x20008200
 802c9fc:	20008320 	.word	0x20008320

0802ca00 <z_impl_device_get_binding>:
{
 802ca00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ca02:	1e05      	subs	r5, r0, #0
	if ((name == NULL) || (name[0] == '\0')) {
 802ca04:	d102      	bne.n	802ca0c <z_impl_device_get_binding+0xc>
		return NULL;
 802ca06:	2400      	movs	r4, #0
}
 802ca08:	0020      	movs	r0, r4
 802ca0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((name == NULL) || (name[0] == '\0')) {
 802ca0c:	7803      	ldrb	r3, [r0, #0]
 802ca0e:	2b00      	cmp	r3, #0
 802ca10:	d0f9      	beq.n	802ca06 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
 802ca12:	4c10      	ldr	r4, [pc, #64]	; (802ca54 <z_impl_device_get_binding+0x54>)
 802ca14:	4e10      	ldr	r6, [pc, #64]	; (802ca58 <z_impl_device_get_binding+0x58>)
 802ca16:	0027      	movs	r7, r4
 802ca18:	42b4      	cmp	r4, r6
 802ca1a:	d109      	bne.n	802ca30 <z_impl_device_get_binding+0x30>
	for (dev = __device_start; dev != __device_end; dev++) {
 802ca1c:	003c      	movs	r4, r7
 802ca1e:	42b4      	cmp	r4, r6
 802ca20:	d0f1      	beq.n	802ca06 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 802ca22:	0020      	movs	r0, r4
 802ca24:	f003 fff6 	bl	8030a14 <z_device_ready>
 802ca28:	2800      	cmp	r0, #0
 802ca2a:	d10b      	bne.n	802ca44 <z_impl_device_get_binding+0x44>
	for (dev = __device_start; dev != __device_end; dev++) {
 802ca2c:	3420      	adds	r4, #32
 802ca2e:	e7f6      	b.n	802ca1e <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
 802ca30:	0020      	movs	r0, r4
 802ca32:	f003 ffef 	bl	8030a14 <z_device_ready>
 802ca36:	2800      	cmp	r0, #0
 802ca38:	d002      	beq.n	802ca40 <z_impl_device_get_binding+0x40>
 802ca3a:	6823      	ldr	r3, [r4, #0]
 802ca3c:	42ab      	cmp	r3, r5
 802ca3e:	d0e3      	beq.n	802ca08 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
 802ca40:	3420      	adds	r4, #32
 802ca42:	e7e9      	b.n	802ca18 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 802ca44:	0028      	movs	r0, r5
 802ca46:	6821      	ldr	r1, [r4, #0]
 802ca48:	f7f5 fa96 	bl	8021f78 <strcmp>
 802ca4c:	2800      	cmp	r0, #0
 802ca4e:	d1ed      	bne.n	802ca2c <z_impl_device_get_binding+0x2c>
 802ca50:	e7da      	b.n	802ca08 <z_impl_device_get_binding+0x8>
 802ca52:	46c0      	nop			; (mov r8, r8)
 802ca54:	20008200 	.word	0x20008200
 802ca58:	20008320 	.word	0x20008320

0802ca5c <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 802ca5c:	b510      	push	{r4, lr}
 802ca5e:	0004      	movs	r4, r0
	z_impl_log_panic();
 802ca60:	f7f6 fa22 	bl	8022ea8 <z_impl_log_panic>
 802ca64:	4b06      	ldr	r3, [pc, #24]	; (802ca80 <k_sys_fatal_error_handler+0x24>)
 802ca66:	4907      	ldr	r1, [pc, #28]	; (802ca84 <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
 802ca68:	4807      	ldr	r0, [pc, #28]	; (802ca88 <k_sys_fatal_error_handler+0x2c>)
 802ca6a:	1ac9      	subs	r1, r1, r3
 802ca6c:	2301      	movs	r3, #1
 802ca6e:	08c9      	lsrs	r1, r1, #3
 802ca70:	0189      	lsls	r1, r1, #6
 802ca72:	4319      	orrs	r1, r3
 802ca74:	f001 fe8d 	bl	802e792 <log_0>
	arch_system_halt(reason);
 802ca78:	0020      	movs	r0, r4
 802ca7a:	f003 ffd5 	bl	8030a28 <arch_system_halt>
 802ca7e:	46c0      	nop			; (mov r8, r8)
 802ca80:	08031164 	.word	0x08031164
 802ca84:	08031184 	.word	0x08031184
 802ca88:	08032035 	.word	0x08032035

0802ca8c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 802ca8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802ca8e:	0005      	movs	r5, r0
 802ca90:	000e      	movs	r6, r1
 802ca92:	b085      	sub	sp, #20
	__asm__ volatile("mrs %0, PRIMASK;"
 802ca94:	f3ef 8310 	mrs	r3, PRIMASK
 802ca98:	b672      	cpsid	i
 802ca9a:	9303      	str	r3, [sp, #12]
	return z_impl_k_current_get();
 802ca9c:	f000 fc10 	bl	802d2c0 <z_impl_k_current_get>
 802caa0:	4a22      	ldr	r2, [pc, #136]	; (802cb2c <z_fatal_error+0xa0>)
 802caa2:	4b23      	ldr	r3, [pc, #140]	; (802cb30 <z_fatal_error+0xa4>)
 802caa4:	0004      	movs	r4, r0
 802caa6:	1a9b      	subs	r3, r3, r2
 802caa8:	08db      	lsrs	r3, r3, #3
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 802caaa:	019f      	lsls	r7, r3, #6
 802caac:	9302      	str	r3, [sp, #8]
 802caae:	2301      	movs	r3, #1
 802cab0:	4a20      	ldr	r2, [pc, #128]	; (802cb34 <z_fatal_error+0xa8>)
 802cab2:	433b      	orrs	r3, r7
	switch (reason) {
 802cab4:	2d04      	cmp	r5, #4
 802cab6:	d802      	bhi.n	802cabe <z_fatal_error+0x32>
 802cab8:	4a1f      	ldr	r2, [pc, #124]	; (802cb38 <z_fatal_error+0xac>)
 802caba:	00a9      	lsls	r1, r5, #2
 802cabc:	588a      	ldr	r2, [r1, r2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 802cabe:	4669      	mov	r1, sp
 802cac0:	481e      	ldr	r0, [pc, #120]	; (802cb3c <z_fatal_error+0xb0>)
 802cac2:	800b      	strh	r3, [r1, #0]
 802cac4:	2300      	movs	r3, #0
 802cac6:	0029      	movs	r1, r5
 802cac8:	f001 fe99 	bl	802e7fe <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 802cacc:	2e00      	cmp	r6, #0
 802cace:	d007      	beq.n	802cae0 <z_fatal_error+0x54>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 802cad0:	69f3      	ldr	r3, [r6, #28]
 802cad2:	05db      	lsls	r3, r3, #23
 802cad4:	d004      	beq.n	802cae0 <z_fatal_error+0x54>
		LOG_ERR("Fault during interrupt handling\n");
 802cad6:	2101      	movs	r1, #1
 802cad8:	4819      	ldr	r0, [pc, #100]	; (802cb40 <z_fatal_error+0xb4>)
 802cada:	4339      	orrs	r1, r7
 802cadc:	f001 fe59 	bl	802e792 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 802cae0:	2701      	movs	r7, #1
 802cae2:	9b02      	ldr	r3, [sp, #8]
 802cae4:	019b      	lsls	r3, r3, #6
 802cae6:	431f      	orrs	r7, r3
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 802cae8:	2c00      	cmp	r4, #0
 802caea:	d007      	beq.n	802cafc <z_fatal_error+0x70>
 802caec:	0020      	movs	r0, r4
 802caee:	f003 ffe5 	bl	8030abc <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
 802caf2:	2800      	cmp	r0, #0
 802caf4:	d002      	beq.n	802cafc <z_fatal_error+0x70>
 802caf6:	7803      	ldrb	r3, [r0, #0]
 802caf8:	2b00      	cmp	r3, #0
 802cafa:	d100      	bne.n	802cafe <z_fatal_error+0x72>
		thread_name = "unknown";
 802cafc:	4811      	ldr	r0, [pc, #68]	; (802cb44 <z_fatal_error+0xb8>)
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
 802cafe:	f7f6 f879 	bl	8022bf4 <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
 802cb02:	1c3b      	adds	r3, r7, #0
 802cb04:	0002      	movs	r2, r0
 802cb06:	0021      	movs	r1, r4
 802cb08:	480f      	ldr	r0, [pc, #60]	; (802cb48 <z_fatal_error+0xbc>)
 802cb0a:	f001 fe62 	bl	802e7d2 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 802cb0e:	0031      	movs	r1, r6
 802cb10:	0028      	movs	r0, r5
 802cb12:	f7ff ffa3 	bl	802ca5c <k_sys_fatal_error_handler>
	if (key != 0U) {
 802cb16:	9b03      	ldr	r3, [sp, #12]
 802cb18:	2b00      	cmp	r3, #0
 802cb1a:	d102      	bne.n	802cb22 <z_fatal_error+0x96>
	__asm__ volatile(
 802cb1c:	b662      	cpsie	i
 802cb1e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 802cb22:	0020      	movs	r0, r4
 802cb24:	f7ff f960 	bl	802bde8 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 802cb28:	b005      	add	sp, #20
 802cb2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802cb2c:	08031164 	.word	0x08031164
 802cb30:	08031184 	.word	0x08031184
 802cb34:	08032044 	.word	0x08032044
 802cb38:	08031654 	.word	0x08031654
 802cb3c:	0803205a 	.word	0x0803205a
 802cb40:	08032082 	.word	0x08032082
 802cb44:	08032052 	.word	0x08032052
 802cb48:	080320a3 	.word	0x080320a3

0802cb4c <z_bss_zero>:
 * This routine clears the BSS region, so all bytes are 0.
 *
 * @return N/A
 */
void z_bss_zero(void)
{
 802cb4c:	b510      	push	{r4, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 802cb4e:	4803      	ldr	r0, [pc, #12]	; (802cb5c <z_bss_zero+0x10>)
 802cb50:	4a03      	ldr	r2, [pc, #12]	; (802cb60 <z_bss_zero+0x14>)
__ssp_bos_icheck3(memset, void *, int)
 802cb52:	2100      	movs	r1, #0
 802cb54:	1a12      	subs	r2, r2, r0
 802cb56:	f004 f90c 	bl	8030d72 <memset>
#endif	/* CONFIG_CODE_DATA_RELOCATION */
#ifdef CONFIG_COVERAGE_GCOV
	(void)memset(&__gcov_bss_start, 0,
		 ((uintptr_t) &__gcov_bss_end - (uintptr_t) &__gcov_bss_start));
#endif
}
 802cb5a:	bd10      	pop	{r4, pc}
 802cb5c:	20008378 	.word	0x20008378
 802cb60:	20009b28 	.word	0x20009b28

0802cb64 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 802cb64:	b510      	push	{r4, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 802cb66:	2401      	movs	r4, #1
 802cb68:	4b09      	ldr	r3, [pc, #36]	; (802cb90 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 802cb6a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 802cb6c:	701c      	strb	r4, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 802cb6e:	f7ff ff1b 	bl	802c9a8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 802cb72:	f000 fde9 	bl	802d748 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 802cb76:	2003      	movs	r0, #3
 802cb78:	f7ff ff16 	bl	802c9a8 <z_sys_init_run_level>

	z_init_static_threads();
 802cb7c:	f000 f936 	bl	802cdec <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
 802cb80:	f7f5 faa2 	bl	80220c8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 802cb84:	4a03      	ldr	r2, [pc, #12]	; (802cb94 <bg_thread_main+0x30>)
 802cb86:	7b13      	ldrb	r3, [r2, #12]
 802cb88:	43a3      	bics	r3, r4
 802cb8a:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 802cb8c:	bd10      	pop	{r4, pc}
 802cb8e:	46c0      	nop			; (mov r8, r8)
 802cb90:	20009b21 	.word	0x20009b21
 802cb94:	200084b0 	.word	0x200084b0

0802cb98 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
 802cb98:	b5f0      	push	{r4, r5, r6, r7, lr}
 802cb9a:	b0a9      	sub	sp, #164	; 0xa4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
 802cb9c:	f7f5 ff80 	bl	8022aa0 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 802cba0:	2280      	movs	r2, #128	; 0x80
 802cba2:	4b32      	ldr	r3, [pc, #200]	; (802cc6c <z_cstart+0xd4>)
 802cba4:	0112      	lsls	r2, r2, #4
 802cba6:	189b      	adds	r3, r3, r2
 802cba8:	9306      	str	r3, [sp, #24]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 802cbaa:	f383 8808 	msr	MSP, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 802cbae:	4930      	ldr	r1, [pc, #192]	; (802cc70 <z_cstart+0xd8>)
 802cbb0:	4a30      	ldr	r2, [pc, #192]	; (802cc74 <z_cstart+0xdc>)
 802cbb2:	6a0b      	ldr	r3, [r1, #32]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
 802cbb4:	2400      	movs	r4, #0
 802cbb6:	401a      	ands	r2, r3
 802cbb8:	23c0      	movs	r3, #192	; 0xc0
 802cbba:	041b      	lsls	r3, r3, #16
 802cbbc:	4313      	orrs	r3, r2
 802cbbe:	620b      	str	r3, [r1, #32]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 802cbc0:	f003 fbea 	bl	8030398 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 802cbc4:	f7fe ffda 	bl	802bb7c <z_arm_cpu_idle_init>
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 802cbc8:	f7ff f9b2 	bl	802bf30 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 802cbcc:	f7ff f922 	bl	802be14 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
 802cbd0:	2202      	movs	r2, #2
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
 802cbd2:	4d29      	ldr	r5, [pc, #164]	; (802cc78 <z_cstart+0xe0>)
	dummy_thread->base.user_options = K_ESSENTIAL;
 802cbd4:	ab08      	add	r3, sp, #32
 802cbd6:	32ff      	adds	r2, #255	; 0xff
 802cbd8:	819a      	strh	r2, [r3, #12]
	_current_cpu->current = dummy_thread;
 802cbda:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.start = 0U;
 802cbdc:	9421      	str	r4, [sp, #132]	; 0x84
	dummy_thread->stack_info.size = 0U;
 802cbde:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 802cbe0:	f7ff fec2 	bl	802c968 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 802cbe4:	0020      	movs	r0, r4
 802cbe6:	f7ff fedf 	bl	802c9a8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 802cbea:	2001      	movs	r0, #1
 802cbec:	f7ff fedc 	bl	802c9a8 <z_sys_init_run_level>
	z_sched_init();
 802cbf0:	f000 fac2 	bl	802d178 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
 802cbf4:	4e21      	ldr	r6, [pc, #132]	; (802cc7c <z_cstart+0xe4>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 802cbf6:	4b22      	ldr	r3, [pc, #136]	; (802cc80 <z_cstart+0xe8>)
	_kernel.ready_q.cache = &z_main_thread;
 802cbf8:	622e      	str	r6, [r5, #32]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 802cbfa:	9305      	str	r3, [sp, #20]
 802cbfc:	2301      	movs	r3, #1
 802cbfe:	2280      	movs	r2, #128	; 0x80
 802cc00:	9304      	str	r3, [sp, #16]
 802cc02:	3306      	adds	r3, #6
 802cc04:	491f      	ldr	r1, [pc, #124]	; (802cc84 <z_cstart+0xec>)
 802cc06:	9303      	str	r3, [sp, #12]
 802cc08:	0152      	lsls	r2, r2, #5
 802cc0a:	4b1f      	ldr	r3, [pc, #124]	; (802cc88 <z_cstart+0xf0>)
 802cc0c:	0030      	movs	r0, r6
 802cc0e:	9402      	str	r4, [sp, #8]
 802cc10:	9401      	str	r4, [sp, #4]
 802cc12:	9400      	str	r4, [sp, #0]
 802cc14:	f000 f890 	bl	802cd38 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 802cc18:	2204      	movs	r2, #4
 802cc1a:	9007      	str	r0, [sp, #28]
 802cc1c:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
 802cc1e:	0030      	movs	r0, r6
 802cc20:	4393      	bics	r3, r2
 802cc22:	7373      	strb	r3, [r6, #13]
 802cc24:	f003 ffc5 	bl	8030bb2 <z_ready_thread>
	z_setup_new_thread(thread, stack,
 802cc28:	2301      	movs	r3, #1
 802cc2a:	2280      	movs	r2, #128	; 0x80
 802cc2c:	4f17      	ldr	r7, [pc, #92]	; (802cc8c <z_cstart+0xf4>)
 802cc2e:	9304      	str	r3, [sp, #16]
 802cc30:	330e      	adds	r3, #14
 802cc32:	4917      	ldr	r1, [pc, #92]	; (802cc90 <z_cstart+0xf8>)
 802cc34:	9303      	str	r3, [sp, #12]
 802cc36:	0052      	lsls	r2, r2, #1
 802cc38:	4b16      	ldr	r3, [pc, #88]	; (802cc94 <z_cstart+0xfc>)
 802cc3a:	0038      	movs	r0, r7
 802cc3c:	9405      	str	r4, [sp, #20]
 802cc3e:	9402      	str	r4, [sp, #8]
 802cc40:	9401      	str	r4, [sp, #4]
 802cc42:	9500      	str	r5, [sp, #0]
 802cc44:	f000 f878 	bl	802cd38 <z_setup_new_thread>
 802cc48:	2204      	movs	r2, #4
 802cc4a:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 802cc4c:	0030      	movs	r0, r6
 802cc4e:	4393      	bics	r3, r2
 802cc50:	737b      	strb	r3, [r7, #13]
		_kernel.cpus[i].irq_stack =
 802cc52:	9b06      	ldr	r3, [sp, #24]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 802cc54:	4a0c      	ldr	r2, [pc, #48]	; (802cc88 <z_cstart+0xf0>)
		_kernel.cpus[i].irq_stack =
 802cc56:	606b      	str	r3, [r5, #4]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 802cc58:	002b      	movs	r3, r5
 802cc5a:	3314      	adds	r3, #20
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 802cc5c:	9907      	ldr	r1, [sp, #28]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 802cc5e:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
 802cc60:	742c      	strb	r4, [r5, #16]
 802cc62:	616b      	str	r3, [r5, #20]
	list->tail = (sys_dnode_t *)list;
 802cc64:	61ab      	str	r3, [r5, #24]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 802cc66:	f7fe ff79 	bl	802bb5c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 802cc6a:	46c0      	nop			; (mov r8, r8)
 802cc6c:	2000af28 	.word	0x2000af28
 802cc70:	e000ed00 	.word	0xe000ed00
 802cc74:	ff00ffff 	.word	0xff00ffff
 802cc78:	200098ac 	.word	0x200098ac
 802cc7c:	200084b0 	.word	0x200084b0
 802cc80:	08032105 	.word	0x08032105
 802cc84:	20009e28 	.word	0x20009e28
 802cc88:	0802cb65 	.word	0x0802cb65
 802cc8c:	20008430 	.word	0x20008430
 802cc90:	2000ae28 	.word	0x2000ae28
 802cc94:	0802ce99 	.word	0x0802ce99

0802cc98 <init_mem_slab_module>:
{
	uint32_t j;
	char *p;

	/* blocks must be word aligned */
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 802cc98:	2003      	movs	r0, #3
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
 802cc9a:	b5f0      	push	{r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 802cc9c:	4b0e      	ldr	r3, [pc, #56]	; (802ccd8 <init_mem_slab_module+0x40>)
 802cc9e:	4e0f      	ldr	r6, [pc, #60]	; (802ccdc <init_mem_slab_module+0x44>)
 802cca0:	42b3      	cmp	r3, r6
 802cca2:	d301      	bcc.n	802cca8 <init_mem_slab_module+0x10>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
 802cca4:	2000      	movs	r0, #0
	return rc;
}
 802cca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 802cca8:	691a      	ldr	r2, [r3, #16]
 802ccaa:	68dc      	ldr	r4, [r3, #12]
 802ccac:	0015      	movs	r5, r2
 802ccae:	4325      	orrs	r5, r4
 802ccb0:	0029      	movs	r1, r5
 802ccb2:	4001      	ands	r1, r0
 802ccb4:	4205      	tst	r5, r0
 802ccb6:	d10b      	bne.n	802ccd0 <init_mem_slab_module+0x38>
	for (j = 0U; j < slab->num_blocks; j++) {
 802ccb8:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
 802ccba:	6159      	str	r1, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
 802ccbc:	42a9      	cmp	r1, r5
 802ccbe:	d101      	bne.n	802ccc4 <init_mem_slab_module+0x2c>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 802ccc0:	331c      	adds	r3, #28
 802ccc2:	e7ed      	b.n	802cca0 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
 802ccc4:	695f      	ldr	r7, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
 802ccc6:	3101      	adds	r1, #1
		*(char **)p = slab->free_list;
 802ccc8:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
 802ccca:	615a      	str	r2, [r3, #20]
		p += slab->block_size;
 802cccc:	1912      	adds	r2, r2, r4
	for (j = 0U; j < slab->num_blocks; j++) {
 802ccce:	e7f5      	b.n	802ccbc <init_mem_slab_module+0x24>
	return rc;
 802ccd0:	2016      	movs	r0, #22
 802ccd2:	4240      	negs	r0, r0
 802ccd4:	e7e7      	b.n	802cca6 <init_mem_slab_module+0xe>
 802ccd6:	46c0      	nop			; (mov r8, r8)
 802ccd8:	20008358 	.word	0x20008358
 802ccdc:	20008358 	.word	0x20008358

0802cce0 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
 802cce0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802cce2:	0004      	movs	r4, r0
 802cce4:	000d      	movs	r5, r1
	__asm__ volatile("mrs %0, PRIMASK;"
 802cce6:	f3ef 8110 	mrs	r1, PRIMASK
 802ccea:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	if (slab->free_list != NULL) {
 802ccec:	6940      	ldr	r0, [r0, #20]
 802ccee:	2800      	cmp	r0, #0
 802ccf0:	d00c      	beq.n	802cd0c <k_mem_slab_alloc+0x2c>
		/* take a free block */
		*mem = slab->free_list;
 802ccf2:	6028      	str	r0, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
 802ccf4:	6803      	ldr	r3, [r0, #0]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
 802ccf6:	2000      	movs	r0, #0
		slab->free_list = *(char **)(slab->free_list);
 802ccf8:	6163      	str	r3, [r4, #20]
		slab->num_used++;
 802ccfa:	69a3      	ldr	r3, [r4, #24]
 802ccfc:	3301      	adds	r3, #1
 802ccfe:	61a3      	str	r3, [r4, #24]
	if (key != 0U) {
 802cd00:	2900      	cmp	r1, #0
 802cd02:	d116      	bne.n	802cd32 <k_mem_slab_alloc+0x52>
	__asm__ volatile(
 802cd04:	b662      	cpsie	i
 802cd06:	f3bf 8f6f 	isb	sy
 802cd0a:	e012      	b.n	802cd32 <k_mem_slab_alloc+0x52>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
 802cd0c:	0010      	movs	r0, r2
 802cd0e:	4318      	orrs	r0, r3
 802cd10:	d102      	bne.n	802cd18 <k_mem_slab_alloc+0x38>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
 802cd12:	6028      	str	r0, [r5, #0]
		result = -ENOMEM;
 802cd14:	380c      	subs	r0, #12
 802cd16:	e7f3      	b.n	802cd00 <k_mem_slab_alloc+0x20>
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
 802cd18:	0020      	movs	r0, r4
	} else {
		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
 802cd1a:	9200      	str	r2, [sp, #0]
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
 802cd1c:	3008      	adds	r0, #8
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
 802cd1e:	0022      	movs	r2, r4
 802cd20:	9301      	str	r3, [sp, #4]
 802cd22:	f000 f987 	bl	802d034 <z_pend_curr>
		if (result == 0) {
 802cd26:	2800      	cmp	r0, #0
 802cd28:	d103      	bne.n	802cd32 <k_mem_slab_alloc+0x52>
			*mem = _current->base.swap_data;
 802cd2a:	4b02      	ldr	r3, [pc, #8]	; (802cd34 <k_mem_slab_alloc+0x54>)
 802cd2c:	689b      	ldr	r3, [r3, #8]
 802cd2e:	695b      	ldr	r3, [r3, #20]
 802cd30:	602b      	str	r3, [r5, #0]
	}

	k_spin_unlock(&slab->lock, key);

	return result;
}
 802cd32:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 802cd34:	200098ac 	.word	0x200098ac

0802cd38 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 802cd38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 802cd3a:	0004      	movs	r4, r0
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 802cd3c:	3058      	adds	r0, #88	; 0x58
	list->head = (sys_dnode_t *)list;
 802cd3e:	65a0      	str	r0, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
 802cd40:	65e0      	str	r0, [r4, #92]	; 0x5c
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 802cd42:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
 802cd44:	2500      	movs	r5, #0
	thread_base->user_options = (uint8_t)options;
 802cd46:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 802cd48:	2004      	movs	r0, #4
 802cd4a:	7360      	strb	r0, [r4, #13]

	thread_base->prio = priority;
 802cd4c:	980b      	ldr	r0, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 802cd4e:	3207      	adds	r2, #7
	thread_base->prio = priority;
 802cd50:	73a0      	strb	r0, [r4, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 802cd52:	2007      	movs	r0, #7
 802cd54:	4382      	bics	r2, r0
	stack_ptr = (char *)stack + stack_obj_size;
 802cd56:	188e      	adds	r6, r1, r2
	new_thread->stack_info.size = stack_buf_size;
 802cd58:	66a2      	str	r2, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 802cd5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802cd5c:	0020      	movs	r0, r4
 802cd5e:	9202      	str	r2, [sp, #8]
 802cd60:	9a09      	ldr	r2, [sp, #36]	; 0x24
	thread_base->pended_on = NULL;
 802cd62:	60a5      	str	r5, [r4, #8]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 802cd64:	9201      	str	r2, [sp, #4]
 802cd66:	9a08      	ldr	r2, [sp, #32]

	thread_base->sched_locked = 0U;
 802cd68:	73e5      	strb	r5, [r4, #15]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 802cd6a:	9200      	str	r2, [sp, #0]
 * @return N/A
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
 802cd6c:	61a5      	str	r5, [r4, #24]
 802cd6e:	0032      	movs	r2, r6
	node->prev = NULL;
 802cd70:	61e5      	str	r5, [r4, #28]
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
 802cd72:	6661      	str	r1, [r4, #100]	; 0x64
	new_thread->stack_info.delta = delta;
 802cd74:	66e5      	str	r5, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 802cd76:	f7fe fedb 	bl	802bb30 <arch_new_thread>
	if (!_current) {
 802cd7a:	4b05      	ldr	r3, [pc, #20]	; (802cd90 <z_setup_new_thread+0x58>)
	new_thread->init_data = NULL;
 802cd7c:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 802cd7e:	689b      	ldr	r3, [r3, #8]
 802cd80:	42ab      	cmp	r3, r5
 802cd82:	d000      	beq.n	802cd86 <z_setup_new_thread+0x4e>
	new_thread->resource_pool = _current->resource_pool;
 802cd84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
 802cd86:	0030      	movs	r0, r6
 802cd88:	6723      	str	r3, [r4, #112]	; 0x70
 802cd8a:	b004      	add	sp, #16
 802cd8c:	bd70      	pop	{r4, r5, r6, pc}
 802cd8e:	46c0      	nop			; (mov r8, r8)
 802cd90:	200098ac 	.word	0x200098ac

0802cd94 <z_impl_k_thread_create>:
{
 802cd94:	b570      	push	{r4, r5, r6, lr}
 802cd96:	0004      	movs	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 802cd98:	2000      	movs	r0, #0
{
 802cd9a:	b086      	sub	sp, #24
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 802cd9c:	9005      	str	r0, [sp, #20]
 802cd9e:	980e      	ldr	r0, [sp, #56]	; 0x38
{
 802cda0:	9d11      	ldr	r5, [sp, #68]	; 0x44
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 802cda2:	9004      	str	r0, [sp, #16]
 802cda4:	980d      	ldr	r0, [sp, #52]	; 0x34
{
 802cda6:	9e10      	ldr	r6, [sp, #64]	; 0x40
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 802cda8:	9003      	str	r0, [sp, #12]
 802cdaa:	980c      	ldr	r0, [sp, #48]	; 0x30
 802cdac:	9002      	str	r0, [sp, #8]
 802cdae:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802cdb0:	9001      	str	r0, [sp, #4]
 802cdb2:	980a      	ldr	r0, [sp, #40]	; 0x28
 802cdb4:	9000      	str	r0, [sp, #0]
 802cdb6:	0020      	movs	r0, r4
 802cdb8:	f7ff ffbe 	bl	802cd38 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 802cdbc:	002b      	movs	r3, r5
 802cdbe:	1c72      	adds	r2, r6, #1
 802cdc0:	d101      	bne.n	802cdc6 <z_impl_k_thread_create+0x32>
 802cdc2:	3301      	adds	r3, #1
 802cdc4:	d005      	beq.n	802cdd2 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 802cdc6:	002b      	movs	r3, r5
 802cdc8:	4333      	orrs	r3, r6
 802cdca:	d105      	bne.n	802cdd8 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
 802cdcc:	0020      	movs	r0, r4
 802cdce:	f000 f9b9 	bl	802d144 <z_sched_start>
}
 802cdd2:	0020      	movs	r0, r4
 802cdd4:	b006      	add	sp, #24
 802cdd6:	bd70      	pop	{r4, r5, r6, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 802cdd8:	0020      	movs	r0, r4
 802cdda:	0032      	movs	r2, r6
 802cddc:	002b      	movs	r3, r5
 802cdde:	4902      	ldr	r1, [pc, #8]	; (802cde8 <z_impl_k_thread_create+0x54>)
 802cde0:	3018      	adds	r0, #24
 802cde2:	f000 fb2b 	bl	802d43c <z_add_timeout>
 802cde6:	e7f4      	b.n	802cdd2 <z_impl_k_thread_create+0x3e>
 802cde8:	08030bcb 	.word	0x08030bcb

0802cdec <z_init_static_threads>:
{
 802cdec:	b5f0      	push	{r4, r5, r6, r7, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
 802cdee:	4c26      	ldr	r4, [pc, #152]	; (802ce88 <z_init_static_threads+0x9c>)
{
 802cdf0:	b087      	sub	sp, #28
 802cdf2:	0025      	movs	r5, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 802cdf4:	4b25      	ldr	r3, [pc, #148]	; (802ce8c <z_init_static_threads+0xa0>)
 802cdf6:	429c      	cmp	r4, r3
 802cdf8:	d309      	bcc.n	802ce0e <z_init_static_threads+0x22>
	k_sched_lock();
 802cdfa:	f000 f8bb 	bl	802cf74 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 802cdfe:	002c      	movs	r4, r5
 802ce00:	4b22      	ldr	r3, [pc, #136]	; (802ce8c <z_init_static_threads+0xa0>)
 802ce02:	429c      	cmp	r4, r3
 802ce04:	d319      	bcc.n	802ce3a <z_init_static_threads+0x4e>
	k_sched_unlock();
 802ce06:	f000 f951 	bl	802d0ac <k_sched_unlock>
}
 802ce0a:	b007      	add	sp, #28
 802ce0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_setup_new_thread(
 802ce0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 802ce10:	9305      	str	r3, [sp, #20]
 802ce12:	6a23      	ldr	r3, [r4, #32]
 802ce14:	9304      	str	r3, [sp, #16]
 802ce16:	69e3      	ldr	r3, [r4, #28]
 802ce18:	9303      	str	r3, [sp, #12]
 802ce1a:	69a3      	ldr	r3, [r4, #24]
 802ce1c:	9302      	str	r3, [sp, #8]
 802ce1e:	6963      	ldr	r3, [r4, #20]
 802ce20:	9301      	str	r3, [sp, #4]
 802ce22:	6923      	ldr	r3, [r4, #16]
 802ce24:	9300      	str	r3, [sp, #0]
 802ce26:	68e3      	ldr	r3, [r4, #12]
 802ce28:	68a2      	ldr	r2, [r4, #8]
 802ce2a:	6861      	ldr	r1, [r4, #4]
 802ce2c:	6820      	ldr	r0, [r4, #0]
 802ce2e:	f7ff ff83 	bl	802cd38 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 802ce32:	6823      	ldr	r3, [r4, #0]
 802ce34:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 802ce36:	3430      	adds	r4, #48	; 0x30
 802ce38:	e7dc      	b.n	802cdf4 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 802ce3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802ce3c:	1c5a      	adds	r2, r3, #1
 802ce3e:	d014      	beq.n	802ce6a <z_init_static_threads+0x7e>
					    K_MSEC(thread_data->init_delay));
 802ce40:	43da      	mvns	r2, r3
 802ce42:	17d2      	asrs	r2, r2, #31
 802ce44:	4013      	ands	r3, r2
 802ce46:	17d9      	asrs	r1, r3, #31
 802ce48:	030f      	lsls	r7, r1, #12
 802ce4a:	2100      	movs	r1, #0
 802ce4c:	0d1a      	lsrs	r2, r3, #20
 802ce4e:	4810      	ldr	r0, [pc, #64]	; (802ce90 <z_init_static_threads+0xa4>)
 802ce50:	031e      	lsls	r6, r3, #12
 802ce52:	4317      	orrs	r7, r2
 802ce54:	1980      	adds	r0, r0, r6
 802ce56:	4179      	adcs	r1, r7
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 802ce58:	4b0d      	ldr	r3, [pc, #52]	; (802ce90 <z_init_static_threads+0xa4>)
			schedule_new_thread(thread_data->init_thread,
 802ce5a:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 802ce5c:	4298      	cmp	r0, r3
 802ce5e:	d106      	bne.n	802ce6e <z_init_static_threads+0x82>
 802ce60:	2900      	cmp	r1, #0
 802ce62:	d104      	bne.n	802ce6e <z_init_static_threads+0x82>
	z_sched_start(thread);
 802ce64:	0028      	movs	r0, r5
 802ce66:	f000 f96d 	bl	802d144 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 802ce6a:	3430      	adds	r4, #48	; 0x30
 802ce6c:	e7c8      	b.n	802ce00 <z_init_static_threads+0x14>
 802ce6e:	22fa      	movs	r2, #250	; 0xfa
 802ce70:	2300      	movs	r3, #0
 802ce72:	0092      	lsls	r2, r2, #2
 802ce74:	f7f3 fb1a 	bl	80204ac <__aeabi_uldivmod>
 802ce78:	0002      	movs	r2, r0
 802ce7a:	0028      	movs	r0, r5
 802ce7c:	000b      	movs	r3, r1
 802ce7e:	3018      	adds	r0, #24
 802ce80:	4904      	ldr	r1, [pc, #16]	; (802ce94 <z_init_static_threads+0xa8>)
 802ce82:	f000 fadb 	bl	802d43c <z_add_timeout>
 802ce86:	e7f0      	b.n	802ce6a <z_init_static_threads+0x7e>
 802ce88:	20008320 	.word	0x20008320
 802ce8c:	20008320 	.word	0x20008320
 802ce90:	000003e7 	.word	0x000003e7
 802ce94:	08030bcb 	.word	0x08030bcb

0802ce98 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 802ce98:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
 802ce9a:	f3ef 8310 	mrs	r3, PRIMASK
 802ce9e:	b672      	cpsid	i
	int32_t ticks = z_get_next_timeout_expiry();
 802cea0:	f003 fee8 	bl	8030c74 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
 802cea4:	4b04      	ldr	r3, [pc, #16]	; (802ceb8 <idle+0x20>)
 802cea6:	61d8      	str	r0, [r3, #28]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
 802cea8:	f7f6 fb18 	bl	80234dc <pm_system_suspend>
 802ceac:	2800      	cmp	r0, #0
 802ceae:	d1f4      	bne.n	802ce9a <idle+0x2>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 802ceb0:	f7fe fe6a 	bl	802bb88 <arch_cpu_idle>
}
 802ceb4:	e7f1      	b.n	802ce9a <idle+0x2>
 802ceb6:	46c0      	nop			; (mov r8, r8)
 802ceb8:	200098ac 	.word	0x200098ac

0802cebc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 802cebc:	b570      	push	{r4, r5, r6, lr}
 802cebe:	0004      	movs	r4, r0
 802cec0:	f3ef 8510 	mrs	r5, PRIMASK
 802cec4:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
 802cec6:	f003 fead 	bl	8030c24 <z_unpend_first_thread>

	if (thread != NULL) {
 802ceca:	2800      	cmp	r0, #0
 802cecc:	d008      	beq.n	802cee0 <z_impl_k_sem_give+0x24>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 802cece:	2300      	movs	r3, #0
 802ced0:	6783      	str	r3, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 802ced2:	f003 fe6e 	bl	8030bb2 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 802ced6:	0029      	movs	r1, r5
 802ced8:	4805      	ldr	r0, [pc, #20]	; (802cef0 <z_impl_k_sem_give+0x34>)
 802ceda:	f000 f835 	bl	802cf48 <z_reschedule>
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
 802cede:	bd70      	pop	{r4, r5, r6, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 802cee0:	68a2      	ldr	r2, [r4, #8]
 802cee2:	68e3      	ldr	r3, [r4, #12]
 802cee4:	1a9b      	subs	r3, r3, r2
 802cee6:	1e59      	subs	r1, r3, #1
 802cee8:	418b      	sbcs	r3, r1
 802ceea:	189b      	adds	r3, r3, r2
 802ceec:	60a3      	str	r3, [r4, #8]
}
 802ceee:	e7f2      	b.n	802ced6 <z_impl_k_sem_give+0x1a>
 802cef0:	20009b22 	.word	0x20009b22

0802cef4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 802cef4:	b513      	push	{r0, r1, r4, lr}
 802cef6:	0001      	movs	r1, r0
 802cef8:	f3ef 8010 	mrs	r0, PRIMASK
 802cefc:	b672      	cpsid	i
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
 802cefe:	688c      	ldr	r4, [r1, #8]
 802cf00:	2c00      	cmp	r4, #0
 802cf02:	d007      	beq.n	802cf14 <z_impl_k_sem_take+0x20>
		sem->count--;
 802cf04:	3c01      	subs	r4, #1
 802cf06:	608c      	str	r4, [r1, #8]
	if (key != 0U) {
 802cf08:	2800      	cmp	r0, #0
 802cf0a:	d115      	bne.n	802cf38 <z_impl_k_sem_take+0x44>
	__asm__ volatile(
 802cf0c:	b662      	cpsie	i
 802cf0e:	f3bf 8f6f 	isb	sy
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
 802cf12:	bd16      	pop	{r1, r2, r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 802cf14:	0014      	movs	r4, r2
 802cf16:	431c      	orrs	r4, r3
 802cf18:	d106      	bne.n	802cf28 <z_impl_k_sem_take+0x34>
	if (key != 0U) {
 802cf1a:	2800      	cmp	r0, #0
 802cf1c:	d10e      	bne.n	802cf3c <z_impl_k_sem_take+0x48>
	__asm__ volatile(
 802cf1e:	b662      	cpsie	i
 802cf20:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 802cf24:	3810      	subs	r0, #16
 802cf26:	e7f4      	b.n	802cf12 <z_impl_k_sem_take+0x1e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 802cf28:	9200      	str	r2, [sp, #0]
 802cf2a:	9301      	str	r3, [sp, #4]
 802cf2c:	000a      	movs	r2, r1
 802cf2e:	0001      	movs	r1, r0
 802cf30:	4804      	ldr	r0, [pc, #16]	; (802cf44 <z_impl_k_sem_take+0x50>)
 802cf32:	f000 f87f 	bl	802d034 <z_pend_curr>
 802cf36:	e7ec      	b.n	802cf12 <z_impl_k_sem_take+0x1e>
		ret = 0;
 802cf38:	2000      	movs	r0, #0
 802cf3a:	e7ea      	b.n	802cf12 <z_impl_k_sem_take+0x1e>
		ret = -EBUSY;
 802cf3c:	2010      	movs	r0, #16
 802cf3e:	4240      	negs	r0, r0
	return ret;
 802cf40:	e7e7      	b.n	802cf12 <z_impl_k_sem_take+0x1e>
 802cf42:	46c0      	nop			; (mov r8, r8)
 802cf44:	20009b22 	.word	0x20009b22

0802cf48 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
 802cf48:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 802cf4a:	2900      	cmp	r1, #0
 802cf4c:	d10a      	bne.n	802cf64 <z_reschedule+0x1c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802cf4e:	f3ef 8005 	mrs	r0, IPSR
	if (resched(key.key) && need_swap()) {
 802cf52:	2800      	cmp	r0, #0
 802cf54:	d107      	bne.n	802cf66 <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
 802cf56:	4b06      	ldr	r3, [pc, #24]	; (802cf70 <z_reschedule+0x28>)
	if (resched(key.key) && need_swap()) {
 802cf58:	6a1a      	ldr	r2, [r3, #32]
 802cf5a:	689b      	ldr	r3, [r3, #8]
 802cf5c:	429a      	cmp	r2, r3
 802cf5e:	d002      	beq.n	802cf66 <z_reschedule+0x1e>
	ret = arch_swap(key);
 802cf60:	f7fe fd56 	bl	802ba10 <arch_swap>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
 802cf64:	bd10      	pop	{r4, pc}
 802cf66:	b662      	cpsie	i
 802cf68:	f3bf 8f6f 	isb	sy
 802cf6c:	e7fa      	b.n	802cf64 <z_reschedule+0x1c>
 802cf6e:	46c0      	nop			; (mov r8, r8)
 802cf70:	200098ac 	.word	0x200098ac

0802cf74 <k_sched_lock>:
	__asm__ volatile("mrs %0, PRIMASK;"
 802cf74:	f3ef 8110 	mrs	r1, PRIMASK
 802cf78:	b672      	cpsid	i
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 802cf7a:	4b05      	ldr	r3, [pc, #20]	; (802cf90 <k_sched_lock+0x1c>)
 802cf7c:	689a      	ldr	r2, [r3, #8]
 802cf7e:	7bd3      	ldrb	r3, [r2, #15]
 802cf80:	3b01      	subs	r3, #1
 802cf82:	73d3      	strb	r3, [r2, #15]
	if (key != 0U) {
 802cf84:	2900      	cmp	r1, #0
 802cf86:	d102      	bne.n	802cf8e <k_sched_lock+0x1a>
	__asm__ volatile(
 802cf88:	b662      	cpsie	i
 802cf8a:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
 802cf8e:	4770      	bx	lr
 802cf90:	200098ac 	.word	0x200098ac

0802cf94 <update_cache>:
{
 802cf94:	b510      	push	{r4, lr}
 802cf96:	0004      	movs	r4, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
 802cf98:	480a      	ldr	r0, [pc, #40]	; (802cfc4 <update_cache+0x30>)
 802cf9a:	f003 fdd8 	bl	8030b4e <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 802cf9e:	4b0a      	ldr	r3, [pc, #40]	; (802cfc8 <update_cache+0x34>)
 802cfa0:	2800      	cmp	r0, #0
 802cfa2:	d100      	bne.n	802cfa6 <update_cache+0x12>
 802cfa4:	68d8      	ldr	r0, [r3, #12]
	if (preempt_ok != 0) {
 802cfa6:	2c00      	cmp	r4, #0
 802cfa8:	d10a      	bne.n	802cfc0 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
 802cfaa:	689a      	ldr	r2, [r3, #8]
 802cfac:	7b51      	ldrb	r1, [r2, #13]
 802cfae:	06c9      	lsls	r1, r1, #27
 802cfb0:	d106      	bne.n	802cfc0 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 802cfb2:	6981      	ldr	r1, [r0, #24]
 802cfb4:	2900      	cmp	r1, #0
 802cfb6:	d103      	bne.n	802cfc0 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(thread)) {
 802cfb8:	89d1      	ldrh	r1, [r2, #14]
 802cfba:	297f      	cmp	r1, #127	; 0x7f
 802cfbc:	d900      	bls.n	802cfc0 <update_cache+0x2c>
 802cfbe:	0010      	movs	r0, r2
}
 802cfc0:	6218      	str	r0, [r3, #32]
 802cfc2:	bd10      	pop	{r4, pc}
 802cfc4:	200098d0 	.word	0x200098d0
 802cfc8:	200098ac 	.word	0x200098ac

0802cfcc <unready_thread>:
	if (z_is_thread_queued(thread)) {
 802cfcc:	220d      	movs	r2, #13
{
 802cfce:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
 802cfd0:	5682      	ldrsb	r2, [r0, r2]
{
 802cfd2:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
 802cfd4:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
 802cfd6:	2a00      	cmp	r2, #0
 802cfd8:	da04      	bge.n	802cfe4 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 802cfda:	227f      	movs	r2, #127	; 0x7f
 802cfdc:	4013      	ands	r3, r2
 802cfde:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 802cfe0:	f003 fd81 	bl	8030ae6 <sys_dlist_remove>
	update_cache(thread == _current);
 802cfe4:	4b03      	ldr	r3, [pc, #12]	; (802cff4 <unready_thread+0x28>)
 802cfe6:	6898      	ldr	r0, [r3, #8]
 802cfe8:	1b00      	subs	r0, r0, r4
 802cfea:	4243      	negs	r3, r0
 802cfec:	4158      	adcs	r0, r3
 802cfee:	f7ff ffd1 	bl	802cf94 <update_cache>
}
 802cff2:	bd10      	pop	{r4, pc}
 802cff4:	200098ac 	.word	0x200098ac

0802cff8 <pend>:
{
 802cff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cffa:	0004      	movs	r4, r0
 802cffc:	0016      	movs	r6, r2
 802cffe:	001d      	movs	r5, r3
	__asm__ volatile("mrs %0, PRIMASK;"
 802d000:	f3ef 8710 	mrs	r7, PRIMASK
 802d004:	b672      	cpsid	i
		add_to_waitq_locked(thread, wait_q);
 802d006:	f003 fda8 	bl	8030b5a <add_to_waitq_locked>
	if (key != 0U) {
 802d00a:	2f00      	cmp	r7, #0
 802d00c:	d102      	bne.n	802d014 <pend+0x1c>
	__asm__ volatile(
 802d00e:	b662      	cpsie	i
 802d010:	f3bf 8f6f 	isb	sy
	add_thread_timeout(thread, timeout);
 802d014:	002b      	movs	r3, r5
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 802d016:	1c72      	adds	r2, r6, #1
 802d018:	d101      	bne.n	802d01e <pend+0x26>
 802d01a:	3301      	adds	r3, #1
 802d01c:	d006      	beq.n	802d02c <pend+0x34>
 802d01e:	0020      	movs	r0, r4
 802d020:	0032      	movs	r2, r6
 802d022:	002b      	movs	r3, r5
 802d024:	4902      	ldr	r1, [pc, #8]	; (802d030 <pend+0x38>)
 802d026:	3018      	adds	r0, #24
 802d028:	f000 fa08 	bl	802d43c <z_add_timeout>
}
 802d02c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d02e:	46c0      	nop			; (mov r8, r8)
 802d030:	08030bcb 	.word	0x08030bcb

0802d034 <z_pend_curr>:
{
 802d034:	b510      	push	{r4, lr}
 802d036:	000c      	movs	r4, r1
	pend(_current, wait_q, timeout);
 802d038:	4805      	ldr	r0, [pc, #20]	; (802d050 <z_pend_curr+0x1c>)
{
 802d03a:	0011      	movs	r1, r2
	pend(_current, wait_q, timeout);
 802d03c:	9a02      	ldr	r2, [sp, #8]
 802d03e:	9b03      	ldr	r3, [sp, #12]
 802d040:	6880      	ldr	r0, [r0, #8]
 802d042:	f7ff ffd9 	bl	802cff8 <pend>
 802d046:	0020      	movs	r0, r4
 802d048:	f7fe fce2 	bl	802ba10 <arch_swap>
}
 802d04c:	bd10      	pop	{r4, pc}
 802d04e:	46c0      	nop			; (mov r8, r8)
 802d050:	200098ac 	.word	0x200098ac

0802d054 <z_impl_k_thread_suspend>:
{
 802d054:	b570      	push	{r4, r5, r6, lr}
 802d056:	0004      	movs	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 802d058:	3018      	adds	r0, #24
 802d05a:	f003 fdf8 	bl	8030c4e <z_abort_timeout>
	__asm__ volatile("mrs %0, PRIMASK;"
 802d05e:	f3ef 8610 	mrs	r6, PRIMASK
 802d062:	b672      	cpsid	i
		if (z_is_thread_queued(thread)) {
 802d064:	220d      	movs	r2, #13
 802d066:	56a2      	ldrsb	r2, [r4, r2]
 802d068:	7b63      	ldrb	r3, [r4, #13]
 802d06a:	2a00      	cmp	r2, #0
 802d06c:	da05      	bge.n	802d07a <z_impl_k_thread_suspend+0x26>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 802d06e:	227f      	movs	r2, #127	; 0x7f
 802d070:	4013      	ands	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
 802d072:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
 802d074:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 802d076:	f003 fd36 	bl	8030ae6 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_SUSPENDED;
 802d07a:	2310      	movs	r3, #16
 802d07c:	7b62      	ldrb	r2, [r4, #13]
		update_cache(thread == _current);
 802d07e:	4d0a      	ldr	r5, [pc, #40]	; (802d0a8 <z_impl_k_thread_suspend+0x54>)
 802d080:	4313      	orrs	r3, r2
 802d082:	7363      	strb	r3, [r4, #13]
 802d084:	68ab      	ldr	r3, [r5, #8]
 802d086:	1b18      	subs	r0, r3, r4
 802d088:	4243      	negs	r3, r0
 802d08a:	4158      	adcs	r0, r3
 802d08c:	f7ff ff82 	bl	802cf94 <update_cache>
	if (key != 0U) {
 802d090:	2e00      	cmp	r6, #0
 802d092:	d102      	bne.n	802d09a <z_impl_k_thread_suspend+0x46>
	__asm__ volatile(
 802d094:	b662      	cpsie	i
 802d096:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 802d09a:	68ab      	ldr	r3, [r5, #8]
 802d09c:	42a3      	cmp	r3, r4
 802d09e:	d101      	bne.n	802d0a4 <z_impl_k_thread_suspend+0x50>
		z_reschedule_unlocked();
 802d0a0:	f003 fd4e 	bl	8030b40 <z_reschedule_unlocked>
}
 802d0a4:	bd70      	pop	{r4, r5, r6, pc}
 802d0a6:	46c0      	nop			; (mov r8, r8)
 802d0a8:	200098ac 	.word	0x200098ac

0802d0ac <k_sched_unlock>:
{
 802d0ac:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
 802d0ae:	f3ef 8410 	mrs	r4, PRIMASK
 802d0b2:	b672      	cpsid	i
		++_current->base.sched_locked;
 802d0b4:	4b07      	ldr	r3, [pc, #28]	; (802d0d4 <k_sched_unlock+0x28>)
		update_cache(0);
 802d0b6:	2000      	movs	r0, #0
		++_current->base.sched_locked;
 802d0b8:	689a      	ldr	r2, [r3, #8]
 802d0ba:	7bd3      	ldrb	r3, [r2, #15]
 802d0bc:	3301      	adds	r3, #1
 802d0be:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 802d0c0:	f7ff ff68 	bl	802cf94 <update_cache>
	if (key != 0U) {
 802d0c4:	2c00      	cmp	r4, #0
 802d0c6:	d102      	bne.n	802d0ce <k_sched_unlock+0x22>
	__asm__ volatile(
 802d0c8:	b662      	cpsie	i
 802d0ca:	f3bf 8f6f 	isb	sy
	z_reschedule_unlocked();
 802d0ce:	f003 fd37 	bl	8030b40 <z_reschedule_unlocked>
}
 802d0d2:	bd10      	pop	{r4, pc}
 802d0d4:	200098ac 	.word	0x200098ac

0802d0d8 <ready_thread>:
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 802d0d8:	230d      	movs	r3, #13
{
 802d0da:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 802d0dc:	56c3      	ldrsb	r3, [r0, r3]
	return (thread->base.thread_state & state) != 0U;
 802d0de:	7b42      	ldrb	r2, [r0, #13]
 802d0e0:	2b00      	cmp	r3, #0
 802d0e2:	db20      	blt.n	802d126 <ready_thread+0x4e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 802d0e4:	06d3      	lsls	r3, r2, #27
 802d0e6:	d11e      	bne.n	802d126 <ready_thread+0x4e>
 802d0e8:	6983      	ldr	r3, [r0, #24]
 802d0ea:	2b00      	cmp	r3, #0
 802d0ec:	d11b      	bne.n	802d126 <ready_thread+0x4e>
	thread->base.thread_state |= _THREAD_QUEUED;
 802d0ee:	3b80      	subs	r3, #128	; 0x80
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 802d0f0:	4912      	ldr	r1, [pc, #72]	; (802d13c <ready_thread+0x64>)
 802d0f2:	4313      	orrs	r3, r2
 802d0f4:	7343      	strb	r3, [r0, #13]
 802d0f6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 802d0f8:	4d11      	ldr	r5, [pc, #68]	; (802d140 <ready_thread+0x68>)
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 802d0fa:	6a8c      	ldr	r4, [r1, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
 802d0fc:	42ab      	cmp	r3, r5
 802d0fe:	d018      	beq.n	802d132 <ready_thread+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 802d100:	2b00      	cmp	r3, #0
 802d102:	d016      	beq.n	802d132 <ready_thread+0x5a>
	int32_t b1 = thread_1->base.prio;
 802d104:	260e      	movs	r6, #14
 802d106:	5786      	ldrsb	r6, [r0, r6]
	int32_t b2 = thread_2->base.prio;
 802d108:	220e      	movs	r2, #14
 802d10a:	569a      	ldrsb	r2, [r3, r2]
	if (b1 != b2) {
 802d10c:	4296      	cmp	r6, r2
 802d10e:	d00b      	beq.n	802d128 <ready_thread+0x50>
		return b2 - b1;
 802d110:	1b92      	subs	r2, r2, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 802d112:	2a00      	cmp	r2, #0
 802d114:	dd08      	ble.n	802d128 <ready_thread+0x50>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 802d116:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
 802d118:	6003      	str	r3, [r0, #0]
	node->prev = prev;
 802d11a:	6042      	str	r2, [r0, #4]
	prev->next = node;
 802d11c:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 802d11e:	6058      	str	r0, [r3, #4]
		update_cache(0);
 802d120:	2000      	movs	r0, #0
 802d122:	f7ff ff37 	bl	802cf94 <update_cache>
}
 802d126:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
 802d128:	42a3      	cmp	r3, r4
 802d12a:	d002      	beq.n	802d132 <ready_thread+0x5a>
 802d12c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 802d12e:	2b00      	cmp	r3, #0
 802d130:	d1ea      	bne.n	802d108 <ready_thread+0x30>
	node->next = list;
 802d132:	6005      	str	r5, [r0, #0]
	node->prev = tail;
 802d134:	6044      	str	r4, [r0, #4]
	tail->next = node;
 802d136:	6020      	str	r0, [r4, #0]
	list->tail = node;
 802d138:	6288      	str	r0, [r1, #40]	; 0x28
}
 802d13a:	e7f1      	b.n	802d120 <ready_thread+0x48>
 802d13c:	200098ac 	.word	0x200098ac
 802d140:	200098d0 	.word	0x200098d0

0802d144 <z_sched_start>:
{
 802d144:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
 802d146:	f3ef 8410 	mrs	r4, PRIMASK
 802d14a:	b672      	cpsid	i
	if (z_has_thread_started(thread)) {
 802d14c:	2204      	movs	r2, #4
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 802d14e:	7b43      	ldrb	r3, [r0, #13]
 802d150:	4213      	tst	r3, r2
 802d152:	d105      	bne.n	802d160 <z_sched_start+0x1c>
	if (key != 0U) {
 802d154:	2c00      	cmp	r4, #0
 802d156:	d102      	bne.n	802d15e <z_sched_start+0x1a>
	__asm__ volatile(
 802d158:	b662      	cpsie	i
 802d15a:	f3bf 8f6f 	isb	sy
}
 802d15e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 802d160:	4393      	bics	r3, r2
 802d162:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
 802d164:	f7ff ffb8 	bl	802d0d8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 802d168:	0021      	movs	r1, r4
 802d16a:	4802      	ldr	r0, [pc, #8]	; (802d174 <z_sched_start+0x30>)
 802d16c:	f7ff feec 	bl	802cf48 <z_reschedule>
 802d170:	e7f5      	b.n	802d15e <z_sched_start+0x1a>
 802d172:	46c0      	nop			; (mov r8, r8)
 802d174:	20009b22 	.word	0x20009b22

0802d178 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 802d178:	4b02      	ldr	r3, [pc, #8]	; (802d184 <z_sched_init+0xc>)
 802d17a:	4a03      	ldr	r2, [pc, #12]	; (802d188 <z_sched_init+0x10>)
 802d17c:	625a      	str	r2, [r3, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
 802d17e:	629a      	str	r2, [r3, #40]	; 0x28

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
 802d180:	4770      	bx	lr
 802d182:	46c0      	nop			; (mov r8, r8)
 802d184:	200098ac 	.word	0x200098ac
 802d188:	200098d0 	.word	0x200098d0

0802d18c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
 802d18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT(!arch_is_in_isr(), "");

	if (!z_is_idle_thread_object(_current)) {
 802d18e:	4c20      	ldr	r4, [pc, #128]	; (802d210 <z_impl_k_yield+0x84>)
 802d190:	4b20      	ldr	r3, [pc, #128]	; (802d214 <z_impl_k_yield+0x88>)
 802d192:	68a2      	ldr	r2, [r4, #8]
 802d194:	429a      	cmp	r2, r3
 802d196:	d036      	beq.n	802d206 <z_impl_k_yield+0x7a>
	__asm__ volatile("mrs %0, PRIMASK;"
 802d198:	f3ef 8510 	mrs	r5, PRIMASK
 802d19c:	b672      	cpsid	i
	thread->base.thread_state &= ~_THREAD_QUEUED;
 802d19e:	227f      	movs	r2, #127	; 0x7f
		k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

		if (!IS_ENABLED(CONFIG_SMP) ||
			z_is_thread_queued(_current)) {
			dequeue_thread(&_kernel.ready_q.runq,
 802d1a0:	68a0      	ldr	r0, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 802d1a2:	7b43      	ldrb	r3, [r0, #13]
 802d1a4:	4013      	ands	r3, r2
 802d1a6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 802d1a8:	f003 fc9d 	bl	8030ae6 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 802d1ac:	2280      	movs	r2, #128	; 0x80
					_current);
		}
		queue_thread(&_kernel.ready_q.runq, _current);
 802d1ae:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 802d1b0:	4252      	negs	r2, r2
 802d1b2:	7b59      	ldrb	r1, [r3, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 802d1b4:	4818      	ldr	r0, [pc, #96]	; (802d218 <z_impl_k_yield+0x8c>)
 802d1b6:	430a      	orrs	r2, r1
 802d1b8:	735a      	strb	r2, [r3, #13]
	return list->head == list;
 802d1ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
 802d1bc:	4282      	cmp	r2, r0
 802d1be:	d01c      	beq.n	802d1fa <z_impl_k_yield+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 802d1c0:	2a00      	cmp	r2, #0
 802d1c2:	d01a      	beq.n	802d1fa <z_impl_k_yield+0x6e>
	int32_t b1 = thread_1->base.prio;
 802d1c4:	260e      	movs	r6, #14
	return (node == list->tail) ? NULL : node->next;
 802d1c6:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 802d1c8:	579e      	ldrsb	r6, [r3, r6]
	int32_t b2 = thread_2->base.prio;
 802d1ca:	210e      	movs	r1, #14
 802d1cc:	5651      	ldrsb	r1, [r2, r1]
	if (b1 != b2) {
 802d1ce:	428e      	cmp	r6, r1
 802d1d0:	d00e      	beq.n	802d1f0 <z_impl_k_yield+0x64>
		return b2 - b1;
 802d1d2:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 802d1d4:	2900      	cmp	r1, #0
 802d1d6:	dd0b      	ble.n	802d1f0 <z_impl_k_yield+0x64>
	sys_dnode_t *const prev = successor->prev;
 802d1d8:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 802d1da:	601a      	str	r2, [r3, #0]
	node->prev = prev;
 802d1dc:	6059      	str	r1, [r3, #4]
	prev->next = node;
 802d1de:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 802d1e0:	6053      	str	r3, [r2, #4]
		update_cache(1);
 802d1e2:	2001      	movs	r0, #1
 802d1e4:	f7ff fed6 	bl	802cf94 <update_cache>
 802d1e8:	0028      	movs	r0, r5
 802d1ea:	f7fe fc11 	bl	802ba10 <arch_swap>
		z_swap(&sched_spinlock, key);
	} else {
		z_swap_unlocked();
	}
}
 802d1ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 802d1f0:	42ba      	cmp	r2, r7
 802d1f2:	d002      	beq.n	802d1fa <z_impl_k_yield+0x6e>
 802d1f4:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 802d1f6:	2a00      	cmp	r2, #0
 802d1f8:	d1e7      	bne.n	802d1ca <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
 802d1fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	node->next = list;
 802d1fc:	6018      	str	r0, [r3, #0]
	node->prev = tail;
 802d1fe:	605a      	str	r2, [r3, #4]
	tail->next = node;
 802d200:	6013      	str	r3, [r2, #0]
	list->tail = node;
 802d202:	62a3      	str	r3, [r4, #40]	; 0x28
}
 802d204:	e7ed      	b.n	802d1e2 <z_impl_k_yield+0x56>
 802d206:	f3ef 8010 	mrs	r0, PRIMASK
 802d20a:	b672      	cpsid	i
 802d20c:	e7ed      	b.n	802d1ea <z_impl_k_yield+0x5e>
 802d20e:	46c0      	nop			; (mov r8, r8)
 802d210:	200098ac 	.word	0x200098ac
 802d214:	20008430 	.word	0x20008430
 802d218:	200098d0 	.word	0x200098d0

0802d21c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
 802d21c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 802d21e:	0006      	movs	r6, r0
{
 802d220:	0004      	movs	r4, r0
 802d222:	000d      	movs	r5, r1
	if (ticks == 0) {
 802d224:	430e      	orrs	r6, r1
 802d226:	d103      	bne.n	802d230 <z_tick_sleep+0x14>
	z_impl_k_yield();
 802d228:	f7ff ffb0 	bl	802d18c <z_impl_k_yield>
		k_yield();
		return 0;
 802d22c:	0030      	movs	r0, r6
		return ticks;
	}
#endif

	return 0;
}
 802d22e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 802d230:	f003 fd42 	bl	8030cb8 <sys_clock_tick_get_32>
 802d234:	9001      	str	r0, [sp, #4]
 802d236:	f3ef 8710 	mrs	r7, PRIMASK
 802d23a:	b672      	cpsid	i
	unready_thread(_current);
 802d23c:	4e10      	ldr	r6, [pc, #64]	; (802d280 <z_tick_sleep+0x64>)
 802d23e:	68b0      	ldr	r0, [r6, #8]
 802d240:	f7ff fec4 	bl	802cfcc <unready_thread>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 802d244:	68b0      	ldr	r0, [r6, #8]
 802d246:	0022      	movs	r2, r4
 802d248:	002b      	movs	r3, r5
 802d24a:	490e      	ldr	r1, [pc, #56]	; (802d284 <z_tick_sleep+0x68>)
 802d24c:	3018      	adds	r0, #24
 802d24e:	f000 f8f5 	bl	802d43c <z_add_timeout>
	thread->base.thread_state |= _THREAD_SUSPENDED;
 802d252:	2310      	movs	r3, #16
	z_mark_thread_as_suspended(_current);
 802d254:	68b2      	ldr	r2, [r6, #8]
 802d256:	0038      	movs	r0, r7
 802d258:	7b51      	ldrb	r1, [r2, #13]
 802d25a:	430b      	orrs	r3, r1
 802d25c:	7353      	strb	r3, [r2, #13]
 802d25e:	f7fe fbd7 	bl	802ba10 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 802d262:	f003 fd29 	bl	8030cb8 <sys_clock_tick_get_32>
 802d266:	2300      	movs	r3, #0
 802d268:	9901      	ldr	r1, [sp, #4]
 802d26a:	001d      	movs	r5, r3
 802d26c:	190a      	adds	r2, r1, r4
 802d26e:	0004      	movs	r4, r0
 802d270:	1b12      	subs	r2, r2, r4
 802d272:	41ab      	sbcs	r3, r5
 802d274:	42ab      	cmp	r3, r5
 802d276:	da00      	bge.n	802d27a <z_tick_sleep+0x5e>
 802d278:	2200      	movs	r2, #0
 802d27a:	0010      	movs	r0, r2
 802d27c:	e7d7      	b.n	802d22e <z_tick_sleep+0x12>
 802d27e:	46c0      	nop			; (mov r8, r8)
 802d280:	200098ac 	.word	0x200098ac
 802d284:	08030bcb 	.word	0x08030bcb

0802d288 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
 802d288:	b510      	push	{r4, lr}
 802d28a:	000b      	movs	r3, r1
 802d28c:	000c      	movs	r4, r1

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 802d28e:	1c42      	adds	r2, r0, #1
 802d290:	d107      	bne.n	802d2a2 <z_impl_k_sleep+0x1a>
 802d292:	3301      	adds	r3, #1
 802d294:	d105      	bne.n	802d2a2 <z_impl_k_sleep+0x1a>
		k_thread_suspend(_current);
 802d296:	4b09      	ldr	r3, [pc, #36]	; (802d2bc <z_impl_k_sleep+0x34>)
 802d298:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 802d29a:	f7ff fedb 	bl	802d054 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
 802d29e:	0020      	movs	r0, r4
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
 802d2a0:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
 802d2a2:	0021      	movs	r1, r4
 802d2a4:	f7ff ffba 	bl	802d21c <z_tick_sleep>
 802d2a8:	22fa      	movs	r2, #250	; 0xfa
 802d2aa:	2300      	movs	r3, #0
	return k_ticks_to_ms_floor64(ticks);
 802d2ac:	17c1      	asrs	r1, r0, #31
 802d2ae:	0092      	lsls	r2, r2, #2
 802d2b0:	f7f3 f91c 	bl	80204ec <__aeabi_lmul>
 802d2b4:	0509      	lsls	r1, r1, #20
 802d2b6:	0b00      	lsrs	r0, r0, #12
 802d2b8:	4308      	orrs	r0, r1
 802d2ba:	e7f1      	b.n	802d2a0 <z_impl_k_sleep+0x18>
 802d2bc:	200098ac 	.word	0x200098ac

0802d2c0 <z_impl_k_current_get>:
	 * local interrupts when reading it.
	 */
	unsigned int k = arch_irq_lock();
#endif

	k_tid_t ret = _current_cpu->current;
 802d2c0:	4b01      	ldr	r3, [pc, #4]	; (802d2c8 <z_impl_k_current_get+0x8>)

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
 802d2c2:	6898      	ldr	r0, [r3, #8]
}
 802d2c4:	4770      	bx	lr
 802d2c6:	46c0      	nop			; (mov r8, r8)
 802d2c8:	200098ac 	.word	0x200098ac

0802d2cc <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 802d2cc:	b570      	push	{r4, r5, r6, lr}
 802d2ce:	0004      	movs	r4, r0
 802d2d0:	f3ef 8610 	mrs	r6, PRIMASK
 802d2d4:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 802d2d6:	2308      	movs	r3, #8
 802d2d8:	7b42      	ldrb	r2, [r0, #13]
 802d2da:	421a      	tst	r2, r3
 802d2dc:	d005      	beq.n	802d2ea <z_thread_abort+0x1e>
	if (key != 0U) {
 802d2de:	2e00      	cmp	r6, #0
 802d2e0:	d102      	bne.n	802d2e8 <z_thread_abort+0x1c>
	__asm__ volatile(
 802d2e2:	b662      	cpsie	i
 802d2e4:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 802d2e8:	bd70      	pop	{r4, r5, r6, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
 802d2ea:	2120      	movs	r1, #32
 802d2ec:	0010      	movs	r0, r2
 802d2ee:	4388      	bics	r0, r1
 802d2f0:	0001      	movs	r1, r0
 802d2f2:	4319      	orrs	r1, r3
		if (z_is_thread_queued(thread)) {
 802d2f4:	b248      	sxtb	r0, r1
 802d2f6:	2800      	cmp	r0, #0
 802d2f8:	db20      	blt.n	802d33c <z_thread_abort+0x70>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 802d2fa:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
 802d2fc:	68a3      	ldr	r3, [r4, #8]
 802d2fe:	2b00      	cmp	r3, #0
 802d300:	d002      	beq.n	802d308 <z_thread_abort+0x3c>
			unpend_thread_no_timeout(thread);
 802d302:	0020      	movs	r0, r4
 802d304:	f003 fbf7 	bl	8030af6 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
 802d308:	0020      	movs	r0, r4
 802d30a:	3018      	adds	r0, #24
 802d30c:	f003 fc9f 	bl	8030c4e <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 802d310:	0023      	movs	r3, r4
	return list->head == list;
 802d312:	6da5      	ldr	r5, [r4, #88]	; 0x58
 802d314:	3358      	adds	r3, #88	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 802d316:	429d      	cmp	r5, r3
 802d318:	d001      	beq.n	802d31e <z_thread_abort+0x52>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 802d31a:	2d00      	cmp	r5, #0
 802d31c:	d116      	bne.n	802d34c <z_thread_abort+0x80>
		update_cache(1);
 802d31e:	2001      	movs	r0, #1
 802d320:	f7ff fe38 	bl	802cf94 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 802d324:	4b10      	ldr	r3, [pc, #64]	; (802d368 <z_thread_abort+0x9c>)
 802d326:	689b      	ldr	r3, [r3, #8]
 802d328:	42a3      	cmp	r3, r4
 802d32a:	d1d8      	bne.n	802d2de <z_thread_abort+0x12>
 802d32c:	f3ef 8305 	mrs	r3, IPSR
 802d330:	2b00      	cmp	r3, #0
 802d332:	d1d4      	bne.n	802d2de <z_thread_abort+0x12>
 802d334:	0030      	movs	r0, r6
 802d336:	f7fe fb6b 	bl	802ba10 <arch_swap>
	return ret;
 802d33a:	e7d0      	b.n	802d2de <z_thread_abort+0x12>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 802d33c:	215f      	movs	r1, #95	; 0x5f
 802d33e:	400a      	ands	r2, r1
 802d340:	4313      	orrs	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
 802d342:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
 802d344:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 802d346:	f003 fbce 	bl	8030ae6 <sys_dlist_remove>
}
 802d34a:	e7d7      	b.n	802d2fc <z_thread_abort+0x30>
		unpend_thread_no_timeout(thread);
 802d34c:	0028      	movs	r0, r5
 802d34e:	f003 fbd2 	bl	8030af6 <unpend_thread_no_timeout>
 802d352:	0028      	movs	r0, r5
 802d354:	3018      	adds	r0, #24
 802d356:	f003 fc7a 	bl	8030c4e <z_abort_timeout>
 802d35a:	2300      	movs	r3, #0
		ready_thread(thread);
 802d35c:	0028      	movs	r0, r5
 802d35e:	67ab      	str	r3, [r5, #120]	; 0x78
 802d360:	f7ff feba 	bl	802d0d8 <ready_thread>
 802d364:	e7d4      	b.n	802d310 <z_thread_abort+0x44>
 802d366:	46c0      	nop			; (mov r8, r8)
 802d368:	200098ac 	.word	0x200098ac

0802d36c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
 802d36c:	b510      	push	{r4, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 802d36e:	4806      	ldr	r0, [pc, #24]	; (802d388 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
 802d370:	4a06      	ldr	r2, [pc, #24]	; (802d38c <z_data_copy+0x20>)
 802d372:	4907      	ldr	r1, [pc, #28]	; (802d390 <z_data_copy+0x24>)
 802d374:	1a12      	subs	r2, r2, r0
 802d376:	f003 fcf3 	bl	8030d60 <memcpy>
 802d37a:	4a06      	ldr	r2, [pc, #24]	; (802d394 <z_data_copy+0x28>)
 802d37c:	4906      	ldr	r1, [pc, #24]	; (802d398 <z_data_copy+0x2c>)
 802d37e:	4807      	ldr	r0, [pc, #28]	; (802d39c <z_data_copy+0x30>)
 802d380:	f003 fcee 	bl	8030d60 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 802d384:	bd10      	pop	{r4, pc}
 802d386:	46c0      	nop			; (mov r8, r8)
 802d388:	20008000 	.word	0x20008000
 802d38c:	20008378 	.word	0x20008378
 802d390:	080322c8 	.word	0x080322c8
 802d394:	00000000 	.word	0x00000000
 802d398:	080322c8 	.word	0x080322c8
 802d39c:	20008000 	.word	0x20008000

0802d3a0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 802d3a0:	2000      	movs	r0, #0
 802d3a2:	4b04      	ldr	r3, [pc, #16]	; (802d3b4 <elapsed+0x14>)
{
 802d3a4:	b510      	push	{r4, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 802d3a6:	681b      	ldr	r3, [r3, #0]
 802d3a8:	4283      	cmp	r3, r0
 802d3aa:	d101      	bne.n	802d3b0 <elapsed+0x10>
 802d3ac:	f7f6 fbca 	bl	8023b44 <sys_clock_elapsed>
}
 802d3b0:	bd10      	pop	{r4, pc}
 802d3b2:	46c0      	nop			; (mov r8, r8)
 802d3b4:	200098d8 	.word	0x200098d8

0802d3b8 <next_timeout>:
	return list->head == list;
 802d3b8:	4b10      	ldr	r3, [pc, #64]	; (802d3fc <next_timeout+0x44>)

static int32_t next_timeout(void)
{
 802d3ba:	b5d0      	push	{r4, r6, r7, lr}
 802d3bc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 802d3be:	429c      	cmp	r4, r3
 802d3c0:	d100      	bne.n	802d3c4 <next_timeout+0xc>
 802d3c2:	2400      	movs	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 802d3c4:	f7ff ffec 	bl	802d3a0 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
 802d3c8:	2c00      	cmp	r4, #0
 802d3ca:	d012      	beq.n	802d3f2 <next_timeout+0x3a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 802d3cc:	6922      	ldr	r2, [r4, #16]
 802d3ce:	6963      	ldr	r3, [r4, #20]
 802d3d0:	0006      	movs	r6, r0
 802d3d2:	17c7      	asrs	r7, r0, #31
 802d3d4:	1b92      	subs	r2, r2, r6
 802d3d6:	41bb      	sbcs	r3, r7
	int32_t ret = to == NULL ? MAX_WAIT
 802d3d8:	2b00      	cmp	r3, #0
 802d3da:	dc02      	bgt.n	802d3e2 <next_timeout+0x2a>
 802d3dc:	d10b      	bne.n	802d3f6 <next_timeout+0x3e>
 802d3de:	2a00      	cmp	r2, #0
 802d3e0:	d009      	beq.n	802d3f6 <next_timeout+0x3e>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 802d3e2:	0010      	movs	r0, r2
 802d3e4:	2b00      	cmp	r3, #0
 802d3e6:	dc04      	bgt.n	802d3f2 <next_timeout+0x3a>
 802d3e8:	d104      	bne.n	802d3f4 <next_timeout+0x3c>
 802d3ea:	2380      	movs	r3, #128	; 0x80
 802d3ec:	061b      	lsls	r3, r3, #24
 802d3ee:	429a      	cmp	r2, r3
 802d3f0:	d300      	bcc.n	802d3f4 <next_timeout+0x3c>
	int32_t ret = to == NULL ? MAX_WAIT
 802d3f2:	4803      	ldr	r0, [pc, #12]	; (802d400 <next_timeout+0x48>)
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 802d3f4:	bdd0      	pop	{r4, r6, r7, pc}
	int32_t ret = to == NULL ? MAX_WAIT
 802d3f6:	2000      	movs	r0, #0
	return ret;
 802d3f8:	e7fc      	b.n	802d3f4 <next_timeout+0x3c>
 802d3fa:	46c0      	nop			; (mov r8, r8)
 802d3fc:	200080c8 	.word	0x200080c8
 802d400:	7fffffff 	.word	0x7fffffff

0802d404 <remove_timeout>:
{
 802d404:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
 802d406:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 802d408:	2800      	cmp	r0, #0
 802d40a:	d00d      	beq.n	802d428 <remove_timeout+0x24>
	return (node == list->tail) ? NULL : node->next;
 802d40c:	4a0a      	ldr	r2, [pc, #40]	; (802d438 <remove_timeout+0x34>)
 802d40e:	6852      	ldr	r2, [r2, #4]
 802d410:	4290      	cmp	r0, r2
 802d412:	d009      	beq.n	802d428 <remove_timeout+0x24>
	if (next(t) != NULL) {
 802d414:	2b00      	cmp	r3, #0
 802d416:	d007      	beq.n	802d428 <remove_timeout+0x24>
		next(t)->dticks += t->dticks;
 802d418:	691c      	ldr	r4, [r3, #16]
 802d41a:	695d      	ldr	r5, [r3, #20]
 802d41c:	6901      	ldr	r1, [r0, #16]
 802d41e:	6942      	ldr	r2, [r0, #20]
 802d420:	1864      	adds	r4, r4, r1
 802d422:	4155      	adcs	r5, r2
 802d424:	611c      	str	r4, [r3, #16]
 802d426:	615d      	str	r5, [r3, #20]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 802d428:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 802d42a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 802d42c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 802d42e:	2300      	movs	r3, #0
 802d430:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 802d432:	6043      	str	r3, [r0, #4]
}
 802d434:	bd30      	pop	{r4, r5, pc}
 802d436:	46c0      	nop			; (mov r8, r8)
 802d438:	200080c8 	.word	0x200080c8

0802d43c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
 802d43c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802d43e:	0007      	movs	r7, r0
 802d440:	000e      	movs	r6, r1
 802d442:	0014      	movs	r4, r2
 802d444:	001d      	movs	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 802d446:	1c53      	adds	r3, r2, #1
 802d448:	d101      	bne.n	802d44e <z_add_timeout+0x12>
 802d44a:	1c6b      	adds	r3, r5, #1
 802d44c:	d067      	beq.n	802d51e <z_add_timeout+0xe2>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;
 802d44e:	2201      	movs	r2, #1
 802d450:	2300      	movs	r3, #0
 802d452:	1912      	adds	r2, r2, r4
 802d454:	416b      	adcs	r3, r5
 802d456:	9200      	str	r2, [sp, #0]
 802d458:	9301      	str	r3, [sp, #4]

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
 802d45a:	9800      	ldr	r0, [sp, #0]
 802d45c:	9901      	ldr	r1, [sp, #4]
 802d45e:	2202      	movs	r2, #2
 802d460:	4252      	negs	r2, r2
 802d462:	17d3      	asrs	r3, r2, #31
 802d464:	1a12      	subs	r2, r2, r0
 802d466:	418b      	sbcs	r3, r1
 802d468:	2b00      	cmp	r3, #0
 802d46a:	db14      	blt.n	802d496 <z_add_timeout+0x5a>
		ticks = Z_TICK_ABS(timeout.ticks) - (curr_tick + elapsed());
 802d46c:	f7ff ff98 	bl	802d3a0 <elapsed>
 802d470:	4684      	mov	ip, r0
 802d472:	2002      	movs	r0, #2
 802d474:	4240      	negs	r0, r0
 802d476:	17c1      	asrs	r1, r0, #31
 802d478:	4b2d      	ldr	r3, [pc, #180]	; (802d530 <z_add_timeout+0xf4>)
 802d47a:	681a      	ldr	r2, [r3, #0]
 802d47c:	685b      	ldr	r3, [r3, #4]
 802d47e:	1a80      	subs	r0, r0, r2
 802d480:	4199      	sbcs	r1, r3
 802d482:	0002      	movs	r2, r0
 802d484:	000b      	movs	r3, r1
 802d486:	1b12      	subs	r2, r2, r4
 802d488:	41ab      	sbcs	r3, r5
 802d48a:	4664      	mov	r4, ip
 802d48c:	17e5      	asrs	r5, r4, #31
 802d48e:	1b12      	subs	r2, r2, r4
 802d490:	41ab      	sbcs	r3, r5
 802d492:	9200      	str	r2, [sp, #0]
 802d494:	9301      	str	r3, [sp, #4]
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 802d496:	60be      	str	r6, [r7, #8]
	__asm__ volatile("mrs %0, PRIMASK;"
 802d498:	f3ef 8610 	mrs	r6, PRIMASK
 802d49c:	b672      	cpsid	i
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
 802d49e:	f7ff ff7f 	bl	802d3a0 <elapsed>
	ticks = MAX(1, ticks);
 802d4a2:	9a00      	ldr	r2, [sp, #0]
 802d4a4:	9b01      	ldr	r3, [sp, #4]
 802d4a6:	2b00      	cmp	r3, #0
 802d4a8:	dc04      	bgt.n	802d4b4 <z_add_timeout+0x78>
 802d4aa:	d101      	bne.n	802d4b0 <z_add_timeout+0x74>
 802d4ac:	2a00      	cmp	r2, #0
 802d4ae:	d101      	bne.n	802d4b4 <z_add_timeout+0x78>
 802d4b0:	2201      	movs	r2, #1
 802d4b2:	2300      	movs	r3, #0
		to->dticks = ticks + elapsed();
 802d4b4:	0004      	movs	r4, r0
 802d4b6:	17c5      	asrs	r5, r0, #31
 802d4b8:	1912      	adds	r2, r2, r4
 802d4ba:	416b      	adcs	r3, r5
 802d4bc:	613a      	str	r2, [r7, #16]
 802d4be:	617b      	str	r3, [r7, #20]
	return list->head == list;
 802d4c0:	4a1c      	ldr	r2, [pc, #112]	; (802d534 <z_add_timeout+0xf8>)
 802d4c2:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 802d4c4:	4293      	cmp	r3, r2
 802d4c6:	d003      	beq.n	802d4d0 <z_add_timeout+0x94>
	return (node == list->tail) ? NULL : node->next;
 802d4c8:	6851      	ldr	r1, [r2, #4]
 802d4ca:	468c      	mov	ip, r1
		for (t = first(); t != NULL; t = next(t)) {
 802d4cc:	2b00      	cmp	r3, #0
 802d4ce:	d105      	bne.n	802d4dc <z_add_timeout+0xa0>
	sys_dnode_t *const tail = list->tail;
 802d4d0:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 802d4d2:	603a      	str	r2, [r7, #0]
	node->prev = tail;
 802d4d4:	607b      	str	r3, [r7, #4]
	tail->next = node;
 802d4d6:	601f      	str	r7, [r3, #0]
	list->tail = node;
 802d4d8:	6057      	str	r7, [r2, #4]
}
 802d4da:	e011      	b.n	802d500 <z_add_timeout+0xc4>
			if (t->dticks > to->dticks) {
 802d4dc:	691c      	ldr	r4, [r3, #16]
 802d4de:	695d      	ldr	r5, [r3, #20]
 802d4e0:	6938      	ldr	r0, [r7, #16]
 802d4e2:	6979      	ldr	r1, [r7, #20]
 802d4e4:	428d      	cmp	r5, r1
 802d4e6:	dc02      	bgt.n	802d4ee <z_add_timeout+0xb2>
 802d4e8:	d11a      	bne.n	802d520 <z_add_timeout+0xe4>
 802d4ea:	4284      	cmp	r4, r0
 802d4ec:	d918      	bls.n	802d520 <z_add_timeout+0xe4>
				t->dticks -= to->dticks;
 802d4ee:	1a24      	subs	r4, r4, r0
 802d4f0:	418d      	sbcs	r5, r1
	sys_dnode_t *const prev = successor->prev;
 802d4f2:	6859      	ldr	r1, [r3, #4]
 802d4f4:	611c      	str	r4, [r3, #16]
 802d4f6:	615d      	str	r5, [r3, #20]
	node->prev = prev;
 802d4f8:	6079      	str	r1, [r7, #4]
	node->next = successor;
 802d4fa:	603b      	str	r3, [r7, #0]
	prev->next = node;
 802d4fc:	600f      	str	r7, [r1, #0]
	successor->prev = node;
 802d4fe:	605f      	str	r7, [r3, #4]
	return list->head == list;
 802d500:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 802d502:	4293      	cmp	r3, r2
 802d504:	d006      	beq.n	802d514 <z_add_timeout+0xd8>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 802d506:	429f      	cmp	r7, r3
 802d508:	d104      	bne.n	802d514 <z_add_timeout+0xd8>
			if (next_time == 0 ||
			    _current_cpu->slice_ticks != next_time) {
				sys_clock_set_timeout(next_time, false);
			}
#else
			sys_clock_set_timeout(next_timeout(), false);
 802d50a:	f7ff ff55 	bl	802d3b8 <next_timeout>
 802d50e:	2100      	movs	r1, #0
 802d510:	f7f6 fac0 	bl	8023a94 <sys_clock_set_timeout>
	if (key != 0U) {
 802d514:	2e00      	cmp	r6, #0
 802d516:	d102      	bne.n	802d51e <z_add_timeout+0xe2>
	__asm__ volatile(
 802d518:	b662      	cpsie	i
 802d51a:	f3bf 8f6f 	isb	sy
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 802d51e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
 802d520:	1b00      	subs	r0, r0, r4
 802d522:	41a9      	sbcs	r1, r5
 802d524:	6138      	str	r0, [r7, #16]
 802d526:	6179      	str	r1, [r7, #20]
	return (node == list->tail) ? NULL : node->next;
 802d528:	4563      	cmp	r3, ip
 802d52a:	d0d1      	beq.n	802d4d0 <z_add_timeout+0x94>
 802d52c:	681b      	ldr	r3, [r3, #0]
 802d52e:	e7cd      	b.n	802d4cc <z_add_timeout+0x90>
 802d530:	20008530 	.word	0x20008530
 802d534:	200080c8 	.word	0x200080c8

0802d538 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 802d538:	b5f0      	push	{r4, r5, r6, r7, lr}
 802d53a:	b08b      	sub	sp, #44	; 0x2c
	__asm__ volatile("mrs %0, PRIMASK;"
 802d53c:	f3ef 8310 	mrs	r3, PRIMASK
 802d540:	b672      	cpsid	i

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
 802d542:	9305      	str	r3, [sp, #20]
	z_time_slice(ticks);
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 802d544:	4b31      	ldr	r3, [pc, #196]	; (802d60c <sys_clock_announce+0xd4>)
 802d546:	6018      	str	r0, [r3, #0]
	return list->head == list;
 802d548:	4b31      	ldr	r3, [pc, #196]	; (802d610 <sys_clock_announce+0xd8>)

	while (first() != NULL && first()->dticks <= announce_remaining) {
 802d54a:	4830      	ldr	r0, [pc, #192]	; (802d60c <sys_clock_announce+0xd4>)
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 802d54c:	4d31      	ldr	r5, [pc, #196]	; (802d614 <sys_clock_announce+0xdc>)
 802d54e:	681c      	ldr	r4, [r3, #0]
 802d550:	682e      	ldr	r6, [r5, #0]
 802d552:	686f      	ldr	r7, [r5, #4]
	while (first() != NULL && first()->dticks <= announce_remaining) {
 802d554:	6801      	ldr	r1, [r0, #0]
		curr_tick += dt;
 802d556:	9606      	str	r6, [sp, #24]
 802d558:	9707      	str	r7, [sp, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 802d55a:	429c      	cmp	r4, r3
 802d55c:	d019      	beq.n	802d592 <sys_clock_announce+0x5a>
	while (first() != NULL && first()->dticks <= announce_remaining) {
 802d55e:	2c00      	cmp	r4, #0
 802d560:	d017      	beq.n	802d592 <sys_clock_announce+0x5a>
 802d562:	6922      	ldr	r2, [r4, #16]
 802d564:	6963      	ldr	r3, [r4, #20]
 802d566:	9200      	str	r2, [sp, #0]
 802d568:	9301      	str	r3, [sp, #4]
 802d56a:	9a01      	ldr	r2, [sp, #4]
 802d56c:	17cb      	asrs	r3, r1, #31
 802d56e:	9102      	str	r1, [sp, #8]
 802d570:	9303      	str	r3, [sp, #12]
 802d572:	429a      	cmp	r2, r3
 802d574:	dc03      	bgt.n	802d57e <sys_clock_announce+0x46>
 802d576:	d123      	bne.n	802d5c0 <sys_clock_announce+0x88>
 802d578:	9a00      	ldr	r2, [sp, #0]
 802d57a:	428a      	cmp	r2, r1
 802d57c:	d920      	bls.n	802d5c0 <sys_clock_announce+0x88>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 802d57e:	9a02      	ldr	r2, [sp, #8]
 802d580:	9b03      	ldr	r3, [sp, #12]
 802d582:	9e00      	ldr	r6, [sp, #0]
 802d584:	9f01      	ldr	r7, [sp, #4]
 802d586:	1ab6      	subs	r6, r6, r2
 802d588:	419f      	sbcs	r7, r3
 802d58a:	0032      	movs	r2, r6
 802d58c:	003b      	movs	r3, r7
 802d58e:	6122      	str	r2, [r4, #16]
 802d590:	6163      	str	r3, [r4, #20]
	}

	curr_tick += announce_remaining;
 802d592:	9e06      	ldr	r6, [sp, #24]
 802d594:	9f07      	ldr	r7, [sp, #28]
 802d596:	000a      	movs	r2, r1
 802d598:	17cb      	asrs	r3, r1, #31
 802d59a:	18b6      	adds	r6, r6, r2
 802d59c:	415f      	adcs	r7, r3
	announce_remaining = 0;
 802d59e:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
 802d5a0:	602e      	str	r6, [r5, #0]
 802d5a2:	606f      	str	r7, [r5, #4]
	announce_remaining = 0;
 802d5a4:	6004      	str	r4, [r0, #0]

	sys_clock_set_timeout(next_timeout(), false);
 802d5a6:	f7ff ff07 	bl	802d3b8 <next_timeout>
 802d5aa:	0021      	movs	r1, r4
 802d5ac:	f7f6 fa72 	bl	8023a94 <sys_clock_set_timeout>
	if (key != 0U) {
 802d5b0:	9b05      	ldr	r3, [sp, #20]
 802d5b2:	42a3      	cmp	r3, r4
 802d5b4:	d102      	bne.n	802d5bc <sys_clock_announce+0x84>
	__asm__ volatile(
 802d5b6:	b662      	cpsie	i
 802d5b8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 802d5bc:	b00b      	add	sp, #44	; 0x2c
 802d5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		curr_tick += dt;
 802d5c0:	9b00      	ldr	r3, [sp, #0]
 802d5c2:	9e06      	ldr	r6, [sp, #24]
 802d5c4:	9f07      	ldr	r7, [sp, #28]
 802d5c6:	9308      	str	r3, [sp, #32]
 802d5c8:	17db      	asrs	r3, r3, #31
 802d5ca:	9309      	str	r3, [sp, #36]	; 0x24
 802d5cc:	9a08      	ldr	r2, [sp, #32]
 802d5ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802d5d0:	18b6      	adds	r6, r6, r2
 802d5d2:	415f      	adcs	r7, r3
 802d5d4:	4b0f      	ldr	r3, [pc, #60]	; (802d614 <sys_clock_announce+0xdc>)
		remove_timeout(t);
 802d5d6:	0020      	movs	r0, r4
		curr_tick += dt;
 802d5d8:	601e      	str	r6, [r3, #0]
 802d5da:	605f      	str	r7, [r3, #4]
		announce_remaining -= dt;
 802d5dc:	9b00      	ldr	r3, [sp, #0]
 802d5de:	1aca      	subs	r2, r1, r3
 802d5e0:	4b0a      	ldr	r3, [pc, #40]	; (802d60c <sys_clock_announce+0xd4>)
 802d5e2:	601a      	str	r2, [r3, #0]
		t->dticks = 0;
 802d5e4:	2300      	movs	r3, #0
 802d5e6:	2200      	movs	r2, #0
 802d5e8:	6122      	str	r2, [r4, #16]
 802d5ea:	6163      	str	r3, [r4, #20]
		remove_timeout(t);
 802d5ec:	f7ff ff0a 	bl	802d404 <remove_timeout>
	if (key != 0U) {
 802d5f0:	9b05      	ldr	r3, [sp, #20]
 802d5f2:	2b00      	cmp	r3, #0
 802d5f4:	d102      	bne.n	802d5fc <sys_clock_announce+0xc4>
	__asm__ volatile(
 802d5f6:	b662      	cpsie	i
 802d5f8:	f3bf 8f6f 	isb	sy
		t->fn(t);
 802d5fc:	0020      	movs	r0, r4
 802d5fe:	68a3      	ldr	r3, [r4, #8]
 802d600:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
 802d602:	f3ef 8310 	mrs	r3, PRIMASK
 802d606:	b672      	cpsid	i
 802d608:	9305      	str	r3, [sp, #20]
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 802d60a:	e79d      	b.n	802d548 <sys_clock_announce+0x10>
 802d60c:	200098d8 	.word	0x200098d8
 802d610:	200080c8 	.word	0x200080c8
 802d614:	20008530 	.word	0x20008530

0802d618 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 802d618:	b510      	push	{r4, lr}
 802d61a:	f3ef 8410 	mrs	r4, PRIMASK
 802d61e:	b672      	cpsid	i
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
 802d620:	f7f6 fa90 	bl	8023b44 <sys_clock_elapsed>
 802d624:	2300      	movs	r3, #0
 802d626:	0002      	movs	r2, r0
 802d628:	4905      	ldr	r1, [pc, #20]	; (802d640 <sys_clock_tick_get+0x28>)
 802d62a:	6808      	ldr	r0, [r1, #0]
 802d62c:	6849      	ldr	r1, [r1, #4]
 802d62e:	1880      	adds	r0, r0, r2
 802d630:	4159      	adcs	r1, r3
	if (key != 0U) {
 802d632:	429c      	cmp	r4, r3
 802d634:	d102      	bne.n	802d63c <sys_clock_tick_get+0x24>
	__asm__ volatile(
 802d636:	b662      	cpsie	i
 802d638:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 802d63c:	bd10      	pop	{r4, pc}
 802d63e:	46c0      	nop			; (mov r8, r8)
 802d640:	20008530 	.word	0x20008530

0802d644 <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 802d644:	2201      	movs	r2, #1
 802d646:	2300      	movs	r3, #0
{
 802d648:	b570      	push	{r4, r5, r6, lr}
 802d64a:	0004      	movs	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 802d64c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 802d64e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 802d650:	1812      	adds	r2, r2, r0
 802d652:	414b      	adcs	r3, r1
 802d654:	2b00      	cmp	r3, #0
 802d656:	d101      	bne.n	802d65c <z_timer_expiration_handler+0x18>
 802d658:	2a01      	cmp	r2, #1
 802d65a:	d905      	bls.n	802d668 <z_timer_expiration_handler+0x24>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 802d65c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 802d65e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 802d660:	0020      	movs	r0, r4
 802d662:	490d      	ldr	r1, [pc, #52]	; (802d698 <z_timer_expiration_handler+0x54>)
 802d664:	f7ff feea 	bl	802d43c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 802d668:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802d66a:	3301      	adds	r3, #1
 802d66c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 802d66e:	6a23      	ldr	r3, [r4, #32]
 802d670:	2b00      	cmp	r3, #0
 802d672:	d001      	beq.n	802d678 <z_timer_expiration_handler+0x34>
		timer->expiry_fn(timer);
 802d674:	0020      	movs	r0, r4
 802d676:	4798      	blx	r3
	return list->head == list;
 802d678:	69a5      	ldr	r5, [r4, #24]
 802d67a:	3418      	adds	r4, #24
	return sys_dlist_is_empty(list) ? NULL : list->head;
 802d67c:	42a5      	cmp	r5, r4
 802d67e:	d009      	beq.n	802d694 <z_timer_expiration_handler+0x50>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 802d680:	2d00      	cmp	r5, #0
 802d682:	d007      	beq.n	802d694 <z_timer_expiration_handler+0x50>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
 802d684:	0028      	movs	r0, r5
 802d686:	f003 fa41 	bl	8030b0c <z_unpend_thread_no_timeout>
 802d68a:	2300      	movs	r3, #0

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
 802d68c:	0028      	movs	r0, r5
 802d68e:	67ab      	str	r3, [r5, #120]	; 0x78
 802d690:	f003 fa8f 	bl	8030bb2 <z_ready_thread>
}
 802d694:	bd70      	pop	{r4, r5, r6, pc}
 802d696:	46c0      	nop			; (mov r8, r8)
 802d698:	0802d645 	.word	0x0802d645

0802d69c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 802d69c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802d69e:	b085      	sub	sp, #20
 802d6a0:	0019      	movs	r1, r3
 802d6a2:	9003      	str	r0, [sp, #12]
 802d6a4:	0010      	movs	r0, r2
 802d6a6:	9000      	str	r0, [sp, #0]
 802d6a8:	9101      	str	r1, [sp, #4]
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 802d6aa:	1c53      	adds	r3, r2, #1
 802d6ac:	d101      	bne.n	802d6b2 <z_impl_k_timer_start+0x16>
 802d6ae:	1c4b      	adds	r3, r1, #1
 802d6b0:	d046      	beq.n	802d740 <z_impl_k_timer_start+0xa4>
 802d6b2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802d6b4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 802d6b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802d6b8:	3301      	adds	r3, #1
 802d6ba:	d102      	bne.n	802d6c2 <z_impl_k_timer_start+0x26>
 802d6bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802d6be:	3301      	adds	r3, #1
 802d6c0:	d01a      	beq.n	802d6f8 <z_impl_k_timer_start+0x5c>
 802d6c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802d6c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802d6c6:	4313      	orrs	r3, r2
 802d6c8:	d016      	beq.n	802d6f8 <z_impl_k_timer_start+0x5c>
	    Z_TICK_ABS(period.ticks) < 0) {
 802d6ca:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 802d6cc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802d6ce:	2202      	movs	r2, #2
 802d6d0:	4252      	negs	r2, r2
 802d6d2:	17d3      	asrs	r3, r2, #31
 802d6d4:	1b92      	subs	r2, r2, r6
 802d6d6:	41bb      	sbcs	r3, r7
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 802d6d8:	2b00      	cmp	r3, #0
 802d6da:	da0d      	bge.n	802d6f8 <z_impl_k_timer_start+0x5c>
		period.ticks = MAX(period.ticks - 1, 1);
 802d6dc:	2401      	movs	r4, #1
 802d6de:	4264      	negs	r4, r4
 802d6e0:	17e5      	asrs	r5, r4, #31
 802d6e2:	0032      	movs	r2, r6
 802d6e4:	003b      	movs	r3, r7
 802d6e6:	18a4      	adds	r4, r4, r2
 802d6e8:	415d      	adcs	r5, r3
 802d6ea:	2d00      	cmp	r5, #0
 802d6ec:	dc04      	bgt.n	802d6f8 <z_impl_k_timer_start+0x5c>
 802d6ee:	d101      	bne.n	802d6f4 <z_impl_k_timer_start+0x58>
 802d6f0:	2c00      	cmp	r4, #0
 802d6f2:	d101      	bne.n	802d6f8 <z_impl_k_timer_start+0x5c>
 802d6f4:	2401      	movs	r4, #1
 802d6f6:	2500      	movs	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 802d6f8:	2202      	movs	r2, #2
 802d6fa:	4252      	negs	r2, r2
 802d6fc:	17d3      	asrs	r3, r2, #31
 802d6fe:	1a12      	subs	r2, r2, r0
 802d700:	418b      	sbcs	r3, r1
 802d702:	2b00      	cmp	r3, #0
 802d704:	da0d      	bge.n	802d722 <z_impl_k_timer_start+0x86>
		duration.ticks = MAX(duration.ticks - 1, 0);
 802d706:	2601      	movs	r6, #1
 802d708:	4276      	negs	r6, r6
 802d70a:	17f7      	asrs	r7, r6, #31
 802d70c:	1836      	adds	r6, r6, r0
 802d70e:	414f      	adcs	r7, r1
 802d710:	9600      	str	r6, [sp, #0]
 802d712:	9701      	str	r7, [sp, #4]
 802d714:	9b01      	ldr	r3, [sp, #4]
 802d716:	2b00      	cmp	r3, #0
 802d718:	da03      	bge.n	802d722 <z_impl_k_timer_start+0x86>
 802d71a:	2200      	movs	r2, #0
 802d71c:	2300      	movs	r3, #0
 802d71e:	9200      	str	r2, [sp, #0]
 802d720:	9301      	str	r3, [sp, #4]
	}

	(void)z_abort_timeout(&timer->timeout);
 802d722:	9803      	ldr	r0, [sp, #12]
 802d724:	f003 fa93 	bl	8030c4e <z_abort_timeout>
	timer->period = period;
 802d728:	9b03      	ldr	r3, [sp, #12]
	timer->status = 0U;
 802d72a:	9a03      	ldr	r2, [sp, #12]
	timer->period = period;
 802d72c:	629c      	str	r4, [r3, #40]	; 0x28
 802d72e:	62dd      	str	r5, [r3, #44]	; 0x2c
	timer->status = 0U;
 802d730:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 802d732:	4904      	ldr	r1, [pc, #16]	; (802d744 <z_impl_k_timer_start+0xa8>)
	timer->status = 0U;
 802d734:	6313      	str	r3, [r2, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 802d736:	9803      	ldr	r0, [sp, #12]
 802d738:	9a00      	ldr	r2, [sp, #0]
 802d73a:	9b01      	ldr	r3, [sp, #4]
 802d73c:	f7ff fe7e 	bl	802d43c <z_add_timeout>
		     duration);
}
 802d740:	b005      	add	sp, #20
 802d742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d744:	0802d645 	.word	0x0802d645

0802d748 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
 802d748:	b510      	push	{r4, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 802d74a:	4a03      	ldr	r2, [pc, #12]	; (802d758 <boot_banner+0x10>)
 802d74c:	4903      	ldr	r1, [pc, #12]	; (802d75c <boot_banner+0x14>)
 802d74e:	4804      	ldr	r0, [pc, #16]	; (802d760 <boot_banner+0x18>)
 802d750:	f000 ffa7 	bl	802e6a2 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
 802d754:	bd10      	pop	{r4, pc}
 802d756:	46c0      	nop			; (mov r8, r8)
 802d758:	080319e9 	.word	0x080319e9
 802d75c:	0803210d 	.word	0x0803210d
 802d760:	0803212e 	.word	0x0803212e

0802d764 <floor>:
 802d764:	4a47      	ldr	r2, [pc, #284]	; (802d884 <floor+0x120>)
 802d766:	b5f0      	push	{r4, r5, r6, r7, lr}
 802d768:	4646      	mov	r6, r8
 802d76a:	4690      	mov	r8, r2
 802d76c:	004b      	lsls	r3, r1, #1
 802d76e:	0d5b      	lsrs	r3, r3, #21
 802d770:	4498      	add	r8, r3
 802d772:	464f      	mov	r7, r9
 802d774:	46d6      	mov	lr, sl
 802d776:	4642      	mov	r2, r8
 802d778:	b5c0      	push	{r6, r7, lr}
 802d77a:	0005      	movs	r5, r0
 802d77c:	000c      	movs	r4, r1
 802d77e:	000e      	movs	r6, r1
 802d780:	0007      	movs	r7, r0
 802d782:	2a13      	cmp	r2, #19
 802d784:	dc39      	bgt.n	802d7fa <floor+0x96>
 802d786:	2a00      	cmp	r2, #0
 802d788:	db26      	blt.n	802d7d8 <floor+0x74>
 802d78a:	4b3f      	ldr	r3, [pc, #252]	; (802d888 <floor+0x124>)
 802d78c:	4684      	mov	ip, r0
 802d78e:	4113      	asrs	r3, r2
 802d790:	4699      	mov	r9, r3
 802d792:	400b      	ands	r3, r1
 802d794:	468a      	mov	sl, r1
 802d796:	4303      	orrs	r3, r0
 802d798:	d017      	beq.n	802d7ca <floor+0x66>
 802d79a:	4a3c      	ldr	r2, [pc, #240]	; (802d88c <floor+0x128>)
 802d79c:	4b3c      	ldr	r3, [pc, #240]	; (802d890 <floor+0x12c>)
 802d79e:	0028      	movs	r0, r5
 802d7a0:	0021      	movs	r1, r4
 802d7a2:	f7f3 fe51 	bl	8021448 <__aeabi_dadd>
 802d7a6:	2200      	movs	r2, #0
 802d7a8:	2300      	movs	r3, #0
 802d7aa:	f7f4 fab9 	bl	8021d20 <__aeabi_dcmpgt>
 802d7ae:	2800      	cmp	r0, #0
 802d7b0:	d009      	beq.n	802d7c6 <floor+0x62>
 802d7b2:	2c00      	cmp	r4, #0
 802d7b4:	da04      	bge.n	802d7c0 <floor+0x5c>
 802d7b6:	2680      	movs	r6, #128	; 0x80
 802d7b8:	4643      	mov	r3, r8
 802d7ba:	0376      	lsls	r6, r6, #13
 802d7bc:	411e      	asrs	r6, r3
 802d7be:	1936      	adds	r6, r6, r4
 802d7c0:	464b      	mov	r3, r9
 802d7c2:	2700      	movs	r7, #0
 802d7c4:	439e      	bics	r6, r3
 802d7c6:	46bc      	mov	ip, r7
 802d7c8:	46b2      	mov	sl, r6
 802d7ca:	4651      	mov	r1, sl
 802d7cc:	4660      	mov	r0, ip
 802d7ce:	bce0      	pop	{r5, r6, r7}
 802d7d0:	46ba      	mov	sl, r7
 802d7d2:	46b1      	mov	r9, r6
 802d7d4:	46a8      	mov	r8, r5
 802d7d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d7d8:	4a2c      	ldr	r2, [pc, #176]	; (802d88c <floor+0x128>)
 802d7da:	4b2d      	ldr	r3, [pc, #180]	; (802d890 <floor+0x12c>)
 802d7dc:	0028      	movs	r0, r5
 802d7de:	0021      	movs	r1, r4
 802d7e0:	f7f3 fe32 	bl	8021448 <__aeabi_dadd>
 802d7e4:	2200      	movs	r2, #0
 802d7e6:	2300      	movs	r3, #0
 802d7e8:	f7f4 fa9a 	bl	8021d20 <__aeabi_dcmpgt>
 802d7ec:	2800      	cmp	r0, #0
 802d7ee:	d0ea      	beq.n	802d7c6 <floor+0x62>
 802d7f0:	2c00      	cmp	r4, #0
 802d7f2:	db2f      	blt.n	802d854 <floor+0xf0>
 802d7f4:	2700      	movs	r7, #0
 802d7f6:	2600      	movs	r6, #0
 802d7f8:	e7e5      	b.n	802d7c6 <floor+0x62>
 802d7fa:	2a33      	cmp	r2, #51	; 0x33
 802d7fc:	dd0e      	ble.n	802d81c <floor+0xb8>
 802d7fe:	2380      	movs	r3, #128	; 0x80
 802d800:	4684      	mov	ip, r0
 802d802:	468a      	mov	sl, r1
 802d804:	00db      	lsls	r3, r3, #3
 802d806:	4598      	cmp	r8, r3
 802d808:	d1df      	bne.n	802d7ca <floor+0x66>
 802d80a:	0002      	movs	r2, r0
 802d80c:	000b      	movs	r3, r1
 802d80e:	0028      	movs	r0, r5
 802d810:	0021      	movs	r1, r4
 802d812:	f7f3 fe19 	bl	8021448 <__aeabi_dadd>
 802d816:	4684      	mov	ip, r0
 802d818:	468a      	mov	sl, r1
 802d81a:	e7d6      	b.n	802d7ca <floor+0x66>
 802d81c:	4a1d      	ldr	r2, [pc, #116]	; (802d894 <floor+0x130>)
 802d81e:	468a      	mov	sl, r1
 802d820:	4694      	mov	ip, r2
 802d822:	2201      	movs	r2, #1
 802d824:	4463      	add	r3, ip
 802d826:	4252      	negs	r2, r2
 802d828:	40da      	lsrs	r2, r3
 802d82a:	4684      	mov	ip, r0
 802d82c:	4691      	mov	r9, r2
 802d82e:	4202      	tst	r2, r0
 802d830:	d0cb      	beq.n	802d7ca <floor+0x66>
 802d832:	4a16      	ldr	r2, [pc, #88]	; (802d88c <floor+0x128>)
 802d834:	4b16      	ldr	r3, [pc, #88]	; (802d890 <floor+0x12c>)
 802d836:	0028      	movs	r0, r5
 802d838:	0021      	movs	r1, r4
 802d83a:	f7f3 fe05 	bl	8021448 <__aeabi_dadd>
 802d83e:	2200      	movs	r2, #0
 802d840:	2300      	movs	r3, #0
 802d842:	f7f4 fa6d 	bl	8021d20 <__aeabi_dcmpgt>
 802d846:	2800      	cmp	r0, #0
 802d848:	d0bd      	beq.n	802d7c6 <floor+0x62>
 802d84a:	2c00      	cmp	r4, #0
 802d84c:	db09      	blt.n	802d862 <floor+0xfe>
 802d84e:	464b      	mov	r3, r9
 802d850:	439f      	bics	r7, r3
 802d852:	e7b8      	b.n	802d7c6 <floor+0x62>
 802d854:	0064      	lsls	r4, r4, #1
 802d856:	0864      	lsrs	r4, r4, #1
 802d858:	2700      	movs	r7, #0
 802d85a:	4325      	orrs	r5, r4
 802d85c:	d0b3      	beq.n	802d7c6 <floor+0x62>
 802d85e:	4e0e      	ldr	r6, [pc, #56]	; (802d898 <floor+0x134>)
 802d860:	e7b1      	b.n	802d7c6 <floor+0x62>
 802d862:	4643      	mov	r3, r8
 802d864:	2b14      	cmp	r3, #20
 802d866:	d009      	beq.n	802d87c <floor+0x118>
 802d868:	2234      	movs	r2, #52	; 0x34
 802d86a:	1ad2      	subs	r2, r2, r3
 802d86c:	2301      	movs	r3, #1
 802d86e:	4093      	lsls	r3, r2
 802d870:	195d      	adds	r5, r3, r5
 802d872:	42bd      	cmp	r5, r7
 802d874:	d204      	bcs.n	802d880 <floor+0x11c>
 802d876:	002f      	movs	r7, r5
 802d878:	1c66      	adds	r6, r4, #1
 802d87a:	e7e8      	b.n	802d84e <floor+0xea>
 802d87c:	1c66      	adds	r6, r4, #1
 802d87e:	e7e6      	b.n	802d84e <floor+0xea>
 802d880:	002f      	movs	r7, r5
 802d882:	e7e4      	b.n	802d84e <floor+0xea>
 802d884:	fffffc01 	.word	0xfffffc01
 802d888:	000fffff 	.word	0x000fffff
 802d88c:	8800759c 	.word	0x8800759c
 802d890:	7e37e43c 	.word	0x7e37e43c
 802d894:	fffffbed 	.word	0xfffffbed
 802d898:	bff00000 	.word	0xbff00000

0802d89c <__assert_func>:
 802d89c:	b530      	push	{r4, r5, lr}
 802d89e:	0014      	movs	r4, r2
 802d8a0:	001a      	movs	r2, r3
 802d8a2:	4b09      	ldr	r3, [pc, #36]	; (802d8c8 <__assert_func+0x2c>)
 802d8a4:	0005      	movs	r5, r0
 802d8a6:	681b      	ldr	r3, [r3, #0]
 802d8a8:	b085      	sub	sp, #20
 802d8aa:	68d8      	ldr	r0, [r3, #12]
 802d8ac:	4b07      	ldr	r3, [pc, #28]	; (802d8cc <__assert_func+0x30>)
 802d8ae:	2c00      	cmp	r4, #0
 802d8b0:	d101      	bne.n	802d8b6 <__assert_func+0x1a>
 802d8b2:	4b07      	ldr	r3, [pc, #28]	; (802d8d0 <__assert_func+0x34>)
 802d8b4:	001c      	movs	r4, r3
 802d8b6:	9301      	str	r3, [sp, #4]
 802d8b8:	9100      	str	r1, [sp, #0]
 802d8ba:	002b      	movs	r3, r5
 802d8bc:	4905      	ldr	r1, [pc, #20]	; (802d8d4 <__assert_func+0x38>)
 802d8be:	9402      	str	r4, [sp, #8]
 802d8c0:	f000 f80a 	bl	802d8d8 <fiprintf>
 802d8c4:	f003 fb12 	bl	8030eec <abort>
 802d8c8:	200080d0 	.word	0x200080d0
 802d8cc:	08032155 	.word	0x08032155
 802d8d0:	080319e9 	.word	0x080319e9
 802d8d4:	08032162 	.word	0x08032162

0802d8d8 <fiprintf>:
 802d8d8:	b40e      	push	{r1, r2, r3}
 802d8da:	b503      	push	{r0, r1, lr}
 802d8dc:	0001      	movs	r1, r0
 802d8de:	ab03      	add	r3, sp, #12
 802d8e0:	4804      	ldr	r0, [pc, #16]	; (802d8f4 <fiprintf+0x1c>)
 802d8e2:	cb04      	ldmia	r3!, {r2}
 802d8e4:	6800      	ldr	r0, [r0, #0]
 802d8e6:	9301      	str	r3, [sp, #4]
 802d8e8:	f000 f806 	bl	802d8f8 <_vfiprintf_r>
 802d8ec:	b002      	add	sp, #8
 802d8ee:	bc08      	pop	{r3}
 802d8f0:	b003      	add	sp, #12
 802d8f2:	4718      	bx	r3
 802d8f4:	200080d0 	.word	0x200080d0

0802d8f8 <_vfiprintf_r>:
 802d8f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 802d8fa:	b0a1      	sub	sp, #132	; 0x84
 802d8fc:	0006      	movs	r6, r0
 802d8fe:	000c      	movs	r4, r1
 802d900:	001f      	movs	r7, r3
 802d902:	9203      	str	r2, [sp, #12]
 802d904:	2800      	cmp	r0, #0
 802d906:	d004      	beq.n	802d912 <_vfiprintf_r+0x1a>
 802d908:	6983      	ldr	r3, [r0, #24]
 802d90a:	2b00      	cmp	r3, #0
 802d90c:	d101      	bne.n	802d912 <_vfiprintf_r+0x1a>
 802d90e:	f000 fc25 	bl	802e15c <__sinit>
 802d912:	4b8e      	ldr	r3, [pc, #568]	; (802db4c <_vfiprintf_r+0x254>)
 802d914:	429c      	cmp	r4, r3
 802d916:	d11c      	bne.n	802d952 <_vfiprintf_r+0x5a>
 802d918:	6874      	ldr	r4, [r6, #4]
 802d91a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802d91c:	07db      	lsls	r3, r3, #31
 802d91e:	d405      	bmi.n	802d92c <_vfiprintf_r+0x34>
 802d920:	89a3      	ldrh	r3, [r4, #12]
 802d922:	059b      	lsls	r3, r3, #22
 802d924:	d402      	bmi.n	802d92c <_vfiprintf_r+0x34>
 802d926:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802d928:	f003 fb1e 	bl	8030f68 <__retarget_lock_acquire_recursive>
 802d92c:	89a3      	ldrh	r3, [r4, #12]
 802d92e:	071b      	lsls	r3, r3, #28
 802d930:	d502      	bpl.n	802d938 <_vfiprintf_r+0x40>
 802d932:	6923      	ldr	r3, [r4, #16]
 802d934:	2b00      	cmp	r3, #0
 802d936:	d11d      	bne.n	802d974 <_vfiprintf_r+0x7c>
 802d938:	0021      	movs	r1, r4
 802d93a:	0030      	movs	r0, r6
 802d93c:	f000 fa7e 	bl	802de3c <__swsetup_r>
 802d940:	2800      	cmp	r0, #0
 802d942:	d017      	beq.n	802d974 <_vfiprintf_r+0x7c>
 802d944:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802d946:	07db      	lsls	r3, r3, #31
 802d948:	d50d      	bpl.n	802d966 <_vfiprintf_r+0x6e>
 802d94a:	2001      	movs	r0, #1
 802d94c:	4240      	negs	r0, r0
 802d94e:	b021      	add	sp, #132	; 0x84
 802d950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d952:	4b7f      	ldr	r3, [pc, #508]	; (802db50 <_vfiprintf_r+0x258>)
 802d954:	429c      	cmp	r4, r3
 802d956:	d101      	bne.n	802d95c <_vfiprintf_r+0x64>
 802d958:	68b4      	ldr	r4, [r6, #8]
 802d95a:	e7de      	b.n	802d91a <_vfiprintf_r+0x22>
 802d95c:	4b7d      	ldr	r3, [pc, #500]	; (802db54 <_vfiprintf_r+0x25c>)
 802d95e:	429c      	cmp	r4, r3
 802d960:	d1db      	bne.n	802d91a <_vfiprintf_r+0x22>
 802d962:	68f4      	ldr	r4, [r6, #12]
 802d964:	e7d9      	b.n	802d91a <_vfiprintf_r+0x22>
 802d966:	89a3      	ldrh	r3, [r4, #12]
 802d968:	059b      	lsls	r3, r3, #22
 802d96a:	d4ee      	bmi.n	802d94a <_vfiprintf_r+0x52>
 802d96c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802d96e:	f003 fafc 	bl	8030f6a <__retarget_lock_release_recursive>
 802d972:	e7ea      	b.n	802d94a <_vfiprintf_r+0x52>
 802d974:	2300      	movs	r3, #0
 802d976:	ad08      	add	r5, sp, #32
 802d978:	616b      	str	r3, [r5, #20]
 802d97a:	3320      	adds	r3, #32
 802d97c:	766b      	strb	r3, [r5, #25]
 802d97e:	3310      	adds	r3, #16
 802d980:	76ab      	strb	r3, [r5, #26]
 802d982:	9707      	str	r7, [sp, #28]
 802d984:	9f03      	ldr	r7, [sp, #12]
 802d986:	783b      	ldrb	r3, [r7, #0]
 802d988:	2b00      	cmp	r3, #0
 802d98a:	d001      	beq.n	802d990 <_vfiprintf_r+0x98>
 802d98c:	2b25      	cmp	r3, #37	; 0x25
 802d98e:	d14e      	bne.n	802da2e <_vfiprintf_r+0x136>
 802d990:	9b03      	ldr	r3, [sp, #12]
 802d992:	1afb      	subs	r3, r7, r3
 802d994:	9305      	str	r3, [sp, #20]
 802d996:	9b03      	ldr	r3, [sp, #12]
 802d998:	429f      	cmp	r7, r3
 802d99a:	d00d      	beq.n	802d9b8 <_vfiprintf_r+0xc0>
 802d99c:	9b05      	ldr	r3, [sp, #20]
 802d99e:	0021      	movs	r1, r4
 802d9a0:	0030      	movs	r0, r6
 802d9a2:	9a03      	ldr	r2, [sp, #12]
 802d9a4:	f003 fa02 	bl	8030dac <__sfputs_r>
 802d9a8:	1c43      	adds	r3, r0, #1
 802d9aa:	d100      	bne.n	802d9ae <_vfiprintf_r+0xb6>
 802d9ac:	e0b5      	b.n	802db1a <_vfiprintf_r+0x222>
 802d9ae:	696a      	ldr	r2, [r5, #20]
 802d9b0:	9b05      	ldr	r3, [sp, #20]
 802d9b2:	4694      	mov	ip, r2
 802d9b4:	4463      	add	r3, ip
 802d9b6:	616b      	str	r3, [r5, #20]
 802d9b8:	783b      	ldrb	r3, [r7, #0]
 802d9ba:	2b00      	cmp	r3, #0
 802d9bc:	d100      	bne.n	802d9c0 <_vfiprintf_r+0xc8>
 802d9be:	e0ac      	b.n	802db1a <_vfiprintf_r+0x222>
 802d9c0:	2201      	movs	r2, #1
 802d9c2:	1c7b      	adds	r3, r7, #1
 802d9c4:	9303      	str	r3, [sp, #12]
 802d9c6:	2300      	movs	r3, #0
 802d9c8:	4252      	negs	r2, r2
 802d9ca:	606a      	str	r2, [r5, #4]
 802d9cc:	a904      	add	r1, sp, #16
 802d9ce:	3254      	adds	r2, #84	; 0x54
 802d9d0:	1852      	adds	r2, r2, r1
 802d9d2:	602b      	str	r3, [r5, #0]
 802d9d4:	60eb      	str	r3, [r5, #12]
 802d9d6:	60ab      	str	r3, [r5, #8]
 802d9d8:	7013      	strb	r3, [r2, #0]
 802d9da:	65ab      	str	r3, [r5, #88]	; 0x58
 802d9dc:	9b03      	ldr	r3, [sp, #12]
 802d9de:	2205      	movs	r2, #5
 802d9e0:	7819      	ldrb	r1, [r3, #0]
 802d9e2:	485d      	ldr	r0, [pc, #372]	; (802db58 <_vfiprintf_r+0x260>)
 802d9e4:	f003 fac2 	bl	8030f6c <memchr>
 802d9e8:	9b03      	ldr	r3, [sp, #12]
 802d9ea:	1c5f      	adds	r7, r3, #1
 802d9ec:	2800      	cmp	r0, #0
 802d9ee:	d120      	bne.n	802da32 <_vfiprintf_r+0x13a>
 802d9f0:	682a      	ldr	r2, [r5, #0]
 802d9f2:	06d3      	lsls	r3, r2, #27
 802d9f4:	d504      	bpl.n	802da00 <_vfiprintf_r+0x108>
 802d9f6:	2353      	movs	r3, #83	; 0x53
 802d9f8:	a904      	add	r1, sp, #16
 802d9fa:	185b      	adds	r3, r3, r1
 802d9fc:	2120      	movs	r1, #32
 802d9fe:	7019      	strb	r1, [r3, #0]
 802da00:	0713      	lsls	r3, r2, #28
 802da02:	d504      	bpl.n	802da0e <_vfiprintf_r+0x116>
 802da04:	2353      	movs	r3, #83	; 0x53
 802da06:	a904      	add	r1, sp, #16
 802da08:	185b      	adds	r3, r3, r1
 802da0a:	212b      	movs	r1, #43	; 0x2b
 802da0c:	7019      	strb	r1, [r3, #0]
 802da0e:	9b03      	ldr	r3, [sp, #12]
 802da10:	781b      	ldrb	r3, [r3, #0]
 802da12:	2b2a      	cmp	r3, #42	; 0x2a
 802da14:	d016      	beq.n	802da44 <_vfiprintf_r+0x14c>
 802da16:	2100      	movs	r1, #0
 802da18:	68eb      	ldr	r3, [r5, #12]
 802da1a:	9f03      	ldr	r7, [sp, #12]
 802da1c:	783a      	ldrb	r2, [r7, #0]
 802da1e:	1c78      	adds	r0, r7, #1
 802da20:	3a30      	subs	r2, #48	; 0x30
 802da22:	4684      	mov	ip, r0
 802da24:	2a09      	cmp	r2, #9
 802da26:	d94f      	bls.n	802dac8 <_vfiprintf_r+0x1d0>
 802da28:	2900      	cmp	r1, #0
 802da2a:	d111      	bne.n	802da50 <_vfiprintf_r+0x158>
 802da2c:	e017      	b.n	802da5e <_vfiprintf_r+0x166>
 802da2e:	3701      	adds	r7, #1
 802da30:	e7a9      	b.n	802d986 <_vfiprintf_r+0x8e>
 802da32:	4b49      	ldr	r3, [pc, #292]	; (802db58 <_vfiprintf_r+0x260>)
 802da34:	682a      	ldr	r2, [r5, #0]
 802da36:	1ac0      	subs	r0, r0, r3
 802da38:	2301      	movs	r3, #1
 802da3a:	4083      	lsls	r3, r0
 802da3c:	4313      	orrs	r3, r2
 802da3e:	602b      	str	r3, [r5, #0]
 802da40:	9703      	str	r7, [sp, #12]
 802da42:	e7cb      	b.n	802d9dc <_vfiprintf_r+0xe4>
 802da44:	9b07      	ldr	r3, [sp, #28]
 802da46:	1d19      	adds	r1, r3, #4
 802da48:	681b      	ldr	r3, [r3, #0]
 802da4a:	9107      	str	r1, [sp, #28]
 802da4c:	2b00      	cmp	r3, #0
 802da4e:	db01      	blt.n	802da54 <_vfiprintf_r+0x15c>
 802da50:	930b      	str	r3, [sp, #44]	; 0x2c
 802da52:	e004      	b.n	802da5e <_vfiprintf_r+0x166>
 802da54:	425b      	negs	r3, r3
 802da56:	60eb      	str	r3, [r5, #12]
 802da58:	2302      	movs	r3, #2
 802da5a:	4313      	orrs	r3, r2
 802da5c:	602b      	str	r3, [r5, #0]
 802da5e:	783b      	ldrb	r3, [r7, #0]
 802da60:	2b2e      	cmp	r3, #46	; 0x2e
 802da62:	d10a      	bne.n	802da7a <_vfiprintf_r+0x182>
 802da64:	787b      	ldrb	r3, [r7, #1]
 802da66:	2b2a      	cmp	r3, #42	; 0x2a
 802da68:	d137      	bne.n	802dada <_vfiprintf_r+0x1e2>
 802da6a:	9b07      	ldr	r3, [sp, #28]
 802da6c:	3702      	adds	r7, #2
 802da6e:	1d1a      	adds	r2, r3, #4
 802da70:	681b      	ldr	r3, [r3, #0]
 802da72:	9207      	str	r2, [sp, #28]
 802da74:	2b00      	cmp	r3, #0
 802da76:	db2d      	blt.n	802dad4 <_vfiprintf_r+0x1dc>
 802da78:	9309      	str	r3, [sp, #36]	; 0x24
 802da7a:	2203      	movs	r2, #3
 802da7c:	7839      	ldrb	r1, [r7, #0]
 802da7e:	4837      	ldr	r0, [pc, #220]	; (802db5c <_vfiprintf_r+0x264>)
 802da80:	f003 fa74 	bl	8030f6c <memchr>
 802da84:	2800      	cmp	r0, #0
 802da86:	d007      	beq.n	802da98 <_vfiprintf_r+0x1a0>
 802da88:	4b34      	ldr	r3, [pc, #208]	; (802db5c <_vfiprintf_r+0x264>)
 802da8a:	682a      	ldr	r2, [r5, #0]
 802da8c:	1ac0      	subs	r0, r0, r3
 802da8e:	2340      	movs	r3, #64	; 0x40
 802da90:	4083      	lsls	r3, r0
 802da92:	4313      	orrs	r3, r2
 802da94:	3701      	adds	r7, #1
 802da96:	602b      	str	r3, [r5, #0]
 802da98:	7839      	ldrb	r1, [r7, #0]
 802da9a:	1c7b      	adds	r3, r7, #1
 802da9c:	2206      	movs	r2, #6
 802da9e:	4830      	ldr	r0, [pc, #192]	; (802db60 <_vfiprintf_r+0x268>)
 802daa0:	9303      	str	r3, [sp, #12]
 802daa2:	7629      	strb	r1, [r5, #24]
 802daa4:	f003 fa62 	bl	8030f6c <memchr>
 802daa8:	2800      	cmp	r0, #0
 802daaa:	d045      	beq.n	802db38 <_vfiprintf_r+0x240>
 802daac:	4b2d      	ldr	r3, [pc, #180]	; (802db64 <_vfiprintf_r+0x26c>)
 802daae:	2b00      	cmp	r3, #0
 802dab0:	d127      	bne.n	802db02 <_vfiprintf_r+0x20a>
 802dab2:	2207      	movs	r2, #7
 802dab4:	9b07      	ldr	r3, [sp, #28]
 802dab6:	3307      	adds	r3, #7
 802dab8:	4393      	bics	r3, r2
 802daba:	3308      	adds	r3, #8
 802dabc:	9307      	str	r3, [sp, #28]
 802dabe:	696b      	ldr	r3, [r5, #20]
 802dac0:	9a04      	ldr	r2, [sp, #16]
 802dac2:	189b      	adds	r3, r3, r2
 802dac4:	616b      	str	r3, [r5, #20]
 802dac6:	e75d      	b.n	802d984 <_vfiprintf_r+0x8c>
 802dac8:	210a      	movs	r1, #10
 802daca:	434b      	muls	r3, r1
 802dacc:	4667      	mov	r7, ip
 802dace:	189b      	adds	r3, r3, r2
 802dad0:	3909      	subs	r1, #9
 802dad2:	e7a3      	b.n	802da1c <_vfiprintf_r+0x124>
 802dad4:	2301      	movs	r3, #1
 802dad6:	425b      	negs	r3, r3
 802dad8:	e7ce      	b.n	802da78 <_vfiprintf_r+0x180>
 802dada:	2300      	movs	r3, #0
 802dadc:	001a      	movs	r2, r3
 802dade:	3701      	adds	r7, #1
 802dae0:	606b      	str	r3, [r5, #4]
 802dae2:	7839      	ldrb	r1, [r7, #0]
 802dae4:	1c78      	adds	r0, r7, #1
 802dae6:	3930      	subs	r1, #48	; 0x30
 802dae8:	4684      	mov	ip, r0
 802daea:	2909      	cmp	r1, #9
 802daec:	d903      	bls.n	802daf6 <_vfiprintf_r+0x1fe>
 802daee:	2b00      	cmp	r3, #0
 802daf0:	d0c3      	beq.n	802da7a <_vfiprintf_r+0x182>
 802daf2:	9209      	str	r2, [sp, #36]	; 0x24
 802daf4:	e7c1      	b.n	802da7a <_vfiprintf_r+0x182>
 802daf6:	230a      	movs	r3, #10
 802daf8:	435a      	muls	r2, r3
 802dafa:	4667      	mov	r7, ip
 802dafc:	1852      	adds	r2, r2, r1
 802dafe:	3b09      	subs	r3, #9
 802db00:	e7ef      	b.n	802dae2 <_vfiprintf_r+0x1ea>
 802db02:	ab07      	add	r3, sp, #28
 802db04:	9300      	str	r3, [sp, #0]
 802db06:	0022      	movs	r2, r4
 802db08:	0029      	movs	r1, r5
 802db0a:	0030      	movs	r0, r6
 802db0c:	4b16      	ldr	r3, [pc, #88]	; (802db68 <_vfiprintf_r+0x270>)
 802db0e:	e000      	b.n	802db12 <_vfiprintf_r+0x21a>
 802db10:	bf00      	nop
 802db12:	9004      	str	r0, [sp, #16]
 802db14:	9b04      	ldr	r3, [sp, #16]
 802db16:	3301      	adds	r3, #1
 802db18:	d1d1      	bne.n	802dabe <_vfiprintf_r+0x1c6>
 802db1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802db1c:	07db      	lsls	r3, r3, #31
 802db1e:	d405      	bmi.n	802db2c <_vfiprintf_r+0x234>
 802db20:	89a3      	ldrh	r3, [r4, #12]
 802db22:	059b      	lsls	r3, r3, #22
 802db24:	d402      	bmi.n	802db2c <_vfiprintf_r+0x234>
 802db26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802db28:	f003 fa1f 	bl	8030f6a <__retarget_lock_release_recursive>
 802db2c:	89a3      	ldrh	r3, [r4, #12]
 802db2e:	065b      	lsls	r3, r3, #25
 802db30:	d500      	bpl.n	802db34 <_vfiprintf_r+0x23c>
 802db32:	e70a      	b.n	802d94a <_vfiprintf_r+0x52>
 802db34:	980d      	ldr	r0, [sp, #52]	; 0x34
 802db36:	e70a      	b.n	802d94e <_vfiprintf_r+0x56>
 802db38:	ab07      	add	r3, sp, #28
 802db3a:	9300      	str	r3, [sp, #0]
 802db3c:	0022      	movs	r2, r4
 802db3e:	0029      	movs	r1, r5
 802db40:	0030      	movs	r0, r6
 802db42:	4b09      	ldr	r3, [pc, #36]	; (802db68 <_vfiprintf_r+0x270>)
 802db44:	f000 f812 	bl	802db6c <_printf_i>
 802db48:	e7e3      	b.n	802db12 <_vfiprintf_r+0x21a>
 802db4a:	46c0      	nop			; (mov r8, r8)
 802db4c:	0803168c 	.word	0x0803168c
 802db50:	080316ac 	.word	0x080316ac
 802db54:	0803166c 	.word	0x0803166c
 802db58:	08032292 	.word	0x08032292
 802db5c:	08032298 	.word	0x08032298
 802db60:	0803229c 	.word	0x0803229c
 802db64:	00000000 	.word	0x00000000
 802db68:	08030dad 	.word	0x08030dad

0802db6c <_printf_i>:
 802db6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802db6e:	b08b      	sub	sp, #44	; 0x2c
 802db70:	9206      	str	r2, [sp, #24]
 802db72:	000a      	movs	r2, r1
 802db74:	3243      	adds	r2, #67	; 0x43
 802db76:	9307      	str	r3, [sp, #28]
 802db78:	9005      	str	r0, [sp, #20]
 802db7a:	9204      	str	r2, [sp, #16]
 802db7c:	7e0a      	ldrb	r2, [r1, #24]
 802db7e:	000c      	movs	r4, r1
 802db80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802db82:	2a78      	cmp	r2, #120	; 0x78
 802db84:	d807      	bhi.n	802db96 <_printf_i+0x2a>
 802db86:	2a62      	cmp	r2, #98	; 0x62
 802db88:	d809      	bhi.n	802db9e <_printf_i+0x32>
 802db8a:	2a00      	cmp	r2, #0
 802db8c:	d100      	bne.n	802db90 <_printf_i+0x24>
 802db8e:	e0c1      	b.n	802dd14 <_printf_i+0x1a8>
 802db90:	2a58      	cmp	r2, #88	; 0x58
 802db92:	d100      	bne.n	802db96 <_printf_i+0x2a>
 802db94:	e08c      	b.n	802dcb0 <_printf_i+0x144>
 802db96:	0026      	movs	r6, r4
 802db98:	3642      	adds	r6, #66	; 0x42
 802db9a:	7032      	strb	r2, [r6, #0]
 802db9c:	e022      	b.n	802dbe4 <_printf_i+0x78>
 802db9e:	0010      	movs	r0, r2
 802dba0:	3863      	subs	r0, #99	; 0x63
 802dba2:	2815      	cmp	r0, #21
 802dba4:	d8f7      	bhi.n	802db96 <_printf_i+0x2a>
 802dba6:	f7f2 fa9f 	bl	80200e8 <__gnu_thumb1_case_shi>
 802dbaa:	0016      	.short	0x0016
 802dbac:	fff6001f 	.word	0xfff6001f
 802dbb0:	fff6fff6 	.word	0xfff6fff6
 802dbb4:	001ffff6 	.word	0x001ffff6
 802dbb8:	fff6fff6 	.word	0xfff6fff6
 802dbbc:	fff6fff6 	.word	0xfff6fff6
 802dbc0:	003600a8 	.word	0x003600a8
 802dbc4:	fff6009a 	.word	0xfff6009a
 802dbc8:	00b9fff6 	.word	0x00b9fff6
 802dbcc:	0036fff6 	.word	0x0036fff6
 802dbd0:	fff6fff6 	.word	0xfff6fff6
 802dbd4:	009e      	.short	0x009e
 802dbd6:	0026      	movs	r6, r4
 802dbd8:	681a      	ldr	r2, [r3, #0]
 802dbda:	3642      	adds	r6, #66	; 0x42
 802dbdc:	1d11      	adds	r1, r2, #4
 802dbde:	6019      	str	r1, [r3, #0]
 802dbe0:	6813      	ldr	r3, [r2, #0]
 802dbe2:	7033      	strb	r3, [r6, #0]
 802dbe4:	2301      	movs	r3, #1
 802dbe6:	e0a7      	b.n	802dd38 <_printf_i+0x1cc>
 802dbe8:	6808      	ldr	r0, [r1, #0]
 802dbea:	6819      	ldr	r1, [r3, #0]
 802dbec:	1d0a      	adds	r2, r1, #4
 802dbee:	0605      	lsls	r5, r0, #24
 802dbf0:	d50b      	bpl.n	802dc0a <_printf_i+0x9e>
 802dbf2:	680d      	ldr	r5, [r1, #0]
 802dbf4:	601a      	str	r2, [r3, #0]
 802dbf6:	2d00      	cmp	r5, #0
 802dbf8:	da03      	bge.n	802dc02 <_printf_i+0x96>
 802dbfa:	232d      	movs	r3, #45	; 0x2d
 802dbfc:	9a04      	ldr	r2, [sp, #16]
 802dbfe:	426d      	negs	r5, r5
 802dc00:	7013      	strb	r3, [r2, #0]
 802dc02:	4b61      	ldr	r3, [pc, #388]	; (802dd88 <_printf_i+0x21c>)
 802dc04:	270a      	movs	r7, #10
 802dc06:	9303      	str	r3, [sp, #12]
 802dc08:	e01b      	b.n	802dc42 <_printf_i+0xd6>
 802dc0a:	680d      	ldr	r5, [r1, #0]
 802dc0c:	601a      	str	r2, [r3, #0]
 802dc0e:	0641      	lsls	r1, r0, #25
 802dc10:	d5f1      	bpl.n	802dbf6 <_printf_i+0x8a>
 802dc12:	b22d      	sxth	r5, r5
 802dc14:	e7ef      	b.n	802dbf6 <_printf_i+0x8a>
 802dc16:	680d      	ldr	r5, [r1, #0]
 802dc18:	6819      	ldr	r1, [r3, #0]
 802dc1a:	1d08      	adds	r0, r1, #4
 802dc1c:	6018      	str	r0, [r3, #0]
 802dc1e:	062e      	lsls	r6, r5, #24
 802dc20:	d501      	bpl.n	802dc26 <_printf_i+0xba>
 802dc22:	680d      	ldr	r5, [r1, #0]
 802dc24:	e003      	b.n	802dc2e <_printf_i+0xc2>
 802dc26:	066d      	lsls	r5, r5, #25
 802dc28:	d5fb      	bpl.n	802dc22 <_printf_i+0xb6>
 802dc2a:	680d      	ldr	r5, [r1, #0]
 802dc2c:	b2ad      	uxth	r5, r5
 802dc2e:	4b56      	ldr	r3, [pc, #344]	; (802dd88 <_printf_i+0x21c>)
 802dc30:	2708      	movs	r7, #8
 802dc32:	9303      	str	r3, [sp, #12]
 802dc34:	2a6f      	cmp	r2, #111	; 0x6f
 802dc36:	d000      	beq.n	802dc3a <_printf_i+0xce>
 802dc38:	3702      	adds	r7, #2
 802dc3a:	0023      	movs	r3, r4
 802dc3c:	2200      	movs	r2, #0
 802dc3e:	3343      	adds	r3, #67	; 0x43
 802dc40:	701a      	strb	r2, [r3, #0]
 802dc42:	6863      	ldr	r3, [r4, #4]
 802dc44:	60a3      	str	r3, [r4, #8]
 802dc46:	2b00      	cmp	r3, #0
 802dc48:	db03      	blt.n	802dc52 <_printf_i+0xe6>
 802dc4a:	2204      	movs	r2, #4
 802dc4c:	6821      	ldr	r1, [r4, #0]
 802dc4e:	4391      	bics	r1, r2
 802dc50:	6021      	str	r1, [r4, #0]
 802dc52:	2d00      	cmp	r5, #0
 802dc54:	d102      	bne.n	802dc5c <_printf_i+0xf0>
 802dc56:	9e04      	ldr	r6, [sp, #16]
 802dc58:	2b00      	cmp	r3, #0
 802dc5a:	d00c      	beq.n	802dc76 <_printf_i+0x10a>
 802dc5c:	9e04      	ldr	r6, [sp, #16]
 802dc5e:	0028      	movs	r0, r5
 802dc60:	0039      	movs	r1, r7
 802dc62:	f7f2 fadb 	bl	802021c <__aeabi_uidivmod>
 802dc66:	9b03      	ldr	r3, [sp, #12]
 802dc68:	3e01      	subs	r6, #1
 802dc6a:	5c5b      	ldrb	r3, [r3, r1]
 802dc6c:	7033      	strb	r3, [r6, #0]
 802dc6e:	002b      	movs	r3, r5
 802dc70:	0005      	movs	r5, r0
 802dc72:	429f      	cmp	r7, r3
 802dc74:	d9f3      	bls.n	802dc5e <_printf_i+0xf2>
 802dc76:	2f08      	cmp	r7, #8
 802dc78:	d109      	bne.n	802dc8e <_printf_i+0x122>
 802dc7a:	6823      	ldr	r3, [r4, #0]
 802dc7c:	07db      	lsls	r3, r3, #31
 802dc7e:	d506      	bpl.n	802dc8e <_printf_i+0x122>
 802dc80:	6863      	ldr	r3, [r4, #4]
 802dc82:	6922      	ldr	r2, [r4, #16]
 802dc84:	4293      	cmp	r3, r2
 802dc86:	dc02      	bgt.n	802dc8e <_printf_i+0x122>
 802dc88:	2330      	movs	r3, #48	; 0x30
 802dc8a:	3e01      	subs	r6, #1
 802dc8c:	7033      	strb	r3, [r6, #0]
 802dc8e:	9b04      	ldr	r3, [sp, #16]
 802dc90:	1b9b      	subs	r3, r3, r6
 802dc92:	6123      	str	r3, [r4, #16]
 802dc94:	9b07      	ldr	r3, [sp, #28]
 802dc96:	0021      	movs	r1, r4
 802dc98:	9300      	str	r3, [sp, #0]
 802dc9a:	9805      	ldr	r0, [sp, #20]
 802dc9c:	9b06      	ldr	r3, [sp, #24]
 802dc9e:	aa09      	add	r2, sp, #36	; 0x24
 802dca0:	f003 f896 	bl	8030dd0 <_printf_common>
 802dca4:	1c43      	adds	r3, r0, #1
 802dca6:	d14c      	bne.n	802dd42 <_printf_i+0x1d6>
 802dca8:	2001      	movs	r0, #1
 802dcaa:	4240      	negs	r0, r0
 802dcac:	b00b      	add	sp, #44	; 0x2c
 802dcae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802dcb0:	3145      	adds	r1, #69	; 0x45
 802dcb2:	700a      	strb	r2, [r1, #0]
 802dcb4:	4a34      	ldr	r2, [pc, #208]	; (802dd88 <_printf_i+0x21c>)
 802dcb6:	9203      	str	r2, [sp, #12]
 802dcb8:	681a      	ldr	r2, [r3, #0]
 802dcba:	6821      	ldr	r1, [r4, #0]
 802dcbc:	ca20      	ldmia	r2!, {r5}
 802dcbe:	601a      	str	r2, [r3, #0]
 802dcc0:	0608      	lsls	r0, r1, #24
 802dcc2:	d516      	bpl.n	802dcf2 <_printf_i+0x186>
 802dcc4:	07cb      	lsls	r3, r1, #31
 802dcc6:	d502      	bpl.n	802dcce <_printf_i+0x162>
 802dcc8:	2320      	movs	r3, #32
 802dcca:	4319      	orrs	r1, r3
 802dccc:	6021      	str	r1, [r4, #0]
 802dcce:	2710      	movs	r7, #16
 802dcd0:	2d00      	cmp	r5, #0
 802dcd2:	d1b2      	bne.n	802dc3a <_printf_i+0xce>
 802dcd4:	2320      	movs	r3, #32
 802dcd6:	6822      	ldr	r2, [r4, #0]
 802dcd8:	439a      	bics	r2, r3
 802dcda:	6022      	str	r2, [r4, #0]
 802dcdc:	e7ad      	b.n	802dc3a <_printf_i+0xce>
 802dcde:	2220      	movs	r2, #32
 802dce0:	6809      	ldr	r1, [r1, #0]
 802dce2:	430a      	orrs	r2, r1
 802dce4:	6022      	str	r2, [r4, #0]
 802dce6:	0022      	movs	r2, r4
 802dce8:	2178      	movs	r1, #120	; 0x78
 802dcea:	3245      	adds	r2, #69	; 0x45
 802dcec:	7011      	strb	r1, [r2, #0]
 802dcee:	4a27      	ldr	r2, [pc, #156]	; (802dd8c <_printf_i+0x220>)
 802dcf0:	e7e1      	b.n	802dcb6 <_printf_i+0x14a>
 802dcf2:	0648      	lsls	r0, r1, #25
 802dcf4:	d5e6      	bpl.n	802dcc4 <_printf_i+0x158>
 802dcf6:	b2ad      	uxth	r5, r5
 802dcf8:	e7e4      	b.n	802dcc4 <_printf_i+0x158>
 802dcfa:	681a      	ldr	r2, [r3, #0]
 802dcfc:	680d      	ldr	r5, [r1, #0]
 802dcfe:	1d10      	adds	r0, r2, #4
 802dd00:	6949      	ldr	r1, [r1, #20]
 802dd02:	6018      	str	r0, [r3, #0]
 802dd04:	6813      	ldr	r3, [r2, #0]
 802dd06:	062e      	lsls	r6, r5, #24
 802dd08:	d501      	bpl.n	802dd0e <_printf_i+0x1a2>
 802dd0a:	6019      	str	r1, [r3, #0]
 802dd0c:	e002      	b.n	802dd14 <_printf_i+0x1a8>
 802dd0e:	066d      	lsls	r5, r5, #25
 802dd10:	d5fb      	bpl.n	802dd0a <_printf_i+0x19e>
 802dd12:	8019      	strh	r1, [r3, #0]
 802dd14:	2300      	movs	r3, #0
 802dd16:	9e04      	ldr	r6, [sp, #16]
 802dd18:	6123      	str	r3, [r4, #16]
 802dd1a:	e7bb      	b.n	802dc94 <_printf_i+0x128>
 802dd1c:	681a      	ldr	r2, [r3, #0]
 802dd1e:	1d11      	adds	r1, r2, #4
 802dd20:	6019      	str	r1, [r3, #0]
 802dd22:	6816      	ldr	r6, [r2, #0]
 802dd24:	2100      	movs	r1, #0
 802dd26:	0030      	movs	r0, r6
 802dd28:	6862      	ldr	r2, [r4, #4]
 802dd2a:	f003 f91f 	bl	8030f6c <memchr>
 802dd2e:	2800      	cmp	r0, #0
 802dd30:	d001      	beq.n	802dd36 <_printf_i+0x1ca>
 802dd32:	1b80      	subs	r0, r0, r6
 802dd34:	6060      	str	r0, [r4, #4]
 802dd36:	6863      	ldr	r3, [r4, #4]
 802dd38:	6123      	str	r3, [r4, #16]
 802dd3a:	2300      	movs	r3, #0
 802dd3c:	9a04      	ldr	r2, [sp, #16]
 802dd3e:	7013      	strb	r3, [r2, #0]
 802dd40:	e7a8      	b.n	802dc94 <_printf_i+0x128>
 802dd42:	6923      	ldr	r3, [r4, #16]
 802dd44:	0032      	movs	r2, r6
 802dd46:	9906      	ldr	r1, [sp, #24]
 802dd48:	9805      	ldr	r0, [sp, #20]
 802dd4a:	9d07      	ldr	r5, [sp, #28]
 802dd4c:	47a8      	blx	r5
 802dd4e:	1c43      	adds	r3, r0, #1
 802dd50:	d0aa      	beq.n	802dca8 <_printf_i+0x13c>
 802dd52:	6823      	ldr	r3, [r4, #0]
 802dd54:	079b      	lsls	r3, r3, #30
 802dd56:	d415      	bmi.n	802dd84 <_printf_i+0x218>
 802dd58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802dd5a:	68e0      	ldr	r0, [r4, #12]
 802dd5c:	4298      	cmp	r0, r3
 802dd5e:	daa5      	bge.n	802dcac <_printf_i+0x140>
 802dd60:	0018      	movs	r0, r3
 802dd62:	e7a3      	b.n	802dcac <_printf_i+0x140>
 802dd64:	0022      	movs	r2, r4
 802dd66:	2301      	movs	r3, #1
 802dd68:	9906      	ldr	r1, [sp, #24]
 802dd6a:	9805      	ldr	r0, [sp, #20]
 802dd6c:	9e07      	ldr	r6, [sp, #28]
 802dd6e:	3219      	adds	r2, #25
 802dd70:	47b0      	blx	r6
 802dd72:	1c43      	adds	r3, r0, #1
 802dd74:	d098      	beq.n	802dca8 <_printf_i+0x13c>
 802dd76:	3501      	adds	r5, #1
 802dd78:	68e3      	ldr	r3, [r4, #12]
 802dd7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802dd7c:	1a9b      	subs	r3, r3, r2
 802dd7e:	42ab      	cmp	r3, r5
 802dd80:	dcf0      	bgt.n	802dd64 <_printf_i+0x1f8>
 802dd82:	e7e9      	b.n	802dd58 <_printf_i+0x1ec>
 802dd84:	2500      	movs	r5, #0
 802dd86:	e7f7      	b.n	802dd78 <_printf_i+0x20c>
 802dd88:	080322a3 	.word	0x080322a3
 802dd8c:	080322b4 	.word	0x080322b4

0802dd90 <__swbuf_r>:
 802dd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802dd92:	0005      	movs	r5, r0
 802dd94:	000e      	movs	r6, r1
 802dd96:	0014      	movs	r4, r2
 802dd98:	2800      	cmp	r0, #0
 802dd9a:	d004      	beq.n	802dda6 <__swbuf_r+0x16>
 802dd9c:	6983      	ldr	r3, [r0, #24]
 802dd9e:	2b00      	cmp	r3, #0
 802dda0:	d101      	bne.n	802dda6 <__swbuf_r+0x16>
 802dda2:	f000 f9db 	bl	802e15c <__sinit>
 802dda6:	4b22      	ldr	r3, [pc, #136]	; (802de30 <__swbuf_r+0xa0>)
 802dda8:	429c      	cmp	r4, r3
 802ddaa:	d12e      	bne.n	802de0a <__swbuf_r+0x7a>
 802ddac:	686c      	ldr	r4, [r5, #4]
 802ddae:	69a3      	ldr	r3, [r4, #24]
 802ddb0:	60a3      	str	r3, [r4, #8]
 802ddb2:	89a3      	ldrh	r3, [r4, #12]
 802ddb4:	071b      	lsls	r3, r3, #28
 802ddb6:	d532      	bpl.n	802de1e <__swbuf_r+0x8e>
 802ddb8:	6923      	ldr	r3, [r4, #16]
 802ddba:	2b00      	cmp	r3, #0
 802ddbc:	d02f      	beq.n	802de1e <__swbuf_r+0x8e>
 802ddbe:	6823      	ldr	r3, [r4, #0]
 802ddc0:	6922      	ldr	r2, [r4, #16]
 802ddc2:	b2f7      	uxtb	r7, r6
 802ddc4:	1a98      	subs	r0, r3, r2
 802ddc6:	6963      	ldr	r3, [r4, #20]
 802ddc8:	b2f6      	uxtb	r6, r6
 802ddca:	4283      	cmp	r3, r0
 802ddcc:	dc05      	bgt.n	802ddda <__swbuf_r+0x4a>
 802ddce:	0021      	movs	r1, r4
 802ddd0:	0028      	movs	r0, r5
 802ddd2:	f000 f937 	bl	802e044 <_fflush_r>
 802ddd6:	2800      	cmp	r0, #0
 802ddd8:	d127      	bne.n	802de2a <__swbuf_r+0x9a>
 802ddda:	68a3      	ldr	r3, [r4, #8]
 802dddc:	3001      	adds	r0, #1
 802ddde:	3b01      	subs	r3, #1
 802dde0:	60a3      	str	r3, [r4, #8]
 802dde2:	6823      	ldr	r3, [r4, #0]
 802dde4:	1c5a      	adds	r2, r3, #1
 802dde6:	6022      	str	r2, [r4, #0]
 802dde8:	701f      	strb	r7, [r3, #0]
 802ddea:	6963      	ldr	r3, [r4, #20]
 802ddec:	4283      	cmp	r3, r0
 802ddee:	d004      	beq.n	802ddfa <__swbuf_r+0x6a>
 802ddf0:	89a3      	ldrh	r3, [r4, #12]
 802ddf2:	07db      	lsls	r3, r3, #31
 802ddf4:	d507      	bpl.n	802de06 <__swbuf_r+0x76>
 802ddf6:	2e0a      	cmp	r6, #10
 802ddf8:	d105      	bne.n	802de06 <__swbuf_r+0x76>
 802ddfa:	0021      	movs	r1, r4
 802ddfc:	0028      	movs	r0, r5
 802ddfe:	f000 f921 	bl	802e044 <_fflush_r>
 802de02:	2800      	cmp	r0, #0
 802de04:	d111      	bne.n	802de2a <__swbuf_r+0x9a>
 802de06:	0030      	movs	r0, r6
 802de08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802de0a:	4b0a      	ldr	r3, [pc, #40]	; (802de34 <__swbuf_r+0xa4>)
 802de0c:	429c      	cmp	r4, r3
 802de0e:	d101      	bne.n	802de14 <__swbuf_r+0x84>
 802de10:	68ac      	ldr	r4, [r5, #8]
 802de12:	e7cc      	b.n	802ddae <__swbuf_r+0x1e>
 802de14:	4b08      	ldr	r3, [pc, #32]	; (802de38 <__swbuf_r+0xa8>)
 802de16:	429c      	cmp	r4, r3
 802de18:	d1c9      	bne.n	802ddae <__swbuf_r+0x1e>
 802de1a:	68ec      	ldr	r4, [r5, #12]
 802de1c:	e7c7      	b.n	802ddae <__swbuf_r+0x1e>
 802de1e:	0021      	movs	r1, r4
 802de20:	0028      	movs	r0, r5
 802de22:	f000 f80b 	bl	802de3c <__swsetup_r>
 802de26:	2800      	cmp	r0, #0
 802de28:	d0c9      	beq.n	802ddbe <__swbuf_r+0x2e>
 802de2a:	2601      	movs	r6, #1
 802de2c:	4276      	negs	r6, r6
 802de2e:	e7ea      	b.n	802de06 <__swbuf_r+0x76>
 802de30:	0803168c 	.word	0x0803168c
 802de34:	080316ac 	.word	0x080316ac
 802de38:	0803166c 	.word	0x0803166c

0802de3c <__swsetup_r>:
 802de3c:	4b37      	ldr	r3, [pc, #220]	; (802df1c <__swsetup_r+0xe0>)
 802de3e:	b570      	push	{r4, r5, r6, lr}
 802de40:	681d      	ldr	r5, [r3, #0]
 802de42:	0006      	movs	r6, r0
 802de44:	000c      	movs	r4, r1
 802de46:	2d00      	cmp	r5, #0
 802de48:	d005      	beq.n	802de56 <__swsetup_r+0x1a>
 802de4a:	69ab      	ldr	r3, [r5, #24]
 802de4c:	2b00      	cmp	r3, #0
 802de4e:	d102      	bne.n	802de56 <__swsetup_r+0x1a>
 802de50:	0028      	movs	r0, r5
 802de52:	f000 f983 	bl	802e15c <__sinit>
 802de56:	4b32      	ldr	r3, [pc, #200]	; (802df20 <__swsetup_r+0xe4>)
 802de58:	429c      	cmp	r4, r3
 802de5a:	d10f      	bne.n	802de7c <__swsetup_r+0x40>
 802de5c:	686c      	ldr	r4, [r5, #4]
 802de5e:	230c      	movs	r3, #12
 802de60:	5ee2      	ldrsh	r2, [r4, r3]
 802de62:	b293      	uxth	r3, r2
 802de64:	0711      	lsls	r1, r2, #28
 802de66:	d42d      	bmi.n	802dec4 <__swsetup_r+0x88>
 802de68:	06d9      	lsls	r1, r3, #27
 802de6a:	d411      	bmi.n	802de90 <__swsetup_r+0x54>
 802de6c:	2309      	movs	r3, #9
 802de6e:	2001      	movs	r0, #1
 802de70:	6033      	str	r3, [r6, #0]
 802de72:	3337      	adds	r3, #55	; 0x37
 802de74:	4313      	orrs	r3, r2
 802de76:	81a3      	strh	r3, [r4, #12]
 802de78:	4240      	negs	r0, r0
 802de7a:	bd70      	pop	{r4, r5, r6, pc}
 802de7c:	4b29      	ldr	r3, [pc, #164]	; (802df24 <__swsetup_r+0xe8>)
 802de7e:	429c      	cmp	r4, r3
 802de80:	d101      	bne.n	802de86 <__swsetup_r+0x4a>
 802de82:	68ac      	ldr	r4, [r5, #8]
 802de84:	e7eb      	b.n	802de5e <__swsetup_r+0x22>
 802de86:	4b28      	ldr	r3, [pc, #160]	; (802df28 <__swsetup_r+0xec>)
 802de88:	429c      	cmp	r4, r3
 802de8a:	d1e8      	bne.n	802de5e <__swsetup_r+0x22>
 802de8c:	68ec      	ldr	r4, [r5, #12]
 802de8e:	e7e6      	b.n	802de5e <__swsetup_r+0x22>
 802de90:	075b      	lsls	r3, r3, #29
 802de92:	d513      	bpl.n	802debc <__swsetup_r+0x80>
 802de94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802de96:	2900      	cmp	r1, #0
 802de98:	d008      	beq.n	802deac <__swsetup_r+0x70>
 802de9a:	0023      	movs	r3, r4
 802de9c:	3344      	adds	r3, #68	; 0x44
 802de9e:	4299      	cmp	r1, r3
 802dea0:	d002      	beq.n	802dea8 <__swsetup_r+0x6c>
 802dea2:	0030      	movs	r0, r6
 802dea4:	f000 fa46 	bl	802e334 <_free_r>
 802dea8:	2300      	movs	r3, #0
 802deaa:	6363      	str	r3, [r4, #52]	; 0x34
 802deac:	2224      	movs	r2, #36	; 0x24
 802deae:	89a3      	ldrh	r3, [r4, #12]
 802deb0:	4393      	bics	r3, r2
 802deb2:	81a3      	strh	r3, [r4, #12]
 802deb4:	2300      	movs	r3, #0
 802deb6:	6063      	str	r3, [r4, #4]
 802deb8:	6923      	ldr	r3, [r4, #16]
 802deba:	6023      	str	r3, [r4, #0]
 802debc:	2308      	movs	r3, #8
 802debe:	89a2      	ldrh	r2, [r4, #12]
 802dec0:	4313      	orrs	r3, r2
 802dec2:	81a3      	strh	r3, [r4, #12]
 802dec4:	6923      	ldr	r3, [r4, #16]
 802dec6:	2b00      	cmp	r3, #0
 802dec8:	d10b      	bne.n	802dee2 <__swsetup_r+0xa6>
 802deca:	21a0      	movs	r1, #160	; 0xa0
 802decc:	2280      	movs	r2, #128	; 0x80
 802dece:	89a3      	ldrh	r3, [r4, #12]
 802ded0:	0089      	lsls	r1, r1, #2
 802ded2:	0092      	lsls	r2, r2, #2
 802ded4:	400b      	ands	r3, r1
 802ded6:	4293      	cmp	r3, r2
 802ded8:	d003      	beq.n	802dee2 <__swsetup_r+0xa6>
 802deda:	0021      	movs	r1, r4
 802dedc:	0030      	movs	r0, r6
 802dede:	f000 f9e5 	bl	802e2ac <__smakebuf_r>
 802dee2:	220c      	movs	r2, #12
 802dee4:	5ea3      	ldrsh	r3, [r4, r2]
 802dee6:	2001      	movs	r0, #1
 802dee8:	001a      	movs	r2, r3
 802deea:	b299      	uxth	r1, r3
 802deec:	4002      	ands	r2, r0
 802deee:	4203      	tst	r3, r0
 802def0:	d00f      	beq.n	802df12 <__swsetup_r+0xd6>
 802def2:	2200      	movs	r2, #0
 802def4:	60a2      	str	r2, [r4, #8]
 802def6:	6962      	ldr	r2, [r4, #20]
 802def8:	4252      	negs	r2, r2
 802defa:	61a2      	str	r2, [r4, #24]
 802defc:	2000      	movs	r0, #0
 802defe:	6922      	ldr	r2, [r4, #16]
 802df00:	4282      	cmp	r2, r0
 802df02:	d1ba      	bne.n	802de7a <__swsetup_r+0x3e>
 802df04:	060a      	lsls	r2, r1, #24
 802df06:	d5b8      	bpl.n	802de7a <__swsetup_r+0x3e>
 802df08:	2240      	movs	r2, #64	; 0x40
 802df0a:	4313      	orrs	r3, r2
 802df0c:	81a3      	strh	r3, [r4, #12]
 802df0e:	3801      	subs	r0, #1
 802df10:	e7b3      	b.n	802de7a <__swsetup_r+0x3e>
 802df12:	0788      	lsls	r0, r1, #30
 802df14:	d400      	bmi.n	802df18 <__swsetup_r+0xdc>
 802df16:	6962      	ldr	r2, [r4, #20]
 802df18:	60a2      	str	r2, [r4, #8]
 802df1a:	e7ef      	b.n	802defc <__swsetup_r+0xc0>
 802df1c:	200080d0 	.word	0x200080d0
 802df20:	0803168c 	.word	0x0803168c
 802df24:	080316ac 	.word	0x080316ac
 802df28:	0803166c 	.word	0x0803166c

0802df2c <__sflush_r>:
 802df2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802df2e:	898b      	ldrh	r3, [r1, #12]
 802df30:	0005      	movs	r5, r0
 802df32:	000c      	movs	r4, r1
 802df34:	071a      	lsls	r2, r3, #28
 802df36:	d45f      	bmi.n	802dff8 <__sflush_r+0xcc>
 802df38:	684a      	ldr	r2, [r1, #4]
 802df3a:	2a00      	cmp	r2, #0
 802df3c:	dc04      	bgt.n	802df48 <__sflush_r+0x1c>
 802df3e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 802df40:	2a00      	cmp	r2, #0
 802df42:	dc01      	bgt.n	802df48 <__sflush_r+0x1c>
 802df44:	2000      	movs	r0, #0
 802df46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802df48:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 802df4a:	2f00      	cmp	r7, #0
 802df4c:	d0fa      	beq.n	802df44 <__sflush_r+0x18>
 802df4e:	2200      	movs	r2, #0
 802df50:	2180      	movs	r1, #128	; 0x80
 802df52:	682e      	ldr	r6, [r5, #0]
 802df54:	602a      	str	r2, [r5, #0]
 802df56:	001a      	movs	r2, r3
 802df58:	0149      	lsls	r1, r1, #5
 802df5a:	400a      	ands	r2, r1
 802df5c:	420b      	tst	r3, r1
 802df5e:	d034      	beq.n	802dfca <__sflush_r+0x9e>
 802df60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802df62:	89a3      	ldrh	r3, [r4, #12]
 802df64:	075b      	lsls	r3, r3, #29
 802df66:	d506      	bpl.n	802df76 <__sflush_r+0x4a>
 802df68:	6863      	ldr	r3, [r4, #4]
 802df6a:	1ac0      	subs	r0, r0, r3
 802df6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802df6e:	2b00      	cmp	r3, #0
 802df70:	d001      	beq.n	802df76 <__sflush_r+0x4a>
 802df72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802df74:	1ac0      	subs	r0, r0, r3
 802df76:	0002      	movs	r2, r0
 802df78:	6a21      	ldr	r1, [r4, #32]
 802df7a:	2300      	movs	r3, #0
 802df7c:	0028      	movs	r0, r5
 802df7e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 802df80:	47b8      	blx	r7
 802df82:	89a1      	ldrh	r1, [r4, #12]
 802df84:	1c43      	adds	r3, r0, #1
 802df86:	d106      	bne.n	802df96 <__sflush_r+0x6a>
 802df88:	682b      	ldr	r3, [r5, #0]
 802df8a:	2b1d      	cmp	r3, #29
 802df8c:	d831      	bhi.n	802dff2 <__sflush_r+0xc6>
 802df8e:	4a2c      	ldr	r2, [pc, #176]	; (802e040 <__sflush_r+0x114>)
 802df90:	40da      	lsrs	r2, r3
 802df92:	07d3      	lsls	r3, r2, #31
 802df94:	d52d      	bpl.n	802dff2 <__sflush_r+0xc6>
 802df96:	2300      	movs	r3, #0
 802df98:	6063      	str	r3, [r4, #4]
 802df9a:	6923      	ldr	r3, [r4, #16]
 802df9c:	6023      	str	r3, [r4, #0]
 802df9e:	04cb      	lsls	r3, r1, #19
 802dfa0:	d505      	bpl.n	802dfae <__sflush_r+0x82>
 802dfa2:	1c43      	adds	r3, r0, #1
 802dfa4:	d102      	bne.n	802dfac <__sflush_r+0x80>
 802dfa6:	682b      	ldr	r3, [r5, #0]
 802dfa8:	2b00      	cmp	r3, #0
 802dfaa:	d100      	bne.n	802dfae <__sflush_r+0x82>
 802dfac:	6560      	str	r0, [r4, #84]	; 0x54
 802dfae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802dfb0:	602e      	str	r6, [r5, #0]
 802dfb2:	2900      	cmp	r1, #0
 802dfb4:	d0c6      	beq.n	802df44 <__sflush_r+0x18>
 802dfb6:	0023      	movs	r3, r4
 802dfb8:	3344      	adds	r3, #68	; 0x44
 802dfba:	4299      	cmp	r1, r3
 802dfbc:	d002      	beq.n	802dfc4 <__sflush_r+0x98>
 802dfbe:	0028      	movs	r0, r5
 802dfc0:	f000 f9b8 	bl	802e334 <_free_r>
 802dfc4:	2000      	movs	r0, #0
 802dfc6:	6360      	str	r0, [r4, #52]	; 0x34
 802dfc8:	e7bd      	b.n	802df46 <__sflush_r+0x1a>
 802dfca:	2301      	movs	r3, #1
 802dfcc:	0028      	movs	r0, r5
 802dfce:	6a21      	ldr	r1, [r4, #32]
 802dfd0:	47b8      	blx	r7
 802dfd2:	1c43      	adds	r3, r0, #1
 802dfd4:	d1c5      	bne.n	802df62 <__sflush_r+0x36>
 802dfd6:	682b      	ldr	r3, [r5, #0]
 802dfd8:	2b00      	cmp	r3, #0
 802dfda:	d0c2      	beq.n	802df62 <__sflush_r+0x36>
 802dfdc:	2b1d      	cmp	r3, #29
 802dfde:	d001      	beq.n	802dfe4 <__sflush_r+0xb8>
 802dfe0:	2b16      	cmp	r3, #22
 802dfe2:	d101      	bne.n	802dfe8 <__sflush_r+0xbc>
 802dfe4:	602e      	str	r6, [r5, #0]
 802dfe6:	e7ad      	b.n	802df44 <__sflush_r+0x18>
 802dfe8:	2340      	movs	r3, #64	; 0x40
 802dfea:	89a2      	ldrh	r2, [r4, #12]
 802dfec:	4313      	orrs	r3, r2
 802dfee:	81a3      	strh	r3, [r4, #12]
 802dff0:	e7a9      	b.n	802df46 <__sflush_r+0x1a>
 802dff2:	2340      	movs	r3, #64	; 0x40
 802dff4:	430b      	orrs	r3, r1
 802dff6:	e7fa      	b.n	802dfee <__sflush_r+0xc2>
 802dff8:	690f      	ldr	r7, [r1, #16]
 802dffa:	2f00      	cmp	r7, #0
 802dffc:	d0a2      	beq.n	802df44 <__sflush_r+0x18>
 802dffe:	680a      	ldr	r2, [r1, #0]
 802e000:	600f      	str	r7, [r1, #0]
 802e002:	1bd2      	subs	r2, r2, r7
 802e004:	9201      	str	r2, [sp, #4]
 802e006:	2200      	movs	r2, #0
 802e008:	079b      	lsls	r3, r3, #30
 802e00a:	d100      	bne.n	802e00e <__sflush_r+0xe2>
 802e00c:	694a      	ldr	r2, [r1, #20]
 802e00e:	60a2      	str	r2, [r4, #8]
 802e010:	9b01      	ldr	r3, [sp, #4]
 802e012:	2b00      	cmp	r3, #0
 802e014:	dc00      	bgt.n	802e018 <__sflush_r+0xec>
 802e016:	e795      	b.n	802df44 <__sflush_r+0x18>
 802e018:	003a      	movs	r2, r7
 802e01a:	0028      	movs	r0, r5
 802e01c:	9b01      	ldr	r3, [sp, #4]
 802e01e:	6a21      	ldr	r1, [r4, #32]
 802e020:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802e022:	47b0      	blx	r6
 802e024:	2800      	cmp	r0, #0
 802e026:	dc06      	bgt.n	802e036 <__sflush_r+0x10a>
 802e028:	2340      	movs	r3, #64	; 0x40
 802e02a:	2001      	movs	r0, #1
 802e02c:	89a2      	ldrh	r2, [r4, #12]
 802e02e:	4240      	negs	r0, r0
 802e030:	4313      	orrs	r3, r2
 802e032:	81a3      	strh	r3, [r4, #12]
 802e034:	e787      	b.n	802df46 <__sflush_r+0x1a>
 802e036:	9b01      	ldr	r3, [sp, #4]
 802e038:	183f      	adds	r7, r7, r0
 802e03a:	1a1b      	subs	r3, r3, r0
 802e03c:	9301      	str	r3, [sp, #4]
 802e03e:	e7e7      	b.n	802e010 <__sflush_r+0xe4>
 802e040:	20400001 	.word	0x20400001

0802e044 <_fflush_r>:
 802e044:	690b      	ldr	r3, [r1, #16]
 802e046:	b570      	push	{r4, r5, r6, lr}
 802e048:	0005      	movs	r5, r0
 802e04a:	000c      	movs	r4, r1
 802e04c:	2b00      	cmp	r3, #0
 802e04e:	d102      	bne.n	802e056 <_fflush_r+0x12>
 802e050:	2500      	movs	r5, #0
 802e052:	0028      	movs	r0, r5
 802e054:	bd70      	pop	{r4, r5, r6, pc}
 802e056:	2800      	cmp	r0, #0
 802e058:	d004      	beq.n	802e064 <_fflush_r+0x20>
 802e05a:	6983      	ldr	r3, [r0, #24]
 802e05c:	2b00      	cmp	r3, #0
 802e05e:	d101      	bne.n	802e064 <_fflush_r+0x20>
 802e060:	f000 f87c 	bl	802e15c <__sinit>
 802e064:	4b14      	ldr	r3, [pc, #80]	; (802e0b8 <_fflush_r+0x74>)
 802e066:	429c      	cmp	r4, r3
 802e068:	d11b      	bne.n	802e0a2 <_fflush_r+0x5e>
 802e06a:	686c      	ldr	r4, [r5, #4]
 802e06c:	220c      	movs	r2, #12
 802e06e:	5ea3      	ldrsh	r3, [r4, r2]
 802e070:	2b00      	cmp	r3, #0
 802e072:	d0ed      	beq.n	802e050 <_fflush_r+0xc>
 802e074:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802e076:	07d2      	lsls	r2, r2, #31
 802e078:	d404      	bmi.n	802e084 <_fflush_r+0x40>
 802e07a:	059b      	lsls	r3, r3, #22
 802e07c:	d402      	bmi.n	802e084 <_fflush_r+0x40>
 802e07e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802e080:	f002 ff72 	bl	8030f68 <__retarget_lock_acquire_recursive>
 802e084:	0028      	movs	r0, r5
 802e086:	0021      	movs	r1, r4
 802e088:	f7ff ff50 	bl	802df2c <__sflush_r>
 802e08c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802e08e:	0005      	movs	r5, r0
 802e090:	07db      	lsls	r3, r3, #31
 802e092:	d4de      	bmi.n	802e052 <_fflush_r+0xe>
 802e094:	89a3      	ldrh	r3, [r4, #12]
 802e096:	059b      	lsls	r3, r3, #22
 802e098:	d4db      	bmi.n	802e052 <_fflush_r+0xe>
 802e09a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802e09c:	f002 ff65 	bl	8030f6a <__retarget_lock_release_recursive>
 802e0a0:	e7d7      	b.n	802e052 <_fflush_r+0xe>
 802e0a2:	4b06      	ldr	r3, [pc, #24]	; (802e0bc <_fflush_r+0x78>)
 802e0a4:	429c      	cmp	r4, r3
 802e0a6:	d101      	bne.n	802e0ac <_fflush_r+0x68>
 802e0a8:	68ac      	ldr	r4, [r5, #8]
 802e0aa:	e7df      	b.n	802e06c <_fflush_r+0x28>
 802e0ac:	4b04      	ldr	r3, [pc, #16]	; (802e0c0 <_fflush_r+0x7c>)
 802e0ae:	429c      	cmp	r4, r3
 802e0b0:	d1dc      	bne.n	802e06c <_fflush_r+0x28>
 802e0b2:	68ec      	ldr	r4, [r5, #12]
 802e0b4:	e7da      	b.n	802e06c <_fflush_r+0x28>
 802e0b6:	46c0      	nop			; (mov r8, r8)
 802e0b8:	0803168c 	.word	0x0803168c
 802e0bc:	080316ac 	.word	0x080316ac
 802e0c0:	0803166c 	.word	0x0803166c

0802e0c4 <std>:
 802e0c4:	2300      	movs	r3, #0
 802e0c6:	b510      	push	{r4, lr}
 802e0c8:	0004      	movs	r4, r0
 802e0ca:	6003      	str	r3, [r0, #0]
 802e0cc:	6043      	str	r3, [r0, #4]
 802e0ce:	6083      	str	r3, [r0, #8]
 802e0d0:	8181      	strh	r1, [r0, #12]
 802e0d2:	6643      	str	r3, [r0, #100]	; 0x64
 802e0d4:	0019      	movs	r1, r3
 802e0d6:	81c2      	strh	r2, [r0, #14]
 802e0d8:	6103      	str	r3, [r0, #16]
 802e0da:	6143      	str	r3, [r0, #20]
 802e0dc:	6183      	str	r3, [r0, #24]
 802e0de:	2208      	movs	r2, #8
 802e0e0:	305c      	adds	r0, #92	; 0x5c
 802e0e2:	f002 fe46 	bl	8030d72 <memset>
 802e0e6:	4b05      	ldr	r3, [pc, #20]	; (802e0fc <std+0x38>)
 802e0e8:	6224      	str	r4, [r4, #32]
 802e0ea:	6263      	str	r3, [r4, #36]	; 0x24
 802e0ec:	4b04      	ldr	r3, [pc, #16]	; (802e100 <std+0x3c>)
 802e0ee:	62a3      	str	r3, [r4, #40]	; 0x28
 802e0f0:	4b04      	ldr	r3, [pc, #16]	; (802e104 <std+0x40>)
 802e0f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 802e0f4:	4b04      	ldr	r3, [pc, #16]	; (802e108 <std+0x44>)
 802e0f6:	6323      	str	r3, [r4, #48]	; 0x30
 802e0f8:	bd10      	pop	{r4, pc}
 802e0fa:	46c0      	nop			; (mov r8, r8)
 802e0fc:	0802e4e1 	.word	0x0802e4e1
 802e100:	0802e509 	.word	0x0802e509
 802e104:	0802e541 	.word	0x0802e541
 802e108:	08030fdf 	.word	0x08030fdf

0802e10c <_cleanup_r>:
 802e10c:	b510      	push	{r4, lr}
 802e10e:	4902      	ldr	r1, [pc, #8]	; (802e118 <_cleanup_r+0xc>)
 802e110:	f002 ff09 	bl	8030f26 <_fwalk_reent>
 802e114:	bd10      	pop	{r4, pc}
 802e116:	46c0      	nop			; (mov r8, r8)
 802e118:	0802e045 	.word	0x0802e045

0802e11c <__sfp_lock_acquire>:
 802e11c:	b510      	push	{r4, lr}
 802e11e:	4802      	ldr	r0, [pc, #8]	; (802e128 <__sfp_lock_acquire+0xc>)
 802e120:	f002 ff22 	bl	8030f68 <__retarget_lock_acquire_recursive>
 802e124:	bd10      	pop	{r4, pc}
 802e126:	46c0      	nop			; (mov r8, r8)
 802e128:	20009b23 	.word	0x20009b23

0802e12c <__sfp_lock_release>:
 802e12c:	b510      	push	{r4, lr}
 802e12e:	4802      	ldr	r0, [pc, #8]	; (802e138 <__sfp_lock_release+0xc>)
 802e130:	f002 ff1b 	bl	8030f6a <__retarget_lock_release_recursive>
 802e134:	bd10      	pop	{r4, pc}
 802e136:	46c0      	nop			; (mov r8, r8)
 802e138:	20009b23 	.word	0x20009b23

0802e13c <__sinit_lock_acquire>:
 802e13c:	b510      	push	{r4, lr}
 802e13e:	4802      	ldr	r0, [pc, #8]	; (802e148 <__sinit_lock_acquire+0xc>)
 802e140:	f002 ff12 	bl	8030f68 <__retarget_lock_acquire_recursive>
 802e144:	bd10      	pop	{r4, pc}
 802e146:	46c0      	nop			; (mov r8, r8)
 802e148:	20009b24 	.word	0x20009b24

0802e14c <__sinit_lock_release>:
 802e14c:	b510      	push	{r4, lr}
 802e14e:	4802      	ldr	r0, [pc, #8]	; (802e158 <__sinit_lock_release+0xc>)
 802e150:	f002 ff0b 	bl	8030f6a <__retarget_lock_release_recursive>
 802e154:	bd10      	pop	{r4, pc}
 802e156:	46c0      	nop			; (mov r8, r8)
 802e158:	20009b24 	.word	0x20009b24

0802e15c <__sinit>:
 802e15c:	b513      	push	{r0, r1, r4, lr}
 802e15e:	0004      	movs	r4, r0
 802e160:	f7ff ffec 	bl	802e13c <__sinit_lock_acquire>
 802e164:	69a3      	ldr	r3, [r4, #24]
 802e166:	2b00      	cmp	r3, #0
 802e168:	d002      	beq.n	802e170 <__sinit+0x14>
 802e16a:	f7ff ffef 	bl	802e14c <__sinit_lock_release>
 802e16e:	bd13      	pop	{r0, r1, r4, pc}
 802e170:	64a3      	str	r3, [r4, #72]	; 0x48
 802e172:	64e3      	str	r3, [r4, #76]	; 0x4c
 802e174:	6523      	str	r3, [r4, #80]	; 0x50
 802e176:	4b13      	ldr	r3, [pc, #76]	; (802e1c4 <__sinit+0x68>)
 802e178:	4a13      	ldr	r2, [pc, #76]	; (802e1c8 <__sinit+0x6c>)
 802e17a:	681b      	ldr	r3, [r3, #0]
 802e17c:	62a2      	str	r2, [r4, #40]	; 0x28
 802e17e:	9301      	str	r3, [sp, #4]
 802e180:	42a3      	cmp	r3, r4
 802e182:	d101      	bne.n	802e188 <__sinit+0x2c>
 802e184:	2301      	movs	r3, #1
 802e186:	61a3      	str	r3, [r4, #24]
 802e188:	0020      	movs	r0, r4
 802e18a:	f000 f81f 	bl	802e1cc <__sfp>
 802e18e:	6060      	str	r0, [r4, #4]
 802e190:	0020      	movs	r0, r4
 802e192:	f000 f81b 	bl	802e1cc <__sfp>
 802e196:	60a0      	str	r0, [r4, #8]
 802e198:	0020      	movs	r0, r4
 802e19a:	f000 f817 	bl	802e1cc <__sfp>
 802e19e:	2200      	movs	r2, #0
 802e1a0:	2104      	movs	r1, #4
 802e1a2:	60e0      	str	r0, [r4, #12]
 802e1a4:	6860      	ldr	r0, [r4, #4]
 802e1a6:	f7ff ff8d 	bl	802e0c4 <std>
 802e1aa:	2201      	movs	r2, #1
 802e1ac:	2109      	movs	r1, #9
 802e1ae:	68a0      	ldr	r0, [r4, #8]
 802e1b0:	f7ff ff88 	bl	802e0c4 <std>
 802e1b4:	2202      	movs	r2, #2
 802e1b6:	2112      	movs	r1, #18
 802e1b8:	68e0      	ldr	r0, [r4, #12]
 802e1ba:	f7ff ff83 	bl	802e0c4 <std>
 802e1be:	2301      	movs	r3, #1
 802e1c0:	61a3      	str	r3, [r4, #24]
 802e1c2:	e7d2      	b.n	802e16a <__sinit+0xe>
 802e1c4:	08031668 	.word	0x08031668
 802e1c8:	0802e10d 	.word	0x0802e10d

0802e1cc <__sfp>:
 802e1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e1ce:	0007      	movs	r7, r0
 802e1d0:	f7ff ffa4 	bl	802e11c <__sfp_lock_acquire>
 802e1d4:	4b1f      	ldr	r3, [pc, #124]	; (802e254 <__sfp+0x88>)
 802e1d6:	681e      	ldr	r6, [r3, #0]
 802e1d8:	69b3      	ldr	r3, [r6, #24]
 802e1da:	2b00      	cmp	r3, #0
 802e1dc:	d102      	bne.n	802e1e4 <__sfp+0x18>
 802e1de:	0030      	movs	r0, r6
 802e1e0:	f7ff ffbc 	bl	802e15c <__sinit>
 802e1e4:	3648      	adds	r6, #72	; 0x48
 802e1e6:	68b4      	ldr	r4, [r6, #8]
 802e1e8:	6873      	ldr	r3, [r6, #4]
 802e1ea:	3b01      	subs	r3, #1
 802e1ec:	d504      	bpl.n	802e1f8 <__sfp+0x2c>
 802e1ee:	6833      	ldr	r3, [r6, #0]
 802e1f0:	2b00      	cmp	r3, #0
 802e1f2:	d022      	beq.n	802e23a <__sfp+0x6e>
 802e1f4:	6836      	ldr	r6, [r6, #0]
 802e1f6:	e7f6      	b.n	802e1e6 <__sfp+0x1a>
 802e1f8:	220c      	movs	r2, #12
 802e1fa:	5ea5      	ldrsh	r5, [r4, r2]
 802e1fc:	2d00      	cmp	r5, #0
 802e1fe:	d11a      	bne.n	802e236 <__sfp+0x6a>
 802e200:	0020      	movs	r0, r4
 802e202:	4b15      	ldr	r3, [pc, #84]	; (802e258 <__sfp+0x8c>)
 802e204:	3058      	adds	r0, #88	; 0x58
 802e206:	60e3      	str	r3, [r4, #12]
 802e208:	6665      	str	r5, [r4, #100]	; 0x64
 802e20a:	f002 feac 	bl	8030f66 <__retarget_lock_init_recursive>
 802e20e:	f7ff ff8d 	bl	802e12c <__sfp_lock_release>
 802e212:	0020      	movs	r0, r4
 802e214:	2208      	movs	r2, #8
 802e216:	0029      	movs	r1, r5
 802e218:	6025      	str	r5, [r4, #0]
 802e21a:	60a5      	str	r5, [r4, #8]
 802e21c:	6065      	str	r5, [r4, #4]
 802e21e:	6125      	str	r5, [r4, #16]
 802e220:	6165      	str	r5, [r4, #20]
 802e222:	61a5      	str	r5, [r4, #24]
 802e224:	305c      	adds	r0, #92	; 0x5c
 802e226:	f002 fda4 	bl	8030d72 <memset>
 802e22a:	6365      	str	r5, [r4, #52]	; 0x34
 802e22c:	63a5      	str	r5, [r4, #56]	; 0x38
 802e22e:	64a5      	str	r5, [r4, #72]	; 0x48
 802e230:	64e5      	str	r5, [r4, #76]	; 0x4c
 802e232:	0020      	movs	r0, r4
 802e234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e236:	3468      	adds	r4, #104	; 0x68
 802e238:	e7d7      	b.n	802e1ea <__sfp+0x1e>
 802e23a:	2104      	movs	r1, #4
 802e23c:	0038      	movs	r0, r7
 802e23e:	f002 fe5c 	bl	8030efa <__sfmoreglue>
 802e242:	1e04      	subs	r4, r0, #0
 802e244:	6030      	str	r0, [r6, #0]
 802e246:	d1d5      	bne.n	802e1f4 <__sfp+0x28>
 802e248:	f7ff ff70 	bl	802e12c <__sfp_lock_release>
 802e24c:	230c      	movs	r3, #12
 802e24e:	603b      	str	r3, [r7, #0]
 802e250:	e7ef      	b.n	802e232 <__sfp+0x66>
 802e252:	46c0      	nop			; (mov r8, r8)
 802e254:	08031668 	.word	0x08031668
 802e258:	ffff0001 	.word	0xffff0001

0802e25c <__swhatbuf_r>:
 802e25c:	b570      	push	{r4, r5, r6, lr}
 802e25e:	000e      	movs	r6, r1
 802e260:	001d      	movs	r5, r3
 802e262:	230e      	movs	r3, #14
 802e264:	5ec9      	ldrsh	r1, [r1, r3]
 802e266:	0014      	movs	r4, r2
 802e268:	b096      	sub	sp, #88	; 0x58
 802e26a:	2900      	cmp	r1, #0
 802e26c:	da08      	bge.n	802e280 <__swhatbuf_r+0x24>
 802e26e:	220c      	movs	r2, #12
 802e270:	5eb3      	ldrsh	r3, [r6, r2]
 802e272:	2200      	movs	r2, #0
 802e274:	602a      	str	r2, [r5, #0]
 802e276:	061b      	lsls	r3, r3, #24
 802e278:	d411      	bmi.n	802e29e <__swhatbuf_r+0x42>
 802e27a:	2380      	movs	r3, #128	; 0x80
 802e27c:	00db      	lsls	r3, r3, #3
 802e27e:	e00f      	b.n	802e2a0 <__swhatbuf_r+0x44>
 802e280:	466a      	mov	r2, sp
 802e282:	f000 f999 	bl	802e5b8 <_fstat_r>
 802e286:	2800      	cmp	r0, #0
 802e288:	dbf1      	blt.n	802e26e <__swhatbuf_r+0x12>
 802e28a:	23f0      	movs	r3, #240	; 0xf0
 802e28c:	9901      	ldr	r1, [sp, #4]
 802e28e:	021b      	lsls	r3, r3, #8
 802e290:	4019      	ands	r1, r3
 802e292:	4b05      	ldr	r3, [pc, #20]	; (802e2a8 <__swhatbuf_r+0x4c>)
 802e294:	18c9      	adds	r1, r1, r3
 802e296:	424b      	negs	r3, r1
 802e298:	4159      	adcs	r1, r3
 802e29a:	6029      	str	r1, [r5, #0]
 802e29c:	e7ed      	b.n	802e27a <__swhatbuf_r+0x1e>
 802e29e:	2340      	movs	r3, #64	; 0x40
 802e2a0:	2000      	movs	r0, #0
 802e2a2:	6023      	str	r3, [r4, #0]
 802e2a4:	b016      	add	sp, #88	; 0x58
 802e2a6:	bd70      	pop	{r4, r5, r6, pc}
 802e2a8:	ffffe000 	.word	0xffffe000

0802e2ac <__smakebuf_r>:
 802e2ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802e2ae:	2602      	movs	r6, #2
 802e2b0:	898b      	ldrh	r3, [r1, #12]
 802e2b2:	0005      	movs	r5, r0
 802e2b4:	000c      	movs	r4, r1
 802e2b6:	4233      	tst	r3, r6
 802e2b8:	d006      	beq.n	802e2c8 <__smakebuf_r+0x1c>
 802e2ba:	0023      	movs	r3, r4
 802e2bc:	3347      	adds	r3, #71	; 0x47
 802e2be:	6023      	str	r3, [r4, #0]
 802e2c0:	6123      	str	r3, [r4, #16]
 802e2c2:	2301      	movs	r3, #1
 802e2c4:	6163      	str	r3, [r4, #20]
 802e2c6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 802e2c8:	466a      	mov	r2, sp
 802e2ca:	ab01      	add	r3, sp, #4
 802e2cc:	f7ff ffc6 	bl	802e25c <__swhatbuf_r>
 802e2d0:	9900      	ldr	r1, [sp, #0]
 802e2d2:	0007      	movs	r7, r0
 802e2d4:	0028      	movs	r0, r5
 802e2d6:	f000 f877 	bl	802e3c8 <_malloc_r>
 802e2da:	2800      	cmp	r0, #0
 802e2dc:	d108      	bne.n	802e2f0 <__smakebuf_r+0x44>
 802e2de:	220c      	movs	r2, #12
 802e2e0:	5ea3      	ldrsh	r3, [r4, r2]
 802e2e2:	059a      	lsls	r2, r3, #22
 802e2e4:	d4ef      	bmi.n	802e2c6 <__smakebuf_r+0x1a>
 802e2e6:	2203      	movs	r2, #3
 802e2e8:	4393      	bics	r3, r2
 802e2ea:	431e      	orrs	r6, r3
 802e2ec:	81a6      	strh	r6, [r4, #12]
 802e2ee:	e7e4      	b.n	802e2ba <__smakebuf_r+0xe>
 802e2f0:	4b0f      	ldr	r3, [pc, #60]	; (802e330 <__smakebuf_r+0x84>)
 802e2f2:	62ab      	str	r3, [r5, #40]	; 0x28
 802e2f4:	2380      	movs	r3, #128	; 0x80
 802e2f6:	89a2      	ldrh	r2, [r4, #12]
 802e2f8:	6020      	str	r0, [r4, #0]
 802e2fa:	4313      	orrs	r3, r2
 802e2fc:	81a3      	strh	r3, [r4, #12]
 802e2fe:	9b00      	ldr	r3, [sp, #0]
 802e300:	6120      	str	r0, [r4, #16]
 802e302:	6163      	str	r3, [r4, #20]
 802e304:	9b01      	ldr	r3, [sp, #4]
 802e306:	2b00      	cmp	r3, #0
 802e308:	d00d      	beq.n	802e326 <__smakebuf_r+0x7a>
 802e30a:	0028      	movs	r0, r5
 802e30c:	230e      	movs	r3, #14
 802e30e:	5ee1      	ldrsh	r1, [r4, r3]
 802e310:	f000 f964 	bl	802e5dc <_isatty_r>
 802e314:	2800      	cmp	r0, #0
 802e316:	d006      	beq.n	802e326 <__smakebuf_r+0x7a>
 802e318:	2203      	movs	r2, #3
 802e31a:	89a3      	ldrh	r3, [r4, #12]
 802e31c:	4393      	bics	r3, r2
 802e31e:	001a      	movs	r2, r3
 802e320:	2301      	movs	r3, #1
 802e322:	4313      	orrs	r3, r2
 802e324:	81a3      	strh	r3, [r4, #12]
 802e326:	89a0      	ldrh	r0, [r4, #12]
 802e328:	4307      	orrs	r7, r0
 802e32a:	81a7      	strh	r7, [r4, #12]
 802e32c:	e7cb      	b.n	802e2c6 <__smakebuf_r+0x1a>
 802e32e:	46c0      	nop			; (mov r8, r8)
 802e330:	0802e10d 	.word	0x0802e10d

0802e334 <_free_r>:
 802e334:	b570      	push	{r4, r5, r6, lr}
 802e336:	0005      	movs	r5, r0
 802e338:	2900      	cmp	r1, #0
 802e33a:	d010      	beq.n	802e35e <_free_r+0x2a>
 802e33c:	1f0c      	subs	r4, r1, #4
 802e33e:	6823      	ldr	r3, [r4, #0]
 802e340:	2b00      	cmp	r3, #0
 802e342:	da00      	bge.n	802e346 <_free_r+0x12>
 802e344:	18e4      	adds	r4, r4, r3
 802e346:	0028      	movs	r0, r5
 802e348:	f000 f96e 	bl	802e628 <__malloc_lock>
 802e34c:	4a1d      	ldr	r2, [pc, #116]	; (802e3c4 <_free_r+0x90>)
 802e34e:	6813      	ldr	r3, [r2, #0]
 802e350:	2b00      	cmp	r3, #0
 802e352:	d105      	bne.n	802e360 <_free_r+0x2c>
 802e354:	6063      	str	r3, [r4, #4]
 802e356:	6014      	str	r4, [r2, #0]
 802e358:	0028      	movs	r0, r5
 802e35a:	f000 f96d 	bl	802e638 <__malloc_unlock>
 802e35e:	bd70      	pop	{r4, r5, r6, pc}
 802e360:	42a3      	cmp	r3, r4
 802e362:	d908      	bls.n	802e376 <_free_r+0x42>
 802e364:	6821      	ldr	r1, [r4, #0]
 802e366:	1860      	adds	r0, r4, r1
 802e368:	4283      	cmp	r3, r0
 802e36a:	d1f3      	bne.n	802e354 <_free_r+0x20>
 802e36c:	6818      	ldr	r0, [r3, #0]
 802e36e:	685b      	ldr	r3, [r3, #4]
 802e370:	1841      	adds	r1, r0, r1
 802e372:	6021      	str	r1, [r4, #0]
 802e374:	e7ee      	b.n	802e354 <_free_r+0x20>
 802e376:	001a      	movs	r2, r3
 802e378:	685b      	ldr	r3, [r3, #4]
 802e37a:	2b00      	cmp	r3, #0
 802e37c:	d001      	beq.n	802e382 <_free_r+0x4e>
 802e37e:	42a3      	cmp	r3, r4
 802e380:	d9f9      	bls.n	802e376 <_free_r+0x42>
 802e382:	6811      	ldr	r1, [r2, #0]
 802e384:	1850      	adds	r0, r2, r1
 802e386:	42a0      	cmp	r0, r4
 802e388:	d10b      	bne.n	802e3a2 <_free_r+0x6e>
 802e38a:	6820      	ldr	r0, [r4, #0]
 802e38c:	1809      	adds	r1, r1, r0
 802e38e:	1850      	adds	r0, r2, r1
 802e390:	6011      	str	r1, [r2, #0]
 802e392:	4283      	cmp	r3, r0
 802e394:	d1e0      	bne.n	802e358 <_free_r+0x24>
 802e396:	6818      	ldr	r0, [r3, #0]
 802e398:	685b      	ldr	r3, [r3, #4]
 802e39a:	1841      	adds	r1, r0, r1
 802e39c:	6011      	str	r1, [r2, #0]
 802e39e:	6053      	str	r3, [r2, #4]
 802e3a0:	e7da      	b.n	802e358 <_free_r+0x24>
 802e3a2:	42a0      	cmp	r0, r4
 802e3a4:	d902      	bls.n	802e3ac <_free_r+0x78>
 802e3a6:	230c      	movs	r3, #12
 802e3a8:	602b      	str	r3, [r5, #0]
 802e3aa:	e7d5      	b.n	802e358 <_free_r+0x24>
 802e3ac:	6821      	ldr	r1, [r4, #0]
 802e3ae:	1860      	adds	r0, r4, r1
 802e3b0:	4283      	cmp	r3, r0
 802e3b2:	d103      	bne.n	802e3bc <_free_r+0x88>
 802e3b4:	6818      	ldr	r0, [r3, #0]
 802e3b6:	685b      	ldr	r3, [r3, #4]
 802e3b8:	1841      	adds	r1, r0, r1
 802e3ba:	6021      	str	r1, [r4, #0]
 802e3bc:	6063      	str	r3, [r4, #4]
 802e3be:	6054      	str	r4, [r2, #4]
 802e3c0:	e7ca      	b.n	802e358 <_free_r+0x24>
 802e3c2:	46c0      	nop			; (mov r8, r8)
 802e3c4:	200098dc 	.word	0x200098dc

0802e3c8 <_malloc_r>:
 802e3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e3ca:	2303      	movs	r3, #3
 802e3cc:	1ccd      	adds	r5, r1, #3
 802e3ce:	439d      	bics	r5, r3
 802e3d0:	3508      	adds	r5, #8
 802e3d2:	0006      	movs	r6, r0
 802e3d4:	2d0c      	cmp	r5, #12
 802e3d6:	d21f      	bcs.n	802e418 <_malloc_r+0x50>
 802e3d8:	250c      	movs	r5, #12
 802e3da:	42a9      	cmp	r1, r5
 802e3dc:	d81e      	bhi.n	802e41c <_malloc_r+0x54>
 802e3de:	0030      	movs	r0, r6
 802e3e0:	f000 f922 	bl	802e628 <__malloc_lock>
 802e3e4:	4925      	ldr	r1, [pc, #148]	; (802e47c <_malloc_r+0xb4>)
 802e3e6:	680a      	ldr	r2, [r1, #0]
 802e3e8:	0014      	movs	r4, r2
 802e3ea:	2c00      	cmp	r4, #0
 802e3ec:	d11a      	bne.n	802e424 <_malloc_r+0x5c>
 802e3ee:	4f24      	ldr	r7, [pc, #144]	; (802e480 <_malloc_r+0xb8>)
 802e3f0:	683b      	ldr	r3, [r7, #0]
 802e3f2:	2b00      	cmp	r3, #0
 802e3f4:	d104      	bne.n	802e400 <_malloc_r+0x38>
 802e3f6:	0021      	movs	r1, r4
 802e3f8:	0030      	movs	r0, r6
 802e3fa:	f000 f843 	bl	802e484 <_sbrk_r>
 802e3fe:	6038      	str	r0, [r7, #0]
 802e400:	0029      	movs	r1, r5
 802e402:	0030      	movs	r0, r6
 802e404:	f000 f83e 	bl	802e484 <_sbrk_r>
 802e408:	1c43      	adds	r3, r0, #1
 802e40a:	d12b      	bne.n	802e464 <_malloc_r+0x9c>
 802e40c:	230c      	movs	r3, #12
 802e40e:	0030      	movs	r0, r6
 802e410:	6033      	str	r3, [r6, #0]
 802e412:	f000 f911 	bl	802e638 <__malloc_unlock>
 802e416:	e003      	b.n	802e420 <_malloc_r+0x58>
 802e418:	2d00      	cmp	r5, #0
 802e41a:	dade      	bge.n	802e3da <_malloc_r+0x12>
 802e41c:	230c      	movs	r3, #12
 802e41e:	6033      	str	r3, [r6, #0]
 802e420:	2000      	movs	r0, #0
 802e422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e424:	6823      	ldr	r3, [r4, #0]
 802e426:	1b5b      	subs	r3, r3, r5
 802e428:	d419      	bmi.n	802e45e <_malloc_r+0x96>
 802e42a:	2b0b      	cmp	r3, #11
 802e42c:	d903      	bls.n	802e436 <_malloc_r+0x6e>
 802e42e:	6023      	str	r3, [r4, #0]
 802e430:	18e4      	adds	r4, r4, r3
 802e432:	6025      	str	r5, [r4, #0]
 802e434:	e003      	b.n	802e43e <_malloc_r+0x76>
 802e436:	6863      	ldr	r3, [r4, #4]
 802e438:	42a2      	cmp	r2, r4
 802e43a:	d10e      	bne.n	802e45a <_malloc_r+0x92>
 802e43c:	600b      	str	r3, [r1, #0]
 802e43e:	0030      	movs	r0, r6
 802e440:	f000 f8fa 	bl	802e638 <__malloc_unlock>
 802e444:	0020      	movs	r0, r4
 802e446:	2207      	movs	r2, #7
 802e448:	300b      	adds	r0, #11
 802e44a:	1d23      	adds	r3, r4, #4
 802e44c:	4390      	bics	r0, r2
 802e44e:	1ac2      	subs	r2, r0, r3
 802e450:	4298      	cmp	r0, r3
 802e452:	d0e6      	beq.n	802e422 <_malloc_r+0x5a>
 802e454:	1a1b      	subs	r3, r3, r0
 802e456:	50a3      	str	r3, [r4, r2]
 802e458:	e7e3      	b.n	802e422 <_malloc_r+0x5a>
 802e45a:	6053      	str	r3, [r2, #4]
 802e45c:	e7ef      	b.n	802e43e <_malloc_r+0x76>
 802e45e:	0022      	movs	r2, r4
 802e460:	6864      	ldr	r4, [r4, #4]
 802e462:	e7c2      	b.n	802e3ea <_malloc_r+0x22>
 802e464:	2303      	movs	r3, #3
 802e466:	1cc4      	adds	r4, r0, #3
 802e468:	439c      	bics	r4, r3
 802e46a:	42a0      	cmp	r0, r4
 802e46c:	d0e1      	beq.n	802e432 <_malloc_r+0x6a>
 802e46e:	1a21      	subs	r1, r4, r0
 802e470:	0030      	movs	r0, r6
 802e472:	f000 f807 	bl	802e484 <_sbrk_r>
 802e476:	1c43      	adds	r3, r0, #1
 802e478:	d1db      	bne.n	802e432 <_malloc_r+0x6a>
 802e47a:	e7c7      	b.n	802e40c <_malloc_r+0x44>
 802e47c:	200098dc 	.word	0x200098dc
 802e480:	200098e0 	.word	0x200098e0

0802e484 <_sbrk_r>:
 802e484:	2300      	movs	r3, #0
 802e486:	b570      	push	{r4, r5, r6, lr}
 802e488:	4d06      	ldr	r5, [pc, #24]	; (802e4a4 <_sbrk_r+0x20>)
 802e48a:	0004      	movs	r4, r0
 802e48c:	0008      	movs	r0, r1
 802e48e:	602b      	str	r3, [r5, #0]
 802e490:	f7fd fdb0 	bl	802bff4 <_sbrk>
 802e494:	1c43      	adds	r3, r0, #1
 802e496:	d103      	bne.n	802e4a0 <_sbrk_r+0x1c>
 802e498:	682b      	ldr	r3, [r5, #0]
 802e49a:	2b00      	cmp	r3, #0
 802e49c:	d000      	beq.n	802e4a0 <_sbrk_r+0x1c>
 802e49e:	6023      	str	r3, [r4, #0]
 802e4a0:	bd70      	pop	{r4, r5, r6, pc}
 802e4a2:	46c0      	nop			; (mov r8, r8)
 802e4a4:	200098e4 	.word	0x200098e4

0802e4a8 <raise>:
 802e4a8:	b510      	push	{r4, lr}
 802e4aa:	4b03      	ldr	r3, [pc, #12]	; (802e4b8 <raise+0x10>)
 802e4ac:	0001      	movs	r1, r0
 802e4ae:	6818      	ldr	r0, [r3, #0]
 802e4b0:	f002 fd67 	bl	8030f82 <_raise_r>
 802e4b4:	bd10      	pop	{r4, pc}
 802e4b6:	46c0      	nop			; (mov r8, r8)
 802e4b8:	200080d0 	.word	0x200080d0

0802e4bc <_kill_r>:
 802e4bc:	2300      	movs	r3, #0
 802e4be:	b570      	push	{r4, r5, r6, lr}
 802e4c0:	4d06      	ldr	r5, [pc, #24]	; (802e4dc <_kill_r+0x20>)
 802e4c2:	0004      	movs	r4, r0
 802e4c4:	0008      	movs	r0, r1
 802e4c6:	0011      	movs	r1, r2
 802e4c8:	602b      	str	r3, [r5, #0]
 802e4ca:	f001 ff83 	bl	80303d4 <_kill>
 802e4ce:	1c43      	adds	r3, r0, #1
 802e4d0:	d103      	bne.n	802e4da <_kill_r+0x1e>
 802e4d2:	682b      	ldr	r3, [r5, #0]
 802e4d4:	2b00      	cmp	r3, #0
 802e4d6:	d000      	beq.n	802e4da <_kill_r+0x1e>
 802e4d8:	6023      	str	r3, [r4, #0]
 802e4da:	bd70      	pop	{r4, r5, r6, pc}
 802e4dc:	200098e4 	.word	0x200098e4

0802e4e0 <__sread>:
 802e4e0:	b570      	push	{r4, r5, r6, lr}
 802e4e2:	000c      	movs	r4, r1
 802e4e4:	250e      	movs	r5, #14
 802e4e6:	5f49      	ldrsh	r1, [r1, r5]
 802e4e8:	f000 f8ae 	bl	802e648 <_read_r>
 802e4ec:	2800      	cmp	r0, #0
 802e4ee:	db03      	blt.n	802e4f8 <__sread+0x18>
 802e4f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802e4f2:	181b      	adds	r3, r3, r0
 802e4f4:	6563      	str	r3, [r4, #84]	; 0x54
 802e4f6:	bd70      	pop	{r4, r5, r6, pc}
 802e4f8:	89a3      	ldrh	r3, [r4, #12]
 802e4fa:	4a02      	ldr	r2, [pc, #8]	; (802e504 <__sread+0x24>)
 802e4fc:	4013      	ands	r3, r2
 802e4fe:	81a3      	strh	r3, [r4, #12]
 802e500:	e7f9      	b.n	802e4f6 <__sread+0x16>
 802e502:	46c0      	nop			; (mov r8, r8)
 802e504:	ffffefff 	.word	0xffffefff

0802e508 <__swrite>:
 802e508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e50a:	001f      	movs	r7, r3
 802e50c:	898b      	ldrh	r3, [r1, #12]
 802e50e:	0005      	movs	r5, r0
 802e510:	000c      	movs	r4, r1
 802e512:	0016      	movs	r6, r2
 802e514:	05db      	lsls	r3, r3, #23
 802e516:	d505      	bpl.n	802e524 <__swrite+0x1c>
 802e518:	230e      	movs	r3, #14
 802e51a:	5ec9      	ldrsh	r1, [r1, r3]
 802e51c:	2200      	movs	r2, #0
 802e51e:	2302      	movs	r3, #2
 802e520:	f000 f86e 	bl	802e600 <_lseek_r>
 802e524:	89a3      	ldrh	r3, [r4, #12]
 802e526:	4a05      	ldr	r2, [pc, #20]	; (802e53c <__swrite+0x34>)
 802e528:	0028      	movs	r0, r5
 802e52a:	4013      	ands	r3, r2
 802e52c:	81a3      	strh	r3, [r4, #12]
 802e52e:	0032      	movs	r2, r6
 802e530:	230e      	movs	r3, #14
 802e532:	5ee1      	ldrsh	r1, [r4, r3]
 802e534:	003b      	movs	r3, r7
 802e536:	f000 f819 	bl	802e56c <_write_r>
 802e53a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e53c:	ffffefff 	.word	0xffffefff

0802e540 <__sseek>:
 802e540:	b570      	push	{r4, r5, r6, lr}
 802e542:	000c      	movs	r4, r1
 802e544:	250e      	movs	r5, #14
 802e546:	5f49      	ldrsh	r1, [r1, r5]
 802e548:	f000 f85a 	bl	802e600 <_lseek_r>
 802e54c:	89a3      	ldrh	r3, [r4, #12]
 802e54e:	1c42      	adds	r2, r0, #1
 802e550:	d103      	bne.n	802e55a <__sseek+0x1a>
 802e552:	4a05      	ldr	r2, [pc, #20]	; (802e568 <__sseek+0x28>)
 802e554:	4013      	ands	r3, r2
 802e556:	81a3      	strh	r3, [r4, #12]
 802e558:	bd70      	pop	{r4, r5, r6, pc}
 802e55a:	2280      	movs	r2, #128	; 0x80
 802e55c:	0152      	lsls	r2, r2, #5
 802e55e:	4313      	orrs	r3, r2
 802e560:	81a3      	strh	r3, [r4, #12]
 802e562:	6560      	str	r0, [r4, #84]	; 0x54
 802e564:	e7f8      	b.n	802e558 <__sseek+0x18>
 802e566:	46c0      	nop			; (mov r8, r8)
 802e568:	ffffefff 	.word	0xffffefff

0802e56c <_write_r>:
 802e56c:	b570      	push	{r4, r5, r6, lr}
 802e56e:	0004      	movs	r4, r0
 802e570:	0008      	movs	r0, r1
 802e572:	0011      	movs	r1, r2
 802e574:	001a      	movs	r2, r3
 802e576:	2300      	movs	r3, #0
 802e578:	4d05      	ldr	r5, [pc, #20]	; (802e590 <_write_r+0x24>)
 802e57a:	602b      	str	r3, [r5, #0]
 802e57c:	f001 ff18 	bl	80303b0 <_write>
 802e580:	1c43      	adds	r3, r0, #1
 802e582:	d103      	bne.n	802e58c <_write_r+0x20>
 802e584:	682b      	ldr	r3, [r5, #0]
 802e586:	2b00      	cmp	r3, #0
 802e588:	d000      	beq.n	802e58c <_write_r+0x20>
 802e58a:	6023      	str	r3, [r4, #0]
 802e58c:	bd70      	pop	{r4, r5, r6, pc}
 802e58e:	46c0      	nop			; (mov r8, r8)
 802e590:	200098e4 	.word	0x200098e4

0802e594 <_close_r>:
 802e594:	2300      	movs	r3, #0
 802e596:	b570      	push	{r4, r5, r6, lr}
 802e598:	4d06      	ldr	r5, [pc, #24]	; (802e5b4 <_close_r+0x20>)
 802e59a:	0004      	movs	r4, r0
 802e59c:	0008      	movs	r0, r1
 802e59e:	602b      	str	r3, [r5, #0]
 802e5a0:	f001 ff0c 	bl	80303bc <_close>
 802e5a4:	1c43      	adds	r3, r0, #1
 802e5a6:	d103      	bne.n	802e5b0 <_close_r+0x1c>
 802e5a8:	682b      	ldr	r3, [r5, #0]
 802e5aa:	2b00      	cmp	r3, #0
 802e5ac:	d000      	beq.n	802e5b0 <_close_r+0x1c>
 802e5ae:	6023      	str	r3, [r4, #0]
 802e5b0:	bd70      	pop	{r4, r5, r6, pc}
 802e5b2:	46c0      	nop			; (mov r8, r8)
 802e5b4:	200098e4 	.word	0x200098e4

0802e5b8 <_fstat_r>:
 802e5b8:	2300      	movs	r3, #0
 802e5ba:	b570      	push	{r4, r5, r6, lr}
 802e5bc:	4d06      	ldr	r5, [pc, #24]	; (802e5d8 <_fstat_r+0x20>)
 802e5be:	0004      	movs	r4, r0
 802e5c0:	0008      	movs	r0, r1
 802e5c2:	0011      	movs	r1, r2
 802e5c4:	602b      	str	r3, [r5, #0]
 802e5c6:	f001 ff09 	bl	80303dc <_fstat>
 802e5ca:	1c43      	adds	r3, r0, #1
 802e5cc:	d103      	bne.n	802e5d6 <_fstat_r+0x1e>
 802e5ce:	682b      	ldr	r3, [r5, #0]
 802e5d0:	2b00      	cmp	r3, #0
 802e5d2:	d000      	beq.n	802e5d6 <_fstat_r+0x1e>
 802e5d4:	6023      	str	r3, [r4, #0]
 802e5d6:	bd70      	pop	{r4, r5, r6, pc}
 802e5d8:	200098e4 	.word	0x200098e4

0802e5dc <_isatty_r>:
 802e5dc:	2300      	movs	r3, #0
 802e5de:	b570      	push	{r4, r5, r6, lr}
 802e5e0:	4d06      	ldr	r5, [pc, #24]	; (802e5fc <_isatty_r+0x20>)
 802e5e2:	0004      	movs	r4, r0
 802e5e4:	0008      	movs	r0, r1
 802e5e6:	602b      	str	r3, [r5, #0]
 802e5e8:	f001 feed 	bl	80303c6 <_isatty>
 802e5ec:	1c43      	adds	r3, r0, #1
 802e5ee:	d103      	bne.n	802e5f8 <_isatty_r+0x1c>
 802e5f0:	682b      	ldr	r3, [r5, #0]
 802e5f2:	2b00      	cmp	r3, #0
 802e5f4:	d000      	beq.n	802e5f8 <_isatty_r+0x1c>
 802e5f6:	6023      	str	r3, [r4, #0]
 802e5f8:	bd70      	pop	{r4, r5, r6, pc}
 802e5fa:	46c0      	nop			; (mov r8, r8)
 802e5fc:	200098e4 	.word	0x200098e4

0802e600 <_lseek_r>:
 802e600:	b570      	push	{r4, r5, r6, lr}
 802e602:	0004      	movs	r4, r0
 802e604:	0008      	movs	r0, r1
 802e606:	0011      	movs	r1, r2
 802e608:	001a      	movs	r2, r3
 802e60a:	2300      	movs	r3, #0
 802e60c:	4d05      	ldr	r5, [pc, #20]	; (802e624 <_lseek_r+0x24>)
 802e60e:	602b      	str	r3, [r5, #0]
 802e610:	f001 fed7 	bl	80303c2 <_lseek>
 802e614:	1c43      	adds	r3, r0, #1
 802e616:	d103      	bne.n	802e620 <_lseek_r+0x20>
 802e618:	682b      	ldr	r3, [r5, #0]
 802e61a:	2b00      	cmp	r3, #0
 802e61c:	d000      	beq.n	802e620 <_lseek_r+0x20>
 802e61e:	6023      	str	r3, [r4, #0]
 802e620:	bd70      	pop	{r4, r5, r6, pc}
 802e622:	46c0      	nop			; (mov r8, r8)
 802e624:	200098e4 	.word	0x200098e4

0802e628 <__malloc_lock>:
 802e628:	b510      	push	{r4, lr}
 802e62a:	4802      	ldr	r0, [pc, #8]	; (802e634 <__malloc_lock+0xc>)
 802e62c:	f002 fc9c 	bl	8030f68 <__retarget_lock_acquire_recursive>
 802e630:	bd10      	pop	{r4, pc}
 802e632:	46c0      	nop			; (mov r8, r8)
 802e634:	20009b22 	.word	0x20009b22

0802e638 <__malloc_unlock>:
 802e638:	b510      	push	{r4, lr}
 802e63a:	4802      	ldr	r0, [pc, #8]	; (802e644 <__malloc_unlock+0xc>)
 802e63c:	f002 fc95 	bl	8030f6a <__retarget_lock_release_recursive>
 802e640:	bd10      	pop	{r4, pc}
 802e642:	46c0      	nop			; (mov r8, r8)
 802e644:	20009b22 	.word	0x20009b22

0802e648 <_read_r>:
 802e648:	b570      	push	{r4, r5, r6, lr}
 802e64a:	0004      	movs	r4, r0
 802e64c:	0008      	movs	r0, r1
 802e64e:	0011      	movs	r1, r2
 802e650:	001a      	movs	r2, r3
 802e652:	2300      	movs	r3, #0
 802e654:	4d05      	ldr	r5, [pc, #20]	; (802e66c <_read_r+0x24>)
 802e656:	602b      	str	r3, [r5, #0]
 802e658:	f001 fea4 	bl	80303a4 <_read>
 802e65c:	1c43      	adds	r3, r0, #1
 802e65e:	d103      	bne.n	802e668 <_read_r+0x20>
 802e660:	682b      	ldr	r3, [r5, #0]
 802e662:	2b00      	cmp	r3, #0
 802e664:	d000      	beq.n	802e668 <_read_r+0x20>
 802e666:	6023      	str	r3, [r4, #0]
 802e668:	bd70      	pop	{r4, r5, r6, pc}
 802e66a:	46c0      	nop			; (mov r8, r8)
 802e66c:	200098e4 	.word	0x200098e4

0802e670 <battery_level_cb>:
static uint8_t battery_level_cb() { return 255; }
 802e670:	20ff      	movs	r0, #255	; 0xff
 802e672:	4770      	bx	lr

0802e674 <arch_printk_char_out>:
}
 802e674:	2000      	movs	r0, #0
 802e676:	4770      	bx	lr

0802e678 <str_out>:
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 802e678:	688a      	ldr	r2, [r1, #8]
 802e67a:	680b      	ldr	r3, [r1, #0]
{
 802e67c:	b530      	push	{r4, r5, lr}
		ctx->str[ctx->count++] = '\0';
 802e67e:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 802e680:	2b00      	cmp	r3, #0
 802e682:	d002      	beq.n	802e68a <str_out+0x12>
 802e684:	684c      	ldr	r4, [r1, #4]
 802e686:	4294      	cmp	r4, r2
 802e688:	dc01      	bgt.n	802e68e <str_out+0x16>
		ctx->count++;
 802e68a:	608d      	str	r5, [r1, #8]
}
 802e68c:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
 802e68e:	3c01      	subs	r4, #1
		ctx->str[ctx->count++] = '\0';
 802e690:	189b      	adds	r3, r3, r2
 802e692:	608d      	str	r5, [r1, #8]
	if (ctx->count == ctx->max - 1) {
 802e694:	4294      	cmp	r4, r2
 802e696:	d102      	bne.n	802e69e <str_out+0x26>
		ctx->str[ctx->count++] = '\0';
 802e698:	2200      	movs	r2, #0
 802e69a:	701a      	strb	r2, [r3, #0]
 802e69c:	e7f6      	b.n	802e68c <str_out+0x14>
		ctx->str[ctx->count++] = c;
 802e69e:	7018      	strb	r0, [r3, #0]
 802e6a0:	e7f4      	b.n	802e68c <str_out+0x14>

0802e6a2 <printk>:
{
 802e6a2:	b40f      	push	{r0, r1, r2, r3}
 802e6a4:	b507      	push	{r0, r1, r2, lr}
 802e6a6:	a904      	add	r1, sp, #16
 802e6a8:	c901      	ldmia	r1!, {r0}
	va_start(ap, fmt);
 802e6aa:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
 802e6ac:	f7f3 fd96 	bl	80221dc <vprintk>
}
 802e6b0:	b003      	add	sp, #12
 802e6b2:	bc08      	pop	{r3}
 802e6b4:	b004      	add	sp, #16
 802e6b6:	4718      	bx	r3

0802e6b8 <snprintk>:
{
 802e6b8:	b40c      	push	{r2, r3}
 802e6ba:	b507      	push	{r0, r1, r2, lr}
 802e6bc:	ab04      	add	r3, sp, #16
 802e6be:	cb04      	ldmia	r3!, {r2}
	va_start(ap, fmt);
 802e6c0:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 802e6c2:	f7f3 fd97 	bl	80221f4 <vsnprintk>
}
 802e6c6:	b003      	add	sp, #12
 802e6c8:	bc08      	pop	{r3}
 802e6ca:	b002      	add	sp, #8
 802e6cc:	4718      	bx	r3

0802e6ce <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
 802e6ce:	b510      	push	{r4, lr}
	z_impl_k_sem_give(sem);
 802e6d0:	f7fe fbf4 	bl	802cebc <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
 802e6d4:	2000      	movs	r0, #0
 802e6d6:	bd10      	pop	{r4, pc}

0802e6d8 <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
 802e6d8:	b510      	push	{r4, lr}
	return z_impl_k_sem_take(sem, timeout);
 802e6da:	f7fe fc0b 	bl	802cef4 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
 802e6de:	0003      	movs	r3, r0
 802e6e0:	330b      	adds	r3, #11
 802e6e2:	d002      	beq.n	802e6ea <sys_sem_take+0x12>
 802e6e4:	0003      	movs	r3, r0
 802e6e6:	3310      	adds	r3, #16
 802e6e8:	d101      	bne.n	802e6ee <sys_sem_take+0x16>
		ret_value = -ETIMEDOUT;
 802e6ea:	2074      	movs	r0, #116	; 0x74
 802e6ec:	4240      	negs	r0, r0
	}

	return ret_value;
}
 802e6ee:	bd10      	pop	{r4, pc}

0802e6f0 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 802e6f0:	b510      	push	{r4, lr}
 802e6f2:	0004      	movs	r4, r0
 802e6f4:	0008      	movs	r0, r1
 802e6f6:	0011      	movs	r1, r2
 802e6f8:	001a      	movs	r2, r3
	entry(p1, p2, p3);
 802e6fa:	47a0      	blx	r4
	return z_impl_k_current_get();
 802e6fc:	f7fe fde0 	bl	802d2c0 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
 802e700:	f7fd fb72 	bl	802bde8 <z_impl_k_thread_abort>

0802e704 <outs>:
{
 802e704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802e706:	000f      	movs	r7, r1
 802e708:	0015      	movs	r5, r2
 802e70a:	001e      	movs	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 802e70c:	0014      	movs	r4, r2
{
 802e70e:	9001      	str	r0, [sp, #4]
 802e710:	1b60      	subs	r0, r4, r5
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 802e712:	42a6      	cmp	r6, r4
 802e714:	d804      	bhi.n	802e720 <outs+0x1c>
 802e716:	2e00      	cmp	r6, #0
 802e718:	d109      	bne.n	802e72e <outs+0x2a>
 802e71a:	7823      	ldrb	r3, [r4, #0]
 802e71c:	2b00      	cmp	r3, #0
 802e71e:	d006      	beq.n	802e72e <outs+0x2a>
		int rc = out((int)*sp++, ctx);
 802e720:	7820      	ldrb	r0, [r4, #0]
 802e722:	0039      	movs	r1, r7
 802e724:	9b01      	ldr	r3, [sp, #4]
 802e726:	4798      	blx	r3
		if (rc < 0) {
 802e728:	3401      	adds	r4, #1
 802e72a:	2800      	cmp	r0, #0
 802e72c:	daf0      	bge.n	802e710 <outs+0xc>
}
 802e72e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0802e730 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 802e730:	4770      	bx	lr

0802e732 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
 802e732:	2300      	movs	r3, #0
 802e734:	6043      	str	r3, [r0, #4]
	list->head = NULL;
 802e736:	6003      	str	r3, [r0, #0]
}
 802e738:	4770      	bx	lr

0802e73a <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
 802e73a:	6803      	ldr	r3, [r0, #0]
 802e73c:	2b00      	cmp	r3, #0
 802e73e:	d104      	bne.n	802e74a <log_list_add_tail+0x10>
		list->head = msg;
 802e740:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
 802e742:	2300      	movs	r3, #0
	list->tail = msg;
 802e744:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
 802e746:	600b      	str	r3, [r1, #0]
}
 802e748:	4770      	bx	lr
		list->tail->next = msg;
 802e74a:	6843      	ldr	r3, [r0, #4]
 802e74c:	6019      	str	r1, [r3, #0]
 802e74e:	e7f8      	b.n	802e742 <log_list_add_tail+0x8>

0802e750 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
 802e750:	6800      	ldr	r0, [r0, #0]
}
 802e752:	4770      	bx	lr

0802e754 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
 802e754:	0003      	movs	r3, r0
	struct log_msg *msg = list->head;
 802e756:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
 802e758:	2800      	cmp	r0, #0
 802e75a:	d001      	beq.n	802e760 <log_list_head_get+0xc>
		list->head = list->head->next;
 802e75c:	6802      	ldr	r2, [r0, #0]
 802e75e:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
 802e760:	4770      	bx	lr

0802e762 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
 802e762:	b510      	push	{r4, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 802e764:	f7f4 fbfa 	bl	8022f5c <log_msg_chunk_alloc>

	if (msg != NULL) {
 802e768:	2800      	cmp	r0, #0
 802e76a:	d003      	beq.n	802e774 <z_log_msg_std_alloc+0x12>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
 802e76c:	2301      	movs	r3, #1
 802e76e:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 802e770:	2300      	movs	r3, #0
 802e772:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
 802e774:	bd10      	pop	{r4, pc}

0802e776 <default_lf_get_timestamp>:
{
 802e776:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
 802e778:	f002 faa2 	bl	8030cc0 <z_impl_k_uptime_ticks>
 802e77c:	22fa      	movs	r2, #250	; 0xfa
 802e77e:	2300      	movs	r3, #0
 802e780:	0092      	lsls	r2, r2, #2
 802e782:	f7f1 feb3 	bl	80204ec <__aeabi_lmul>
 802e786:	0509      	lsls	r1, r1, #20
 802e788:	0b00      	lsrs	r0, r0, #12
 802e78a:	4308      	orrs	r0, r1
}
 802e78c:	bd10      	pop	{r4, pc}

0802e78e <dummy_timestamp>:
 802e78e:	2000      	movs	r0, #0
 802e790:	4770      	bx	lr

0802e792 <log_0>:
{
 802e792:	b570      	push	{r4, r5, r6, lr}
 802e794:	0005      	movs	r5, r0
 802e796:	1c0c      	adds	r4, r1, #0
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
 802e798:	f7ff ffe3 	bl	802e762 <z_log_msg_std_alloc>

	if (msg != NULL) {
 802e79c:	2800      	cmp	r0, #0
 802e79e:	d003      	beq.n	802e7a8 <log_0+0x16>
		msg->str = str;
 802e7a0:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
 802e7a2:	1c21      	adds	r1, r4, #0
 802e7a4:	f7f4 fb2e 	bl	8022e04 <msg_finalize>
}
 802e7a8:	bd70      	pop	{r4, r5, r6, pc}

0802e7aa <log_1>:
{
 802e7aa:	b570      	push	{r4, r5, r6, lr}
 802e7ac:	0006      	movs	r6, r0
 802e7ae:	000d      	movs	r5, r1
 802e7b0:	1c14      	adds	r4, r2, #0
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
 802e7b2:	f7ff ffd6 	bl	802e762 <z_log_msg_std_alloc>

	if (msg != NULL) {
 802e7b6:	2800      	cmp	r0, #0
 802e7b8:	d00a      	beq.n	802e7d0 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
 802e7ba:	220f      	movs	r2, #15
 802e7bc:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
 802e7be:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
 802e7c0:	401a      	ands	r2, r3
 802e7c2:	2310      	movs	r3, #16
 802e7c4:	4313      	orrs	r3, r2
 802e7c6:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
 802e7c8:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
 802e7ca:	1c21      	adds	r1, r4, #0
 802e7cc:	f7f4 fb1a 	bl	8022e04 <msg_finalize>
}
 802e7d0:	bd70      	pop	{r4, r5, r6, pc}

0802e7d2 <log_2>:
{
 802e7d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e7d4:	0007      	movs	r7, r0
 802e7d6:	000e      	movs	r6, r1
 802e7d8:	0015      	movs	r5, r2
 802e7da:	1c1c      	adds	r4, r3, #0
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
 802e7dc:	f7ff ffc1 	bl	802e762 <z_log_msg_std_alloc>

	if (msg != NULL) {
 802e7e0:	2800      	cmp	r0, #0
 802e7e2:	d00b      	beq.n	802e7fc <log_2+0x2a>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
 802e7e4:	220f      	movs	r2, #15
 802e7e6:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
 802e7e8:	6107      	str	r7, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
 802e7ea:	401a      	ands	r2, r3
 802e7ec:	2320      	movs	r3, #32
 802e7ee:	4313      	orrs	r3, r2
 802e7f0:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
 802e7f2:	6146      	str	r6, [r0, #20]
		msg->payload.single.args[1] = arg2;
 802e7f4:	6185      	str	r5, [r0, #24]
		msg_finalize(msg, src_level);
 802e7f6:	1c21      	adds	r1, r4, #0
 802e7f8:	f7f4 fb04 	bl	8022e04 <msg_finalize>
}
 802e7fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802e7fe <log_3>:
{
 802e7fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802e800:	001c      	movs	r4, r3
 802e802:	ab08      	add	r3, sp, #32
 802e804:	881b      	ldrh	r3, [r3, #0]
 802e806:	0007      	movs	r7, r0
 802e808:	000e      	movs	r6, r1
 802e80a:	0015      	movs	r5, r2
 802e80c:	9301      	str	r3, [sp, #4]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
 802e80e:	f7ff ffa8 	bl	802e762 <z_log_msg_std_alloc>

	if (msg != NULL) {
 802e812:	2800      	cmp	r0, #0
 802e814:	d00d      	beq.n	802e832 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
 802e816:	220f      	movs	r2, #15
 802e818:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
 802e81a:	6107      	str	r7, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
 802e81c:	401a      	ands	r2, r3
 802e81e:	2330      	movs	r3, #48	; 0x30
 802e820:	4313      	orrs	r3, r2
 802e822:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
 802e824:	466b      	mov	r3, sp
		msg->payload.single.args[0] = arg1;
 802e826:	6146      	str	r6, [r0, #20]
 802e828:	8899      	ldrh	r1, [r3, #4]
		msg->payload.single.args[1] = arg2;
 802e82a:	6185      	str	r5, [r0, #24]
		msg->payload.single.args[2] = arg3;
 802e82c:	61c4      	str	r4, [r0, #28]
 802e82e:	f7f4 fae9 	bl	8022e04 <msg_finalize>
}
 802e832:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

0802e834 <log_n>:
{
 802e834:	b510      	push	{r4, lr}
 802e836:	1c1c      	adds	r4, r3, #0
		struct log_msg *msg = log_msg_create_n(str, args, narg);
 802e838:	f000 f88e 	bl	802e958 <log_msg_create_n>
		if (msg == NULL) {
 802e83c:	2800      	cmp	r0, #0
 802e83e:	d002      	beq.n	802e846 <log_n+0x12>
		msg_finalize(msg, src_level);
 802e840:	1c21      	adds	r1, r4, #0
 802e842:	f7f4 fadf 	bl	8022e04 <msg_finalize>
}
 802e846:	bd10      	pop	{r4, pc}

0802e848 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
 802e848:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802e84a:	001c      	movs	r4, r3
 802e84c:	ab08      	add	r3, sp, #32
 802e84e:	781b      	ldrb	r3, [r3, #0]
 802e850:	000d      	movs	r5, r1
 802e852:	9301      	str	r3, [sp, #4]
	uint32_t available_len = msg->hdr.params.hexdump.length;
 802e854:	8903      	ldrh	r3, [r0, #8]
 802e856:	089b      	lsrs	r3, r3, #2
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
 802e858:	42a3      	cmp	r3, r4
 802e85a:	d802      	bhi.n	802e862 <log_msg_hexdump_data_op+0x1a>
		*length = 0;
 802e85c:	2300      	movs	r3, #0
 802e85e:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
 802e860:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	if ((offset + *length) > available_len) {
 802e862:	6811      	ldr	r1, [r2, #0]
 802e864:	1861      	adds	r1, r4, r1
 802e866:	4299      	cmp	r1, r3
 802e868:	d901      	bls.n	802e86e <log_msg_hexdump_data_op+0x26>
		*length = available_len - offset;
 802e86a:	1b19      	subs	r1, r3, r4
 802e86c:	6011      	str	r1, [r2, #0]
	req_len = *length;
 802e86e:	6816      	ldr	r6, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
 802e870:	2b0c      	cmp	r3, #12
 802e872:	d932      	bls.n	802e8da <log_msg_hexdump_data_op+0x92>
		cont = msg->payload.ext.next;
 802e874:	6943      	ldr	r3, [r0, #20]
 802e876:	9300      	str	r3, [sp, #0]
	if (offset < chunk_len) {
 802e878:	2c07      	cmp	r4, #7
 802e87a:	d832      	bhi.n	802e8e2 <log_msg_hexdump_data_op+0x9a>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
 802e87c:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
 802e87e:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 802e880:	0037      	movs	r7, r6
 802e882:	429e      	cmp	r6, r3
 802e884:	d900      	bls.n	802e888 <log_msg_hexdump_data_op+0x40>
 802e886:	001f      	movs	r7, r3
		if (put_op) {
 802e888:	9b01      	ldr	r3, [sp, #4]
 802e88a:	003a      	movs	r2, r7
 802e88c:	0029      	movs	r1, r5
			(void)memcpy(&head_data[offset], data, cpy_len);
 802e88e:	1900      	adds	r0, r0, r4
		if (put_op) {
 802e890:	2b00      	cmp	r3, #0
 802e892:	d101      	bne.n	802e898 <log_msg_hexdump_data_op+0x50>
 802e894:	0001      	movs	r1, r0
 802e896:	0028      	movs	r0, r5
 802e898:	f002 fa62 	bl	8030d60 <memcpy>
		req_len -= cpy_len;
 802e89c:	1bf6      	subs	r6, r6, r7
		data += cpy_len;
 802e89e:	19ed      	adds	r5, r5, r7
	while ((req_len > 0) && (cont != NULL)) {
 802e8a0:	2e00      	cmp	r6, #0
 802e8a2:	d0dd      	beq.n	802e860 <log_msg_hexdump_data_op+0x18>
 802e8a4:	9b00      	ldr	r3, [sp, #0]
 802e8a6:	2b00      	cmp	r3, #0
 802e8a8:	d0da      	beq.n	802e860 <log_msg_hexdump_data_op+0x18>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
 802e8aa:	231c      	movs	r3, #28
 802e8ac:	1b1f      	subs	r7, r3, r4
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 802e8ae:	42b7      	cmp	r7, r6
 802e8b0:	d900      	bls.n	802e8b4 <log_msg_hexdump_data_op+0x6c>
 802e8b2:	0037      	movs	r7, r6
			(void)memcpy(&cont->payload.bytes[offset],
 802e8b4:	9b00      	ldr	r3, [sp, #0]
 802e8b6:	1d20      	adds	r0, r4, #4
 802e8b8:	1818      	adds	r0, r3, r0
		if (put_op) {
 802e8ba:	9b01      	ldr	r3, [sp, #4]
 802e8bc:	003a      	movs	r2, r7
 802e8be:	0029      	movs	r1, r5
 802e8c0:	2b00      	cmp	r3, #0
 802e8c2:	d101      	bne.n	802e8c8 <log_msg_hexdump_data_op+0x80>
 802e8c4:	0001      	movs	r1, r0
 802e8c6:	0028      	movs	r0, r5
 802e8c8:	f002 fa4a 	bl	8030d60 <memcpy>
		cont = cont->next;
 802e8cc:	9b00      	ldr	r3, [sp, #0]
		offset = 0;
 802e8ce:	2400      	movs	r4, #0
		cont = cont->next;
 802e8d0:	681b      	ldr	r3, [r3, #0]
		req_len -= cpy_len;
 802e8d2:	1bf6      	subs	r6, r6, r7
		cont = cont->next;
 802e8d4:	9300      	str	r3, [sp, #0]
		data += cpy_len;
 802e8d6:	19ed      	adds	r5, r5, r7
 802e8d8:	e7e2      	b.n	802e8a0 <log_msg_hexdump_data_op+0x58>
	struct log_msg_cont *cont = NULL;
 802e8da:	2200      	movs	r2, #0
		head_data = msg->payload.single.bytes;
 802e8dc:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
 802e8de:	9200      	str	r2, [sp, #0]
 802e8e0:	e7ce      	b.n	802e880 <log_msg_hexdump_data_op+0x38>
		offset -= chunk_len;
 802e8e2:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
 802e8e4:	2c1b      	cmp	r4, #27
 802e8e6:	d9db      	bls.n	802e8a0 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
 802e8e8:	9b00      	ldr	r3, [sp, #0]
			offset -= chunk_len;
 802e8ea:	3c1c      	subs	r4, #28
			cont = cont->next;
 802e8ec:	681b      	ldr	r3, [r3, #0]
 802e8ee:	9300      	str	r3, [sp, #0]
			offset -= chunk_len;
 802e8f0:	e7f8      	b.n	802e8e4 <log_msg_hexdump_data_op+0x9c>

0802e8f2 <log_msg_get>:
{
 802e8f2:	b510      	push	{r4, lr}
	return z_impl_atomic_add(target, value);
 802e8f4:	2101      	movs	r1, #1
	atomic_inc(&msg->hdr.ref_cnt);
 802e8f6:	3004      	adds	r0, #4
 802e8f8:	f002 fa0b 	bl	8030d12 <z_impl_atomic_add>
}
 802e8fc:	bd10      	pop	{r4, pc}

0802e8fe <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
 802e8fe:	7a40      	ldrb	r0, [r0, #9]
 802e900:	0900      	lsrs	r0, r0, #4
}
 802e902:	4770      	bx	lr

0802e904 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
 802e904:	7a42      	ldrb	r2, [r0, #9]
{
 802e906:	0003      	movs	r3, r0
	if (arg_idx >= msg->hdr.params.std.nargs) {
 802e908:	0912      	lsrs	r2, r2, #4
		return 0;
 802e90a:	2000      	movs	r0, #0
	if (arg_idx >= msg->hdr.params.std.nargs) {
 802e90c:	428a      	cmp	r2, r1
 802e90e:	d90c      	bls.n	802e92a <log_msg_arg_get+0x26>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
 802e910:	2a03      	cmp	r2, #3
 802e912:	d804      	bhi.n	802e91e <log_msg_arg_get+0x1a>
		arg = msg->payload.single.args[arg_idx];
 802e914:	3104      	adds	r1, #4
	return cont->payload.args[arg_idx];
 802e916:	0089      	lsls	r1, r1, #2
 802e918:	1859      	adds	r1, r3, r1
 802e91a:	6848      	ldr	r0, [r1, #4]
 802e91c:	e005      	b.n	802e92a <log_msg_arg_get+0x26>
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
 802e91e:	2901      	cmp	r1, #1
 802e920:	d804      	bhi.n	802e92c <log_msg_arg_get+0x28>
		return msg->payload.ext.data.args[arg_idx];
 802e922:	3104      	adds	r1, #4
 802e924:	0089      	lsls	r1, r1, #2
 802e926:	1859      	adds	r1, r3, r1
 802e928:	6888      	ldr	r0, [r1, #8]
}
 802e92a:	4770      	bx	lr
	cont = msg->payload.ext.next;
 802e92c:	695b      	ldr	r3, [r3, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
 802e92e:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
 802e930:	2906      	cmp	r1, #6
 802e932:	d9f0      	bls.n	802e916 <log_msg_arg_get+0x12>
		cont = cont->next;
 802e934:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
 802e936:	3907      	subs	r1, #7
		cont = cont->next;
 802e938:	e7fa      	b.n	802e930 <log_msg_arg_get+0x2c>

0802e93a <log_msg_put>:
{
 802e93a:	b510      	push	{r4, lr}
 802e93c:	0004      	movs	r4, r0
	return z_impl_atomic_sub(target, value);
 802e93e:	2101      	movs	r1, #1
	atomic_dec(&msg->hdr.ref_cnt);
 802e940:	3004      	adds	r0, #4
 802e942:	f002 f9f3 	bl	8030d2c <z_impl_atomic_sub>
	if (msg->hdr.ref_cnt == 0) {
 802e946:	6863      	ldr	r3, [r4, #4]
 802e948:	2b00      	cmp	r3, #0
 802e94a:	d102      	bne.n	802e952 <log_msg_put+0x18>
		msg_free(msg);
 802e94c:	0020      	movs	r0, r4
 802e94e:	f7f4 fb17 	bl	8022f80 <msg_free>
}
 802e952:	bd10      	pop	{r4, pc}

0802e954 <log_msg_str_get>:
	return msg->str;
 802e954:	6900      	ldr	r0, [r0, #16]
}
 802e956:	4770      	bx	lr

0802e958 <log_msg_create_n>:
{
 802e958:	b5f0      	push	{r4, r5, r6, r7, lr}
 802e95a:	b085      	sub	sp, #20
 802e95c:	000e      	movs	r6, r1
 802e95e:	0015      	movs	r5, r2
 802e960:	9003      	str	r0, [sp, #12]
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 802e962:	f7f4 fafb 	bl	8022f5c <log_msg_chunk_alloc>
 802e966:	1e04      	subs	r4, r0, #0
	if (msg != NULL) {
 802e968:	d02b      	beq.n	802e9c2 <log_msg_create_n+0x6a>
		msg->hdr.ref_cnt = 1;
 802e96a:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
 802e96c:	2200      	movs	r2, #0
		msg->hdr.ref_cnt = 1;
 802e96e:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 802e970:	8102      	strh	r2, [r0, #8]
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
 802e972:	2d03      	cmp	r5, #3
 802e974:	d90c      	bls.n	802e990 <log_msg_create_n+0x38>
	msg->hdr.params.generic.ext = 1;
 802e976:	7a01      	ldrb	r1, [r0, #8]
 802e978:	18db      	adds	r3, r3, r3
 802e97a:	430b      	orrs	r3, r1
 802e97c:	7203      	strb	r3, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
 802e97e:	1eab      	subs	r3, r5, #2
 802e980:	9301      	str	r3, [sp, #4]
	next = &msg->payload.ext.next;
 802e982:	0003      	movs	r3, r0
 802e984:	3314      	adds	r3, #20
 802e986:	9302      	str	r3, [sp, #8]
	*next = NULL;
 802e988:	6142      	str	r2, [r0, #20]
	while (n > 0) {
 802e98a:	9b01      	ldr	r3, [sp, #4]
 802e98c:	2b00      	cmp	r3, #0
 802e98e:	dc10      	bgt.n	802e9b2 <log_msg_create_n+0x5a>
		msg->hdr.params.std.nargs = nargs;
 802e990:	210f      	movs	r1, #15
		msg->str = str;
 802e992:	9b03      	ldr	r3, [sp, #12]
		msg->hdr.params.std.nargs = nargs;
 802e994:	012a      	lsls	r2, r5, #4
		msg->str = str;
 802e996:	6123      	str	r3, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
 802e998:	7a63      	ldrb	r3, [r4, #9]
 802e99a:	400b      	ands	r3, r1
 802e99c:	4313      	orrs	r3, r2
 802e99e:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
 802e9a0:	2d03      	cmp	r5, #3
 802e9a2:	d81a      	bhi.n	802e9da <log_msg_create_n+0x82>
 802e9a4:	0020      	movs	r0, r4
 802e9a6:	0031      	movs	r1, r6
		(void)memcpy(msg->payload.single.args, args,
 802e9a8:	00aa      	lsls	r2, r5, #2
 802e9aa:	3014      	adds	r0, #20
 802e9ac:	f002 f9d8 	bl	8030d60 <memcpy>
	while (nargs != 0U) {
 802e9b0:	e007      	b.n	802e9c2 <log_msg_create_n+0x6a>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
 802e9b2:	f7f4 fad3 	bl	8022f5c <log_msg_chunk_alloc>
 802e9b6:	1e07      	subs	r7, r0, #0
		if (cont == NULL) {
 802e9b8:	d106      	bne.n	802e9c8 <log_msg_create_n+0x70>
			msg_free(msg);
 802e9ba:	0020      	movs	r0, r4
 802e9bc:	f7f4 fae0 	bl	8022f80 <msg_free>
			return NULL;
 802e9c0:	003c      	movs	r4, r7
}
 802e9c2:	0020      	movs	r0, r4
 802e9c4:	b005      	add	sp, #20
 802e9c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*next = cont;
 802e9c8:	9b02      	ldr	r3, [sp, #8]
		next = &cont->next;
 802e9ca:	9002      	str	r0, [sp, #8]
		*next = cont;
 802e9cc:	6018      	str	r0, [r3, #0]
		cont->next = NULL;
 802e9ce:	2300      	movs	r3, #0
 802e9d0:	6003      	str	r3, [r0, #0]
		n -= ARGS_CONT_MSG;
 802e9d2:	9b01      	ldr	r3, [sp, #4]
 802e9d4:	3b07      	subs	r3, #7
 802e9d6:	9301      	str	r3, [sp, #4]
 802e9d8:	e7d7      	b.n	802e98a <log_msg_create_n+0x32>
 802e9da:	0020      	movs	r0, r4
 802e9dc:	0031      	movs	r1, r6
 802e9de:	2208      	movs	r2, #8
 802e9e0:	3018      	adds	r0, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
 802e9e2:	6967      	ldr	r7, [r4, #20]
 802e9e4:	f002 f9bc 	bl	8030d60 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
 802e9e8:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
 802e9ea:	3608      	adds	r6, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
 802e9ec:	9501      	str	r5, [sp, #4]
 802e9ee:	2d07      	cmp	r5, #7
 802e9f0:	d901      	bls.n	802e9f6 <log_msg_create_n+0x9e>
 802e9f2:	2307      	movs	r3, #7
 802e9f4:	9301      	str	r3, [sp, #4]
		(void)memcpy(cont->payload.args, args,
 802e9f6:	9b01      	ldr	r3, [sp, #4]
 802e9f8:	0031      	movs	r1, r6
 802e9fa:	009b      	lsls	r3, r3, #2
 802e9fc:	001a      	movs	r2, r3
 802e9fe:	1d38      	adds	r0, r7, #4
 802ea00:	9302      	str	r3, [sp, #8]
 802ea02:	f002 f9ad 	bl	8030d60 <memcpy>
		nargs -= cpy_args;
 802ea06:	9b01      	ldr	r3, [sp, #4]
		cont = cont->next;
 802ea08:	683f      	ldr	r7, [r7, #0]
		nargs -= cpy_args;
 802ea0a:	1aed      	subs	r5, r5, r3
		args += cpy_args;
 802ea0c:	9b02      	ldr	r3, [sp, #8]
 802ea0e:	18f6      	adds	r6, r6, r3
	while (nargs != 0U) {
 802ea10:	2d00      	cmp	r5, #0
 802ea12:	d1eb      	bne.n	802e9ec <log_msg_create_n+0x94>
 802ea14:	e7d5      	b.n	802e9c2 <log_msg_create_n+0x6a>

0802ea16 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
 802ea16:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
 802ea18:	2400      	movs	r4, #0
 802ea1a:	9400      	str	r4, [sp, #0]
 802ea1c:	f7ff ff14 	bl	802e848 <log_msg_hexdump_data_op>
}
 802ea20:	bd13      	pop	{r0, r1, r4, pc}

0802ea22 <buffer_write>:
{
 802ea22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ea24:	0006      	movs	r6, r0
 802ea26:	000d      	movs	r5, r1
 802ea28:	0014      	movs	r4, r2
 802ea2a:	001f      	movs	r7, r3
		processed = outf(buf, len, ctx);
 802ea2c:	0021      	movs	r1, r4
 802ea2e:	0028      	movs	r0, r5
 802ea30:	003a      	movs	r2, r7
 802ea32:	47b0      	blx	r6
		len -= processed;
 802ea34:	1a24      	subs	r4, r4, r0
		buf += processed;
 802ea36:	182d      	adds	r5, r5, r0
	} while (len != 0);
 802ea38:	2c00      	cmp	r4, #0
 802ea3a:	d1f7      	bne.n	802ea2c <buffer_write+0xa>
}
 802ea3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802ea3e <std_print>:
{
 802ea3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 802ea40:	b093      	sub	sp, #76	; 0x4c
 802ea42:	af0e      	add	r7, sp, #56	; 0x38
 802ea44:	000e      	movs	r6, r1
 802ea46:	60b8      	str	r0, [r7, #8]
	const char *str = log_msg_str_get(msg);
 802ea48:	f7ff ff84 	bl	802e954 <log_msg_str_get>
 802ea4c:	0005      	movs	r5, r0
	uint32_t nargs = log_msg_nargs_get(msg);
 802ea4e:	68b8      	ldr	r0, [r7, #8]
 802ea50:	f7ff ff55 	bl	802e8fe <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
 802ea54:	466a      	mov	r2, sp
 802ea56:	0083      	lsls	r3, r0, #2
 802ea58:	3307      	adds	r3, #7
 802ea5a:	08db      	lsrs	r3, r3, #3
 802ea5c:	00db      	lsls	r3, r3, #3
 802ea5e:	1ad3      	subs	r3, r2, r3
 802ea60:	469d      	mov	sp, r3
	for (i = 0; i < nargs; i++) {
 802ea62:	2300      	movs	r3, #0
	uint32_t nargs = log_msg_nargs_get(msg);
 802ea64:	6078      	str	r0, [r7, #4]
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
 802ea66:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
 802ea68:	60fb      	str	r3, [r7, #12]
 802ea6a:	68fb      	ldr	r3, [r7, #12]
 802ea6c:	687a      	ldr	r2, [r7, #4]
 802ea6e:	4293      	cmp	r3, r2
 802ea70:	d116      	bne.n	802eaa0 <std_print+0x62>
	switch (log_msg_nargs_get(msg)) {
 802ea72:	68b8      	ldr	r0, [r7, #8]
 802ea74:	f7ff ff43 	bl	802e8fe <log_msg_nargs_get>
 802ea78:	280f      	cmp	r0, #15
 802ea7a:	d81f      	bhi.n	802eabc <std_print+0x7e>
 802ea7c:	f7f1 fb3e 	bl	80200fc <__gnu_thumb1_case_uhi>
 802ea80:	0021001a 	.word	0x0021001a
 802ea84:	002d0027 	.word	0x002d0027
 802ea88:	003f0035 	.word	0x003f0035
 802ea8c:	0059004b 	.word	0x0059004b
 802ea90:	007b0069 	.word	0x007b0069
 802ea94:	00a5008f 	.word	0x00a5008f
 802ea98:	00d700bd 	.word	0x00d700bd
 802ea9c:	011100f3 	.word	0x011100f3
		args[i] = log_msg_arg_get(msg, i);
 802eaa0:	68f9      	ldr	r1, [r7, #12]
 802eaa2:	68b8      	ldr	r0, [r7, #8]
 802eaa4:	f7ff ff2e 	bl	802e904 <log_msg_arg_get>
 802eaa8:	68fb      	ldr	r3, [r7, #12]
 802eaaa:	009b      	lsls	r3, r3, #2
 802eaac:	50e0      	str	r0, [r4, r3]
	for (i = 0; i < nargs; i++) {
 802eaae:	68fb      	ldr	r3, [r7, #12]
 802eab0:	3301      	adds	r3, #1
 802eab2:	e7d9      	b.n	802ea68 <std_print+0x2a>
		print_formatted(output, str);
 802eab4:	0029      	movs	r1, r5
 802eab6:	0030      	movs	r0, r6
 802eab8:	f7f4 faa4 	bl	8023004 <print_formatted>
}
 802eabc:	46bd      	mov	sp, r7
 802eabe:	b005      	add	sp, #20
 802eac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, str, args[0]);
 802eac2:	0029      	movs	r1, r5
 802eac4:	0030      	movs	r0, r6
 802eac6:	6822      	ldr	r2, [r4, #0]
 802eac8:	f7f4 fa9c 	bl	8023004 <print_formatted>
		break;
 802eacc:	e7f6      	b.n	802eabc <std_print+0x7e>
		print_formatted(output, str, args[0], args[1]);
 802eace:	0029      	movs	r1, r5
 802ead0:	cc0c      	ldmia	r4!, {r2, r3}
 802ead2:	0030      	movs	r0, r6
 802ead4:	f7f4 fa96 	bl	8023004 <print_formatted>
		break;
 802ead8:	e7f0      	b.n	802eabc <std_print+0x7e>
		print_formatted(output, str, args[0], args[1], args[2]);
 802eada:	68a3      	ldr	r3, [r4, #8]
 802eadc:	0029      	movs	r1, r5
 802eade:	9300      	str	r3, [sp, #0]
 802eae0:	0030      	movs	r0, r6
 802eae2:	cc0c      	ldmia	r4!, {r2, r3}
 802eae4:	f7f4 fa8e 	bl	8023004 <print_formatted>
		break;
 802eae8:	e7e8      	b.n	802eabc <std_print+0x7e>
		print_formatted(output, str, args[0], args[1], args[2],
 802eaea:	68e3      	ldr	r3, [r4, #12]
 802eaec:	0029      	movs	r1, r5
 802eaee:	9301      	str	r3, [sp, #4]
 802eaf0:	68a3      	ldr	r3, [r4, #8]
 802eaf2:	0030      	movs	r0, r6
 802eaf4:	9300      	str	r3, [sp, #0]
 802eaf6:	cc0c      	ldmia	r4!, {r2, r3}
 802eaf8:	f7f4 fa84 	bl	8023004 <print_formatted>
		break;
 802eafc:	e7de      	b.n	802eabc <std_print+0x7e>
		print_formatted(output, str, args[0], args[1], args[2],
 802eafe:	6923      	ldr	r3, [r4, #16]
 802eb00:	0029      	movs	r1, r5
 802eb02:	9302      	str	r3, [sp, #8]
 802eb04:	68e3      	ldr	r3, [r4, #12]
 802eb06:	0030      	movs	r0, r6
 802eb08:	9301      	str	r3, [sp, #4]
 802eb0a:	68a3      	ldr	r3, [r4, #8]
 802eb0c:	9300      	str	r3, [sp, #0]
 802eb0e:	cc0c      	ldmia	r4!, {r2, r3}
 802eb10:	f7f4 fa78 	bl	8023004 <print_formatted>
		break;
 802eb14:	e7d2      	b.n	802eabc <std_print+0x7e>
		print_formatted(output, str, args[0], args[1], args[2],
 802eb16:	6963      	ldr	r3, [r4, #20]
 802eb18:	0029      	movs	r1, r5
 802eb1a:	9303      	str	r3, [sp, #12]
 802eb1c:	6923      	ldr	r3, [r4, #16]
 802eb1e:	0030      	movs	r0, r6
 802eb20:	9302      	str	r3, [sp, #8]
 802eb22:	68e3      	ldr	r3, [r4, #12]
 802eb24:	9301      	str	r3, [sp, #4]
 802eb26:	68a3      	ldr	r3, [r4, #8]
 802eb28:	9300      	str	r3, [sp, #0]
 802eb2a:	cc0c      	ldmia	r4!, {r2, r3}
 802eb2c:	f7f4 fa6a 	bl	8023004 <print_formatted>
		break;
 802eb30:	e7c4      	b.n	802eabc <std_print+0x7e>
		print_formatted(output, str, args[0], args[1], args[2],
 802eb32:	69a3      	ldr	r3, [r4, #24]
 802eb34:	0029      	movs	r1, r5
 802eb36:	9304      	str	r3, [sp, #16]
 802eb38:	6963      	ldr	r3, [r4, #20]
 802eb3a:	0030      	movs	r0, r6
 802eb3c:	9303      	str	r3, [sp, #12]
 802eb3e:	6923      	ldr	r3, [r4, #16]
 802eb40:	9302      	str	r3, [sp, #8]
 802eb42:	68e3      	ldr	r3, [r4, #12]
 802eb44:	9301      	str	r3, [sp, #4]
 802eb46:	68a3      	ldr	r3, [r4, #8]
 802eb48:	9300      	str	r3, [sp, #0]
 802eb4a:	cc0c      	ldmia	r4!, {r2, r3}
 802eb4c:	f7f4 fa5a 	bl	8023004 <print_formatted>
		break;
 802eb50:	e7b4      	b.n	802eabc <std_print+0x7e>
		print_formatted(output, str, args[0], args[1], args[2],
 802eb52:	69e3      	ldr	r3, [r4, #28]
 802eb54:	0029      	movs	r1, r5
 802eb56:	9305      	str	r3, [sp, #20]
 802eb58:	69a3      	ldr	r3, [r4, #24]
 802eb5a:	0030      	movs	r0, r6
 802eb5c:	9304      	str	r3, [sp, #16]
 802eb5e:	6963      	ldr	r3, [r4, #20]
 802eb60:	9303      	str	r3, [sp, #12]
 802eb62:	6923      	ldr	r3, [r4, #16]
 802eb64:	9302      	str	r3, [sp, #8]
 802eb66:	68e3      	ldr	r3, [r4, #12]
 802eb68:	9301      	str	r3, [sp, #4]
 802eb6a:	68a3      	ldr	r3, [r4, #8]
 802eb6c:	9300      	str	r3, [sp, #0]
 802eb6e:	cc0c      	ldmia	r4!, {r2, r3}
 802eb70:	f7f4 fa48 	bl	8023004 <print_formatted>
		break;
 802eb74:	e7a2      	b.n	802eabc <std_print+0x7e>
		print_formatted(output, str, args[0], args[1], args[2],
 802eb76:	6a23      	ldr	r3, [r4, #32]
 802eb78:	0029      	movs	r1, r5
 802eb7a:	9306      	str	r3, [sp, #24]
 802eb7c:	69e3      	ldr	r3, [r4, #28]
 802eb7e:	0030      	movs	r0, r6
 802eb80:	9305      	str	r3, [sp, #20]
 802eb82:	69a3      	ldr	r3, [r4, #24]
 802eb84:	9304      	str	r3, [sp, #16]
 802eb86:	6963      	ldr	r3, [r4, #20]
 802eb88:	9303      	str	r3, [sp, #12]
 802eb8a:	6923      	ldr	r3, [r4, #16]
 802eb8c:	9302      	str	r3, [sp, #8]
 802eb8e:	68e3      	ldr	r3, [r4, #12]
 802eb90:	9301      	str	r3, [sp, #4]
 802eb92:	68a3      	ldr	r3, [r4, #8]
 802eb94:	9300      	str	r3, [sp, #0]
 802eb96:	cc0c      	ldmia	r4!, {r2, r3}
 802eb98:	f7f4 fa34 	bl	8023004 <print_formatted>
		break;
 802eb9c:	e78e      	b.n	802eabc <std_print+0x7e>
		print_formatted(output, str, args[0], args[1], args[2],
 802eb9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802eba0:	0029      	movs	r1, r5
 802eba2:	9307      	str	r3, [sp, #28]
 802eba4:	6a23      	ldr	r3, [r4, #32]
 802eba6:	0030      	movs	r0, r6
 802eba8:	9306      	str	r3, [sp, #24]
 802ebaa:	69e3      	ldr	r3, [r4, #28]
 802ebac:	9305      	str	r3, [sp, #20]
 802ebae:	69a3      	ldr	r3, [r4, #24]
 802ebb0:	9304      	str	r3, [sp, #16]
 802ebb2:	6963      	ldr	r3, [r4, #20]
 802ebb4:	9303      	str	r3, [sp, #12]
 802ebb6:	6923      	ldr	r3, [r4, #16]
 802ebb8:	9302      	str	r3, [sp, #8]
 802ebba:	68e3      	ldr	r3, [r4, #12]
 802ebbc:	9301      	str	r3, [sp, #4]
 802ebbe:	68a3      	ldr	r3, [r4, #8]
 802ebc0:	9300      	str	r3, [sp, #0]
 802ebc2:	cc0c      	ldmia	r4!, {r2, r3}
 802ebc4:	f7f4 fa1e 	bl	8023004 <print_formatted>
		break;
 802ebc8:	e778      	b.n	802eabc <std_print+0x7e>
		print_formatted(output, str, args[0], args[1], args[2],
 802ebca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802ebcc:	0029      	movs	r1, r5
 802ebce:	9308      	str	r3, [sp, #32]
 802ebd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802ebd2:	0030      	movs	r0, r6
 802ebd4:	9307      	str	r3, [sp, #28]
 802ebd6:	6a23      	ldr	r3, [r4, #32]
 802ebd8:	9306      	str	r3, [sp, #24]
 802ebda:	69e3      	ldr	r3, [r4, #28]
 802ebdc:	9305      	str	r3, [sp, #20]
 802ebde:	69a3      	ldr	r3, [r4, #24]
 802ebe0:	9304      	str	r3, [sp, #16]
 802ebe2:	6963      	ldr	r3, [r4, #20]
 802ebe4:	9303      	str	r3, [sp, #12]
 802ebe6:	6923      	ldr	r3, [r4, #16]
 802ebe8:	9302      	str	r3, [sp, #8]
 802ebea:	68e3      	ldr	r3, [r4, #12]
 802ebec:	9301      	str	r3, [sp, #4]
 802ebee:	68a3      	ldr	r3, [r4, #8]
 802ebf0:	9300      	str	r3, [sp, #0]
 802ebf2:	cc0c      	ldmia	r4!, {r2, r3}
 802ebf4:	f7f4 fa06 	bl	8023004 <print_formatted>
		break;
 802ebf8:	e760      	b.n	802eabc <std_print+0x7e>
		print_formatted(output, str, args[0], args[1], args[2],
 802ebfa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 802ebfc:	0029      	movs	r1, r5
 802ebfe:	9309      	str	r3, [sp, #36]	; 0x24
 802ec00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802ec02:	0030      	movs	r0, r6
 802ec04:	9308      	str	r3, [sp, #32]
 802ec06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802ec08:	9307      	str	r3, [sp, #28]
 802ec0a:	6a23      	ldr	r3, [r4, #32]
 802ec0c:	9306      	str	r3, [sp, #24]
 802ec0e:	69e3      	ldr	r3, [r4, #28]
 802ec10:	9305      	str	r3, [sp, #20]
 802ec12:	69a3      	ldr	r3, [r4, #24]
 802ec14:	9304      	str	r3, [sp, #16]
 802ec16:	6963      	ldr	r3, [r4, #20]
 802ec18:	9303      	str	r3, [sp, #12]
 802ec1a:	6923      	ldr	r3, [r4, #16]
 802ec1c:	9302      	str	r3, [sp, #8]
 802ec1e:	68e3      	ldr	r3, [r4, #12]
 802ec20:	9301      	str	r3, [sp, #4]
 802ec22:	68a3      	ldr	r3, [r4, #8]
 802ec24:	9300      	str	r3, [sp, #0]
 802ec26:	cc0c      	ldmia	r4!, {r2, r3}
 802ec28:	f7f4 f9ec 	bl	8023004 <print_formatted>
		break;
 802ec2c:	e746      	b.n	802eabc <std_print+0x7e>
		print_formatted(output, str, args[0], args[1], args[2],
 802ec2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802ec30:	0029      	movs	r1, r5
 802ec32:	930a      	str	r3, [sp, #40]	; 0x28
 802ec34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 802ec36:	0030      	movs	r0, r6
 802ec38:	9309      	str	r3, [sp, #36]	; 0x24
 802ec3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802ec3c:	9308      	str	r3, [sp, #32]
 802ec3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802ec40:	9307      	str	r3, [sp, #28]
 802ec42:	6a23      	ldr	r3, [r4, #32]
 802ec44:	9306      	str	r3, [sp, #24]
 802ec46:	69e3      	ldr	r3, [r4, #28]
 802ec48:	9305      	str	r3, [sp, #20]
 802ec4a:	69a3      	ldr	r3, [r4, #24]
 802ec4c:	9304      	str	r3, [sp, #16]
 802ec4e:	6963      	ldr	r3, [r4, #20]
 802ec50:	9303      	str	r3, [sp, #12]
 802ec52:	6923      	ldr	r3, [r4, #16]
 802ec54:	9302      	str	r3, [sp, #8]
 802ec56:	68e3      	ldr	r3, [r4, #12]
 802ec58:	9301      	str	r3, [sp, #4]
 802ec5a:	68a3      	ldr	r3, [r4, #8]
 802ec5c:	9300      	str	r3, [sp, #0]
 802ec5e:	cc0c      	ldmia	r4!, {r2, r3}
 802ec60:	f7f4 f9d0 	bl	8023004 <print_formatted>
		break;
 802ec64:	e72a      	b.n	802eabc <std_print+0x7e>
		print_formatted(output, str, args[0], args[1], args[2],
 802ec66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802ec68:	0029      	movs	r1, r5
 802ec6a:	930b      	str	r3, [sp, #44]	; 0x2c
 802ec6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802ec6e:	0030      	movs	r0, r6
 802ec70:	930a      	str	r3, [sp, #40]	; 0x28
 802ec72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 802ec74:	9309      	str	r3, [sp, #36]	; 0x24
 802ec76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802ec78:	9308      	str	r3, [sp, #32]
 802ec7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802ec7c:	9307      	str	r3, [sp, #28]
 802ec7e:	6a23      	ldr	r3, [r4, #32]
 802ec80:	9306      	str	r3, [sp, #24]
 802ec82:	69e3      	ldr	r3, [r4, #28]
 802ec84:	9305      	str	r3, [sp, #20]
 802ec86:	69a3      	ldr	r3, [r4, #24]
 802ec88:	9304      	str	r3, [sp, #16]
 802ec8a:	6963      	ldr	r3, [r4, #20]
 802ec8c:	9303      	str	r3, [sp, #12]
 802ec8e:	6923      	ldr	r3, [r4, #16]
 802ec90:	9302      	str	r3, [sp, #8]
 802ec92:	68e3      	ldr	r3, [r4, #12]
 802ec94:	9301      	str	r3, [sp, #4]
 802ec96:	68a3      	ldr	r3, [r4, #8]
 802ec98:	9300      	str	r3, [sp, #0]
 802ec9a:	cc0c      	ldmia	r4!, {r2, r3}
 802ec9c:	f7f4 f9b2 	bl	8023004 <print_formatted>
		break;
 802eca0:	e70c      	b.n	802eabc <std_print+0x7e>
		print_formatted(output, str, args[0], args[1], args[2],
 802eca2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802eca4:	0029      	movs	r1, r5
 802eca6:	930c      	str	r3, [sp, #48]	; 0x30
 802eca8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802ecaa:	0030      	movs	r0, r6
 802ecac:	930b      	str	r3, [sp, #44]	; 0x2c
 802ecae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802ecb0:	930a      	str	r3, [sp, #40]	; 0x28
 802ecb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 802ecb4:	9309      	str	r3, [sp, #36]	; 0x24
 802ecb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802ecb8:	9308      	str	r3, [sp, #32]
 802ecba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802ecbc:	9307      	str	r3, [sp, #28]
 802ecbe:	6a23      	ldr	r3, [r4, #32]
 802ecc0:	9306      	str	r3, [sp, #24]
 802ecc2:	69e3      	ldr	r3, [r4, #28]
 802ecc4:	9305      	str	r3, [sp, #20]
 802ecc6:	69a3      	ldr	r3, [r4, #24]
 802ecc8:	9304      	str	r3, [sp, #16]
 802ecca:	6963      	ldr	r3, [r4, #20]
 802eccc:	9303      	str	r3, [sp, #12]
 802ecce:	6923      	ldr	r3, [r4, #16]
 802ecd0:	9302      	str	r3, [sp, #8]
 802ecd2:	68e3      	ldr	r3, [r4, #12]
 802ecd4:	9301      	str	r3, [sp, #4]
 802ecd6:	68a3      	ldr	r3, [r4, #8]
 802ecd8:	9300      	str	r3, [sp, #0]
 802ecda:	cc0c      	ldmia	r4!, {r2, r3}
 802ecdc:	f7f4 f992 	bl	8023004 <print_formatted>
}
 802ece0:	e6ec      	b.n	802eabc <std_print+0x7e>

0802ece2 <log_output_flush>:
		     output->control_block->offset,
 802ece2:	6842      	ldr	r2, [r0, #4]
{
 802ece4:	b510      	push	{r4, lr}
	buffer_write(output->func, output->buf,
 802ece6:	ca0c      	ldmia	r2, {r2, r3}
{
 802ece8:	0004      	movs	r4, r0
	buffer_write(output->func, output->buf,
 802ecea:	6881      	ldr	r1, [r0, #8]
 802ecec:	6800      	ldr	r0, [r0, #0]
 802ecee:	f7ff fe98 	bl	802ea22 <buffer_write>
	output->control_block->offset = 0;
 802ecf2:	2200      	movs	r2, #0
 802ecf4:	6863      	ldr	r3, [r4, #4]
 802ecf6:	601a      	str	r2, [r3, #0]
}
 802ecf8:	bd10      	pop	{r4, pc}

0802ecfa <out_func>:
	if (out_ctx->control_block->offset == out_ctx->size) {
 802ecfa:	684b      	ldr	r3, [r1, #4]
 802ecfc:	68ca      	ldr	r2, [r1, #12]
 802ecfe:	681b      	ldr	r3, [r3, #0]
{
 802ed00:	b570      	push	{r4, r5, r6, lr}
 802ed02:	0005      	movs	r5, r0
 802ed04:	000c      	movs	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
 802ed06:	4293      	cmp	r3, r2
 802ed08:	d102      	bne.n	802ed10 <out_func+0x16>
		log_output_flush(out_ctx);
 802ed0a:	0008      	movs	r0, r1
 802ed0c:	f7ff ffe9 	bl	802ece2 <log_output_flush>
	idx = atomic_inc(&out_ctx->control_block->offset);
 802ed10:	6860      	ldr	r0, [r4, #4]
	return z_impl_atomic_add(target, value);
 802ed12:	2101      	movs	r1, #1
 802ed14:	f001 fffd 	bl	8030d12 <z_impl_atomic_add>
	out_ctx->buf[idx] = (uint8_t)c;
 802ed18:	68a3      	ldr	r3, [r4, #8]
 802ed1a:	541d      	strb	r5, [r3, r0]
}
 802ed1c:	2000      	movs	r0, #0
 802ed1e:	bd70      	pop	{r4, r5, r6, pc}

0802ed20 <pm_init>:
	return ret;
}

#if CONFIG_PM_DEVICE
static int pm_init(const struct device *dev)
{
 802ed20:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	pm_create_device_list();
 802ed22:	f7f4 fc31 	bl	8023588 <pm_create_device_list>
	return 0;
}
 802ed26:	2000      	movs	r0, #0
 802ed28:	bd10      	pop	{r4, pc}

0802ed2a <pm_power_state_exit_post_ops>:
{
 802ed2a:	b084      	sub	sp, #16
 802ed2c:	9001      	str	r0, [sp, #4]
 802ed2e:	9102      	str	r1, [sp, #8]
 802ed30:	9203      	str	r2, [sp, #12]
 802ed32:	b662      	cpsie	i
 802ed34:	f3bf 8f6f 	isb	sy
}
 802ed38:	b004      	add	sp, #16
 802ed3a:	4770      	bx	lr

0802ed3c <pm_power_state_set>:
{
 802ed3c:	b084      	sub	sp, #16
}
 802ed3e:	b004      	add	sp, #16
 802ed40:	4770      	bx	lr

0802ed42 <pm_device_state_set>:
	}
}

int pm_device_state_set(const struct device *dev, uint32_t device_power_state,
			pm_device_cb cb, void *arg)
{
 802ed42:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (dev->pm_control == NULL) {
 802ed44:	6984      	ldr	r4, [r0, #24]
{
 802ed46:	9103      	str	r1, [sp, #12]
	if (dev->pm_control == NULL) {
 802ed48:	2c00      	cmp	r4, #0
 802ed4a:	d006      	beq.n	802ed5a <pm_device_state_set+0x18>
		return -ENOSYS;
	}

	return dev->pm_control(dev, PM_DEVICE_STATE_SET,
 802ed4c:	9300      	str	r3, [sp, #0]
 802ed4e:	2101      	movs	r1, #1
 802ed50:	0013      	movs	r3, r2
 802ed52:	aa03      	add	r2, sp, #12
 802ed54:	47a0      	blx	r4
			       &device_power_state, cb, arg);
}
 802ed56:	b004      	add	sp, #16
 802ed58:	bd10      	pop	{r4, pc}
		return -ENOSYS;
 802ed5a:	2058      	movs	r0, #88	; 0x58
 802ed5c:	4240      	negs	r0, r0
 802ed5e:	e7fa      	b.n	802ed56 <pm_device_state_set+0x14>

0802ed60 <pm_suspend_devices>:
{
 802ed60:	b510      	push	{r4, lr}
	return _pm_devices(PM_DEVICE_SUSPEND_STATE);
 802ed62:	2003      	movs	r0, #3
 802ed64:	f7f4 fc46 	bl	80235f4 <_pm_devices>
}
 802ed68:	bd10      	pop	{r4, pc}

0802ed6a <pm_low_power_devices>:
{
 802ed6a:	b510      	push	{r4, lr}
	return _pm_devices(PM_DEVICE_LOW_POWER_STATE);
 802ed6c:	2002      	movs	r0, #2
 802ed6e:	f7f4 fc41 	bl	80235f4 <_pm_devices>
}
 802ed72:	bd10      	pop	{r4, pc}

0802ed74 <pm_policy_next_state>:

static const struct pm_state_info pm_min_residency[] =
	PM_STATE_INFO_DT_ITEMS_LIST(DT_NODELABEL(cpu0));

struct pm_state_info pm_policy_next_state(int32_t ticks)
{
 802ed74:	b510      	push	{r4, lr}
 802ed76:	0004      	movs	r4, r0
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
 802ed78:	220c      	movs	r2, #12
 802ed7a:	2100      	movs	r1, #0
 802ed7c:	f001 fff9 	bl	8030d72 <memset>
}
 802ed80:	0020      	movs	r0, r4
 802ed82:	bd10      	pop	{r4, pc}

0802ed84 <stm32_exti_init>:
	IRQ_CONNECT(EXTI4_15_IRQn,
		CONFIG_EXTI_STM32_EXTI15_4_IRQ_PRI,
		__stm32_exti_isr_15_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#elif defined(CONFIG_SOC_STM32WL55XX) && defined(CONFIG_CPU_CORTEX_M0PLUS)
	IRQ_CONNECT(EXTI1_0_IRQn,
 802ed84:	2200      	movs	r2, #0
{
 802ed86:	b510      	push	{r4, lr}
	IRQ_CONNECT(EXTI1_0_IRQn,
 802ed88:	0011      	movs	r1, r2
 802ed8a:	2004      	movs	r0, #4
 802ed8c:	f7fc fea6 	bl	802badc <z_arm_irq_priority_set>
                CONFIG_EXTI_STM32_EXTI1_0_IRQ_PRI,
                __stm32_exti_isr_1_0, DEVICE_DT_GET(EXTI_NODE),
                0);
        IRQ_CONNECT(EXTI3_2_IRQn,
 802ed90:	2200      	movs	r2, #0
 802ed92:	2005      	movs	r0, #5
 802ed94:	0011      	movs	r1, r2
 802ed96:	f7fc fea1 	bl	802badc <z_arm_irq_priority_set>
                CONFIG_EXTI_STM32_EXTI3_2_IRQ_PRI,
                __stm32_exti_isr_3_2, DEVICE_DT_GET(EXTI_NODE),
                0);
        IRQ_CONNECT(EXTI15_4_IRQn,
 802ed9a:	2200      	movs	r2, #0
 802ed9c:	2006      	movs	r0, #6
 802ed9e:	0011      	movs	r1, r2
 802eda0:	f7fc fe9c 	bl	802badc <z_arm_irq_priority_set>
}
 802eda4:	2000      	movs	r0, #0
 802eda6:	bd10      	pop	{r4, pc}

0802eda8 <__stm32_exti_isr_15_4>:
{
 802eda8:	b510      	push	{r4, lr}
        __stm32_exti_isr(4, 16, arg);
 802edaa:	6902      	ldr	r2, [r0, #16]
 802edac:	2110      	movs	r1, #16
 802edae:	2004      	movs	r0, #4
 802edb0:	f7f4 fc98 	bl	80236e4 <__stm32_exti_isr.isra.0>
}
 802edb4:	bd10      	pop	{r4, pc}

0802edb6 <__stm32_exti_isr_3_2>:
{
 802edb6:	b510      	push	{r4, lr}
        __stm32_exti_isr(2, 4, arg);
 802edb8:	6902      	ldr	r2, [r0, #16]
 802edba:	2104      	movs	r1, #4
 802edbc:	2002      	movs	r0, #2
 802edbe:	f7f4 fc91 	bl	80236e4 <__stm32_exti_isr.isra.0>
}
 802edc2:	bd10      	pop	{r4, pc}

0802edc4 <__stm32_exti_isr_1_0>:
{
 802edc4:	b510      	push	{r4, lr}
        __stm32_exti_isr(0, 2, arg);
 802edc6:	6902      	ldr	r2, [r0, #16]
 802edc8:	2102      	movs	r1, #2
 802edca:	2000      	movs	r0, #0
 802edcc:	f7f4 fc8a 	bl	80236e4 <__stm32_exti_isr.isra.0>
}
 802edd0:	bd10      	pop	{r4, pc}

0802edd2 <stm32_clock_control_on>:
{
 802edd2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 802edd4:	6808      	ldr	r0, [r1, #0]
 802edd6:	2806      	cmp	r0, #6
 802edd8:	d849      	bhi.n	802ee6e <stm32_clock_control_on+0x9c>
 802edda:	f7f1 f97b 	bl	80200d4 <__gnu_thumb1_case_uqi>
 802edde:	1104      	.short	0x1104
 802ede0:	48323d27 	.word	0x48323d27
 802ede4:	1c          	.byte	0x1c
 802ede5:	00          	.byte	0x00
  SET_BIT(RCC->AHB1ENR, Periphs);
 802ede6:	22b0      	movs	r2, #176	; 0xb0
 802ede8:	05d2      	lsls	r2, r2, #23
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 802edea:	6848      	ldr	r0, [r1, #4]
 802edec:	6c91      	ldr	r1, [r2, #72]	; 0x48
 802edee:	4301      	orrs	r1, r0
 802edf0:	6491      	str	r1, [r2, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 802edf2:	6c93      	ldr	r3, [r2, #72]	; 0x48
 802edf4:	4003      	ands	r3, r0
 802edf6:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 802edf8:	9b00      	ldr	r3, [sp, #0]
	return 0;
 802edfa:	2000      	movs	r0, #0
}
 802edfc:	b007      	add	sp, #28
 802edfe:	bd00      	pop	{pc}
  SET_BIT(RCC->AHB2ENR, Periphs);
 802ee00:	22b0      	movs	r2, #176	; 0xb0
 802ee02:	05d2      	lsls	r2, r2, #23
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 802ee04:	6848      	ldr	r0, [r1, #4]
 802ee06:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 802ee08:	4301      	orrs	r1, r0
 802ee0a:	64d1      	str	r1, [r2, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 802ee0c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 802ee0e:	4003      	ands	r3, r0
 802ee10:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 802ee12:	9b01      	ldr	r3, [sp, #4]
 802ee14:	e7f1      	b.n	802edfa <stm32_clock_control_on+0x28>
  SET_BIT(RCC->AHB3ENR, Periphs);
 802ee16:	22b0      	movs	r2, #176	; 0xb0
 802ee18:	05d2      	lsls	r2, r2, #23
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 802ee1a:	6848      	ldr	r0, [r1, #4]
 802ee1c:	6d11      	ldr	r1, [r2, #80]	; 0x50
 802ee1e:	4301      	orrs	r1, r0
 802ee20:	6511      	str	r1, [r2, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 802ee22:	6d13      	ldr	r3, [r2, #80]	; 0x50
 802ee24:	4003      	ands	r3, r0
 802ee26:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 802ee28:	9b02      	ldr	r3, [sp, #8]
 802ee2a:	e7e6      	b.n	802edfa <stm32_clock_control_on+0x28>
  SET_BIT(RCC->APB1ENR1, Periphs);
 802ee2c:	22b0      	movs	r2, #176	; 0xb0
 802ee2e:	05d2      	lsls	r2, r2, #23
		LL_APB1_GRP1_EnableClock(pclken->enr);
 802ee30:	6848      	ldr	r0, [r1, #4]
 802ee32:	6d91      	ldr	r1, [r2, #88]	; 0x58
 802ee34:	4301      	orrs	r1, r0
 802ee36:	6591      	str	r1, [r2, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 802ee38:	6d93      	ldr	r3, [r2, #88]	; 0x58
 802ee3a:	4003      	ands	r3, r0
 802ee3c:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 802ee3e:	9b03      	ldr	r3, [sp, #12]
 802ee40:	e7db      	b.n	802edfa <stm32_clock_control_on+0x28>
  SET_BIT(RCC->APB1ENR2, Periphs);
 802ee42:	22b0      	movs	r2, #176	; 0xb0
 802ee44:	05d2      	lsls	r2, r2, #23
		LL_APB1_GRP2_EnableClock(pclken->enr);
 802ee46:	6848      	ldr	r0, [r1, #4]
 802ee48:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 802ee4a:	4301      	orrs	r1, r0
 802ee4c:	65d1      	str	r1, [r2, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 802ee4e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 802ee50:	4003      	ands	r3, r0
 802ee52:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 802ee54:	9b04      	ldr	r3, [sp, #16]
 802ee56:	e7d0      	b.n	802edfa <stm32_clock_control_on+0x28>
  SET_BIT(RCC->APB2ENR, Periphs);
 802ee58:	22b0      	movs	r2, #176	; 0xb0
 802ee5a:	05d2      	lsls	r2, r2, #23
		LL_APB2_GRP1_EnableClock(pclken->enr);
 802ee5c:	6848      	ldr	r0, [r1, #4]
 802ee5e:	6e11      	ldr	r1, [r2, #96]	; 0x60
 802ee60:	4301      	orrs	r1, r0
 802ee62:	6611      	str	r1, [r2, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 802ee64:	6e13      	ldr	r3, [r2, #96]	; 0x60
 802ee66:	4003      	ands	r3, r0
 802ee68:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 802ee6a:	9b05      	ldr	r3, [sp, #20]
 802ee6c:	e7c5      	b.n	802edfa <stm32_clock_control_on+0x28>
	switch (pclken->bus) {
 802ee6e:	2086      	movs	r0, #134	; 0x86
 802ee70:	4240      	negs	r0, r0
 802ee72:	e7c3      	b.n	802edfc <stm32_clock_control_on+0x2a>

0802ee74 <stm32_clock_control_off>:
{
 802ee74:	b507      	push	{r0, r1, r2, lr}
 802ee76:	6808      	ldr	r0, [r1, #0]
 802ee78:	2806      	cmp	r0, #6
 802ee7a:	d834      	bhi.n	802eee6 <stm32_clock_control_off+0x72>
 802ee7c:	f7f1 f92a 	bl	80200d4 <__gnu_thumb1_case_uqi>
 802ee80:	2c1e0c04 	.word	0x2c1e0c04
 802ee84:	3325      	.short	0x3325
 802ee86:	13          	.byte	0x13
 802ee87:	00          	.byte	0x00
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 802ee88:	22b0      	movs	r2, #176	; 0xb0
 802ee8a:	05d2      	lsls	r2, r2, #23
 802ee8c:	6c93      	ldr	r3, [r2, #72]	; 0x48
 802ee8e:	6849      	ldr	r1, [r1, #4]
 802ee90:	438b      	bics	r3, r1
 802ee92:	6493      	str	r3, [r2, #72]	; 0x48
	return 0;
 802ee94:	2000      	movs	r0, #0
}
 802ee96:	bd0e      	pop	{r1, r2, r3, pc}
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 802ee98:	22b0      	movs	r2, #176	; 0xb0
 802ee9a:	05d2      	lsls	r2, r2, #23
 802ee9c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 802ee9e:	6849      	ldr	r1, [r1, #4]
 802eea0:	438b      	bics	r3, r1
 802eea2:	64d3      	str	r3, [r2, #76]	; 0x4c
 802eea4:	e7f6      	b.n	802ee94 <stm32_clock_control_off+0x20>
  SET_BIT(RCC->AHB3ENR, Periphs);
 802eea6:	22b0      	movs	r2, #176	; 0xb0
 802eea8:	05d2      	lsls	r2, r2, #23
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 802eeaa:	6848      	ldr	r0, [r1, #4]
 802eeac:	6d11      	ldr	r1, [r2, #80]	; 0x50
 802eeae:	4301      	orrs	r1, r0
 802eeb0:	6511      	str	r1, [r2, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 802eeb2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 802eeb4:	4003      	ands	r3, r0
 802eeb6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 802eeb8:	9b01      	ldr	r3, [sp, #4]
 802eeba:	e7eb      	b.n	802ee94 <stm32_clock_control_off+0x20>
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 802eebc:	22b0      	movs	r2, #176	; 0xb0
 802eebe:	05d2      	lsls	r2, r2, #23
 802eec0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 802eec2:	6849      	ldr	r1, [r1, #4]
 802eec4:	438b      	bics	r3, r1
 802eec6:	6593      	str	r3, [r2, #88]	; 0x58
 802eec8:	e7e4      	b.n	802ee94 <stm32_clock_control_off+0x20>
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 802eeca:	22b0      	movs	r2, #176	; 0xb0
 802eecc:	05d2      	lsls	r2, r2, #23
 802eece:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 802eed0:	6849      	ldr	r1, [r1, #4]
 802eed2:	438b      	bics	r3, r1
 802eed4:	65d3      	str	r3, [r2, #92]	; 0x5c
 802eed6:	e7dd      	b.n	802ee94 <stm32_clock_control_off+0x20>
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 802eed8:	22b0      	movs	r2, #176	; 0xb0
 802eeda:	05d2      	lsls	r2, r2, #23
 802eedc:	6e13      	ldr	r3, [r2, #96]	; 0x60
 802eede:	6849      	ldr	r1, [r1, #4]
 802eee0:	438b      	bics	r3, r1
 802eee2:	6613      	str	r3, [r2, #96]	; 0x60
 802eee4:	e7d6      	b.n	802ee94 <stm32_clock_control_off+0x20>
	switch (pclken->bus) {
 802eee6:	2086      	movs	r0, #134	; 0x86
 802eee8:	4240      	negs	r0, r0
 802eeea:	e7d4      	b.n	802ee96 <stm32_clock_control_off+0x22>

0802eeec <config_pll_init>:
/**
 * @brief fill in pll configuration structure
 */
void config_pll_init(LL_UTILS_PLLInitTypeDef *pllinit)
{
	pllinit->PLLM = pllm(STM32_PLL_M_DIVISOR);
 802eeec:	2310      	movs	r3, #16
 802eeee:	6003      	str	r3, [r0, #0]
	pllinit->PLLN = STM32_PLL_N_MULTIPLIER;
 802eef0:	3b0a      	subs	r3, #10
 802eef2:	6043      	str	r3, [r0, #4]
	pllinit->PLLR = pllr(STM32_PLL_R_DIVISOR);
 802eef4:	2380      	movs	r3, #128	; 0x80
 802eef6:	059b      	lsls	r3, r3, #22
 802eef8:	6083      	str	r3, [r0, #8]
	/* set power boost mode for sys clock greater than 80MHz */
	if (sys_clock_hw_cycles_per_sec() >= MHZ(80)) {
		LL_PWR_EnableRange1BoostMode();
	}
#endif /* PWR_CR5_R1MODE */
}
 802eefa:	4770      	bx	lr

0802eefc <config_enable_default_clocks>:
	LL_PWR_DisableBkUpAccess();

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

#endif
}
 802eefc:	4770      	bx	lr

0802eefe <sys_clock_device_ctrl>:

int __weak sys_clock_device_ctrl(const struct device *dev,
			       uint32_t ctrl_command,
			       void *context, pm_device_cb cb, void *arg)
{
	return -ENOTSUP;
 802eefe:	2086      	movs	r0, #134	; 0x86
}
 802ef00:	4240      	negs	r0, r0
 802ef02:	4770      	bx	lr

0802ef04 <sys_clock_isr>:
}
 802ef04:	4770      	bx	lr

0802ef06 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
 802ef06:	4770      	bx	lr

0802ef08 <stm32_ipcc_mailbox_rx_tx_isr>:
static void stm32_ipcc_mailbox_rx_tx_isr(const struct device *dev) {
 802ef08:	b5f0      	push	{r4, r5, r6, r7, lr}
  unsigned int value = 0;
 802ef0a:	2700      	movs	r7, #0
  const struct stm32_ipcc_mailbox_config *cfg = DEV_CFG(dev);
 802ef0c:	6845      	ldr	r5, [r0, #4]
static void stm32_ipcc_mailbox_rx_tx_isr(const struct device *dev) {
 802ef0e:	b087      	sub	sp, #28
  mask = (~IPCC_ReadReg(cfg->ipcc, MR)) & IPCC_ALL_MR_RXO_CH_MASK;
 802ef10:	686b      	ldr	r3, [r5, #4]
  struct stm32_ipcc_mbx_data *data = DEV_DATA(dev);
 802ef12:	6906      	ldr	r6, [r0, #16]
  mask = (~IPCC_ReadReg(cfg->ipcc, MR)) & IPCC_ALL_MR_RXO_CH_MASK;
 802ef14:	6959      	ldr	r1, [r3, #20]
  mask &= IPCC_ReadOtherInstReg_SR(cfg->ipcc) & IPCC_ALL_SR_CH_MASK;
 802ef16:	68db      	ldr	r3, [r3, #12]
static void stm32_ipcc_mailbox_rx_tx_isr(const struct device *dev) {
 802ef18:	9002      	str	r0, [sp, #8]
  mask &= IPCC_ReadOtherInstReg_SR(cfg->ipcc) & IPCC_ALL_SR_CH_MASK;
 802ef1a:	438b      	bics	r3, r1
 802ef1c:	b29b      	uxth	r3, r3
  unsigned int value = 0;
 802ef1e:	9705      	str	r7, [sp, #20]
  mask &= IPCC_ReadOtherInstReg_SR(cfg->ipcc) & IPCC_ALL_SR_CH_MASK;
 802ef20:	9303      	str	r3, [sp, #12]
  for (i = 0; i < data->num_ch; i++) {
 802ef22:	6831      	ldr	r1, [r6, #0]
    IPCC_DisableReceiveChannel(cfg->ipcc, i);
 802ef24:	686b      	ldr	r3, [r5, #4]
  for (i = 0; i < data->num_ch; i++) {
 802ef26:	42b9      	cmp	r1, r7
 802ef28:	d80a      	bhi.n	802ef40 <stm32_ipcc_mailbox_rx_tx_isr+0x38>
  mask = (~IPCC_ReadReg(cfg->ipcc, MR)) & IPCC_ALL_MR_TXF_CH_MASK;
 802ef2a:	695a      	ldr	r2, [r3, #20]
  for (i = 0; i < data->num_ch; i++) {
 802ef2c:	2000      	movs	r0, #0
  mask = (~IPCC_ReadReg(cfg->ipcc, MR)) & IPCC_ALL_MR_TXF_CH_MASK;
 802ef2e:	43d2      	mvns	r2, r2
    if (!((1 << i) & mask)) {
 802ef30:	2501      	movs	r5, #1
  mask &= IPCC_ReadReg_SR(cfg->ipcc) & IPCC_ALL_SR_CH_MASK;
 802ef32:	69dc      	ldr	r4, [r3, #28]
 802ef34:	0c12      	lsrs	r2, r2, #16
 802ef36:	4014      	ands	r4, r2
  for (i = 0; i < data->num_ch; i++) {
 802ef38:	4281      	cmp	r1, r0
 802ef3a:	d11c      	bne.n	802ef76 <stm32_ipcc_mailbox_rx_tx_isr+0x6e>
}
 802ef3c:	b007      	add	sp, #28
 802ef3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!((1 << i) & mask)) {
 802ef40:	2201      	movs	r2, #1
 802ef42:	40ba      	lsls	r2, r7
 802ef44:	9201      	str	r2, [sp, #4]
 802ef46:	9901      	ldr	r1, [sp, #4]
 802ef48:	9a03      	ldr	r2, [sp, #12]
 802ef4a:	420a      	tst	r2, r1
 802ef4c:	d011      	beq.n	802ef72 <stm32_ipcc_mailbox_rx_tx_isr+0x6a>
  SET_BIT(IPCCx->C2MR, Channel);
 802ef4e:	695a      	ldr	r2, [r3, #20]
 802ef50:	430a      	orrs	r2, r1
 802ef52:	615a      	str	r2, [r3, #20]
    if (data->callback) {
 802ef54:	6873      	ldr	r3, [r6, #4]
 802ef56:	1e1c      	subs	r4, r3, #0
 802ef58:	d004      	beq.n	802ef64 <stm32_ipcc_mailbox_rx_tx_isr+0x5c>
      data->callback(dev, data->user_data, i, &value);
 802ef5a:	003a      	movs	r2, r7
 802ef5c:	68b1      	ldr	r1, [r6, #8]
 802ef5e:	9802      	ldr	r0, [sp, #8]
 802ef60:	ab05      	add	r3, sp, #20
 802ef62:	47a0      	blx	r4
    IPCC_ClearFlag_CHx(cfg->ipcc, i);
 802ef64:	686b      	ldr	r3, [r5, #4]
  WRITE_REG(IPCCx->C2SCR, Channel);
 802ef66:	9a01      	ldr	r2, [sp, #4]
  CLEAR_BIT(IPCCx->C2MR, Channel);
 802ef68:	9901      	ldr	r1, [sp, #4]
  WRITE_REG(IPCCx->C2SCR, Channel);
 802ef6a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(IPCCx->C2MR, Channel);
 802ef6c:	695a      	ldr	r2, [r3, #20]
 802ef6e:	438a      	bics	r2, r1
 802ef70:	615a      	str	r2, [r3, #20]
  for (i = 0; i < data->num_ch; i++) {
 802ef72:	3701      	adds	r7, #1
 802ef74:	e7d5      	b.n	802ef22 <stm32_ipcc_mailbox_rx_tx_isr+0x1a>
    if (!((1 << i) & mask)) {
 802ef76:	002a      	movs	r2, r5
 802ef78:	4082      	lsls	r2, r0
 802ef7a:	4222      	tst	r2, r4
 802ef7c:	d003      	beq.n	802ef86 <stm32_ipcc_mailbox_rx_tx_isr+0x7e>
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 802ef7e:	695e      	ldr	r6, [r3, #20]
 802ef80:	0412      	lsls	r2, r2, #16
 802ef82:	4332      	orrs	r2, r6
 802ef84:	615a      	str	r2, [r3, #20]
  for (i = 0; i < data->num_ch; i++) {
 802ef86:	3001      	adds	r0, #1
 802ef88:	e7d6      	b.n	802ef38 <stm32_ipcc_mailbox_rx_tx_isr+0x30>

0802ef8a <stm32_ipcc_mailbox_ipm_max_data_size_get>:
  return DEV_CFG(dev)->buff_size;
 802ef8a:	6843      	ldr	r3, [r0, #4]
 802ef8c:	6958      	ldr	r0, [r3, #20]
}
 802ef8e:	4770      	bx	lr

0802ef90 <stm32_ipcc_mailbox_ipm_max_id_val_get>:
  return data->num_ch - 1;
 802ef90:	6903      	ldr	r3, [r0, #16]
 802ef92:	6818      	ldr	r0, [r3, #0]
 802ef94:	3801      	subs	r0, #1
}
 802ef96:	4770      	bx	lr

0802ef98 <stm32_ipcc_mailbox_ipm_register_callback>:
  struct stm32_ipcc_mbx_data *data = DEV_DATA(d);
 802ef98:	6903      	ldr	r3, [r0, #16]
  data->callback = cb;
 802ef9a:	6059      	str	r1, [r3, #4]
  data->user_data = user_data;
 802ef9c:	609a      	str	r2, [r3, #8]
}
 802ef9e:	4770      	bx	lr

0802efa0 <stm32_ipcc_mailbox_config_func>:
              DEVICE_DT_INST_GET(0), 0);

  irq_enable(DT_INST_IRQ_BY_NAME(0, rxo, irq));
  irq_enable(DT_INST_IRQ_BY_NAME(0, txf, irq));
#else
  IRQ_CONNECT(DT_INST_IRQ_BY_NAME(0, rxo_txf, irq),
 802efa0:	2200      	movs	r2, #0
static void stm32_ipcc_mailbox_config_func(const struct device *dev) {
 802efa2:	b510      	push	{r4, lr}
  IRQ_CONNECT(DT_INST_IRQ_BY_NAME(0, rxo_txf, irq),
 802efa4:	0011      	movs	r1, r2
 802efa6:	2012      	movs	r0, #18
 802efa8:	f7fc fd98 	bl	802badc <z_arm_irq_priority_set>
              DT_INST_IRQ_BY_NAME(0, rxo_txf, priority),
              stm32_ipcc_mailbox_rx_tx_isr, DEVICE_DT_INST_GET(0), 0);
#endif
}
 802efac:	bd10      	pop	{r4, pc}

0802efae <SysTimeSub>:
{
 802efae:	b082      	sub	sp, #8
 802efb0:	b513      	push	{r0, r1, r4, lr}
    c.Seconds = a.Seconds - b.Seconds;
 802efb2:	1ac9      	subs	r1, r1, r3
{
 802efb4:	9305      	str	r3, [sp, #20]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 802efb6:	ab05      	add	r3, sp, #20
 802efb8:	889b      	ldrh	r3, [r3, #4]
 802efba:	1ad2      	subs	r2, r2, r3
 802efbc:	b214      	sxth	r4, r2
    if( c.SubSeconds < 0 )
 802efbe:	0413      	lsls	r3, r2, #16
 802efc0:	d504      	bpl.n	802efcc <SysTimeSub+0x1e>
        c.SubSeconds += 1000;
 802efc2:	23fa      	movs	r3, #250	; 0xfa
 802efc4:	009b      	lsls	r3, r3, #2
 802efc6:	18e4      	adds	r4, r4, r3
        c.Seconds--;
 802efc8:	3901      	subs	r1, #1
        c.SubSeconds += 1000;
 802efca:	b224      	sxth	r4, r4
    return c;
 802efcc:	6001      	str	r1, [r0, #0]
 802efce:	8084      	strh	r4, [r0, #4]
}
 802efd0:	bc16      	pop	{r1, r2, r4}
 802efd2:	bc08      	pop	{r3}
 802efd4:	b002      	add	sp, #8
 802efd6:	4718      	bx	r3

0802efd8 <SysTimeSet>:
{
 802efd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 802efda:	2300      	movs	r3, #0
{
 802efdc:	9000      	str	r0, [sp, #0]
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 802efde:	ac02      	add	r4, sp, #8
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 802efe0:	a803      	add	r0, sp, #12
{
 802efe2:	9101      	str	r1, [sp, #4]
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 802efe4:	9302      	str	r3, [sp, #8]
 802efe6:	80a3      	strh	r3, [r4, #4]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 802efe8:	f000 f891 	bl	802f10e <RtcGetCalendarTime>
    c.Seconds = a.Seconds - b.Seconds;
 802efec:	9b00      	ldr	r3, [sp, #0]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 802efee:	9002      	str	r0, [sp, #8]
    c.Seconds = a.Seconds - b.Seconds;
 802eff0:	1a18      	subs	r0, r3, r0
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 802eff2:	466b      	mov	r3, sp
 802eff4:	88a2      	ldrh	r2, [r4, #4]
 802eff6:	889b      	ldrh	r3, [r3, #4]
 802eff8:	1a9b      	subs	r3, r3, r2
 802effa:	b219      	sxth	r1, r3
    if( c.SubSeconds < 0 )
 802effc:	041b      	lsls	r3, r3, #16
 802effe:	d504      	bpl.n	802f00a <SysTimeSet+0x32>
        c.SubSeconds += 1000;
 802f000:	23fa      	movs	r3, #250	; 0xfa
 802f002:	009b      	lsls	r3, r3, #2
 802f004:	18c9      	adds	r1, r1, r3
        c.Seconds--;
 802f006:	3801      	subs	r0, #1
        c.SubSeconds += 1000;
 802f008:	b209      	sxth	r1, r1
    RtcBkupWrite( deltaTime.Seconds, ( uint32_t )deltaTime.SubSeconds );
 802f00a:	f7f4 ff9b 	bl	8023f44 <RtcBkupWrite>
}
 802f00e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0802f010 <SysTimeGetMcuTime>:
{
 802f010:	b537      	push	{r0, r1, r2, r4, r5, lr}
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 802f012:	2300      	movs	r3, #0
 802f014:	466d      	mov	r5, sp
{
 802f016:	0004      	movs	r4, r0
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 802f018:	a801      	add	r0, sp, #4
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 802f01a:	9300      	str	r3, [sp, #0]
 802f01c:	80ab      	strh	r3, [r5, #4]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 802f01e:	f000 f876 	bl	802f10e <RtcGetCalendarTime>
    return calendarTime;
 802f022:	0023      	movs	r3, r4
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 802f024:	9000      	str	r0, [sp, #0]
    return calendarTime;
 802f026:	cd06      	ldmia	r5!, {r1, r2}
 802f028:	c306      	stmia	r3!, {r1, r2}
}
 802f02a:	0020      	movs	r0, r4
 802f02c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0802f02e <SysTimeToMs>:
{
 802f02e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    RtcBkupRead( &deltaTime.Seconds, ( uint32_t* )&deltaTime.SubSeconds );
 802f030:	ac02      	add	r4, sp, #8
{
 802f032:	9000      	str	r0, [sp, #0]
 802f034:	9101      	str	r1, [sp, #4]
    RtcBkupRead( &deltaTime.Seconds, ( uint32_t* )&deltaTime.SubSeconds );
 802f036:	0020      	movs	r0, r4
 802f038:	a903      	add	r1, sp, #12
 802f03a:	f7f4 ff89 	bl	8023f50 <RtcBkupRead>
    c.Seconds = a.Seconds - b.Seconds;
 802f03e:	9b00      	ldr	r3, [sp, #0]
 802f040:	9a02      	ldr	r2, [sp, #8]
 802f042:	1a9a      	subs	r2, r3, r2
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 802f044:	466b      	mov	r3, sp
 802f046:	8899      	ldrh	r1, [r3, #4]
 802f048:	88a3      	ldrh	r3, [r4, #4]
 802f04a:	1ac9      	subs	r1, r1, r3
 802f04c:	b20b      	sxth	r3, r1
    if( c.SubSeconds < 0 )
 802f04e:	0409      	lsls	r1, r1, #16
 802f050:	d504      	bpl.n	802f05c <SysTimeToMs+0x2e>
        c.SubSeconds += 1000;
 802f052:	21fa      	movs	r1, #250	; 0xfa
 802f054:	0089      	lsls	r1, r1, #2
 802f056:	185b      	adds	r3, r3, r1
        c.Seconds--;
 802f058:	3a01      	subs	r2, #1
        c.SubSeconds += 1000;
 802f05a:	b21b      	sxth	r3, r3
    return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 802f05c:	20fa      	movs	r0, #250	; 0xfa
 802f05e:	0080      	lsls	r0, r0, #2
 802f060:	4350      	muls	r0, r2
 802f062:	18c0      	adds	r0, r0, r3
}
 802f064:	b004      	add	sp, #16
 802f066:	bd10      	pop	{r4, pc}

0802f068 <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms(nowInTicks - pastInTicks);
}

static void TimerSetTimeout(TimerEvent_t *obj)
{
 802f068:	b570      	push	{r4, r5, r6, lr}
 802f06a:	0004      	movs	r4, r0
    int32_t minTicks = RtcGetMinimumTimeout();
 802f06c:	f000 f85d 	bl	802f12a <RtcGetMinimumTimeout>
    obj->IsNext2Expire = true;
 802f070:	2301      	movs	r3, #1
 802f072:	7263      	strb	r3, [r4, #9]
    int32_t minTicks = RtcGetMinimumTimeout();
 802f074:	0005      	movs	r5, r0

    // In case deadline too soon
    if (obj->Timestamp < (RtcGetTimerElapsedTime() + minTicks))
 802f076:	6826      	ldr	r6, [r4, #0]
 802f078:	f7f4 ff72 	bl	8023f60 <RtcGetTimerElapsedTime>
 802f07c:	1828      	adds	r0, r5, r0
 802f07e:	4286      	cmp	r6, r0
 802f080:	d203      	bcs.n	802f08a <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime() + minTicks;
 802f082:	f7f4 ff6d 	bl	8023f60 <RtcGetTimerElapsedTime>
 802f086:	182d      	adds	r5, r5, r0
 802f088:	6025      	str	r5, [r4, #0]
    }
    RtcSetAlarm(obj->Timestamp);
 802f08a:	6820      	ldr	r0, [r4, #0]
 802f08c:	f7f4 ff7a 	bl	8023f84 <RtcSetAlarm>
}
 802f090:	bd70      	pop	{r4, r5, r6, pc}

0802f092 <TimerInit>:
    obj->Timestamp = 0;
 802f092:	2300      	movs	r3, #0
 802f094:	6003      	str	r3, [r0, #0]
    obj->ReloadValue = 0;
 802f096:	6043      	str	r3, [r0, #4]
    obj->IsStarted = false;
 802f098:	8103      	strh	r3, [r0, #8]
    obj->Callback = callback;
 802f09a:	60c1      	str	r1, [r0, #12]
    obj->Context = NULL;
 802f09c:	6103      	str	r3, [r0, #16]
    obj->Next = NULL;
 802f09e:	6143      	str	r3, [r0, #20]
}
 802f0a0:	4770      	bx	lr

0802f0a2 <TimerSetValue>:
{
 802f0a2:	b570      	push	{r4, r5, r6, lr}
 802f0a4:	0005      	movs	r5, r0
 802f0a6:	0008      	movs	r0, r1
    uint32_t ticks = RtcMs2Tick(value);
 802f0a8:	f000 f841 	bl	802f12e <RtcMs2Tick>
 802f0ac:	0004      	movs	r4, r0
    TimerStop(obj);
 802f0ae:	0028      	movs	r0, r5
 802f0b0:	f7f4 ff18 	bl	8023ee4 <TimerStop>
    minValue = RtcGetMinimumTimeout();
 802f0b4:	f000 f839 	bl	802f12a <RtcGetMinimumTimeout>
    if (ticks < minValue)
 802f0b8:	4284      	cmp	r4, r0
 802f0ba:	d200      	bcs.n	802f0be <TimerSetValue+0x1c>
 802f0bc:	0004      	movs	r4, r0
    obj->Timestamp = ticks;
 802f0be:	602c      	str	r4, [r5, #0]
    obj->ReloadValue = ticks;
 802f0c0:	606c      	str	r4, [r5, #4]
}
 802f0c2:	bd70      	pop	{r4, r5, r6, pc}

0802f0c4 <TimerGetCurrentTime>:
{
 802f0c4:	b510      	push	{r4, lr}
    uint32_t now = RtcGetTimerValue();
 802f0c6:	f000 f82c 	bl	802f122 <RtcGetTimerValue>
    return RtcTick2Ms(now);
 802f0ca:	f000 f831 	bl	802f130 <RtcTick2Ms>
}
 802f0ce:	bd10      	pop	{r4, pc}

0802f0d0 <TimerGetElapsedTime>:
{
 802f0d0:	b570      	push	{r4, r5, r6, lr}
 802f0d2:	1e04      	subs	r4, r0, #0
    if (past == 0)
 802f0d4:	d009      	beq.n	802f0ea <TimerGetElapsedTime+0x1a>
    uint32_t nowInTicks = RtcGetTimerValue();
 802f0d6:	f000 f824 	bl	802f122 <RtcGetTimerValue>
 802f0da:	0005      	movs	r5, r0
    uint32_t pastInTicks = RtcMs2Tick(past);
 802f0dc:	0020      	movs	r0, r4
 802f0de:	f000 f826 	bl	802f12e <RtcMs2Tick>
    return RtcTick2Ms(nowInTicks - pastInTicks);
 802f0e2:	1a28      	subs	r0, r5, r0
 802f0e4:	f000 f824 	bl	802f130 <RtcTick2Ms>
 802f0e8:	0004      	movs	r4, r0
}
 802f0ea:	0020      	movs	r0, r4
 802f0ec:	bd70      	pop	{r4, r5, r6, pc}

0802f0ee <timer_callback>:
static void timer_callback(struct k_timer *_timer) {
 802f0ee:	b510      	push	{r4, lr}
  TimerIrqHandler();
 802f0f0:	f7f4 feba 	bl	8023e68 <TimerIrqHandler>
}
 802f0f4:	bd10      	pop	{r4, pc}

0802f0f6 <k_uptime_get_32>:
{
 802f0f6:	b510      	push	{r4, lr}
 802f0f8:	f001 fde2 	bl	8030cc0 <z_impl_k_uptime_ticks>
 802f0fc:	22fa      	movs	r2, #250	; 0xfa
 802f0fe:	2300      	movs	r3, #0
 802f100:	0092      	lsls	r2, r2, #2
 802f102:	f7f1 f9f3 	bl	80204ec <__aeabi_lmul>
 802f106:	0509      	lsls	r1, r1, #20
 802f108:	0b00      	lsrs	r0, r0, #12
 802f10a:	4308      	orrs	r0, r1
}
 802f10c:	bd10      	pop	{r4, pc}

0802f10e <RtcGetCalendarTime>:
uint32_t RtcGetCalendarTime(uint16_t *milliseconds) {
 802f10e:	b510      	push	{r4, lr}
 802f110:	0004      	movs	r4, r0
  uint32_t now = k_uptime_get_32();
 802f112:	f7ff fff0 	bl	802f0f6 <k_uptime_get_32>
  return now / MSEC_PER_SEC;
 802f116:	21fa      	movs	r1, #250	; 0xfa
  *milliseconds = now;
 802f118:	8020      	strh	r0, [r4, #0]
  return now / MSEC_PER_SEC;
 802f11a:	0089      	lsls	r1, r1, #2
 802f11c:	f7f0 fff8 	bl	8020110 <__udivsi3>
}
 802f120:	bd10      	pop	{r4, pc}

0802f122 <RtcGetTimerValue>:
uint32_t RtcGetTimerValue(void) { return k_uptime_get_32(); }
 802f122:	b510      	push	{r4, lr}
 802f124:	f7ff ffe7 	bl	802f0f6 <k_uptime_get_32>
 802f128:	bd10      	pop	{r4, pc}

0802f12a <RtcGetMinimumTimeout>:
uint32_t RtcGetMinimumTimeout(void) { return 1; }
 802f12a:	2001      	movs	r0, #1
 802f12c:	4770      	bx	lr

0802f12e <RtcMs2Tick>:

void DelayMsMcu(uint32_t ms) { k_sleep(K_MSEC(ms)); }

uint32_t RtcMs2Tick(uint32_t milliseconds) { return milliseconds; }
 802f12e:	4770      	bx	lr

0802f130 <RtcTick2Ms>:
 802f130:	4770      	bx	lr

0802f132 <memcpy1>:
    while (size--)
 802f132:	2300      	movs	r3, #0
{
 802f134:	b510      	push	{r4, lr}
    while (size--)
 802f136:	4293      	cmp	r3, r2
 802f138:	d100      	bne.n	802f13c <memcpy1+0xa>
}
 802f13a:	bd10      	pop	{r4, pc}
        *dst++ = *src++;
 802f13c:	5ccc      	ldrb	r4, [r1, r3]
 802f13e:	54c4      	strb	r4, [r0, r3]
 802f140:	3301      	adds	r3, #1
 802f142:	e7f8      	b.n	802f136 <memcpy1+0x4>

0802f144 <memcpyr>:
    dst = dst + (size - 1);
 802f144:	1e53      	subs	r3, r2, #1
 802f146:	18c0      	adds	r0, r0, r3
    while (size--)
 802f148:	2300      	movs	r3, #0
{
 802f14a:	b530      	push	{r4, r5, lr}
    while (size--)
 802f14c:	429a      	cmp	r2, r3
 802f14e:	d100      	bne.n	802f152 <memcpyr+0xe>
}
 802f150:	bd30      	pop	{r4, r5, pc}
        *dst-- = *src++;
 802f152:	5ccd      	ldrb	r5, [r1, r3]
 802f154:	425c      	negs	r4, r3
 802f156:	5505      	strb	r5, [r0, r4]
 802f158:	3301      	adds	r3, #1
 802f15a:	e7f7      	b.n	802f14c <memcpyr+0x8>

0802f15c <UTIL_MEM_cpy_8>:
    while (size--)
 802f15c:	2300      	movs	r3, #0
{
 802f15e:	b510      	push	{r4, lr}
    while (size--)
 802f160:	4293      	cmp	r3, r2
 802f162:	d100      	bne.n	802f166 <UTIL_MEM_cpy_8+0xa>
}
 802f164:	bd10      	pop	{r4, pc}
        *dst8++ = *src8++;
 802f166:	5ccc      	ldrb	r4, [r1, r3]
 802f168:	54c4      	strb	r4, [r0, r3]
 802f16a:	3301      	adds	r3, #1
 802f16c:	e7f8      	b.n	802f160 <UTIL_MEM_cpy_8+0x4>

0802f16e <gpio_pin_set.isra.0>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 802f16e:	2301      	movs	r3, #1
 802f170:	408b      	lsls	r3, r1
 802f172:	0019      	movs	r1, r3
 802f174:	6903      	ldr	r3, [r0, #16]
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
 802f176:	b510      	push	{r4, lr}
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 802f178:	681b      	ldr	r3, [r3, #0]
 802f17a:	420b      	tst	r3, r1
 802f17c:	d004      	beq.n	802f188 <gpio_pin_set.isra.0+0x1a>
	if (value != 0)	{
 802f17e:	2a00      	cmp	r2, #0
 802f180:	d004      	beq.n	802f18c <gpio_pin_set.isra.0+0x1e>
	return api->port_clear_bits_raw(port, pins);
 802f182:	6883      	ldr	r3, [r0, #8]
 802f184:	691b      	ldr	r3, [r3, #16]
 802f186:	e003      	b.n	802f190 <gpio_pin_set.isra.0+0x22>
	if (value != 0)	{
 802f188:	2a00      	cmp	r2, #0
 802f18a:	d0fa      	beq.n	802f182 <gpio_pin_set.isra.0+0x14>
	return api->port_set_bits_raw(port, pins);
 802f18c:	6883      	ldr	r3, [r0, #8]
 802f18e:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 802f190:	4798      	blx	r3
		value = (value != 0) ? 0 : 1;
	}

	return gpio_pin_set_raw(port, pin, value);
}
 802f192:	bd10      	pop	{r4, pc}

0802f194 <RBI_GetTxConfig>:
#define IS_DCDC_SUPPORTED 1U

int32_t RBI_GetTxConfig(void)
{
  return RBI_CONF_RFO;
}
 802f194:	2000      	movs	r0, #0
 802f196:	4770      	bx	lr

0802f198 <RBI_GetWakeUpTime>:

int32_t RBI_GetWakeUpTime(void)
{
  return RF_WAKEUP_TIME;
}
 802f198:	200a      	movs	r0, #10
 802f19a:	4770      	bx	lr

0802f19c <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
  return IS_TCXO_SUPPORTED;
}
 802f19c:	2001      	movs	r0, #1
 802f19e:	4770      	bx	lr

0802f1a0 <RBI_IsDCDC>:
 802f1a0:	2001      	movs	r0, #1
 802f1a2:	4770      	bx	lr

0802f1a4 <xor_block>:
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 802f1a4:	780a      	ldrb	r2, [r1, #0]
 802f1a6:	7803      	ldrb	r3, [r0, #0]
 802f1a8:	4053      	eors	r3, r2
 802f1aa:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 802f1ac:	784a      	ldrb	r2, [r1, #1]
 802f1ae:	7843      	ldrb	r3, [r0, #1]
 802f1b0:	4053      	eors	r3, r2
 802f1b2:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 802f1b4:	788a      	ldrb	r2, [r1, #2]
 802f1b6:	7883      	ldrb	r3, [r0, #2]
 802f1b8:	4053      	eors	r3, r2
 802f1ba:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 802f1bc:	78ca      	ldrb	r2, [r1, #3]
 802f1be:	78c3      	ldrb	r3, [r0, #3]
 802f1c0:	4053      	eors	r3, r2
 802f1c2:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 802f1c4:	790a      	ldrb	r2, [r1, #4]
 802f1c6:	7903      	ldrb	r3, [r0, #4]
 802f1c8:	4053      	eors	r3, r2
 802f1ca:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 802f1cc:	794a      	ldrb	r2, [r1, #5]
 802f1ce:	7943      	ldrb	r3, [r0, #5]
 802f1d0:	4053      	eors	r3, r2
 802f1d2:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 802f1d4:	798a      	ldrb	r2, [r1, #6]
 802f1d6:	7983      	ldrb	r3, [r0, #6]
 802f1d8:	4053      	eors	r3, r2
 802f1da:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 802f1dc:	79ca      	ldrb	r2, [r1, #7]
 802f1de:	79c3      	ldrb	r3, [r0, #7]
 802f1e0:	4053      	eors	r3, r2
 802f1e2:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 802f1e4:	7a0a      	ldrb	r2, [r1, #8]
 802f1e6:	7a03      	ldrb	r3, [r0, #8]
 802f1e8:	4053      	eors	r3, r2
 802f1ea:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 802f1ec:	7a4a      	ldrb	r2, [r1, #9]
 802f1ee:	7a43      	ldrb	r3, [r0, #9]
 802f1f0:	4053      	eors	r3, r2
 802f1f2:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 802f1f4:	7a8a      	ldrb	r2, [r1, #10]
 802f1f6:	7a83      	ldrb	r3, [r0, #10]
 802f1f8:	4053      	eors	r3, r2
 802f1fa:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 802f1fc:	7aca      	ldrb	r2, [r1, #11]
 802f1fe:	7ac3      	ldrb	r3, [r0, #11]
 802f200:	4053      	eors	r3, r2
 802f202:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 802f204:	7b0a      	ldrb	r2, [r1, #12]
 802f206:	7b03      	ldrb	r3, [r0, #12]
 802f208:	4053      	eors	r3, r2
 802f20a:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 802f20c:	7b4a      	ldrb	r2, [r1, #13]
 802f20e:	7b43      	ldrb	r3, [r0, #13]
 802f210:	4053      	eors	r3, r2
 802f212:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 802f214:	7b8a      	ldrb	r2, [r1, #14]
 802f216:	7b83      	ldrb	r3, [r0, #14]
 802f218:	4053      	eors	r3, r2
 802f21a:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 802f21c:	7bca      	ldrb	r2, [r1, #15]
 802f21e:	7bc3      	ldrb	r3, [r0, #15]
 802f220:	4053      	eors	r3, r2
 802f222:	73c3      	strb	r3, [r0, #15]
}
 802f224:	4770      	bx	lr

0802f226 <copy_and_key>:
{
 802f226:	b510      	push	{r4, lr}
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 802f228:	780b      	ldrb	r3, [r1, #0]
 802f22a:	7814      	ldrb	r4, [r2, #0]
 802f22c:	4063      	eors	r3, r4
 802f22e:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 802f230:	7854      	ldrb	r4, [r2, #1]
 802f232:	784b      	ldrb	r3, [r1, #1]
 802f234:	4063      	eors	r3, r4
 802f236:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 802f238:	7894      	ldrb	r4, [r2, #2]
 802f23a:	788b      	ldrb	r3, [r1, #2]
 802f23c:	4063      	eors	r3, r4
 802f23e:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 802f240:	78d4      	ldrb	r4, [r2, #3]
 802f242:	78cb      	ldrb	r3, [r1, #3]
 802f244:	4063      	eors	r3, r4
 802f246:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 802f248:	7914      	ldrb	r4, [r2, #4]
 802f24a:	790b      	ldrb	r3, [r1, #4]
 802f24c:	4063      	eors	r3, r4
 802f24e:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 802f250:	7954      	ldrb	r4, [r2, #5]
 802f252:	794b      	ldrb	r3, [r1, #5]
 802f254:	4063      	eors	r3, r4
 802f256:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 802f258:	7994      	ldrb	r4, [r2, #6]
 802f25a:	798b      	ldrb	r3, [r1, #6]
 802f25c:	4063      	eors	r3, r4
 802f25e:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 802f260:	79d4      	ldrb	r4, [r2, #7]
 802f262:	79cb      	ldrb	r3, [r1, #7]
 802f264:	4063      	eors	r3, r4
 802f266:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 802f268:	7a14      	ldrb	r4, [r2, #8]
 802f26a:	7a0b      	ldrb	r3, [r1, #8]
 802f26c:	4063      	eors	r3, r4
 802f26e:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 802f270:	7a4b      	ldrb	r3, [r1, #9]
 802f272:	7a54      	ldrb	r4, [r2, #9]
 802f274:	4063      	eors	r3, r4
 802f276:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 802f278:	7a8b      	ldrb	r3, [r1, #10]
 802f27a:	7a94      	ldrb	r4, [r2, #10]
 802f27c:	4063      	eors	r3, r4
 802f27e:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 802f280:	7ad4      	ldrb	r4, [r2, #11]
 802f282:	7acb      	ldrb	r3, [r1, #11]
 802f284:	4063      	eors	r3, r4
 802f286:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 802f288:	7b14      	ldrb	r4, [r2, #12]
 802f28a:	7b0b      	ldrb	r3, [r1, #12]
 802f28c:	4063      	eors	r3, r4
 802f28e:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 802f290:	7b54      	ldrb	r4, [r2, #13]
 802f292:	7b4b      	ldrb	r3, [r1, #13]
 802f294:	4063      	eors	r3, r4
 802f296:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 802f298:	7b94      	ldrb	r4, [r2, #14]
 802f29a:	7b8b      	ldrb	r3, [r1, #14]
 802f29c:	4063      	eors	r3, r4
 802f29e:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 802f2a0:	7bcb      	ldrb	r3, [r1, #15]
 802f2a2:	7bd2      	ldrb	r2, [r2, #15]
 802f2a4:	4053      	eors	r3, r2
 802f2a6:	73c3      	strb	r3, [r0, #15]
}
 802f2a8:	bd10      	pop	{r4, pc}

0802f2aa <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 802f2aa:	b510      	push	{r4, lr}
 802f2ac:	0004      	movs	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 802f2ae:	2210      	movs	r2, #16
 802f2b0:	2100      	movs	r1, #0
 802f2b2:	30f1      	adds	r0, #241	; 0xf1
 802f2b4:	f7f4 feb0 	bl	8024018 <memset1>
    ctx->M_n = 0;
 802f2b8:	0023      	movs	r3, r4
 802f2ba:	2100      	movs	r1, #0
 802f2bc:	33fc      	adds	r3, #252	; 0xfc
    memset1( ctx->rijndael.ksch, '\0', 240 );
 802f2be:	22f0      	movs	r2, #240	; 0xf0
 802f2c0:	0020      	movs	r0, r4
    ctx->M_n = 0;
 802f2c2:	6199      	str	r1, [r3, #24]
    memset1( ctx->rijndael.ksch, '\0', 240 );
 802f2c4:	f7f4 fea8 	bl	8024018 <memset1>
}
 802f2c8:	bd10      	pop	{r4, pc}

0802f2ca <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 802f2ca:	b510      	push	{r4, lr}
 802f2cc:	0002      	movs	r2, r0
 802f2ce:	0008      	movs	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 802f2d0:	2110      	movs	r1, #16
 802f2d2:	f7f4 ff89 	bl	80241e8 <lorawan_aes_set_key>
}
 802f2d6:	bd10      	pop	{r4, pc}

0802f2d8 <AES_CMAC_Update>:
void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 802f2d8:	0003      	movs	r3, r0
{
 802f2da:	b5f0      	push	{r4, r5, r6, r7, lr}
 802f2dc:	0004      	movs	r4, r0
    if( ctx->M_n > 0 )
 802f2de:	33fc      	adds	r3, #252	; 0xfc
 802f2e0:	6998      	ldr	r0, [r3, #24]
    {
        mlen = MIN( 16 - ctx->M_n, len );
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 802f2e2:	1ca3      	adds	r3, r4, #2
{
 802f2e4:	b087      	sub	sp, #28
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 802f2e6:	33ff      	adds	r3, #255	; 0xff
{
 802f2e8:	000e      	movs	r6, r1
 802f2ea:	0015      	movs	r5, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 802f2ec:	9301      	str	r3, [sp, #4]
    if( ctx->M_n > 0 )
 802f2ee:	2800      	cmp	r0, #0
 802f2f0:	d036      	beq.n	802f360 <AES_CMAC_Update+0x88>
        mlen = MIN( 16 - ctx->M_n, len );
 802f2f2:	2710      	movs	r7, #16
 802f2f4:	1a3f      	subs	r7, r7, r0
 802f2f6:	9700      	str	r7, [sp, #0]
 802f2f8:	4297      	cmp	r7, r2
 802f2fa:	d900      	bls.n	802f2fe <AES_CMAC_Update+0x26>
 802f2fc:	9200      	str	r2, [sp, #0]
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 802f2fe:	466b      	mov	r3, sp
 802f300:	881a      	ldrh	r2, [r3, #0]
 802f302:	1ca3      	adds	r3, r4, #2
 802f304:	33ff      	adds	r3, #255	; 0xff
 802f306:	0031      	movs	r1, r6
 802f308:	1818      	adds	r0, r3, r0
 802f30a:	f7ff ff12 	bl	802f132 <memcpy1>
        ctx->M_n += mlen;
 802f30e:	0022      	movs	r2, r4
 802f310:	32fc      	adds	r2, #252	; 0xfc
 802f312:	6991      	ldr	r1, [r2, #24]
 802f314:	9b00      	ldr	r3, [sp, #0]
 802f316:	185b      	adds	r3, r3, r1
 802f318:	6193      	str	r3, [r2, #24]
        if( ctx->M_n < 16 || len == mlen )
 802f31a:	2b0f      	cmp	r3, #15
 802f31c:	d929      	bls.n	802f372 <AES_CMAC_Update+0x9a>
 802f31e:	42af      	cmp	r7, r5
 802f320:	d227      	bcs.n	802f372 <AES_CMAC_Update+0x9a>
 802f322:	0023      	movs	r3, r4
 802f324:	1ca1      	adds	r1, r4, #2
 802f326:	33f1      	adds	r3, #241	; 0xf1
 802f328:	31ff      	adds	r1, #255	; 0xff
            return;
        XOR( ctx->M_last, ctx->X );
 802f32a:	781a      	ldrb	r2, [r3, #0]
 802f32c:	7c18      	ldrb	r0, [r3, #16]
 802f32e:	4042      	eors	r2, r0
 802f330:	701a      	strb	r2, [r3, #0]
 802f332:	3301      	adds	r3, #1
 802f334:	428b      	cmp	r3, r1
 802f336:	d1f8      	bne.n	802f32a <AES_CMAC_Update+0x52>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 802f338:	0027      	movs	r7, r4
 802f33a:	37f1      	adds	r7, #241	; 0xf1
 802f33c:	2210      	movs	r2, #16
 802f33e:	0039      	movs	r1, r7
 802f340:	a802      	add	r0, sp, #8
 802f342:	f7ff fef6 	bl	802f132 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 802f346:	a902      	add	r1, sp, #8
 802f348:	0022      	movs	r2, r4
 802f34a:	0008      	movs	r0, r1
 802f34c:	f7f4 ffd4 	bl	80242f8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 802f350:	2210      	movs	r2, #16
 802f352:	0038      	movs	r0, r7
 802f354:	a902      	add	r1, sp, #8
 802f356:	f7ff feec 	bl	802f132 <memcpy1>

        data += mlen;
 802f35a:	9b00      	ldr	r3, [sp, #0]
 802f35c:	18f6      	adds	r6, r6, r3
        len -= mlen;
 802f35e:	1aed      	subs	r5, r5, r3
    }
    while( len > 16 )
 802f360:	2d10      	cmp	r5, #16
 802f362:	d808      	bhi.n	802f376 <AES_CMAC_Update+0x9e>

        data += 16;
        len -= 16;
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 802f364:	0031      	movs	r1, r6
 802f366:	9801      	ldr	r0, [sp, #4]
 802f368:	b2aa      	uxth	r2, r5
    ctx->M_n = len;
 802f36a:	34fc      	adds	r4, #252	; 0xfc
    memcpy1( ctx->M_last, data, len );
 802f36c:	f7ff fee1 	bl	802f132 <memcpy1>
    ctx->M_n = len;
 802f370:	61a5      	str	r5, [r4, #24]
}
 802f372:	b007      	add	sp, #28
 802f374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802f376:	0023      	movs	r3, r4
 802f378:	0032      	movs	r2, r6
 802f37a:	1ca0      	adds	r0, r4, #2
 802f37c:	33f1      	adds	r3, #241	; 0xf1
 802f37e:	30ff      	adds	r0, #255	; 0xff
        XOR( data, ctx->X );
 802f380:	7819      	ldrb	r1, [r3, #0]
 802f382:	7817      	ldrb	r7, [r2, #0]
 802f384:	3201      	adds	r2, #1
 802f386:	4079      	eors	r1, r7
 802f388:	7019      	strb	r1, [r3, #0]
 802f38a:	3301      	adds	r3, #1
 802f38c:	4283      	cmp	r3, r0
 802f38e:	d1f7      	bne.n	802f380 <AES_CMAC_Update+0xa8>
        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 802f390:	0027      	movs	r7, r4
 802f392:	37f1      	adds	r7, #241	; 0xf1
 802f394:	2210      	movs	r2, #16
 802f396:	0039      	movs	r1, r7
 802f398:	a802      	add	r0, sp, #8
 802f39a:	f7ff feca 	bl	802f132 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 802f39e:	a902      	add	r1, sp, #8
 802f3a0:	0022      	movs	r2, r4
 802f3a2:	0008      	movs	r0, r1
 802f3a4:	f7f4 ffa8 	bl	80242f8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 802f3a8:	2210      	movs	r2, #16
 802f3aa:	0038      	movs	r0, r7
 802f3ac:	a902      	add	r1, sp, #8
 802f3ae:	f7ff fec0 	bl	802f132 <memcpy1>
        data += 16;
 802f3b2:	3610      	adds	r6, #16
        len -= 16;
 802f3b4:	3d10      	subs	r5, #16
 802f3b6:	e7d3      	b.n	802f360 <AES_CMAC_Update+0x88>

0802f3b8 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 802f3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 802f3ba:	000c      	movs	r4, r1
 802f3bc:	b089      	sub	sp, #36	; 0x24
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 802f3be:	2210      	movs	r2, #16
 802f3c0:	2100      	movs	r1, #0
{
 802f3c2:	0005      	movs	r5, r0
    memset1( K, '\0', 16 );
 802f3c4:	4668      	mov	r0, sp
 802f3c6:	f7f4 fe27 	bl	8024018 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 802f3ca:	0022      	movs	r2, r4
 802f3cc:	4669      	mov	r1, sp
 802f3ce:	4668      	mov	r0, sp
 802f3d0:	f7f4 ff92 	bl	80242f8 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 802f3d4:	466b      	mov	r3, sp
 802f3d6:	781a      	ldrb	r2, [r3, #0]
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 802f3d8:	2100      	movs	r1, #0
    if( K[0] & 0x80 )
 802f3da:	2a7f      	cmp	r2, #127	; 0x7f
 802f3dc:	d93e      	bls.n	802f45c <AES_CMAC_Final+0xa4>
        LSHIFT( K, K );
 802f3de:	781a      	ldrb	r2, [r3, #0]
 802f3e0:	7858      	ldrb	r0, [r3, #1]
 802f3e2:	0052      	lsls	r2, r2, #1
 802f3e4:	09c0      	lsrs	r0, r0, #7
 802f3e6:	4302      	orrs	r2, r0
 802f3e8:	3101      	adds	r1, #1
 802f3ea:	701a      	strb	r2, [r3, #0]
 802f3ec:	3301      	adds	r3, #1
 802f3ee:	290f      	cmp	r1, #15
 802f3f0:	d1f5      	bne.n	802f3de <AES_CMAC_Final+0x26>
 802f3f2:	466b      	mov	r3, sp
 802f3f4:	7bda      	ldrb	r2, [r3, #15]
        K[15] ^= 0x87;
 802f3f6:	2379      	movs	r3, #121	; 0x79
        LSHIFT( K, K );
 802f3f8:	0052      	lsls	r2, r2, #1
        K[15] ^= 0x87;
 802f3fa:	425b      	negs	r3, r3
 802f3fc:	4053      	eors	r3, r2

    if( ctx->M_n == 16 )
 802f3fe:	0020      	movs	r0, r4
        LSHIFT( K, K );
 802f400:	466a      	mov	r2, sp
    if( ctx->M_n == 16 )
 802f402:	30fc      	adds	r0, #252	; 0xfc
 802f404:	6986      	ldr	r6, [r0, #24]
        LSHIFT( K, K );
 802f406:	73d3      	strb	r3, [r2, #15]
    if( ctx->M_n == 16 )
 802f408:	2e10      	cmp	r6, #16
 802f40a:	d135      	bne.n	802f478 <AES_CMAC_Final+0xc0>
 802f40c:	466a      	mov	r2, sp
 802f40e:	1ca3      	adds	r3, r4, #2
 802f410:	33ff      	adds	r3, #255	; 0xff
 802f412:	3015      	adds	r0, #21
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 802f414:	7819      	ldrb	r1, [r3, #0]
 802f416:	7816      	ldrb	r6, [r2, #0]
 802f418:	3201      	adds	r2, #1
 802f41a:	4071      	eors	r1, r6
 802f41c:	7019      	strb	r1, [r3, #0]
 802f41e:	3301      	adds	r3, #1
 802f420:	4298      	cmp	r0, r3
 802f422:	d1f7      	bne.n	802f414 <AES_CMAC_Final+0x5c>
 802f424:	0023      	movs	r3, r4
 802f426:	33f1      	adds	r3, #241	; 0xf1
 802f428:	0019      	movs	r1, r3
 802f42a:	1ca0      	adds	r0, r4, #2
 802f42c:	30ff      	adds	r0, #255	; 0xff
        while( ++ctx->M_n < 16 )
            ctx->M_last[ctx->M_n] = 0;

        XOR( K, ctx->M_last );
    }
    XOR( ctx->M_last, ctx->X );
 802f42e:	781a      	ldrb	r2, [r3, #0]
 802f430:	7c1e      	ldrb	r6, [r3, #16]
 802f432:	4072      	eors	r2, r6
 802f434:	701a      	strb	r2, [r3, #0]
 802f436:	3301      	adds	r3, #1
 802f438:	4298      	cmp	r0, r3
 802f43a:	d1f8      	bne.n	802f42e <AES_CMAC_Final+0x76>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 802f43c:	a804      	add	r0, sp, #16
 802f43e:	2210      	movs	r2, #16
 802f440:	f7ff fe77 	bl	802f132 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 802f444:	0022      	movs	r2, r4
 802f446:	0029      	movs	r1, r5
 802f448:	a804      	add	r0, sp, #16
 802f44a:	f7f4 ff55 	bl	80242f8 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 802f44e:	2210      	movs	r2, #16
 802f450:	2100      	movs	r1, #0
 802f452:	4668      	mov	r0, sp
 802f454:	f7f4 fde0 	bl	8024018 <memset1>
}
 802f458:	b009      	add	sp, #36	; 0x24
 802f45a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LSHIFT( K, K );
 802f45c:	781a      	ldrb	r2, [r3, #0]
 802f45e:	7858      	ldrb	r0, [r3, #1]
 802f460:	0052      	lsls	r2, r2, #1
 802f462:	09c0      	lsrs	r0, r0, #7
 802f464:	4302      	orrs	r2, r0
 802f466:	3101      	adds	r1, #1
 802f468:	701a      	strb	r2, [r3, #0]
 802f46a:	3301      	adds	r3, #1
 802f46c:	290f      	cmp	r1, #15
 802f46e:	d1f5      	bne.n	802f45c <AES_CMAC_Final+0xa4>
 802f470:	466b      	mov	r3, sp
 802f472:	7bdb      	ldrb	r3, [r3, #15]
 802f474:	005b      	lsls	r3, r3, #1
 802f476:	e7c2      	b.n	802f3fe <AES_CMAC_Final+0x46>
        if( K[0] & 0x80 )
 802f478:	7812      	ldrb	r2, [r2, #0]
 802f47a:	466b      	mov	r3, sp
            LSHIFT( K, K );
 802f47c:	2100      	movs	r1, #0
        if( K[0] & 0x80 )
 802f47e:	2a7f      	cmp	r2, #127	; 0x7f
 802f480:	d930      	bls.n	802f4e4 <AES_CMAC_Final+0x12c>
            LSHIFT( K, K );
 802f482:	781a      	ldrb	r2, [r3, #0]
 802f484:	785f      	ldrb	r7, [r3, #1]
 802f486:	0052      	lsls	r2, r2, #1
 802f488:	09ff      	lsrs	r7, r7, #7
 802f48a:	433a      	orrs	r2, r7
 802f48c:	3101      	adds	r1, #1
 802f48e:	701a      	strb	r2, [r3, #0]
 802f490:	3301      	adds	r3, #1
 802f492:	290f      	cmp	r1, #15
 802f494:	d1f5      	bne.n	802f482 <AES_CMAC_Final+0xca>
 802f496:	466b      	mov	r3, sp
 802f498:	7bda      	ldrb	r2, [r3, #15]
            K[15] ^= 0x87;
 802f49a:	2379      	movs	r3, #121	; 0x79
            LSHIFT( K, K );
 802f49c:	0052      	lsls	r2, r2, #1
            K[15] ^= 0x87;
 802f49e:	425b      	negs	r3, r3
 802f4a0:	4053      	eors	r3, r2
            LSHIFT( K, K );
 802f4a2:	466a      	mov	r2, sp
 802f4a4:	73d3      	strb	r3, [r2, #15]
        ctx->M_last[ctx->M_n] = 0x80;
 802f4a6:	2280      	movs	r2, #128	; 0x80
 802f4a8:	19a3      	adds	r3, r4, r6
 802f4aa:	33ff      	adds	r3, #255	; 0xff
 802f4ac:	1c77      	adds	r7, r6, #1
 802f4ae:	709a      	strb	r2, [r3, #2]
        while( ++ctx->M_n < 16 )
 802f4b0:	0039      	movs	r1, r7
            ctx->M_last[ctx->M_n] = 0;
 802f4b2:	2200      	movs	r2, #0
 802f4b4:	1ca3      	adds	r3, r4, #2
 802f4b6:	33ff      	adds	r3, #255	; 0xff
        while( ++ctx->M_n < 16 )
 802f4b8:	290f      	cmp	r1, #15
 802f4ba:	d921      	bls.n	802f500 <AES_CMAC_Final+0x148>
 802f4bc:	2200      	movs	r2, #0
 802f4be:	2f10      	cmp	r7, #16
 802f4c0:	d801      	bhi.n	802f4c6 <AES_CMAC_Final+0x10e>
 802f4c2:	320f      	adds	r2, #15
 802f4c4:	1b92      	subs	r2, r2, r6
 802f4c6:	19d2      	adds	r2, r2, r7
 802f4c8:	6182      	str	r2, [r0, #24]
 802f4ca:	0020      	movs	r0, r4
 802f4cc:	466a      	mov	r2, sp
 802f4ce:	3012      	adds	r0, #18
 802f4d0:	30ff      	adds	r0, #255	; 0xff
        XOR( K, ctx->M_last );
 802f4d2:	7819      	ldrb	r1, [r3, #0]
 802f4d4:	7816      	ldrb	r6, [r2, #0]
 802f4d6:	3201      	adds	r2, #1
 802f4d8:	4071      	eors	r1, r6
 802f4da:	7019      	strb	r1, [r3, #0]
 802f4dc:	3301      	adds	r3, #1
 802f4de:	4298      	cmp	r0, r3
 802f4e0:	d1f7      	bne.n	802f4d2 <AES_CMAC_Final+0x11a>
 802f4e2:	e79f      	b.n	802f424 <AES_CMAC_Final+0x6c>
            LSHIFT( K, K );
 802f4e4:	781a      	ldrb	r2, [r3, #0]
 802f4e6:	785f      	ldrb	r7, [r3, #1]
 802f4e8:	0052      	lsls	r2, r2, #1
 802f4ea:	09ff      	lsrs	r7, r7, #7
 802f4ec:	433a      	orrs	r2, r7
 802f4ee:	3101      	adds	r1, #1
 802f4f0:	701a      	strb	r2, [r3, #0]
 802f4f2:	3301      	adds	r3, #1
 802f4f4:	290f      	cmp	r1, #15
 802f4f6:	d1f5      	bne.n	802f4e4 <AES_CMAC_Final+0x12c>
 802f4f8:	466b      	mov	r3, sp
 802f4fa:	7bdb      	ldrb	r3, [r3, #15]
 802f4fc:	005b      	lsls	r3, r3, #1
 802f4fe:	e7d0      	b.n	802f4a2 <AES_CMAC_Final+0xea>
            ctx->M_last[ctx->M_n] = 0;
 802f500:	545a      	strb	r2, [r3, r1]
 802f502:	3101      	adds	r1, #1
 802f504:	e7d8      	b.n	802f4b8 <AES_CMAC_Final+0x100>

0802f506 <DummyCB>:
}
 802f506:	4770      	bx	lr

0802f508 <ComputeCmac>:
{
 802f508:	b5f0      	push	{r4, r5, r6, r7, lr}
 802f50a:	b0cf      	sub	sp, #316	; 0x13c
 802f50c:	0006      	movs	r6, r0
 802f50e:	000d      	movs	r5, r1
 802f510:	0017      	movs	r7, r2
    return SECURE_ELEMENT_ERROR_NPE;
 802f512:	2402      	movs	r4, #2
{
 802f514:	9301      	str	r3, [sp, #4]
  if ((buffer == NULL) || (cmac == NULL))
 802f516:	2900      	cmp	r1, #0
 802f518:	d023      	beq.n	802f562 <ComputeCmac+0x5a>
 802f51a:	9b54      	ldr	r3, [sp, #336]	; 0x150
 802f51c:	2b00      	cmp	r3, #0
 802f51e:	d020      	beq.n	802f562 <ComputeCmac+0x5a>
  AES_CMAC_Init(aesCmacCtx);
 802f520:	a808      	add	r0, sp, #32
 802f522:	f7ff fec2 	bl	802f2aa <AES_CMAC_Init>
  retval = GetKeyByID(keyID, &keyItem);
 802f526:	9801      	ldr	r0, [sp, #4]
 802f528:	a903      	add	r1, sp, #12
 802f52a:	f7f5 f82b 	bl	8024584 <GetKeyByID>
 802f52e:	1e04      	subs	r4, r0, #0
  if (retval == SECURE_ELEMENT_SUCCESS)
 802f530:	d117      	bne.n	802f562 <ComputeCmac+0x5a>
    AES_CMAC_SetKey(aesCmacCtx, keyItem->KeyValue);
 802f532:	9b03      	ldr	r3, [sp, #12]
 802f534:	a808      	add	r0, sp, #32
 802f536:	1c59      	adds	r1, r3, #1
 802f538:	f7ff fec7 	bl	802f2ca <AES_CMAC_SetKey>
    if (micBxBuffer != NULL)
 802f53c:	2e00      	cmp	r6, #0
 802f53e:	d004      	beq.n	802f54a <ComputeCmac+0x42>
      AES_CMAC_Update(aesCmacCtx, micBxBuffer, 16);
 802f540:	2210      	movs	r2, #16
 802f542:	0031      	movs	r1, r6
 802f544:	a808      	add	r0, sp, #32
 802f546:	f7ff fec7 	bl	802f2d8 <AES_CMAC_Update>
    AES_CMAC_Update(aesCmacCtx, buffer, size);
 802f54a:	003a      	movs	r2, r7
 802f54c:	0029      	movs	r1, r5
 802f54e:	a808      	add	r0, sp, #32
 802f550:	f7ff fec2 	bl	802f2d8 <AES_CMAC_Update>
    AES_CMAC_Final(Cmac, aesCmacCtx);
 802f554:	a908      	add	r1, sp, #32
 802f556:	a804      	add	r0, sp, #16
 802f558:	f7ff ff2e 	bl	802f3b8 <AES_CMAC_Final>
    *cmac = (uint32_t)((uint32_t) Cmac[3] << 24 | (uint32_t) Cmac[2] << 16 | (uint32_t) Cmac[1] << 8 |
 802f55c:	9b54      	ldr	r3, [sp, #336]	; 0x150
 802f55e:	9a04      	ldr	r2, [sp, #16]
 802f560:	601a      	str	r2, [r3, #0]
}
 802f562:	0020      	movs	r0, r4
 802f564:	b04f      	add	sp, #316	; 0x13c
 802f566:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802f568 <SecureElementComputeAesCmac>:
{
 802f568:	b513      	push	{r0, r1, r4, lr}
 802f56a:	0004      	movs	r4, r0
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 802f56c:	2003      	movs	r0, #3
  if (keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS)
 802f56e:	2b7e      	cmp	r3, #126	; 0x7e
 802f570:	d804      	bhi.n	802f57c <SecureElementComputeAesCmac+0x14>
  return ComputeCmac(micBxBuffer, buffer, size, keyID, cmac);
 802f572:	9804      	ldr	r0, [sp, #16]
 802f574:	9000      	str	r0, [sp, #0]
 802f576:	0020      	movs	r0, r4
 802f578:	f7ff ffc6 	bl	802f508 <ComputeCmac>
}
 802f57c:	bd16      	pop	{r1, r2, r4, pc}

0802f57e <SecureElementVerifyAesCmac>:
{
 802f57e:	b530      	push	{r4, r5, lr}
 802f580:	0004      	movs	r4, r0
 802f582:	0015      	movs	r5, r2
    return SECURE_ELEMENT_ERROR_NPE;
 802f584:	2002      	movs	r0, #2
{
 802f586:	b085      	sub	sp, #20
  if (buffer == NULL)
 802f588:	2c00      	cmp	r4, #0
 802f58a:	d00e      	beq.n	802f5aa <SecureElementVerifyAesCmac+0x2c>
  uint32_t compCmac = 0;
 802f58c:	2000      	movs	r0, #0
  retval = ComputeCmac(NULL, buffer, size, keyID, &compCmac);
 802f58e:	aa03      	add	r2, sp, #12
 802f590:	9200      	str	r2, [sp, #0]
 802f592:	000a      	movs	r2, r1
 802f594:	0021      	movs	r1, r4
  uint32_t compCmac = 0;
 802f596:	9003      	str	r0, [sp, #12]
  retval = ComputeCmac(NULL, buffer, size, keyID, &compCmac);
 802f598:	f7ff ffb6 	bl	802f508 <ComputeCmac>
  if (retval != SECURE_ELEMENT_SUCCESS)
 802f59c:	2800      	cmp	r0, #0
 802f59e:	d104      	bne.n	802f5aa <SecureElementVerifyAesCmac+0x2c>
  if (expectedCmac != compCmac)
 802f5a0:	9b03      	ldr	r3, [sp, #12]
 802f5a2:	1b58      	subs	r0, r3, r5
 802f5a4:	1e43      	subs	r3, r0, #1
 802f5a6:	4198      	sbcs	r0, r3
    return SECURE_ELEMENT_ERROR_NPE;
 802f5a8:	b2c0      	uxtb	r0, r0
}
 802f5aa:	b005      	add	sp, #20
 802f5ac:	bd30      	pop	{r4, r5, pc}

0802f5ae <SecureElementAesEncrypt>:
{
 802f5ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 802f5b0:	b0c1      	sub	sp, #260	; 0x104
 802f5b2:	000e      	movs	r6, r1
 802f5b4:	0015      	movs	r5, r2
 802f5b6:	001f      	movs	r7, r3
    return SECURE_ELEMENT_ERROR_NPE;
 802f5b8:	2402      	movs	r4, #2
{
 802f5ba:	9001      	str	r0, [sp, #4]
  if (buffer == NULL || encBuffer == NULL)
 802f5bc:	2800      	cmp	r0, #0
 802f5be:	d01b      	beq.n	802f5f8 <SecureElementAesEncrypt+0x4a>
 802f5c0:	2f00      	cmp	r7, #0
 802f5c2:	d019      	beq.n	802f5f8 <SecureElementAesEncrypt+0x4a>
  if ((size % 16) != 0)
 802f5c4:	230f      	movs	r3, #15
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 802f5c6:	3403      	adds	r4, #3
  if ((size % 16) != 0)
 802f5c8:	4019      	ands	r1, r3
 802f5ca:	421e      	tst	r6, r3
 802f5cc:	d114      	bne.n	802f5f8 <SecureElementAesEncrypt+0x4a>
  memset1(aesContext.ksch, '\0', 240);
 802f5ce:	22f0      	movs	r2, #240	; 0xf0
 802f5d0:	a803      	add	r0, sp, #12
 802f5d2:	f7f4 fd21 	bl	8024018 <memset1>
  retval = GetKeyByID(keyID, &pItem);
 802f5d6:	0028      	movs	r0, r5
 802f5d8:	a902      	add	r1, sp, #8
 802f5da:	f7f4 ffd3 	bl	8024584 <GetKeyByID>
 802f5de:	1e04      	subs	r4, r0, #0
  if (retval == SECURE_ELEMENT_SUCCESS)
 802f5e0:	d10a      	bne.n	802f5f8 <SecureElementAesEncrypt+0x4a>
    lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 802f5e2:	9b02      	ldr	r3, [sp, #8]
 802f5e4:	2110      	movs	r1, #16
 802f5e6:	1c58      	adds	r0, r3, #1
 802f5e8:	aa03      	add	r2, sp, #12
 802f5ea:	f7f4 fdfd 	bl	80241e8 <lorawan_aes_set_key>
    while (size != 0)
 802f5ee:	0035      	movs	r5, r6
 802f5f0:	1b70      	subs	r0, r6, r5
 802f5f2:	b2c0      	uxtb	r0, r0
 802f5f4:	2d00      	cmp	r5, #0
 802f5f6:	d102      	bne.n	802f5fe <SecureElementAesEncrypt+0x50>
}
 802f5f8:	0020      	movs	r0, r4
 802f5fa:	b041      	add	sp, #260	; 0x104
 802f5fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 802f5fe:	9b01      	ldr	r3, [sp, #4]
 802f600:	1839      	adds	r1, r7, r0
 802f602:	aa03      	add	r2, sp, #12
 802f604:	1818      	adds	r0, r3, r0
 802f606:	3d10      	subs	r5, #16
 802f608:	f7f4 fe76 	bl	80242f8 <lorawan_aes_encrypt>
      size = size - 16;
 802f60c:	b2ad      	uxth	r5, r5
 802f60e:	e7ef      	b.n	802f5f0 <SecureElementAesEncrypt+0x42>

0802f610 <SecureElementSetKey>:
{
 802f610:	0003      	movs	r3, r0
 802f612:	b510      	push	{r4, lr}
    return SECURE_ELEMENT_ERROR_NPE;
 802f614:	2002      	movs	r0, #2
  if (key == NULL)
 802f616:	2900      	cmp	r1, #0
 802f618:	d002      	beq.n	802f620 <SecureElementSetKey+0x10>
 802f61a:	0018      	movs	r0, r3
 802f61c:	f7f5 f804 	bl	8024628 <SecureElementSetKey.part.0>
}
 802f620:	bd10      	pop	{r4, pc}

0802f622 <SecureElementDeriveAndStoreKey>:
{
 802f622:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 802f624:	000d      	movs	r5, r1
 802f626:	0016      	movs	r6, r2
 802f628:	001c      	movs	r4, r3
    return SECURE_ELEMENT_ERROR_NPE;
 802f62a:	2002      	movs	r0, #2
  if (input == NULL)
 802f62c:	2900      	cmp	r1, #0
 802f62e:	d016      	beq.n	802f65e <SecureElementDeriveAndStoreKey+0x3c>
  if (targetKeyID == MC_KE_KEY)
 802f630:	2b7f      	cmp	r3, #127	; 0x7f
 802f632:	d102      	bne.n	802f63a <SecureElementDeriveAndStoreKey+0x18>
      return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 802f634:	3001      	adds	r0, #1
    if (rootKeyID != MC_ROOT_KEY)
 802f636:	2a04      	cmp	r2, #4
 802f638:	d111      	bne.n	802f65e <SecureElementDeriveAndStoreKey+0x3c>
  uint8_t key[16] = { 0 };
 802f63a:	2100      	movs	r1, #0
 802f63c:	220c      	movs	r2, #12
 802f63e:	a801      	add	r0, sp, #4
 802f640:	9100      	str	r1, [sp, #0]
 802f642:	f001 fb96 	bl	8030d72 <memset>
  retval = SecureElementAesEncrypt(input, 16, rootKeyID, key);
 802f646:	466b      	mov	r3, sp
 802f648:	0032      	movs	r2, r6
 802f64a:	2110      	movs	r1, #16
 802f64c:	0028      	movs	r0, r5
 802f64e:	f7ff ffae 	bl	802f5ae <SecureElementAesEncrypt>
  if (retval != SECURE_ELEMENT_SUCCESS)
 802f652:	2800      	cmp	r0, #0
 802f654:	d103      	bne.n	802f65e <SecureElementDeriveAndStoreKey+0x3c>
  if (key == NULL)
 802f656:	4669      	mov	r1, sp
 802f658:	0020      	movs	r0, r4
 802f65a:	f7f4 ffe5 	bl	8024628 <SecureElementSetKey.part.0>
}
 802f65e:	b004      	add	sp, #16
 802f660:	bd70      	pop	{r4, r5, r6, pc}

0802f662 <SecureElementProcessJoinAccept>:
{
 802f662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f664:	001d      	movs	r5, r3
 802f666:	ab06      	add	r3, sp, #24
    return SECURE_ELEMENT_ERROR_NPE;
 802f668:	2002      	movs	r0, #2
{
 802f66a:	781c      	ldrb	r4, [r3, #0]
 802f66c:	9e07      	ldr	r6, [sp, #28]
  if ((encJoinAccept == NULL) || (decJoinAccept == NULL) || (versionMinor == NULL))
 802f66e:	2d00      	cmp	r5, #0
 802f670:	d037      	beq.n	802f6e2 <SecureElementProcessJoinAccept+0x80>
 802f672:	2e00      	cmp	r6, #0
 802f674:	d035      	beq.n	802f6e2 <SecureElementProcessJoinAccept+0x80>
 802f676:	9b08      	ldr	r3, [sp, #32]
 802f678:	2b00      	cmp	r3, #0
 802f67a:	d032      	beq.n	802f6e2 <SecureElementProcessJoinAccept+0x80>
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 802f67c:	3003      	adds	r0, #3
  if (encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE)
 802f67e:	2c21      	cmp	r4, #33	; 0x21
 802f680:	d82f      	bhi.n	802f6e2 <SecureElementProcessJoinAccept+0x80>
  memcpy1(decJoinAccept, encJoinAccept, encJoinAcceptSize);
 802f682:	0029      	movs	r1, r5
 802f684:	0030      	movs	r0, r6
 802f686:	b2a2      	uxth	r2, r4
 802f688:	f7ff fd53 	bl	802f132 <memcpy1>
  if (SecureElementAesEncrypt(encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 802f68c:	1e61      	subs	r1, r4, #1
 802f68e:	1c73      	adds	r3, r6, #1
 802f690:	2201      	movs	r2, #1
 802f692:	b289      	uxth	r1, r1
 802f694:	1c68      	adds	r0, r5, #1
 802f696:	f7ff ff8a 	bl	802f5ae <SecureElementAesEncrypt>
 802f69a:	b227      	sxth	r7, r4
 802f69c:	0003      	movs	r3, r0
    return SECURE_ELEMENT_FAIL_ENCRYPT;
 802f69e:	2007      	movs	r0, #7
  if (SecureElementAesEncrypt(encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 802f6a0:	2b00      	cmp	r3, #0
 802f6a2:	d11e      	bne.n	802f6e2 <SecureElementProcessJoinAccept+0x80>
  *versionMinor = ((decJoinAccept[11] & 0x80) == 0x80) ? 1 : 0;
 802f6a4:	7af3      	ldrb	r3, [r6, #11]
 802f6a6:	9a08      	ldr	r2, [sp, #32]
 802f6a8:	40c3      	lsrs	r3, r0
    return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 802f6aa:	3803      	subs	r0, #3
  *versionMinor = ((decJoinAccept[11] & 0x80) == 0x80) ? 1 : 0;
 802f6ac:	7013      	strb	r3, [r2, #0]
  if (*versionMinor == 0)
 802f6ae:	2b00      	cmp	r3, #0
 802f6b0:	d117      	bne.n	802f6e2 <SecureElementProcessJoinAccept+0x80>
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16);
 802f6b2:	1934      	adds	r4, r6, r4
 802f6b4:	1ea3      	subs	r3, r4, #2
 802f6b6:	781a      	ldrb	r2, [r3, #0]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24);
 802f6b8:	1e63      	subs	r3, r4, #1
 802f6ba:	781b      	ldrb	r3, [r3, #0]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16);
 802f6bc:	0412      	lsls	r2, r2, #16
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24);
 802f6be:	061b      	lsls	r3, r3, #24
 802f6c0:	431a      	orrs	r2, r3
  mic = ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0);
 802f6c2:	1f23      	subs	r3, r4, #4
 802f6c4:	781b      	ldrb	r3, [r3, #0]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8);
 802f6c6:	3c03      	subs	r4, #3
 802f6c8:	431a      	orrs	r2, r3
 802f6ca:	7823      	ldrb	r3, [r4, #0]
    if (SecureElementVerifyAesCmac(decJoinAccept, (encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE), mic, NWK_KEY) !=
 802f6cc:	1f39      	subs	r1, r7, #4
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8);
 802f6ce:	021b      	lsls	r3, r3, #8
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24);
 802f6d0:	431a      	orrs	r2, r3
    if (SecureElementVerifyAesCmac(decJoinAccept, (encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE), mic, NWK_KEY) !=
 802f6d2:	0030      	movs	r0, r6
 802f6d4:	2301      	movs	r3, #1
 802f6d6:	b289      	uxth	r1, r1
 802f6d8:	f7ff ff51 	bl	802f57e <SecureElementVerifyAesCmac>
 802f6dc:	1e43      	subs	r3, r0, #1
 802f6de:	4198      	sbcs	r0, r3
    return SECURE_ELEMENT_ERROR_NPE;
 802f6e0:	b2c0      	uxtb	r0, r0
}
 802f6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802f6e4 <SUBGRF_SetSyncWord>:
{
 802f6e4:	0001      	movs	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 802f6e6:	20d8      	movs	r0, #216	; 0xd8
{
 802f6e8:	b510      	push	{r4, lr}
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 802f6ea:	00c0      	lsls	r0, r0, #3
 802f6ec:	2208      	movs	r2, #8
 802f6ee:	f7f5 fb87 	bl	8024e00 <SUBGRF_WriteRegisters>
}
 802f6f2:	2000      	movs	r0, #0
 802f6f4:	bd10      	pop	{r4, pc}

0802f6f6 <SUBGRF_SetPayload>:
{
 802f6f6:	b510      	push	{r4, lr}
 802f6f8:	000a      	movs	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 802f6fa:	0001      	movs	r1, r0
 802f6fc:	2000      	movs	r0, #0
 802f6fe:	f7f5 fc5b 	bl	8024fb8 <SUBGRF_WriteBuffer>
}
 802f702:	bd10      	pop	{r4, pc}

0802f704 <SUBGRF_SendPayload>:
{
 802f704:	b510      	push	{r4, lr}
 802f706:	0014      	movs	r4, r2
    SUBGRF_SetPayload( payload, size );
 802f708:	f7ff fff5 	bl	802f6f6 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 802f70c:	0020      	movs	r0, r4
 802f70e:	f7f5 f819 	bl	8024744 <SUBGRF_SetTx>
}
 802f712:	bd10      	pop	{r4, pc}

0802f714 <SUBGRF_GetPayload>:
{
 802f714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802f716:	000c      	movs	r4, r1
    uint8_t offset = 0;
 802f718:	466b      	mov	r3, sp
 802f71a:	2700      	movs	r7, #0
{
 802f71c:	0005      	movs	r5, r0
    SUBGRF_GetRxBufferStatus( size, &offset );
 802f71e:	1dd9      	adds	r1, r3, #7
 802f720:	0020      	movs	r0, r4
{
 802f722:	0016      	movs	r6, r2
    uint8_t offset = 0;
 802f724:	71df      	strb	r7, [r3, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 802f726:	f7f5 fb45 	bl	8024db4 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 802f72a:	7822      	ldrb	r2, [r4, #0]
        return 1;
 802f72c:	2001      	movs	r0, #1
    if( *size > maxSize )
 802f72e:	42b2      	cmp	r2, r6
 802f730:	d805      	bhi.n	802f73e <SUBGRF_GetPayload+0x2a>
    SUBGRF_ReadBuffer( offset, buffer, *size );
 802f732:	466b      	mov	r3, sp
 802f734:	0029      	movs	r1, r5
 802f736:	79d8      	ldrb	r0, [r3, #7]
 802f738:	f7f5 fc48 	bl	8024fcc <SUBGRF_ReadBuffer>
    return 0;
 802f73c:	0038      	movs	r0, r7
}
 802f73e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0802f740 <SUBGRF_SetSwitch>:
{
 802f740:	0003      	movs	r3, r0
 802f742:	b510      	push	{r4, lr}
 802f744:	0008      	movs	r0, r1
    if (rxtx == RFSWITCH_TX)
 802f746:	2901      	cmp	r1, #1
 802f748:	d10c      	bne.n	802f764 <SUBGRF_SetSwitch+0x24>
        if (paSelect == RFO_LP)
 802f74a:	2b01      	cmp	r3, #1
 802f74c:	d106      	bne.n	802f75c <SUBGRF_SetSwitch+0x1c>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 802f74e:	3003      	adds	r0, #3
 802f750:	f7f5 fa54 	bl	8024bfc <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 802f754:	2002      	movs	r0, #2
    RBI_ConfigRFSwitch(state);
 802f756:	f7f4 fced 	bl	8024134 <RBI_ConfigRFSwitch>
}
 802f75a:	bd10      	pop	{r4, pc}
        if (paSelect == RFO_HP)
 802f75c:	2b02      	cmp	r3, #2
 802f75e:	d1fa      	bne.n	802f756 <SUBGRF_SetSwitch+0x16>
            state = RBI_SWITCH_RFO_HP;
 802f760:	2003      	movs	r0, #3
 802f762:	e7f8      	b.n	802f756 <SUBGRF_SetSwitch+0x16>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 802f764:	2001      	movs	r0, #1
 802f766:	e7f6      	b.n	802f756 <SUBGRF_SetSwitch+0x16>

0802f768 <SUBGRF_SetRfTxPower>:
{
 802f768:	b570      	push	{r4, r5, r6, lr}
 802f76a:	0005      	movs	r5, r0
    int32_t TxConfig = RBI_GetTxConfig();
 802f76c:	f7ff fd12 	bl	802f194 <RBI_GetTxConfig>
    switch (TxConfig)
 802f770:	2800      	cmp	r0, #0
 802f772:	d00a      	beq.n	802f78a <SUBGRF_SetRfTxPower+0x22>
 802f774:	1e84      	subs	r4, r0, #2
 802f776:	4263      	negs	r3, r4
 802f778:	415c      	adcs	r4, r3
 802f77a:	3401      	adds	r4, #1
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 802f77c:	0029      	movs	r1, r5
 802f77e:	0020      	movs	r0, r4
 802f780:	2202      	movs	r2, #2
 802f782:	f7f5 fac7 	bl	8024d14 <SUBGRF_SetTxParams>
}
 802f786:	0020      	movs	r0, r4
 802f788:	bd70      	pop	{r4, r5, r6, pc}
                paSelect = RFO_HP;
 802f78a:	2402      	movs	r4, #2
            if (power > 15)
 802f78c:	2d0f      	cmp	r5, #15
 802f78e:	dcf5      	bgt.n	802f77c <SUBGRF_SetRfTxPower+0x14>
                paSelect = RFO_LP;
 802f790:	3c01      	subs	r4, #1
 802f792:	e7f3      	b.n	802f77c <SUBGRF_SetRfTxPower+0x14>

0802f794 <SUBGRF_GetRadioWakeUpTime>:
{
 802f794:	b510      	push	{r4, lr}
    return ( uint32_t ) RBI_GetWakeUpTime();
 802f796:	f7ff fcff 	bl	802f198 <RBI_GetWakeUpTime>
}
 802f79a:	bd10      	pop	{r4, pc}

0802f79c <RadioCheckRfFrequency>:
}
 802f79c:	2001      	movs	r0, #1
 802f79e:	4770      	bx	lr

0802f7a0 <RadioRead>:
{
 802f7a0:	b510      	push	{r4, lr}
    return SUBGRF_ReadRegister(addr);
 802f7a2:	f7f5 fa1d 	bl	8024be0 <SUBGRF_ReadRegister>
}
 802f7a6:	bd10      	pop	{r4, pc}

0802f7a8 <RadioWrite>:
{
 802f7a8:	b510      	push	{r4, lr}
    SUBGRF_WriteRegister(addr, data );
 802f7aa:	f7f5 f957 	bl	8024a5c <SUBGRF_WriteRegister>
}
 802f7ae:	bd10      	pop	{r4, pc}

0802f7b0 <RadioTxCw>:
{
 802f7b0:	b510      	push	{r4, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 802f7b2:	f7ff ffd9 	bl	802f768 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX);
 802f7b6:	2101      	movs	r1, #1
 802f7b8:	f7ff ffc2 	bl	802f740 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave();
 802f7bc:	f7f5 f814 	bl	80247e8 <SUBGRF_SetTxContinuousWave>
}
 802f7c0:	bd10      	pop	{r4, pc}

0802f7c2 <RadioStandby>:
{
 802f7c2:	b510      	push	{r4, lr}
    SUBGRF_SetStandby( STDBY_RC );
 802f7c4:	2000      	movs	r0, #0
 802f7c6:	f7f4 ffa7 	bl	8024718 <SUBGRF_SetStandby>
}
 802f7ca:	bd10      	pop	{r4, pc}

0802f7cc <RadioGetWakeupTime>:
{
 802f7cc:	b510      	push	{r4, lr}
  return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 802f7ce:	f7ff ffe1 	bl	802f794 <SUBGRF_GetRadioWakeUpTime>
 802f7d2:	3003      	adds	r0, #3
}
 802f7d4:	bd10      	pop	{r4, pc}

0802f7d6 <RadioReadRegisters>:
{
 802f7d6:	b510      	push	{r4, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 802f7d8:	f7f5 fbae 	bl	8024f38 <SUBGRF_ReadRegisters>
}
 802f7dc:	bd10      	pop	{r4, pc}

0802f7de <RadioWriteRegisters>:
{
 802f7de:	b510      	push	{r4, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 802f7e0:	f7f5 fb0e 	bl	8024e00 <SUBGRF_WriteRegisters>
}
 802f7e4:	bd10      	pop	{r4, pc}

0802f7e6 <RadioRssi>:
{
 802f7e6:	b510      	push	{r4, lr}
    return SUBGRF_GetRssiInst( );
 802f7e8:	f7f5 f8ee 	bl	80249c8 <SUBGRF_GetRssiInst>
 802f7ec:	b200      	sxth	r0, r0
}
 802f7ee:	bd10      	pop	{r4, pc}

0802f7f0 <RadioSetChannel>:
{
 802f7f0:	b510      	push	{r4, lr}
    SUBGRF_SetRfFrequency( freq );
 802f7f2:	f7f5 f8b7 	bl	8024964 <SUBGRF_SetRfFrequency>
}
 802f7f6:	bd10      	pop	{r4, pc}

0802f7f8 <RadioStartCad>:
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED, IRQ_CAD_CLEAR | IRQ_CAD_DETECTED, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 802f7f8:	20c0      	movs	r0, #192	; 0xc0
 802f7fa:	2300      	movs	r3, #0
{
 802f7fc:	b510      	push	{r4, lr}
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED, IRQ_CAD_CLEAR | IRQ_CAD_DETECTED, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 802f7fe:	0040      	lsls	r0, r0, #1
 802f800:	001a      	movs	r2, r3
 802f802:	0001      	movs	r1, r0
 802f804:	f7f5 f884 	bl	8024910 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 802f808:	f7f4 ffde 	bl	80247c8 <SUBGRF_SetCad>
}
 802f80c:	bd10      	pop	{r4, pc}

0802f80e <RadioSleep>:
{
 802f80e:	b510      	push	{r4, lr}
    SUBGRF_SetSleep( params );
 802f810:	2004      	movs	r0, #4
 802f812:	f7f5 fa43 	bl	8024c9c <SUBGRF_SetSleep>
	return z_impl_k_sleep(timeout);
 802f816:	2009      	movs	r0, #9
 802f818:	2100      	movs	r1, #0
 802f81a:	f7fd fd35 	bl	802d288 <z_impl_k_sleep>
}
 802f81e:	bd10      	pop	{r4, pc}

0802f820 <EventMacNvmCtxChanged>:
{
 802f820:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 802f822:	2000      	movs	r0, #0
 802f824:	f7f6 fc74 	bl	8026110 <CallNvmCtxCallback>
}
 802f828:	bd10      	pop	{r4, pc}

0802f82a <EventRegionNvmCtxChanged>:
{
 802f82a:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 802f82c:	2001      	movs	r0, #1
 802f82e:	f7f6 fc6f 	bl	8026110 <CallNvmCtxCallback>
}
 802f832:	bd10      	pop	{r4, pc}

0802f834 <EventCryptoNvmCtxChanged>:
{
 802f834:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 802f836:	2002      	movs	r0, #2
 802f838:	f7f6 fc6a 	bl	8026110 <CallNvmCtxCallback>
}
 802f83c:	bd10      	pop	{r4, pc}

0802f83e <EventSecureElementNvmCtxChanged>:
{
 802f83e:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 802f840:	2003      	movs	r0, #3
 802f842:	f7f6 fc65 	bl	8026110 <CallNvmCtxCallback>
}
 802f846:	bd10      	pop	{r4, pc}

0802f848 <EventCommandsNvmCtxChanged>:
{
 802f848:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 802f84a:	2004      	movs	r0, #4
 802f84c:	f7f6 fc60 	bl	8026110 <CallNvmCtxCallback>
}
 802f850:	bd10      	pop	{r4, pc}

0802f852 <EventClassBNvmCtxChanged>:
{
 802f852:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 802f854:	2005      	movs	r0, #5
 802f856:	f7f6 fc5b 	bl	8026110 <CallNvmCtxCallback>
}
 802f85a:	bd10      	pop	{r4, pc}

0802f85c <EventConfirmQueueNvmCtxChanged>:
{
 802f85c:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 802f85e:	2006      	movs	r0, #6
 802f860:	f7f6 fc56 	bl	8026110 <CallNvmCtxCallback>
}
 802f864:	bd10      	pop	{r4, pc}

0802f866 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 802f866:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( adrNext->Version.Fields.Minor == 0 )
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 802f868:	2500      	movs	r5, #0
{
 802f86a:	b08d      	sub	sp, #52	; 0x34
 802f86c:	9104      	str	r1, [sp, #16]
 802f86e:	9205      	str	r2, [sp, #20]
 802f870:	001e      	movs	r6, r3
    if( adrNext->Version.Fields.Minor == 0 )
 802f872:	7883      	ldrb	r3, [r0, #2]
{
 802f874:	0004      	movs	r4, r0
    if( adrNext->Version.Fields.Minor == 0 )
 802f876:	42ab      	cmp	r3, r5
 802f878:	d12b      	bne.n	802f8d2 <LoRaMacAdrCalcNext+0x6c>
    int8_t datarate = adrNext->Datarate;
 802f87a:	2310      	movs	r3, #16
 802f87c:	56c3      	ldrsb	r3, [r0, r3]
 802f87e:	9301      	str	r3, [sp, #4]
    int8_t txPower = adrNext->TxPower;
 802f880:	2311      	movs	r3, #17
 802f882:	56c3      	ldrsb	r3, [r0, r3]
    int8_t datarate = adrNext->Datarate;
 802f884:	9f01      	ldr	r7, [sp, #4]
    int8_t txPower = adrNext->TxPower;
 802f886:	9303      	str	r3, [sp, #12]
    *adrAckCounter = adrNext->AdrAckCounter;
 802f888:	6883      	ldr	r3, [r0, #8]
 802f88a:	6033      	str	r3, [r6, #0]
    if( adrNext->AdrEnabled == true )
 802f88c:	7945      	ldrb	r5, [r0, #5]
 802f88e:	2d00      	cmp	r5, #0
 802f890:	d01a      	beq.n	802f8c8 <LoRaMacAdrCalcNext+0x62>
        getPhy.Attribute = PHY_MIN_TX_DR;
 802f892:	2302      	movs	r3, #2
 802f894:	aa06      	add	r2, sp, #24
 802f896:	7213      	strb	r3, [r2, #8]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 802f898:	7c83      	ldrb	r3, [r0, #18]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 802f89a:	a908      	add	r1, sp, #32
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 802f89c:	7293      	strb	r3, [r2, #10]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 802f89e:	7cc0      	ldrb	r0, [r0, #19]
 802f8a0:	f000 fa84 	bl	802fdac <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 802f8a4:	b243      	sxtb	r3, r0
 802f8a6:	9302      	str	r3, [sp, #8]
        datarate = MAX( datarate, minTxDatarate );
 802f8a8:	466b      	mov	r3, sp
 802f8aa:	9a02      	ldr	r2, [sp, #8]
 802f8ac:	791f      	ldrb	r7, [r3, #4]
 802f8ae:	9b01      	ldr	r3, [sp, #4]
 802f8b0:	4293      	cmp	r3, r2
 802f8b2:	da01      	bge.n	802f8b8 <LoRaMacAdrCalcNext+0x52>
 802f8b4:	466b      	mov	r3, sp
 802f8b6:	7a1f      	ldrb	r7, [r3, #8]
        if( datarate == minTxDatarate )
 802f8b8:	9b01      	ldr	r3, [sp, #4]
 802f8ba:	9a02      	ldr	r2, [sp, #8]
        datarate = MAX( datarate, minTxDatarate );
 802f8bc:	b27f      	sxtb	r7, r7
        if( datarate == minTxDatarate )
 802f8be:	4293      	cmp	r3, r2
 802f8c0:	dc0a      	bgt.n	802f8d8 <LoRaMacAdrCalcNext+0x72>
            *adrAckCounter = 0;
 802f8c2:	2300      	movs	r3, #0
 802f8c4:	6033      	str	r3, [r6, #0]
                        adrAckReq = false;
 802f8c6:	2500      	movs	r5, #0
    *drOut = datarate;
 802f8c8:	9b04      	ldr	r3, [sp, #16]
    *txPowOut = txPower;
 802f8ca:	9a03      	ldr	r2, [sp, #12]
    *drOut = datarate;
 802f8cc:	701f      	strb	r7, [r3, #0]
    *txPowOut = txPower;
 802f8ce:	9b05      	ldr	r3, [sp, #20]
 802f8d0:	701a      	strb	r2, [r3, #0]
}
 802f8d2:	0028      	movs	r0, r5
 802f8d4:	b00d      	add	sp, #52	; 0x34
 802f8d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 802f8d8:	2500      	movs	r5, #0
 802f8da:	89a1      	ldrh	r1, [r4, #12]
 802f8dc:	68a2      	ldr	r2, [r4, #8]
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 802f8de:	89e3      	ldrh	r3, [r4, #14]
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 802f8e0:	428a      	cmp	r2, r1
 802f8e2:	416d      	adcs	r5, r5
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 802f8e4:	185b      	adds	r3, r3, r1
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 802f8e6:	b2ed      	uxtb	r5, r5
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 802f8e8:	429a      	cmp	r2, r3
 802f8ea:	d3ed      	bcc.n	802f8c8 <LoRaMacAdrCalcNext+0x62>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 802f8ec:	2308      	movs	r3, #8
 802f8ee:	ae08      	add	r6, sp, #32
 802f8f0:	7033      	strb	r3, [r6, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 802f8f2:	0031      	movs	r1, r6
 802f8f4:	7ce0      	ldrb	r0, [r4, #19]
 802f8f6:	f000 fa59 	bl	802fdac <RegionGetPhyParam>
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 802f8fa:	89e1      	ldrh	r1, [r4, #14]
                txPower = phyParam.Value;
 802f8fc:	b243      	sxtb	r3, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 802f8fe:	68a0      	ldr	r0, [r4, #8]
                txPower = phyParam.Value;
 802f900:	9303      	str	r3, [sp, #12]
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 802f902:	f7f0 fc8b 	bl	802021c <__aeabi_uidivmod>
 802f906:	2901      	cmp	r1, #1
 802f908:	d1de      	bne.n	802f8c8 <LoRaMacAdrCalcNext+0x62>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 802f90a:	2322      	movs	r3, #34	; 0x22
                    getPhy.Datarate = datarate;
 802f90c:	7077      	strb	r7, [r6, #1]
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 802f90e:	7033      	strb	r3, [r6, #0]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 802f910:	7ca3      	ldrb	r3, [r4, #18]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 802f912:	0031      	movs	r1, r6
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 802f914:	70b3      	strb	r3, [r6, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 802f916:	7ce0      	ldrb	r0, [r4, #19]
 802f918:	f000 fa48 	bl	802fdac <RegionGetPhyParam>
                    if( datarate == minTxDatarate )
 802f91c:	9b02      	ldr	r3, [sp, #8]
                    datarate = phyParam.Value;
 802f91e:	b247      	sxtb	r7, r0
                    if( datarate == minTxDatarate )
 802f920:	42bb      	cmp	r3, r7
 802f922:	d1d1      	bne.n	802f8c8 <LoRaMacAdrCalcNext+0x62>
                        if( adrNext->UpdateChanMask == true )
 802f924:	7925      	ldrb	r5, [r4, #4]
 802f926:	2d00      	cmp	r5, #0
 802f928:	d0ce      	beq.n	802f8c8 <LoRaMacAdrCalcNext+0x62>
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 802f92a:	2302      	movs	r3, #2
 802f92c:	a90a      	add	r1, sp, #40	; 0x28
 802f92e:	710b      	strb	r3, [r1, #4]
                            RegionInitDefaults( adrNext->Region, &params );
 802f930:	7ce0      	ldrb	r0, [r4, #19]
 802f932:	f000 fa4e 	bl	802fdd2 <RegionInitDefaults>
 802f936:	e7c6      	b.n	802f8c6 <LoRaMacAdrCalcNext+0x60>

0802f938 <ComputePingOffset>:
{
 802f938:	b570      	push	{r4, r5, r6, lr}
 802f93a:	b088      	sub	sp, #32
 802f93c:	0005      	movs	r5, r0
 802f93e:	0014      	movs	r4, r2
    memset1( buffer, 0, 16 );
 802f940:	4668      	mov	r0, sp
 802f942:	2210      	movs	r2, #16
 802f944:	2100      	movs	r1, #0
{
 802f946:	001e      	movs	r6, r3
    memset1( buffer, 0, 16 );
 802f948:	f7f4 fb66 	bl	8024018 <memset1>
    memset1( cipher, 0, 16 );
 802f94c:	a804      	add	r0, sp, #16
 802f94e:	2210      	movs	r2, #16
 802f950:	2100      	movs	r1, #0
 802f952:	f7f4 fb61 	bl	8024018 <memset1>
    buffer[0] = ( time ) & 0xFF;
 802f956:	466b      	mov	r3, sp
    buffer[1] = ( time >> 8 ) & 0xFF;
 802f958:	466a      	mov	r2, sp
    buffer[0] = ( time ) & 0xFF;
 802f95a:	701d      	strb	r5, [r3, #0]
    buffer[1] = ( time >> 8 ) & 0xFF;
 802f95c:	0a2b      	lsrs	r3, r5, #8
 802f95e:	7053      	strb	r3, [r2, #1]
    buffer[2] = ( time >> 16 ) & 0xFF;
 802f960:	0c2b      	lsrs	r3, r5, #16
 802f962:	7093      	strb	r3, [r2, #2]
    buffer[5] = ( address >> 8 ) & 0xFF;
 802f964:	0a23      	lsrs	r3, r4, #8
    buffer[4] = ( address ) & 0xFF;
 802f966:	7114      	strb	r4, [r2, #4]
    buffer[5] = ( address >> 8 ) & 0xFF;
 802f968:	7153      	strb	r3, [r2, #5]
    buffer[3] = ( time >> 24 ) & 0xFF;
 802f96a:	0e2d      	lsrs	r5, r5, #24
    buffer[6] = ( address >> 16 ) & 0xFF;
 802f96c:	0c23      	lsrs	r3, r4, #16
    buffer[7] = ( address >> 24 ) & 0xFF;
 802f96e:	0e24      	lsrs	r4, r4, #24
    buffer[3] = ( time >> 24 ) & 0xFF;
 802f970:	70d5      	strb	r5, [r2, #3]
    buffer[6] = ( address >> 16 ) & 0xFF;
 802f972:	7193      	strb	r3, [r2, #6]
    buffer[7] = ( address >> 24 ) & 0xFF;
 802f974:	71d4      	strb	r4, [r2, #7]
    SecureElementAesEncrypt( buffer, 16, SLOT_RAND_ZERO_KEY, cipher );
 802f976:	ab04      	add	r3, sp, #16
 802f978:	2283      	movs	r2, #131	; 0x83
 802f97a:	2110      	movs	r1, #16
 802f97c:	4668      	mov	r0, sp
 802f97e:	f7ff fe16 	bl	802f5ae <SecureElementAesEncrypt>
    result = ( ( ( uint32_t ) cipher[0] ) + ( ( ( uint32_t ) cipher[1] ) * 256 ) );
 802f982:	466b      	mov	r3, sp
 802f984:	7c58      	ldrb	r0, [r3, #17]
 802f986:	7c1b      	ldrb	r3, [r3, #16]
 802f988:	0200      	lsls	r0, r0, #8
    *pingOffset = ( uint16_t )( result % pingPeriod );
 802f98a:	0031      	movs	r1, r6
    result = ( ( ( uint32_t ) cipher[0] ) + ( ( ( uint32_t ) cipher[1] ) * 256 ) );
 802f98c:	18c0      	adds	r0, r0, r3
    *pingOffset = ( uint16_t )( result % pingPeriod );
 802f98e:	f7f0 fc45 	bl	802021c <__aeabi_uidivmod>
 802f992:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802f994:	8019      	strh	r1, [r3, #0]
}
 802f996:	b008      	add	sp, #32
 802f998:	bd70      	pop	{r4, r5, r6, pc}

0802f99a <DummyCB>:
}
 802f99a:	4770      	bx	lr

0802f99c <PayloadEncrypt>:
{
 802f99c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802f99e:	b08d      	sub	sp, #52	; 0x34
 802f9a0:	001d      	movs	r5, r3
 802f9a2:	ab12      	add	r3, sp, #72	; 0x48
 802f9a4:	781b      	ldrb	r3, [r3, #0]
 802f9a6:	9001      	str	r0, [sp, #4]
 802f9a8:	9302      	str	r3, [sp, #8]
    if( buffer == 0 )
 802f9aa:	9b01      	ldr	r3, [sp, #4]
{
 802f9ac:	000f      	movs	r7, r1
        return LORAMAC_CRYPTO_ERROR_NPE;
 802f9ae:	200a      	movs	r0, #10
{
 802f9b0:	9203      	str	r2, [sp, #12]
    if( buffer == 0 )
 802f9b2:	2b00      	cmp	r3, #0
 802f9b4:	d02b      	beq.n	802fa0e <PayloadEncrypt+0x72>
    uint8_t sBlock[16] = { 0 };
 802f9b6:	2600      	movs	r6, #0
 802f9b8:	220c      	movs	r2, #12
 802f9ba:	0031      	movs	r1, r6
 802f9bc:	a805      	add	r0, sp, #20
 802f9be:	9604      	str	r6, [sp, #16]
 802f9c0:	f001 f9d7 	bl	8030d72 <memset>
    uint8_t aBlock[16] = { 0 };
 802f9c4:	220c      	movs	r2, #12
 802f9c6:	0031      	movs	r1, r6
 802f9c8:	a809      	add	r0, sp, #36	; 0x24
 802f9ca:	9608      	str	r6, [sp, #32]
 802f9cc:	f001 f9d1 	bl	8030d72 <memset>
    aBlock[0] = 0x01;
 802f9d0:	2201      	movs	r2, #1
    aBlock[5] = dir;
 802f9d2:	9b02      	ldr	r3, [sp, #8]
    uint8_t aBlock[16] = { 0 };
 802f9d4:	ac08      	add	r4, sp, #32
    aBlock[5] = dir;
 802f9d6:	7163      	strb	r3, [r4, #5]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 802f9d8:	0a2b      	lsrs	r3, r5, #8
 802f9da:	71e3      	strb	r3, [r4, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 802f9dc:	0c2b      	lsrs	r3, r5, #16
 802f9de:	7223      	strb	r3, [r4, #8]
    aBlock[10] = frameCounter & 0xFF;
 802f9e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[6] = address & 0xFF;
 802f9e2:	71a5      	strb	r5, [r4, #6]
    aBlock[10] = frameCounter & 0xFF;
 802f9e4:	72a3      	strb	r3, [r4, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 802f9e6:	0a1b      	lsrs	r3, r3, #8
 802f9e8:	72e3      	strb	r3, [r4, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 802f9ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[9] = ( address >> 24 ) & 0xFF;
 802f9ec:	0e2d      	lsrs	r5, r5, #24
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 802f9ee:	0c1b      	lsrs	r3, r3, #16
 802f9f0:	7323      	strb	r3, [r4, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 802f9f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[0] = 0x01;
 802f9f4:	7022      	strb	r2, [r4, #0]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 802f9f6:	0e1b      	lsrs	r3, r3, #24
    aBlock[9] = ( address >> 24 ) & 0xFF;
 802f9f8:	7265      	strb	r5, [r4, #9]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 802f9fa:	7363      	strb	r3, [r4, #13]
    uint16_t ctr = 1;
 802f9fc:	0014      	movs	r4, r2
 802f9fe:	b2e2      	uxtb	r2, r4
 802fa00:	0113      	lsls	r3, r2, #4
 802fa02:	3b10      	subs	r3, #16
 802fa04:	b2db      	uxtb	r3, r3
 802fa06:	9302      	str	r3, [sp, #8]
    while( size > 0 )
 802fa08:	2f00      	cmp	r7, #0
 802fa0a:	dc02      	bgt.n	802fa12 <PayloadEncrypt+0x76>
    return LORAMAC_CRYPTO_SUCCESS;
 802fa0c:	2000      	movs	r0, #0
}
 802fa0e:	b00d      	add	sp, #52	; 0x34
 802fa10:	bdf0      	pop	{r4, r5, r6, r7, pc}
        aBlock[15] = ctr & 0xFF;
 802fa12:	a808      	add	r0, sp, #32
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 802fa14:	ad04      	add	r5, sp, #16
        aBlock[15] = ctr & 0xFF;
 802fa16:	73c2      	strb	r2, [r0, #15]
        ctr++;
 802fa18:	3401      	adds	r4, #1
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 802fa1a:	002b      	movs	r3, r5
 802fa1c:	2110      	movs	r1, #16
 802fa1e:	9a03      	ldr	r2, [sp, #12]
        ctr++;
 802fa20:	b2a4      	uxth	r4, r4
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 802fa22:	f7ff fdc4 	bl	802f5ae <SecureElementAesEncrypt>
 802fa26:	2800      	cmp	r0, #0
 802fa28:	d115      	bne.n	802fa56 <PayloadEncrypt+0xba>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 802fa2a:	1c39      	adds	r1, r7, #0
 802fa2c:	1c0b      	adds	r3, r1, #0
 802fa2e:	2f10      	cmp	r7, #16
 802fa30:	dd00      	ble.n	802fa34 <PayloadEncrypt+0x98>
 802fa32:	2310      	movs	r3, #16
 802fa34:	b21b      	sxth	r3, r3
 802fa36:	4298      	cmp	r0, r3
 802fa38:	db02      	blt.n	802fa40 <PayloadEncrypt+0xa4>
        size -= 16;
 802fa3a:	3f10      	subs	r7, #16
 802fa3c:	b23f      	sxth	r7, r7
        bufferIndex += 16;
 802fa3e:	e7de      	b.n	802f9fe <PayloadEncrypt+0x62>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 802fa40:	9b02      	ldr	r3, [sp, #8]
 802fa42:	5c2e      	ldrb	r6, [r5, r0]
 802fa44:	181a      	adds	r2, r3, r0
 802fa46:	9b01      	ldr	r3, [sp, #4]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 802fa48:	3001      	adds	r0, #1
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 802fa4a:	5c9b      	ldrb	r3, [r3, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 802fa4c:	b2c0      	uxtb	r0, r0
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 802fa4e:	4073      	eors	r3, r6
 802fa50:	9e01      	ldr	r6, [sp, #4]
 802fa52:	54b3      	strb	r3, [r6, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 802fa54:	e7ea      	b.n	802fa2c <PayloadEncrypt+0x90>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 802fa56:	200f      	movs	r0, #15
 802fa58:	e7d9      	b.n	802fa0e <PayloadEncrypt+0x72>

0802fa5a <VerifyCmacB0.constprop.0.isra.0>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 802fa5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802fa5c:	b0c7      	sub	sp, #284	; 0x11c
 802fa5e:	0007      	movs	r7, r0
 802fa60:	000c      	movs	r4, r1
 802fa62:	001d      	movs	r5, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 802fa64:	200a      	movs	r0, #10
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 802fa66:	9e4c      	ldr	r6, [sp, #304]	; 0x130
 802fa68:	9201      	str	r2, [sp, #4]
    if( msg == 0 )
 802fa6a:	2f00      	cmp	r7, #0
 802fa6c:	d037      	beq.n	802fade <VerifyCmacB0.constprop.0.isra.0+0x84>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 802fa6e:	2380      	movs	r3, #128	; 0x80
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 802fa70:	3004      	adds	r0, #4
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 802fa72:	005b      	lsls	r3, r3, #1
 802fa74:	4299      	cmp	r1, r3
 802fa76:	d832      	bhi.n	802fade <VerifyCmacB0.constprop.0.isra.0+0x84>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 802fa78:	2288      	movs	r2, #136	; 0x88
 802fa7a:	2100      	movs	r1, #0
 802fa7c:	0052      	lsls	r2, r2, #1
 802fa7e:	a802      	add	r0, sp, #8
 802fa80:	f7f4 faca 	bl	8024018 <memset1>
    b0[0] = 0x49;
 802fa84:	2349      	movs	r3, #73	; 0x49
 802fa86:	aa02      	add	r2, sp, #8
 802fa88:	7013      	strb	r3, [r2, #0]
        b0[1] = 0x00;
 802fa8a:	2300      	movs	r3, #0
 802fa8c:	7053      	strb	r3, [r2, #1]
        b0[2] = 0x00;
 802fa8e:	7093      	strb	r3, [r2, #2]
    b0[3] = 0x00;
 802fa90:	70d3      	strb	r3, [r2, #3]
    b0[4] = 0x00;
 802fa92:	7113      	strb	r3, [r2, #4]
    b0[5] = dir;
 802fa94:	2201      	movs	r2, #1
 802fa96:	a902      	add	r1, sp, #8
 802fa98:	714a      	strb	r2, [r1, #5]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 802fa9a:	0a2a      	lsrs	r2, r5, #8
 802fa9c:	71ca      	strb	r2, [r1, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 802fa9e:	0c2a      	lsrs	r2, r5, #16
 802faa0:	720a      	strb	r2, [r1, #8]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 802faa2:	0a32      	lsrs	r2, r6, #8
    b0[6] = devAddr & 0xFF;
 802faa4:	718d      	strb	r5, [r1, #6]
    b0[10] = fCnt & 0xFF;
 802faa6:	728e      	strb	r6, [r1, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 802faa8:	72ca      	strb	r2, [r1, #11]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 802faaa:	0e2d      	lsrs	r5, r5, #24
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 802faac:	0c32      	lsrs	r2, r6, #16
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 802faae:	0e36      	lsrs	r6, r6, #24
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 802fab0:	730a      	strb	r2, [r1, #12]
    b0[14] = 0x00;
 802fab2:	738b      	strb	r3, [r1, #14]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 802fab4:	0022      	movs	r2, r4
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 802fab6:	724d      	strb	r5, [r1, #9]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 802fab8:	734e      	strb	r6, [r1, #13]
    b0[15] = msgLen & 0xFF;
 802faba:	73cc      	strb	r4, [r1, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 802fabc:	a806      	add	r0, sp, #24
 802fabe:	0039      	movs	r1, r7
 802fac0:	f7ff fb37 	bl	802f132 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 802fac4:	0021      	movs	r1, r4
 802fac6:	3110      	adds	r1, #16
 802fac8:	9b01      	ldr	r3, [sp, #4]
 802faca:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 802facc:	b289      	uxth	r1, r1
 802face:	a802      	add	r0, sp, #8
 802fad0:	f7ff fd55 	bl	802f57e <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 802fad4:	2800      	cmp	r0, #0
 802fad6:	d002      	beq.n	802fade <VerifyCmacB0.constprop.0.isra.0+0x84>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 802fad8:	2801      	cmp	r0, #1
 802fada:	d000      	beq.n	802fade <VerifyCmacB0.constprop.0.isra.0+0x84>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 802fadc:	200f      	movs	r0, #15
}
 802fade:	b047      	add	sp, #284	; 0x11c
 802fae0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802fae2 <LoRaMacCryptoSetKey>:
{
 802fae2:	b570      	push	{r4, r5, r6, lr}
 802fae4:	0005      	movs	r5, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 802fae6:	f7ff fd93 	bl	802f610 <SecureElementSetKey>
 802faea:	1e04      	subs	r4, r0, #0
 802faec:	d109      	bne.n	802fb02 <LoRaMacCryptoSetKey+0x20>
    if( keyID == APP_KEY )
 802faee:	2d00      	cmp	r5, #0
 802faf0:	d108      	bne.n	802fb04 <LoRaMacCryptoSetKey+0x22>
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 802faf2:	f7fa fd39 	bl	802a568 <LoRaMacCryptoDeriveMcRootKey>
 802faf6:	2800      	cmp	r0, #0
 802faf8:	d103      	bne.n	802fb02 <LoRaMacCryptoSetKey+0x20>
    if( keyID != MC_ROOT_KEY )
 802fafa:	f7fa fb59 	bl	802a1b0 <LoRaMacCryptoDeriveMcKEKey.part.0>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 802fafe:	2800      	cmp	r0, #0
 802fb00:	d000      	beq.n	802fb04 <LoRaMacCryptoSetKey+0x22>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 802fb02:	240f      	movs	r4, #15
}
 802fb04:	0020      	movs	r0, r4
 802fb06:	bd70      	pop	{r4, r5, r6, pc}

0802fb08 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 802fb08:	b570      	push	{r4, r5, r6, lr}
 802fb0a:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 802fb0c:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 802fb0e:	2c00      	cmp	r4, #0
 802fb10:	d040      	beq.n	802fb94 <LoRaMacParserJoinAccept+0x8c>
 802fb12:	6821      	ldr	r1, [r4, #0]
 802fb14:	2900      	cmp	r1, #0
 802fb16:	d03d      	beq.n	802fb94 <LoRaMacParserJoinAccept+0x8c>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 802fb18:	780b      	ldrb	r3, [r1, #0]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 802fb1a:	2203      	movs	r2, #3
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 802fb1c:	7163      	strb	r3, [r4, #5]
    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 802fb1e:	3101      	adds	r1, #1
 802fb20:	1da0      	adds	r0, r4, #6
 802fb22:	f7ff fb06 	bl	802f132 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 802fb26:	0020      	movs	r0, r4
 802fb28:	6823      	ldr	r3, [r4, #0]
 802fb2a:	2203      	movs	r2, #3
 802fb2c:	1d19      	adds	r1, r3, #4
 802fb2e:	3009      	adds	r0, #9
 802fb30:	f7ff faff 	bl	802f132 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 802fb34:	6821      	ldr	r1, [r4, #0]
 802fb36:	79c8      	ldrb	r0, [r1, #7]
 802fb38:	60e0      	str	r0, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 802fb3a:	7a0a      	ldrb	r2, [r1, #8]
 802fb3c:	0212      	lsls	r2, r2, #8
 802fb3e:	4310      	orrs	r0, r2
 802fb40:	60e0      	str	r0, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 802fb42:	7a4b      	ldrb	r3, [r1, #9]
 802fb44:	041b      	lsls	r3, r3, #16
 802fb46:	4303      	orrs	r3, r0
 802fb48:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 802fb4a:	7a8a      	ldrb	r2, [r1, #10]
 802fb4c:	0612      	lsls	r2, r2, #24
 802fb4e:	4313      	orrs	r3, r2
 802fb50:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 802fb52:	7acb      	ldrb	r3, [r1, #11]
 802fb54:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 802fb56:	7b0b      	ldrb	r3, [r1, #12]
 802fb58:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 802fb5a:	7923      	ldrb	r3, [r4, #4]
 802fb5c:	2b21      	cmp	r3, #33	; 0x21
 802fb5e:	d11a      	bne.n	802fb96 <LoRaMacParserJoinAccept+0x8e>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 802fb60:	0020      	movs	r0, r4
 802fb62:	2210      	movs	r2, #16
 802fb64:	310d      	adds	r1, #13
 802fb66:	3012      	adds	r0, #18
 802fb68:	f7ff fae3 	bl	802f132 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 802fb6c:	231d      	movs	r3, #29
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 802fb6e:	6825      	ldr	r5, [r4, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 802fb70:	1c5a      	adds	r2, r3, #1
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 802fb72:	5ce8      	ldrb	r0, [r5, r3]
 802fb74:	6260      	str	r0, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 802fb76:	5ca9      	ldrb	r1, [r5, r2]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 802fb78:	1c9a      	adds	r2, r3, #2
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 802fb7a:	0209      	lsls	r1, r1, #8
 802fb7c:	4308      	orrs	r0, r1
 802fb7e:	6260      	str	r0, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 802fb80:	5caa      	ldrb	r2, [r5, r2]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 802fb82:	3303      	adds	r3, #3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 802fb84:	0412      	lsls	r2, r2, #16
 802fb86:	4302      	orrs	r2, r0

    return LORAMAC_PARSER_SUCCESS;
 802fb88:	2000      	movs	r0, #0
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 802fb8a:	6262      	str	r2, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 802fb8c:	5ceb      	ldrb	r3, [r5, r3]
 802fb8e:	061b      	lsls	r3, r3, #24
 802fb90:	431a      	orrs	r2, r3
 802fb92:	6262      	str	r2, [r4, #36]	; 0x24
}
 802fb94:	bd70      	pop	{r4, r5, r6, pc}
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 802fb96:	3b11      	subs	r3, #17
        return LORAMAC_PARSER_FAIL;
 802fb98:	2001      	movs	r0, #1
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 802fb9a:	2b00      	cmp	r3, #0
 802fb9c:	dcfa      	bgt.n	802fb94 <LoRaMacParserJoinAccept+0x8c>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 802fb9e:	230d      	movs	r3, #13
 802fba0:	e7e5      	b.n	802fb6e <LoRaMacParserJoinAccept+0x66>

0802fba2 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 802fba2:	b570      	push	{r4, r5, r6, lr}
 802fba4:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 802fba6:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 802fba8:	2c00      	cmp	r4, #0
 802fbaa:	d055      	beq.n	802fc58 <LoRaMacParserData+0xb6>
 802fbac:	6821      	ldr	r1, [r4, #0]
 802fbae:	2900      	cmp	r1, #0
 802fbb0:	d052      	beq.n	802fc58 <LoRaMacParserData+0xb6>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 802fbb2:	780b      	ldrb	r3, [r1, #0]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 802fbb4:	1c65      	adds	r5, r4, #1
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 802fbb6:	7163      	strb	r3, [r4, #5]
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 802fbb8:	7848      	ldrb	r0, [r1, #1]
 802fbba:	60a0      	str	r0, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 802fbbc:	788a      	ldrb	r2, [r1, #2]
 802fbbe:	0212      	lsls	r2, r2, #8
 802fbc0:	4310      	orrs	r0, r2
 802fbc2:	60a0      	str	r0, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 802fbc4:	78cb      	ldrb	r3, [r1, #3]
 802fbc6:	041b      	lsls	r3, r3, #16
 802fbc8:	4303      	orrs	r3, r0
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 802fbca:	0020      	movs	r0, r4
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 802fbcc:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 802fbce:	790a      	ldrb	r2, [r1, #4]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 802fbd0:	3010      	adds	r0, #16
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 802fbd2:	0612      	lsls	r2, r2, #24
 802fbd4:	4313      	orrs	r3, r2
 802fbd6:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 802fbd8:	794b      	ldrb	r3, [r1, #5]
 802fbda:	7323      	strb	r3, [r4, #12]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 802fbdc:	798b      	ldrb	r3, [r1, #6]
 802fbde:	81e3      	strh	r3, [r4, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 802fbe0:	79ca      	ldrb	r2, [r1, #7]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 802fbe2:	3108      	adds	r1, #8
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 802fbe4:	0212      	lsls	r2, r2, #8
 802fbe6:	4313      	orrs	r3, r2
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 802fbe8:	7b22      	ldrb	r2, [r4, #12]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 802fbea:	81e3      	strh	r3, [r4, #14]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 802fbec:	0712      	lsls	r2, r2, #28
 802fbee:	0f12      	lsrs	r2, r2, #28
 802fbf0:	f7ff fa9f 	bl	802f132 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 802fbf4:	7b21      	ldrb	r1, [r4, #12]
    macMsg->FRMPayloadSize = 0;
 802fbf6:	0020      	movs	r0, r4
    macMsg->FPort = 0;
 802fbf8:	2300      	movs	r3, #0
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 802fbfa:	0709      	lsls	r1, r1, #28
 802fbfc:	0f09      	lsrs	r1, r1, #28
 802fbfe:	000e      	movs	r6, r1
    macMsg->FRMPayloadSize = 0;
 802fc00:	3028      	adds	r0, #40	; 0x28
    macMsg->FPort = 0;
 802fc02:	77eb      	strb	r3, [r5, #31]
    macMsg->FRMPayloadSize = 0;
 802fc04:	7003      	strb	r3, [r0, #0]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 802fc06:	7922      	ldrb	r2, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 802fc08:	3608      	adds	r6, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 802fc0a:	1f13      	subs	r3, r2, #4
 802fc0c:	1b9b      	subs	r3, r3, r6
 802fc0e:	2b00      	cmp	r3, #0
 802fc10:	dd0c      	ble.n	802fc2c <LoRaMacParserData+0x8a>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 802fc12:	6823      	ldr	r3, [r4, #0]
 802fc14:	3109      	adds	r1, #9

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 802fc16:	1a52      	subs	r2, r2, r1
        macMsg->FPort = macMsg->Buffer[bufItr++];
 802fc18:	5d9e      	ldrb	r6, [r3, r6]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 802fc1a:	3a04      	subs	r2, #4
 802fc1c:	b2d2      	uxtb	r2, r2
        macMsg->FPort = macMsg->Buffer[bufItr++];
 802fc1e:	77ee      	strb	r6, [r5, #31]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 802fc20:	7002      	strb	r2, [r0, #0]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 802fc22:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802fc24:	b292      	uxth	r2, r2
 802fc26:	1859      	adds	r1, r3, r1
 802fc28:	f7ff fa83 	bl	802f132 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 802fc2c:	6822      	ldr	r2, [r4, #0]
 802fc2e:	7923      	ldrb	r3, [r4, #4]
 802fc30:	18d3      	adds	r3, r2, r3
 802fc32:	1f1a      	subs	r2, r3, #4
 802fc34:	7810      	ldrb	r0, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 802fc36:	1eda      	subs	r2, r3, #3
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 802fc38:	62e0      	str	r0, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 802fc3a:	7811      	ldrb	r1, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 802fc3c:	1e9a      	subs	r2, r3, #2
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 802fc3e:	0209      	lsls	r1, r1, #8
 802fc40:	4308      	orrs	r0, r1
 802fc42:	62e0      	str	r0, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 802fc44:	7812      	ldrb	r2, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 802fc46:	3b01      	subs	r3, #1
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 802fc48:	0412      	lsls	r2, r2, #16
 802fc4a:	4302      	orrs	r2, r0

    return LORAMAC_PARSER_SUCCESS;
 802fc4c:	2000      	movs	r0, #0
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 802fc4e:	62e2      	str	r2, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 802fc50:	781b      	ldrb	r3, [r3, #0]
 802fc52:	061b      	lsls	r3, r3, #24
 802fc54:	431a      	orrs	r2, r3
 802fc56:	62e2      	str	r2, [r4, #44]	; 0x2c
}
 802fc58:	bd70      	pop	{r4, r5, r6, pc}

0802fc5a <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 802fc5a:	b510      	push	{r4, lr}
 802fc5c:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 802fc5e:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 802fc60:	2c00      	cmp	r4, #0
 802fc62:	d02e      	beq.n	802fcc2 <LoRaMacSerializerJoinRequest+0x68>
 802fc64:	6823      	ldr	r3, [r4, #0]
 802fc66:	2b00      	cmp	r3, #0
 802fc68:	d02b      	beq.n	802fcc2 <LoRaMacSerializerJoinRequest+0x68>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 802fc6a:	7922      	ldrb	r2, [r4, #4]
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 802fc6c:	1800      	adds	r0, r0, r0
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 802fc6e:	2a16      	cmp	r2, #22
 802fc70:	d927      	bls.n	802fcc2 <LoRaMacSerializerJoinRequest+0x68>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 802fc72:	7962      	ldrb	r2, [r4, #5]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 802fc74:	1da1      	adds	r1, r4, #6
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 802fc76:	701a      	strb	r2, [r3, #0]
    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 802fc78:	6823      	ldr	r3, [r4, #0]
 802fc7a:	2208      	movs	r2, #8
 802fc7c:	1c58      	adds	r0, r3, #1
 802fc7e:	f7ff fa61 	bl	802f144 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 802fc82:	0021      	movs	r1, r4
 802fc84:	6820      	ldr	r0, [r4, #0]
 802fc86:	2208      	movs	r2, #8
 802fc88:	3009      	adds	r0, #9
 802fc8a:	310e      	adds	r1, #14
 802fc8c:	f7ff fa5a 	bl	802f144 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 802fc90:	8ae3      	ldrh	r3, [r4, #22]
 802fc92:	6822      	ldr	r2, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 802fc94:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 802fc96:	7453      	strb	r3, [r2, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 802fc98:	8ae3      	ldrh	r3, [r4, #22]
 802fc9a:	6822      	ldr	r2, [r4, #0]
 802fc9c:	0a1b      	lsrs	r3, r3, #8
 802fc9e:	7493      	strb	r3, [r2, #18]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 802fca0:	69a3      	ldr	r3, [r4, #24]
 802fca2:	6822      	ldr	r2, [r4, #0]
 802fca4:	74d3      	strb	r3, [r2, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 802fca6:	69a3      	ldr	r3, [r4, #24]
 802fca8:	6822      	ldr	r2, [r4, #0]
 802fcaa:	0a1b      	lsrs	r3, r3, #8
 802fcac:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 802fcae:	69a3      	ldr	r3, [r4, #24]
 802fcb0:	6822      	ldr	r2, [r4, #0]
 802fcb2:	0c1b      	lsrs	r3, r3, #16
 802fcb4:	7553      	strb	r3, [r2, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 802fcb6:	69a3      	ldr	r3, [r4, #24]
 802fcb8:	6822      	ldr	r2, [r4, #0]
 802fcba:	0e1b      	lsrs	r3, r3, #24
 802fcbc:	7593      	strb	r3, [r2, #22]
    macMsg->BufSize = bufItr;
 802fcbe:	2317      	movs	r3, #23
 802fcc0:	7123      	strb	r3, [r4, #4]
}
 802fcc2:	bd10      	pop	{r4, pc}

0802fcc4 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 802fcc4:	b570      	push	{r4, r5, r6, lr}
 802fcc6:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 802fcc8:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 802fcca:	2c00      	cmp	r4, #0
 802fccc:	d068      	beq.n	802fda0 <LoRaMacSerializerData+0xdc>
 802fcce:	6821      	ldr	r1, [r4, #0]
        return LORAMAC_SERIALIZER_ERROR_NPE;
 802fcd0:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 802fcd2:	2900      	cmp	r1, #0
 802fcd4:	d064      	beq.n	802fda0 <LoRaMacSerializerData+0xdc>
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;

    if( macMsg->FRMPayloadSize > 0 )
 802fcd6:	0025      	movs	r5, r4
 802fcd8:	3528      	adds	r5, #40	; 0x28
 802fcda:	7828      	ldrb	r0, [r5, #0]
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 802fcdc:	7b22      	ldrb	r2, [r4, #12]
 802fcde:	0003      	movs	r3, r0
 802fce0:	1e5e      	subs	r6, r3, #1
 802fce2:	41b3      	sbcs	r3, r6
 802fce4:	0712      	lsls	r2, r2, #28
 802fce6:	0f12      	lsrs	r2, r2, #28
 802fce8:	189b      	adds	r3, r3, r2
 802fcea:	3308      	adds	r3, #8
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
    }

    computedBufSize += macMsg->FRMPayloadSize;
 802fcec:	181b      	adds	r3, r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 802fcee:	3304      	adds	r3, #4

    if( macMsg->BufSize < computedBufSize )
 802fcf0:	7922      	ldrb	r2, [r4, #4]
 802fcf2:	b29b      	uxth	r3, r3
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 802fcf4:	2002      	movs	r0, #2
    if( macMsg->BufSize < computedBufSize )
 802fcf6:	429a      	cmp	r2, r3
 802fcf8:	d352      	bcc.n	802fda0 <LoRaMacSerializerData+0xdc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 802fcfa:	7963      	ldrb	r3, [r4, #5]
 802fcfc:	700b      	strb	r3, [r1, #0]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 802fcfe:	0021      	movs	r1, r4
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 802fd00:	68a3      	ldr	r3, [r4, #8]
 802fd02:	6822      	ldr	r2, [r4, #0]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 802fd04:	3110      	adds	r1, #16
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 802fd06:	7053      	strb	r3, [r2, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 802fd08:	68a3      	ldr	r3, [r4, #8]
 802fd0a:	6822      	ldr	r2, [r4, #0]
 802fd0c:	0a1b      	lsrs	r3, r3, #8
 802fd0e:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 802fd10:	68a3      	ldr	r3, [r4, #8]
 802fd12:	6822      	ldr	r2, [r4, #0]
 802fd14:	0c1b      	lsrs	r3, r3, #16
 802fd16:	70d3      	strb	r3, [r2, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 802fd18:	68a3      	ldr	r3, [r4, #8]
 802fd1a:	6822      	ldr	r2, [r4, #0]
 802fd1c:	0e1b      	lsrs	r3, r3, #24
 802fd1e:	7113      	strb	r3, [r2, #4]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 802fd20:	7b23      	ldrb	r3, [r4, #12]
 802fd22:	6822      	ldr	r2, [r4, #0]
 802fd24:	7153      	strb	r3, [r2, #5]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 802fd26:	89e3      	ldrh	r3, [r4, #14]
 802fd28:	6822      	ldr	r2, [r4, #0]
 802fd2a:	7193      	strb	r3, [r2, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 802fd2c:	89e3      	ldrh	r3, [r4, #14]
 802fd2e:	6822      	ldr	r2, [r4, #0]
 802fd30:	0a1b      	lsrs	r3, r3, #8
 802fd32:	71d3      	strb	r3, [r2, #7]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 802fd34:	7b22      	ldrb	r2, [r4, #12]
 802fd36:	6820      	ldr	r0, [r4, #0]
 802fd38:	0712      	lsls	r2, r2, #28
 802fd3a:	0f12      	lsrs	r2, r2, #28
 802fd3c:	3008      	adds	r0, #8
 802fd3e:	f7ff f9f8 	bl	802f132 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 802fd42:	7b23      	ldrb	r3, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
 802fd44:	782a      	ldrb	r2, [r5, #0]
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 802fd46:	071b      	lsls	r3, r3, #28
 802fd48:	0f1b      	lsrs	r3, r3, #28
 802fd4a:	001e      	movs	r6, r3
 802fd4c:	3608      	adds	r6, #8
    if( macMsg->FRMPayloadSize > 0 )
 802fd4e:	2a00      	cmp	r2, #0
 802fd50:	d005      	beq.n	802fd5e <LoRaMacSerializerData+0x9a>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 802fd52:	1c62      	adds	r2, r4, #1
 802fd54:	7fd2      	ldrb	r2, [r2, #31]
 802fd56:	6821      	ldr	r1, [r4, #0]
 802fd58:	3309      	adds	r3, #9
 802fd5a:	558a      	strb	r2, [r1, r6]
 802fd5c:	001e      	movs	r6, r3
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 802fd5e:	6823      	ldr	r3, [r4, #0]
 802fd60:	782a      	ldrb	r2, [r5, #0]
 802fd62:	1998      	adds	r0, r3, r6
 802fd64:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802fd66:	f7ff f9e4 	bl	802f132 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 802fd6a:	782b      	ldrb	r3, [r5, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 802fd6c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 802fd6e:	6821      	ldr	r1, [r4, #0]
    bufItr = bufItr + macMsg->FRMPayloadSize;
 802fd70:	18f3      	adds	r3, r6, r3
 802fd72:	b29b      	uxth	r3, r3
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 802fd74:	54ca      	strb	r2, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 802fd76:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 802fd78:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 802fd7a:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 802fd7c:	b292      	uxth	r2, r2
 802fd7e:	0a09      	lsrs	r1, r1, #8
 802fd80:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 802fd82:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 802fd84:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 802fd86:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 802fd88:	b292      	uxth	r2, r2
 802fd8a:	0c09      	lsrs	r1, r1, #16
 802fd8c:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 802fd8e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 802fd90:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 802fd92:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 802fd94:	b292      	uxth	r2, r2
 802fd96:	0e09      	lsrs	r1, r1, #24
 802fd98:	5481      	strb	r1, [r0, r2]

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 802fd9a:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 802fd9c:	3304      	adds	r3, #4
    macMsg->BufSize = bufItr;
 802fd9e:	7123      	strb	r3, [r4, #4]
}
 802fda0:	bd70      	pop	{r4, r5, r6, pc}

0802fda2 <RegionIsActive>:
    switch( region )
 802fda2:	3802      	subs	r0, #2
 802fda4:	4243      	negs	r3, r0
 802fda6:	4158      	adcs	r0, r3
}
 802fda8:	b2c0      	uxtb	r0, r0
 802fdaa:	4770      	bx	lr

0802fdac <RegionGetPhyParam>:
{
 802fdac:	b507      	push	{r0, r1, r2, lr}
    switch( region )
 802fdae:	2802      	cmp	r0, #2
 802fdb0:	d105      	bne.n	802fdbe <RegionGetPhyParam+0x12>
        CN470_GET_PHY_PARAM( );
 802fdb2:	0008      	movs	r0, r1
 802fdb4:	f7fa fdb8 	bl	802a928 <RegionCN470GetPhyParam>
 802fdb8:	9001      	str	r0, [sp, #4]
}
 802fdba:	9801      	ldr	r0, [sp, #4]
 802fdbc:	bd0e      	pop	{r1, r2, r3, pc}
            return phyParam;
 802fdbe:	2300      	movs	r3, #0
 802fdc0:	9301      	str	r3, [sp, #4]
 802fdc2:	e7fa      	b.n	802fdba <RegionGetPhyParam+0xe>

0802fdc4 <RegionSetBandTxDone>:
{
 802fdc4:	b510      	push	{r4, lr}
    switch( region )
 802fdc6:	2802      	cmp	r0, #2
 802fdc8:	d102      	bne.n	802fdd0 <RegionSetBandTxDone+0xc>
        CN470_SET_BAND_TX_DONE( );
 802fdca:	0008      	movs	r0, r1
 802fdcc:	f7fa fe46 	bl	802aa5c <RegionCN470SetBandTxDone>
}
 802fdd0:	bd10      	pop	{r4, pc}

0802fdd2 <RegionInitDefaults>:
{
 802fdd2:	b510      	push	{r4, lr}
    switch( region )
 802fdd4:	2802      	cmp	r0, #2
 802fdd6:	d102      	bne.n	802fdde <RegionInitDefaults+0xc>
        CN470_INIT_DEFAULTS( );
 802fdd8:	0008      	movs	r0, r1
 802fdda:	f7fa fe57 	bl	802aa8c <RegionCN470InitDefaults>
}
 802fdde:	bd10      	pop	{r4, pc}

0802fde0 <RegionGetNvmCtx>:
           return 0;
 802fde0:	2300      	movs	r3, #0
{
 802fde2:	b510      	push	{r4, lr}
    switch( region )
 802fde4:	2802      	cmp	r0, #2
 802fde6:	d103      	bne.n	802fdf0 <RegionGetNvmCtx+0x10>
        CN470_GET_NVM_CTX( );
 802fde8:	0008      	movs	r0, r1
 802fdea:	f7fa fe9f 	bl	802ab2c <RegionCN470GetNvmCtx>
 802fdee:	0003      	movs	r3, r0
}
 802fdf0:	0018      	movs	r0, r3
 802fdf2:	bd10      	pop	{r4, pc}

0802fdf4 <RegionVerify>:
{
 802fdf4:	b510      	push	{r4, lr}
            return false;
 802fdf6:	2300      	movs	r3, #0
{
 802fdf8:	0004      	movs	r4, r0
 802fdfa:	0008      	movs	r0, r1
 802fdfc:	0011      	movs	r1, r2
    switch( region )
 802fdfe:	2c02      	cmp	r4, #2
 802fe00:	d102      	bne.n	802fe08 <RegionVerify+0x14>
        CN470_VERIFY( );
 802fe02:	f000 fa2b 	bl	803025c <RegionCN470Verify>
 802fe06:	0003      	movs	r3, r0
}
 802fe08:	0018      	movs	r0, r3
 802fe0a:	bd10      	pop	{r4, pc}

0802fe0c <RegionApplyCFList>:
{
 802fe0c:	b510      	push	{r4, lr}
    switch( region )
 802fe0e:	2802      	cmp	r0, #2
 802fe10:	d102      	bne.n	802fe18 <RegionApplyCFList+0xc>
        CN470_APPLY_CF_LIST( );
 802fe12:	0008      	movs	r0, r1
 802fe14:	f7fa fe92 	bl	802ab3c <RegionCN470ApplyCFList>
}
 802fe18:	bd10      	pop	{r4, pc}

0802fe1a <RegionChanMaskSet>:
            return false;
 802fe1a:	2300      	movs	r3, #0
{
 802fe1c:	b510      	push	{r4, lr}
    switch( region )
 802fe1e:	2802      	cmp	r0, #2
 802fe20:	d103      	bne.n	802fe2a <RegionChanMaskSet+0x10>
        CN470_CHAN_MASK_SET( );
 802fe22:	0008      	movs	r0, r1
 802fe24:	f7fa fea2 	bl	802ab6c <RegionCN470ChanMaskSet>
 802fe28:	0003      	movs	r3, r0
}
 802fe2a:	0018      	movs	r0, r3
 802fe2c:	bd10      	pop	{r4, pc}

0802fe2e <RegionComputeRxWindowParameters>:
{
 802fe2e:	b510      	push	{r4, lr}
 802fe30:	0004      	movs	r4, r0
 802fe32:	0008      	movs	r0, r1
 802fe34:	0011      	movs	r1, r2
 802fe36:	001a      	movs	r2, r3
    switch( region )
 802fe38:	2c02      	cmp	r4, #2
 802fe3a:	d102      	bne.n	802fe42 <RegionComputeRxWindowParameters+0x14>
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
 802fe3c:	9b02      	ldr	r3, [sp, #8]
 802fe3e:	f7fa feaf 	bl	802aba0 <RegionCN470ComputeRxWindowParameters>
}
 802fe42:	bd10      	pop	{r4, pc}

0802fe44 <RegionRxConfig>:
{
 802fe44:	b510      	push	{r4, lr}
            return false;
 802fe46:	2300      	movs	r3, #0
{
 802fe48:	0004      	movs	r4, r0
 802fe4a:	0008      	movs	r0, r1
 802fe4c:	0011      	movs	r1, r2
    switch( region )
 802fe4e:	2c02      	cmp	r4, #2
 802fe50:	d102      	bne.n	802fe58 <RegionRxConfig+0x14>
        CN470_RX_CONFIG( );
 802fe52:	f7fa fed3 	bl	802abfc <RegionCN470RxConfig>
 802fe56:	0003      	movs	r3, r0
}
 802fe58:	0018      	movs	r0, r3
 802fe5a:	bd10      	pop	{r4, pc}

0802fe5c <RegionTxConfig>:
{
 802fe5c:	b570      	push	{r4, r5, r6, lr}
 802fe5e:	0005      	movs	r5, r0
            return false;
 802fe60:	2400      	movs	r4, #0
{
 802fe62:	0008      	movs	r0, r1
 802fe64:	0011      	movs	r1, r2
 802fe66:	001a      	movs	r2, r3
    switch( region )
 802fe68:	2d02      	cmp	r5, #2
 802fe6a:	d102      	bne.n	802fe72 <RegionTxConfig+0x16>
        CN470_TX_CONFIG( );
 802fe6c:	f7fa ff24 	bl	802acb8 <RegionCN470TxConfig>
 802fe70:	0004      	movs	r4, r0
}
 802fe72:	0020      	movs	r0, r4
 802fe74:	bd70      	pop	{r4, r5, r6, pc}

0802fe76 <RegionLinkAdrReq>:
{
 802fe76:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802fe78:	0005      	movs	r5, r0
            return 0;
 802fe7a:	2400      	movs	r4, #0
{
 802fe7c:	0008      	movs	r0, r1
 802fe7e:	0011      	movs	r1, r2
 802fe80:	001a      	movs	r2, r3
    switch( region )
 802fe82:	2d02      	cmp	r5, #2
 802fe84:	d105      	bne.n	802fe92 <RegionLinkAdrReq+0x1c>
        CN470_LINK_ADR_REQ( );
 802fe86:	9b07      	ldr	r3, [sp, #28]
 802fe88:	9300      	str	r3, [sp, #0]
 802fe8a:	9b06      	ldr	r3, [sp, #24]
 802fe8c:	f7fa ff7c 	bl	802ad88 <RegionCN470LinkAdrReq>
 802fe90:	0004      	movs	r4, r0
}
 802fe92:	0020      	movs	r0, r4
 802fe94:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0802fe96 <RegionRxParamSetupReq>:
            return 0;
 802fe96:	2300      	movs	r3, #0
{
 802fe98:	b510      	push	{r4, lr}
    switch( region )
 802fe9a:	2802      	cmp	r0, #2
 802fe9c:	d103      	bne.n	802fea6 <RegionRxParamSetupReq+0x10>
        CN470_RX_PARAM_SETUP_REQ( );
 802fe9e:	0008      	movs	r0, r1
 802fea0:	f000 f9fc 	bl	803029c <RegionCN470RxParamSetupReq>
 802fea4:	0003      	movs	r3, r0
}
 802fea6:	0018      	movs	r0, r3
 802fea8:	bd10      	pop	{r4, pc}

0802feaa <RegionNewChannelReq>:
            return 0;
 802feaa:	2300      	movs	r3, #0
{
 802feac:	b510      	push	{r4, lr}
    switch( region )
 802feae:	2802      	cmp	r0, #2
 802feb0:	d103      	bne.n	802feba <RegionNewChannelReq+0x10>
        CN470_NEW_CHANNEL_REQ( );
 802feb2:	0008      	movs	r0, r1
 802feb4:	f000 fa11 	bl	80302da <RegionCN470NewChannelReq>
 802feb8:	0003      	movs	r3, r0
}
 802feba:	0018      	movs	r0, r3
 802febc:	bd10      	pop	{r4, pc}

0802febe <RegionTxParamSetupReq>:
            return 0;
 802febe:	2300      	movs	r3, #0
{
 802fec0:	b510      	push	{r4, lr}
    switch( region )
 802fec2:	2802      	cmp	r0, #2
 802fec4:	d103      	bne.n	802fece <RegionTxParamSetupReq+0x10>
        CN470_TX_PARAM_SETUP_REQ( );
 802fec6:	0008      	movs	r0, r1
 802fec8:	f000 fa09 	bl	80302de <RegionCN470TxParamSetupReq>
 802fecc:	0003      	movs	r3, r0
}
 802fece:	0018      	movs	r0, r3
 802fed0:	bd10      	pop	{r4, pc}

0802fed2 <RegionDlChannelReq>:
            return 0;
 802fed2:	2300      	movs	r3, #0
{
 802fed4:	b510      	push	{r4, lr}
    switch( region )
 802fed6:	2802      	cmp	r0, #2
 802fed8:	d103      	bne.n	802fee2 <RegionDlChannelReq+0x10>
        CN470_DL_CHANNEL_REQ( );
 802feda:	0008      	movs	r0, r1
 802fedc:	f000 fa02 	bl	80302e4 <RegionCN470DlChannelReq>
 802fee0:	0003      	movs	r3, r0
}
 802fee2:	0018      	movs	r0, r3
 802fee4:	bd10      	pop	{r4, pc}

0802fee6 <RegionAlternateDr>:
{
 802fee6:	b510      	push	{r4, lr}
            return 0;
 802fee8:	2300      	movs	r3, #0
{
 802feea:	0004      	movs	r4, r0
 802feec:	0008      	movs	r0, r1
 802feee:	0011      	movs	r1, r2
    switch( region )
 802fef0:	2c02      	cmp	r4, #2
 802fef2:	d102      	bne.n	802fefa <RegionAlternateDr+0x14>
        CN470_ALTERNATE_DR( );
 802fef4:	f000 f9f8 	bl	80302e8 <RegionCN470AlternateDr>
 802fef8:	0003      	movs	r3, r0
}
 802fefa:	0018      	movs	r0, r3
 802fefc:	bd10      	pop	{r4, pc}

0802fefe <RegionNextChannel>:
{
 802fefe:	b570      	push	{r4, r5, r6, lr}
 802ff00:	0005      	movs	r5, r0
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 802ff02:	2409      	movs	r4, #9
{
 802ff04:	0008      	movs	r0, r1
 802ff06:	0011      	movs	r1, r2
 802ff08:	001a      	movs	r2, r3
    switch( region )
 802ff0a:	2d02      	cmp	r5, #2
 802ff0c:	d103      	bne.n	802ff16 <RegionNextChannel+0x18>
        CN470_NEXT_CHANNEL( );
 802ff0e:	9b04      	ldr	r3, [sp, #16]
 802ff10:	f7fa ffd6 	bl	802aec0 <RegionCN470NextChannel>
 802ff14:	0004      	movs	r4, r0
}
 802ff16:	0020      	movs	r0, r4
 802ff18:	bd70      	pop	{r4, r5, r6, pc}

0802ff1a <RegionSetContinuousWave>:
{
 802ff1a:	b510      	push	{r4, lr}
    switch( region )
 802ff1c:	2802      	cmp	r0, #2
 802ff1e:	d102      	bne.n	802ff26 <RegionSetContinuousWave+0xc>
        CN470_SET_CONTINUOUS_WAVE( );
 802ff20:	0008      	movs	r0, r1
 802ff22:	f7fb f83b 	bl	802af9c <RegionCN470SetContinuousWave>
}
 802ff26:	bd10      	pop	{r4, pc}

0802ff28 <RegionApplyDrOffset>:
{
 802ff28:	b570      	push	{r4, r5, r6, lr}
 802ff2a:	0005      	movs	r5, r0
 802ff2c:	0008      	movs	r0, r1
 802ff2e:	0011      	movs	r1, r2
 802ff30:	001a      	movs	r2, r3
            return dr;
 802ff32:	b2cc      	uxtb	r4, r1
    switch( region )
 802ff34:	2d02      	cmp	r5, #2
 802ff36:	d102      	bne.n	802ff3e <RegionApplyDrOffset+0x16>
        CN470_APPLY_DR_OFFSET( );
 802ff38:	f000 f9d7 	bl	80302ea <RegionCN470ApplyDrOffset>
 802ff3c:	0004      	movs	r4, r0
}
 802ff3e:	0020      	movs	r0, r4
 802ff40:	bd70      	pop	{r4, r5, r6, pc}

0802ff42 <RegionRxBeaconSetup>:
{
 802ff42:	0003      	movs	r3, r0
 802ff44:	b510      	push	{r4, lr}
 802ff46:	0008      	movs	r0, r1
 802ff48:	0011      	movs	r1, r2
    switch( region )
 802ff4a:	2b02      	cmp	r3, #2
 802ff4c:	d101      	bne.n	802ff52 <RegionRxBeaconSetup+0x10>
        CN470_RX_BEACON_SETUP( );
 802ff4e:	f7fb f84f 	bl	802aff0 <RegionCN470RxBeaconSetup>
}
 802ff52:	bd10      	pop	{r4, pc}

0802ff54 <RegionCommonChanVerifyDr>:
{
 802ff54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802ff56:	9101      	str	r1, [sp, #4]
 802ff58:	a908      	add	r1, sp, #32
 802ff5a:	7809      	ldrb	r1, [r1, #0]
 802ff5c:	9000      	str	r0, [sp, #0]
 802ff5e:	b249      	sxtb	r1, r1
        return false;
 802ff60:	2000      	movs	r0, #0
    if( ( value >= min ) && ( value <= max ) )
 802ff62:	429a      	cmp	r2, r3
 802ff64:	db29      	blt.n	802ffba <RegionCommonChanVerifyDr+0x66>
 802ff66:	428a      	cmp	r2, r1
 802ff68:	dc27      	bgt.n	802ffba <RegionCommonChanVerifyDr+0x66>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 802ff6a:	2701      	movs	r7, #1
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 802ff6c:	260f      	movs	r6, #15
 802ff6e:	e01e      	b.n	802ffae <RegionCommonChanVerifyDr+0x5a>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 802ff70:	9c01      	ldr	r4, [sp, #4]
 802ff72:	0041      	lsls	r1, r0, #1
 802ff74:	5b09      	ldrh	r1, [r1, r4]
 802ff76:	2500      	movs	r5, #0
 802ff78:	468c      	mov	ip, r1
 802ff7a:	210c      	movs	r1, #12
 802ff7c:	434b      	muls	r3, r1
 802ff7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 802ff80:	18cb      	adds	r3, r1, r3
 802ff82:	4661      	mov	r1, ip
 802ff84:	4129      	asrs	r1, r5
 802ff86:	4239      	tst	r1, r7
 802ff88:	d00b      	beq.n	802ffa2 <RegionCommonChanVerifyDr+0x4e>
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 802ff8a:	2408      	movs	r4, #8
 802ff8c:	7a19      	ldrb	r1, [r3, #8]
 802ff8e:	571c      	ldrsb	r4, [r3, r4]
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 802ff90:	0709      	lsls	r1, r1, #28
 802ff92:	1709      	asrs	r1, r1, #28
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 802ff94:	1124      	asrs	r4, r4, #4
    if( ( value >= min ) && ( value <= max ) )
 802ff96:	4031      	ands	r1, r6
 802ff98:	428a      	cmp	r2, r1
 802ff9a:	db02      	blt.n	802ffa2 <RegionCommonChanVerifyDr+0x4e>
 802ff9c:	4034      	ands	r4, r6
 802ff9e:	42a2      	cmp	r2, r4
 802ffa0:	dd0c      	ble.n	802ffbc <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 802ffa2:	3501      	adds	r5, #1
 802ffa4:	330c      	adds	r3, #12
 802ffa6:	2d10      	cmp	r5, #16
 802ffa8:	d1eb      	bne.n	802ff82 <RegionCommonChanVerifyDr+0x2e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 802ffaa:	3001      	adds	r0, #1
 802ffac:	b2c0      	uxtb	r0, r0
 802ffae:	0103      	lsls	r3, r0, #4
 802ffb0:	9900      	ldr	r1, [sp, #0]
 802ffb2:	b2db      	uxtb	r3, r3
 802ffb4:	4299      	cmp	r1, r3
 802ffb6:	d8db      	bhi.n	802ff70 <RegionCommonChanVerifyDr+0x1c>
        return false;
 802ffb8:	2000      	movs	r0, #0
}
 802ffba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
                    return true;
 802ffbc:	2001      	movs	r0, #1
 802ffbe:	e7fc      	b.n	802ffba <RegionCommonChanVerifyDr+0x66>

0802ffc0 <RegionCommonValueInRange>:
{
 802ffc0:	0003      	movs	r3, r0
    return 0;
 802ffc2:	2000      	movs	r0, #0
    if( ( value >= min ) && ( value <= max ) )
 802ffc4:	428b      	cmp	r3, r1
 802ffc6:	db04      	blt.n	802ffd2 <RegionCommonValueInRange+0x12>
 802ffc8:	0fd8      	lsrs	r0, r3, #31
 802ffca:	17d1      	asrs	r1, r2, #31
 802ffcc:	429a      	cmp	r2, r3
 802ffce:	4148      	adcs	r0, r1
        return 1;
 802ffd0:	b2c0      	uxtb	r0, r0
}
 802ffd2:	4770      	bx	lr

0802ffd4 <RegionCommonCountChannels>:
{
 802ffd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802ffd6:	1e03      	subs	r3, r0, #0
 802ffd8:	9201      	str	r2, [sp, #4]
    if( channelsMask == NULL )
 802ffda:	d005      	beq.n	802ffe8 <RegionCommonCountChannels+0x14>
 802ffdc:	0048      	lsls	r0, r1, #1
 802ffde:	181b      	adds	r3, r3, r0
    uint8_t nbChannels = 0;
 802ffe0:	2000      	movs	r0, #0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 802ffe2:	9a01      	ldr	r2, [sp, #4]
 802ffe4:	4291      	cmp	r1, r2
 802ffe6:	d300      	bcc.n	802ffea <RegionCommonCountChannels+0x16>
}
 802ffe8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
 802ffea:	2400      	movs	r4, #0
    uint8_t nbActiveBits = 0;
 802ffec:	0022      	movs	r2, r4
        nbChannels += CountChannels( channelsMask[i], 16 );
 802ffee:	881f      	ldrh	r7, [r3, #0]
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 802fff0:	2501      	movs	r5, #1
 802fff2:	40a5      	lsls	r5, r4
 802fff4:	002e      	movs	r6, r5
 802fff6:	403e      	ands	r6, r7
 802fff8:	42b5      	cmp	r5, r6
 802fffa:	d101      	bne.n	8030000 <RegionCommonCountChannels+0x2c>
            nbActiveBits++;
 802fffc:	3201      	adds	r2, #1
 802fffe:	b2d2      	uxtb	r2, r2
    for( uint8_t j = 0; j < nbBits; j++ )
 8030000:	3401      	adds	r4, #1
 8030002:	2c10      	cmp	r4, #16
 8030004:	d1f4      	bne.n	802fff0 <RegionCommonCountChannels+0x1c>
        nbChannels += CountChannels( channelsMask[i], 16 );
 8030006:	1880      	adds	r0, r0, r2
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8030008:	3101      	adds	r1, #1
        nbChannels += CountChannels( channelsMask[i], 16 );
 803000a:	b2c0      	uxtb	r0, r0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 803000c:	b2c9      	uxtb	r1, r1
 803000e:	3302      	adds	r3, #2
 8030010:	e7e7      	b.n	802ffe2 <RegionCommonCountChannels+0xe>

08030012 <RegionCommonChanMaskCopy>:
{
 8030012:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8030014:	2800      	cmp	r0, #0
 8030016:	d005      	beq.n	8030024 <RegionCommonChanMaskCopy+0x12>
 8030018:	2900      	cmp	r1, #0
 803001a:	d003      	beq.n	8030024 <RegionCommonChanMaskCopy+0x12>
 803001c:	2300      	movs	r3, #0
 803001e:	0052      	lsls	r2, r2, #1
        for( uint8_t i = 0; i < len; i++ )
 8030020:	4293      	cmp	r3, r2
 8030022:	d100      	bne.n	8030026 <RegionCommonChanMaskCopy+0x14>
}
 8030024:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
 8030026:	5acc      	ldrh	r4, [r1, r3]
 8030028:	52c4      	strh	r4, [r0, r3]
        for( uint8_t i = 0; i < len; i++ )
 803002a:	3302      	adds	r3, #2
 803002c:	e7f8      	b.n	8030020 <RegionCommonChanMaskCopy+0xe>

0803002e <RegionCommonParseLinkAdrReq>:
{
 803002e:	b510      	push	{r4, lr}
    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8030030:	7802      	ldrb	r2, [r0, #0]
{
 8030032:	0003      	movs	r3, r0
    uint8_t retIndex = 0;
 8030034:	2000      	movs	r0, #0
    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8030036:	2a03      	cmp	r2, #3
 8030038:	d113      	bne.n	8030062 <RegionCommonParseLinkAdrReq+0x34>
        linkAdrParams->Datarate = payload[1];
 803003a:	785a      	ldrb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 803003c:	300f      	adds	r0, #15
 803003e:	0014      	movs	r4, r2
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8030040:	0912      	lsrs	r2, r2, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8030042:	4004      	ands	r4, r0
 8030044:	708c      	strb	r4, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8030046:	704a      	strb	r2, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8030048:	789a      	ldrb	r2, [r3, #2]
 803004a:	808a      	strh	r2, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 803004c:	78dc      	ldrb	r4, [r3, #3]
 803004e:	0224      	lsls	r4, r4, #8
 8030050:	4322      	orrs	r2, r4
 8030052:	808a      	strh	r2, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 8030054:	791b      	ldrb	r3, [r3, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8030056:	065a      	lsls	r2, r3, #25
 8030058:	0f52      	lsrs	r2, r2, #29
        linkAdrParams->NbRep &= 0x0F;
 803005a:	4003      	ands	r3, r0
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 803005c:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 803005e:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 8030060:	380a      	subs	r0, #10
}
 8030062:	bd10      	pop	{r4, pc}

08030064 <RegionCommonLinkAdrReqVerifyParams>:
{
 8030064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8030066:	b087      	sub	sp, #28
 8030068:	9305      	str	r3, [sp, #20]
    int8_t datarate = verifyParams->Datarate;
 803006a:	2306      	movs	r3, #6
    int8_t txPower = verifyParams->TxPower;
 803006c:	2707      	movs	r7, #7
{
 803006e:	9103      	str	r1, [sp, #12]
 8030070:	9204      	str	r2, [sp, #16]
    int8_t datarate = verifyParams->Datarate;
 8030072:	56c3      	ldrsb	r3, [r0, r3]
    uint8_t status = verifyParams->Status;
 8030074:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 8030076:	9302      	str	r3, [sp, #8]
    if( verifyParams->AdrEnabled == false )
 8030078:	7943      	ldrb	r3, [r0, #5]
{
 803007a:	0004      	movs	r4, r0
    int8_t txPower = verifyParams->TxPower;
 803007c:	57c7      	ldrsb	r7, [r0, r7]
    int8_t nbRepetitions = verifyParams->NbRep;
 803007e:	7a06      	ldrb	r6, [r0, #8]
    if( verifyParams->AdrEnabled == false )
 8030080:	2b00      	cmp	r3, #0
 8030082:	d026      	beq.n	80300d2 <RegionCommonLinkAdrReqVerifyParams+0x6e>
    int8_t nbRepetitions = verifyParams->NbRep;
 8030084:	b276      	sxtb	r6, r6
    if( status != 0 )
 8030086:	2d00      	cmp	r5, #0
 8030088:	d019      	beq.n	80300be <RegionCommonLinkAdrReqVerifyParams+0x5a>
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 803008a:	69a2      	ldr	r2, [r4, #24]
 803008c:	2314      	movs	r3, #20
 803008e:	9201      	str	r2, [sp, #4]
 8030090:	2215      	movs	r2, #21
 8030092:	56a2      	ldrsb	r2, [r4, r2]
 8030094:	56e3      	ldrsb	r3, [r4, r3]
 8030096:	9200      	str	r2, [sp, #0]
 8030098:	7b20      	ldrb	r0, [r4, #12]
 803009a:	9a02      	ldr	r2, [sp, #8]
 803009c:	6921      	ldr	r1, [r4, #16]
 803009e:	f7ff ff59 	bl	802ff54 <RegionCommonChanVerifyDr>
 80300a2:	2800      	cmp	r0, #0
 80300a4:	d101      	bne.n	80300aa <RegionCommonLinkAdrReqVerifyParams+0x46>
            status &= 0xFD; // Datarate KO
 80300a6:	2302      	movs	r3, #2
 80300a8:	439d      	bics	r5, r3
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80300aa:	231d      	movs	r3, #29
 80300ac:	221c      	movs	r2, #28
 80300ae:	56e3      	ldrsb	r3, [r4, r3]
 80300b0:	56a2      	ldrsb	r2, [r4, r2]
    if( ( value >= min ) && ( value <= max ) )
 80300b2:	42bb      	cmp	r3, r7
 80300b4:	dc15      	bgt.n	80300e2 <RegionCommonLinkAdrReqVerifyParams+0x7e>
 80300b6:	42ba      	cmp	r2, r7
 80300b8:	da14      	bge.n	80300e4 <RegionCommonLinkAdrReqVerifyParams+0x80>
                status &= 0xFB; // TxPower KO
 80300ba:	2304      	movs	r3, #4
 80300bc:	439d      	bics	r5, r3
}
 80300be:	0028      	movs	r0, r5
    *dr = datarate;
 80300c0:	9b03      	ldr	r3, [sp, #12]
 80300c2:	9a02      	ldr	r2, [sp, #8]
 80300c4:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 80300c6:	9b04      	ldr	r3, [sp, #16]
 80300c8:	701f      	strb	r7, [r3, #0]
    *nbRep = nbRepetitions;
 80300ca:	9b05      	ldr	r3, [sp, #20]
 80300cc:	701e      	strb	r6, [r3, #0]
}
 80300ce:	b007      	add	sp, #28
 80300d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        datarate =  verifyParams->CurrentDatarate;
 80300d2:	2309      	movs	r3, #9
        nbRepetitions = verifyParams->CurrentNbRep;
 80300d4:	260b      	movs	r6, #11
        txPower =  verifyParams->CurrentTxPower;
 80300d6:	270a      	movs	r7, #10
        datarate =  verifyParams->CurrentDatarate;
 80300d8:	56c3      	ldrsb	r3, [r0, r3]
        nbRepetitions = verifyParams->CurrentNbRep;
 80300da:	5786      	ldrsb	r6, [r0, r6]
        datarate =  verifyParams->CurrentDatarate;
 80300dc:	9302      	str	r3, [sp, #8]
        txPower =  verifyParams->CurrentTxPower;
 80300de:	57c7      	ldrsb	r7, [r0, r7]
 80300e0:	e7d1      	b.n	8030086 <RegionCommonLinkAdrReqVerifyParams+0x22>
 80300e2:	001f      	movs	r7, r3
    if( status == 0x07 )
 80300e4:	2d07      	cmp	r5, #7
 80300e6:	d1ea      	bne.n	80300be <RegionCommonLinkAdrReqVerifyParams+0x5a>
        if( nbRepetitions == 0 )
 80300e8:	2e00      	cmp	r6, #0
 80300ea:	d1e8      	bne.n	80300be <RegionCommonLinkAdrReqVerifyParams+0x5a>
            nbRepetitions = 1;
 80300ec:	3601      	adds	r6, #1
 80300ee:	e7e6      	b.n	80300be <RegionCommonLinkAdrReqVerifyParams+0x5a>

080300f0 <RegionCommonComputeTxPower>:
{
 80300f0:	b570      	push	{r4, r5, r6, lr}
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 80300f2:	0040      	lsls	r0, r0, #1
{
 80300f4:	1c14      	adds	r4, r2, #0
 80300f6:	1c0d      	adds	r5, r1, #0
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 80300f8:	f7f1 f964 	bl	80213c4 <__aeabi_ui2f>
 80300fc:	1c01      	adds	r1, r0, #0
 80300fe:	1c28      	adds	r0, r5, #0
 8030100:	f7f0 ff92 	bl	8021028 <__aeabi_fsub>
 8030104:	1c21      	adds	r1, r4, #0
 8030106:	f7f0 ff8f 	bl	8021028 <__aeabi_fsub>
 803010a:	f7f1 fd0f 	bl	8021b2c <__aeabi_f2d>
 803010e:	f7fd fb29 	bl	802d764 <floor>
 8030112:	f7f1 fcd5 	bl	8021ac0 <__aeabi_d2iz>
    return phyTxPower;
 8030116:	b240      	sxtb	r0, r0
}
 8030118:	bd70      	pop	{r4, r5, r6, pc}

0803011a <RegionCommonCountNbOfEnabledChannels>:

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 803011a:	b5f0      	push	{r4, r5, r6, r7, lr}
 803011c:	b089      	sub	sp, #36	; 0x24
 803011e:	9307      	str	r3, [sp, #28]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8030120:	2300      	movs	r3, #0
    uint8_t nbRestrictedChannelsCount = 0;
 8030122:	469c      	mov	ip, r3
    uint8_t nbChannelCount = 0;
 8030124:	001d      	movs	r5, r3
{
 8030126:	9105      	str	r1, [sp, #20]
 8030128:	9206      	str	r2, [sp, #24]
 803012a:	011a      	lsls	r2, r3, #4
 803012c:	b2d2      	uxtb	r2, r2
 803012e:	9201      	str	r2, [sp, #4]
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8030130:	9901      	ldr	r1, [sp, #4]
 8030132:	8a02      	ldrh	r2, [r0, #16]
 8030134:	428a      	cmp	r2, r1
 8030136:	d806      	bhi.n	8030146 <RegionCommonCountNbOfEnabledChannels+0x2c>
                enabledChannels[nbChannelCount++] = i + j;
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8030138:	4662      	mov	r2, ip
    *nbEnabledChannels = nbChannelCount;
 803013a:	9b06      	ldr	r3, [sp, #24]
 803013c:	701d      	strb	r5, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 803013e:	9b07      	ldr	r3, [sp, #28]
 8030140:	701a      	strb	r2, [r3, #0]
}
 8030142:	b009      	add	sp, #36	; 0x24
 8030144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8030146:	260c      	movs	r6, #12
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8030148:	005a      	lsls	r2, r3, #1
 803014a:	9204      	str	r2, [sp, #16]
 803014c:	9a01      	ldr	r2, [sp, #4]
 803014e:	4356      	muls	r6, r2
 8030150:	2200      	movs	r2, #0
 8030152:	6841      	ldr	r1, [r0, #4]
 8030154:	9c04      	ldr	r4, [sp, #16]
 8030156:	2701      	movs	r7, #1
 8030158:	5b09      	ldrh	r1, [r1, r4]
 803015a:	4111      	asrs	r1, r2
 803015c:	4239      	tst	r1, r7
 803015e:	d029      	beq.n	80301b4 <RegionCommonCountNbOfEnabledChannels+0x9a>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8030160:	6881      	ldr	r1, [r0, #8]
 8030162:	198c      	adds	r4, r1, r6
 8030164:	6821      	ldr	r1, [r4, #0]
 8030166:	2900      	cmp	r1, #0
 8030168:	d024      	beq.n	80301b4 <RegionCommonCountNbOfEnabledChannels+0x9a>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 803016a:	7801      	ldrb	r1, [r0, #0]
 803016c:	2900      	cmp	r1, #0
 803016e:	d105      	bne.n	803017c <RegionCommonCountNbOfEnabledChannels+0x62>
                    ( countNbOfEnabledChannelsParams->JoinChannels > 0 ) )
 8030170:	8a41      	ldrh	r1, [r0, #18]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8030172:	2900      	cmp	r1, #0
 8030174:	d002      	beq.n	803017c <RegionCommonCountNbOfEnabledChannels+0x62>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels & ( 1 << j ) ) == 0 )
 8030176:	4111      	asrs	r1, r2
 8030178:	4239      	tst	r1, r7
 803017a:	d01b      	beq.n	80301b4 <RegionCommonCountNbOfEnabledChannels+0x9a>
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 803017c:	2101      	movs	r1, #1
 803017e:	5641      	ldrsb	r1, [r0, r1]
 8030180:	9102      	str	r1, [sp, #8]
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8030182:	7a21      	ldrb	r1, [r4, #8]
 8030184:	070f      	lsls	r7, r1, #28
 8030186:	9103      	str	r1, [sp, #12]
    if( ( value >= min ) && ( value <= max ) )
 8030188:	1739      	asrs	r1, r7, #28
 803018a:	9f02      	ldr	r7, [sp, #8]
 803018c:	428f      	cmp	r7, r1
 803018e:	db11      	blt.n	80301b4 <RegionCommonCountNbOfEnabledChannels+0x9a>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8030190:	4669      	mov	r1, sp
 8030192:	7b09      	ldrb	r1, [r1, #12]
 8030194:	b249      	sxtb	r1, r1
    if( ( value >= min ) && ( value <= max ) )
 8030196:	1109      	asrs	r1, r1, #4
 8030198:	428f      	cmp	r7, r1
 803019a:	dc0b      	bgt.n	80301b4 <RegionCommonCountNbOfEnabledChannels+0x9a>
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 803019c:	7a61      	ldrb	r1, [r4, #9]
 803019e:	2414      	movs	r4, #20
 80301a0:	4361      	muls	r1, r4
 80301a2:	68c4      	ldr	r4, [r0, #12]
 80301a4:	1861      	adds	r1, r4, r1
 80301a6:	7c09      	ldrb	r1, [r1, #16]
 80301a8:	2900      	cmp	r1, #0
 80301aa:	d10a      	bne.n	80301c2 <RegionCommonCountNbOfEnabledChannels+0xa8>
                    nbRestrictedChannelsCount++;
 80301ac:	4661      	mov	r1, ip
 80301ae:	3101      	adds	r1, #1
 80301b0:	b2c9      	uxtb	r1, r1
 80301b2:	468c      	mov	ip, r1
        for( uint8_t j = 0; j < 16; j++ )
 80301b4:	3201      	adds	r2, #1
 80301b6:	360c      	adds	r6, #12
 80301b8:	2a10      	cmp	r2, #16
 80301ba:	d1ca      	bne.n	8030152 <RegionCommonCountNbOfEnabledChannels+0x38>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80301bc:	3301      	adds	r3, #1
 80301be:	b2db      	uxtb	r3, r3
 80301c0:	e7b3      	b.n	803012a <RegionCommonCountNbOfEnabledChannels+0x10>
                enabledChannels[nbChannelCount++] = i + j;
 80301c2:	9c01      	ldr	r4, [sp, #4]
 80301c4:	9f05      	ldr	r7, [sp, #20]
 80301c6:	1c69      	adds	r1, r5, #1
 80301c8:	18a4      	adds	r4, r4, r2
 80301ca:	557c      	strb	r4, [r7, r5]
 80301cc:	b2cd      	uxtb	r5, r1
 80301ce:	e7f1      	b.n	80301b4 <RegionCommonCountNbOfEnabledChannels+0x9a>

080301d0 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 80301d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80301d2:	0004      	movs	r4, r0
 80301d4:	b087      	sub	sp, #28
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 80301d6:	6840      	ldr	r0, [r0, #4]
{
 80301d8:	001d      	movs	r5, r3
 80301da:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80301dc:	9204      	str	r2, [sp, #16]
 80301de:	000e      	movs	r6, r1
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 80301e0:	f7fe ff76 	bl	802f0d0 <TimerGetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 80301e4:	6823      	ldr	r3, [r4, #0]
    *nbRestrictedChannels = 1;
 80301e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 80301e8:	1a1b      	subs	r3, r3, r0
 80301ea:	603b      	str	r3, [r7, #0]
    *nbRestrictedChannels = 1;
 80301ec:	2301      	movs	r3, #1
 80301ee:	7013      	strb	r3, [r2, #0]
    *nbEnabledChannels = 0;
 80301f0:	2300      	movs	r3, #0
 80301f2:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80301f4:	6863      	ldr	r3, [r4, #4]
 80301f6:	2b00      	cmp	r3, #0
 80301f8:	d002      	beq.n	8030200 <RegionCommonIdentifyChannels+0x30>
 80301fa:	6823      	ldr	r3, [r4, #0]
 80301fc:	4283      	cmp	r3, r0
 80301fe:	d825      	bhi.n	803024c <RegionCommonIdentifyChannels+0x7c>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8030200:	2300      	movs	r3, #0
 8030202:	6033      	str	r3, [r6, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8030204:	7a62      	ldrb	r2, [r4, #9]
 8030206:	69e1      	ldr	r1, [r4, #28]
 8030208:	4694      	mov	ip, r2
 803020a:	780a      	ldrb	r2, [r1, #0]
 803020c:	69a1      	ldr	r1, [r4, #24]
 803020e:	9205      	str	r2, [sp, #20]
 8030210:	9103      	str	r1, [sp, #12]
 8030212:	0021      	movs	r1, r4
 8030214:	ae01      	add	r6, sp, #4
 8030216:	310c      	adds	r1, #12
 8030218:	7a23      	ldrb	r3, [r4, #8]
 803021a:	c905      	ldmia	r1!, {r0, r2}
 803021c:	c605      	stmia	r6!, {r0, r2}
 803021e:	7d21      	ldrb	r1, [r4, #20]
 8030220:	4662      	mov	r2, ip
 8030222:	9100      	str	r1, [sp, #0]
 8030224:	69e1      	ldr	r1, [r4, #28]
 8030226:	9805      	ldr	r0, [sp, #20]
 8030228:	68c9      	ldr	r1, [r1, #12]
 803022a:	f7fa fa4d 	bl	802a6c8 <RegionCommonUpdateBandTimeOff>
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 803022e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8030230:	6038      	str	r0, [r7, #0]
        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8030232:	002a      	movs	r2, r5
 8030234:	9904      	ldr	r1, [sp, #16]
 8030236:	69e0      	ldr	r0, [r4, #28]
 8030238:	f7ff ff6f 	bl	803011a <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 803023c:	782b      	ldrb	r3, [r5, #0]
 803023e:	2b00      	cmp	r3, #0
 8030240:	d004      	beq.n	803024c <RegionCommonIdentifyChannels+0x7c>
    {
        *nextTxDelay = 0;
 8030242:	2300      	movs	r3, #0
        return LORAMAC_STATUS_OK;
 8030244:	0018      	movs	r0, r3
        *nextTxDelay = 0;
 8030246:	603b      	str	r3, [r7, #0]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 8030248:	b007      	add	sp, #28
 803024a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if( *nbRestrictedChannels > 0 )
 803024c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 803024e:	7818      	ldrb	r0, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8030250:	4243      	negs	r3, r0
 8030252:	4158      	adcs	r0, r3
 8030254:	300b      	adds	r0, #11
 8030256:	e7f7      	b.n	8030248 <RegionCommonIdentifyChannels+0x78>

08030258 <RegionCommonRxConfigPrint>:
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8030258:	4770      	bx	lr

0803025a <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
}
 803025a:	4770      	bx	lr

0803025c <RegionCN470Verify>:
{
 803025c:	0003      	movs	r3, r0
 803025e:	b510      	push	{r4, lr}
    switch( phyAttribute )
 8030260:	2907      	cmp	r1, #7
 8030262:	d808      	bhi.n	8030276 <RegionCN470Verify+0x1a>
 8030264:	2904      	cmp	r1, #4
 8030266:	d80b      	bhi.n	8030280 <RegionCN470Verify+0x24>
 8030268:	2000      	movs	r0, #0
 803026a:	2900      	cmp	r1, #0
 803026c:	d107      	bne.n	803027e <RegionCN470Verify+0x22>
            return VerifyRfFreq( verify->Frequency );
 803026e:	6818      	ldr	r0, [r3, #0]
 8030270:	f7fa fb3c 	bl	802a8ec <VerifyRfFreq>
 8030274:	e003      	b.n	803027e <RegionCN470Verify+0x22>
    switch( phyAttribute )
 8030276:	3909      	subs	r1, #9
 8030278:	2000      	movs	r0, #0
 803027a:	2901      	cmp	r1, #1
 803027c:	d90a      	bls.n	8030294 <RegionCN470Verify+0x38>
}
 803027e:	bd10      	pop	{r4, pc}
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, CN470_TX_MIN_DATARATE, CN470_TX_MAX_DATARATE );
 8030280:	2000      	movs	r0, #0
 8030282:	2205      	movs	r2, #5
 8030284:	5618      	ldrsb	r0, [r3, r0]
            return RegionCommonValueInRange( verify->TxPower, CN470_MAX_TX_POWER, CN470_MIN_TX_POWER );
 8030286:	2100      	movs	r1, #0
 8030288:	f7ff fe9a 	bl	802ffc0 <RegionCommonValueInRange>
 803028c:	1e43      	subs	r3, r0, #1
 803028e:	4198      	sbcs	r0, r3
 8030290:	b2c0      	uxtb	r0, r0
 8030292:	e7f4      	b.n	803027e <RegionCN470Verify+0x22>
 8030294:	2000      	movs	r0, #0
 8030296:	2207      	movs	r2, #7
 8030298:	5618      	ldrsb	r0, [r3, r0]
 803029a:	e7f4      	b.n	8030286 <RegionCN470Verify+0x2a>

0803029c <RegionCN470RxParamSetupReq>:
{
 803029c:	b570      	push	{r4, r5, r6, lr}
 803029e:	0005      	movs	r5, r0
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 80302a0:	6840      	ldr	r0, [r0, #4]
 80302a2:	f7fa fb23 	bl	802a8ec <VerifyRfFreq>
        status &= 0xFE; // Channel frequency KO
 80302a6:	1e43      	subs	r3, r0, #1
 80302a8:	4198      	sbcs	r0, r3
 80302aa:	0004      	movs	r4, r0
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, CN470_RX_MIN_DATARATE, CN470_RX_MAX_DATARATE ) == false )
 80302ac:	2000      	movs	r0, #0
 80302ae:	2205      	movs	r2, #5
 80302b0:	2100      	movs	r1, #0
 80302b2:	5628      	ldrsb	r0, [r5, r0]
        status &= 0xFE; // Channel frequency KO
 80302b4:	3406      	adds	r4, #6
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, CN470_RX_MIN_DATARATE, CN470_RX_MAX_DATARATE ) == false )
 80302b6:	f7ff fe83 	bl	802ffc0 <RegionCommonValueInRange>
 80302ba:	2800      	cmp	r0, #0
 80302bc:	d101      	bne.n	80302c2 <RegionCN470RxParamSetupReq+0x26>
        status &= 0xFD; // Datarate KO
 80302be:	2302      	movs	r3, #2
 80302c0:	439c      	bics	r4, r3
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, CN470_MIN_RX1_DR_OFFSET, CN470_MAX_RX1_DR_OFFSET ) == false )
 80302c2:	2001      	movs	r0, #1
 80302c4:	2203      	movs	r2, #3
 80302c6:	2100      	movs	r1, #0
 80302c8:	5628      	ldrsb	r0, [r5, r0]
 80302ca:	f7ff fe79 	bl	802ffc0 <RegionCommonValueInRange>
 80302ce:	2800      	cmp	r0, #0
 80302d0:	d101      	bne.n	80302d6 <RegionCN470RxParamSetupReq+0x3a>
        status &= 0xFB; // Rx1DrOffset range KO
 80302d2:	2304      	movs	r3, #4
 80302d4:	439c      	bics	r4, r3
}
 80302d6:	0020      	movs	r0, r4
 80302d8:	bd70      	pop	{r4, r5, r6, pc}

080302da <RegionCN470NewChannelReq>:
}
 80302da:	2000      	movs	r0, #0
 80302dc:	4770      	bx	lr

080302de <RegionCN470TxParamSetupReq>:
    return -1;
 80302de:	2001      	movs	r0, #1
}
 80302e0:	4240      	negs	r0, r0
 80302e2:	4770      	bx	lr

080302e4 <RegionCN470DlChannelReq>:
 80302e4:	2000      	movs	r0, #0
 80302e6:	4770      	bx	lr

080302e8 <RegionCN470AlternateDr>:
}
 80302e8:	4770      	bx	lr

080302ea <RegionCN470ApplyDrOffset>:
    int8_t datarate = dr - drOffset;
 80302ea:	1a8a      	subs	r2, r1, r2
 80302ec:	b252      	sxtb	r2, r2
    return datarate;
 80302ee:	1c10      	adds	r0, r2, #0
 80302f0:	2a00      	cmp	r2, #0
 80302f2:	da00      	bge.n	80302f6 <RegionCN470ApplyDrOffset+0xc>
 80302f4:	2000      	movs	r0, #0
 80302f6:	b2c0      	uxtb	r0, r0
}
 80302f8:	4770      	bx	lr

080302fa <LmHandlerDeviceTimeReq>:
{
 80302fa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  mlmeReq.Type = MLME_DEVICE_TIME;
 80302fc:	230a      	movs	r3, #10
 80302fe:	a801      	add	r0, sp, #4
 8030300:	7003      	strb	r3, [r0, #0]
  status = LoRaMacMlmeRequest(&mlmeReq);
 8030302:	f7f8 f989 	bl	8028618 <LoRaMacMlmeRequest>
  if (status == LORAMAC_STATUS_OK)
 8030306:	1e43      	subs	r3, r0, #1
 8030308:	4198      	sbcs	r0, r3
}
 803030a:	4240      	negs	r0, r0
 803030c:	b007      	add	sp, #28
 803030e:	bd00      	pop	{pc}

08030310 <LmHandlerJoinStatus>:
{
 8030310:	b500      	push	{lr}
 8030312:	b08b      	sub	sp, #44	; 0x2c
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 8030314:	2301      	movs	r3, #1
 8030316:	466a      	mov	r2, sp
  status = LoRaMacMibGetRequestConfirm(&mibReq);
 8030318:	a801      	add	r0, sp, #4
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 803031a:	7113      	strb	r3, [r2, #4]
  status = LoRaMacMibGetRequestConfirm(&mibReq);
 803031c:	f7f7 fe34 	bl	8027f88 <LoRaMacMibGetRequestConfirm>
    return LORAMAC_HANDLER_RESET;
 8030320:	2300      	movs	r3, #0
  if (status == LORAMAC_STATUS_OK)
 8030322:	4298      	cmp	r0, r3
 8030324:	d104      	bne.n	8030330 <LmHandlerJoinStatus+0x20>
    if (mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE)
 8030326:	466b      	mov	r3, sp
 8030328:	7a1b      	ldrb	r3, [r3, #8]
 803032a:	1e5a      	subs	r2, r3, #1
 803032c:	4193      	sbcs	r3, r2
      return LORAMAC_HANDLER_RESET;
 803032e:	b2db      	uxtb	r3, r3
}
 8030330:	0018      	movs	r0, r3
 8030332:	b00b      	add	sp, #44	; 0x2c
 8030334:	bd00      	pop	{pc}

08030336 <LmHandlerGetCurrentClass>:
{
 8030336:	b510      	push	{r4, lr}
 8030338:	0004      	movs	r4, r0
 803033a:	b08a      	sub	sp, #40	; 0x28
  if (deviceClass == NULL)
 803033c:	2800      	cmp	r0, #0
 803033e:	d103      	bne.n	8030348 <LmHandlerGetCurrentClass+0x12>
    return LORAMAC_HANDLER_ERROR;
 8030340:	2001      	movs	r0, #1
 8030342:	4240      	negs	r0, r0
}
 8030344:	b00a      	add	sp, #40	; 0x28
 8030346:	bd10      	pop	{r4, pc}
  mibReq.Type = MIB_DEVICE_CLASS;
 8030348:	2300      	movs	r3, #0
 803034a:	466a      	mov	r2, sp
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 803034c:	a801      	add	r0, sp, #4
  mibReq.Type = MIB_DEVICE_CLASS;
 803034e:	7113      	strb	r3, [r2, #4]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8030350:	f7f7 fe1a 	bl	8027f88 <LoRaMacMibGetRequestConfirm>
 8030354:	2800      	cmp	r0, #0
 8030356:	d1f3      	bne.n	8030340 <LmHandlerGetCurrentClass+0xa>
  *deviceClass = mibReq.Param.Class;
 8030358:	466b      	mov	r3, sp
 803035a:	7a1b      	ldrb	r3, [r3, #8]
 803035c:	7023      	strb	r3, [r4, #0]
  return LORAMAC_HANDLER_SUCCESS;
 803035e:	e7f1      	b.n	8030344 <LmHandlerGetCurrentClass+0xe>

08030360 <LmhpComplianceProcess>:

static void LmhpComplianceProcess(void)
{
  /* Nothing to process */
}
 8030360:	4770      	bx	lr

08030362 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent(void *context)
{
 8030362:	b510      	push	{r4, lr}
  LmhpComplianceTxProcess();
 8030364:	f7fb fa14 	bl	802b790 <LmhpComplianceTxProcess.isra.0>
}
 8030368:	bd10      	pop	{r4, pc}

0803036a <NvmCtxMgmtEvent>:
    {
      break;
    }
  }
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 803036a:	4770      	bx	lr

0803036c <NvmCtxMgmtStore>:

  return NVMCTXMGMT_STATUS_SUCCESS;
#else /* CONTEXT_MANAGEMENT_ENABLED == 0 */
  return NVMCTXMGMT_STATUS_FAIL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 803036c:	2001      	movs	r0, #1
 803036e:	4770      	bx	lr

08030370 <NvmCtxMgmtRestore>:
 8030370:	2001      	movs	r0, #1
 8030372:	4770      	bx	lr

08030374 <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
 8030374:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8030376:	2100      	movs	r1, #0
 8030378:	2001      	movs	r0, #1
 803037a:	f7fb fc0d 	bl	802bb98 <z_arm_fatal_error>
}
 803037e:	bd10      	pop	{r4, pc}

08030380 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 8030380:	b510      	push	{r4, lr}
 8030382:	0001      	movs	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 8030384:	6800      	ldr	r0, [r0, #0]
 8030386:	f7fb fc07 	bl	802bb98 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
 803038a:	bd10      	pop	{r4, pc}

0803038c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 803038c:	b510      	push	{r4, lr}
	handler();
 803038e:	f7fb fc39 	bl	802bc04 <z_SysNmiOnReset>
	z_arm_int_exit();
 8030392:	f7fb fd01 	bl	802bd98 <z_arm_exc_exit>
}
 8030396:	bd10      	pop	{r4, pc}

08030398 <z_arm_fault_init>:
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 8030398:	4770      	bx	lr

0803039a <_stdout_hook_default>:
	return EOF;
 803039a:	2001      	movs	r0, #1
}
 803039c:	4240      	negs	r0, r0
 803039e:	4770      	bx	lr

080303a0 <_stdin_hook_default>:
}
 80303a0:	2000      	movs	r0, #0
 80303a2:	4770      	bx	lr

080303a4 <_read>:
{
 80303a4:	b510      	push	{r4, lr}
 80303a6:	0008      	movs	r0, r1
 80303a8:	0011      	movs	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
 80303aa:	f7fb fdf1 	bl	802bf90 <z_impl_zephyr_read_stdin>
}
 80303ae:	bd10      	pop	{r4, pc}

080303b0 <_write>:
{
 80303b0:	b510      	push	{r4, lr}
 80303b2:	0008      	movs	r0, r1
 80303b4:	0011      	movs	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
 80303b6:	f7fb fdff 	bl	802bfb8 <z_impl_zephyr_write_stdout>
}
 80303ba:	bd10      	pop	{r4, pc}

080303bc <_close>:
 80303bc:	2001      	movs	r0, #1
 80303be:	4240      	negs	r0, r0
 80303c0:	4770      	bx	lr

080303c2 <_lseek>:
}
 80303c2:	2000      	movs	r0, #0
 80303c4:	4770      	bx	lr

080303c6 <_isatty>:
{
 80303c6:	0003      	movs	r3, r0
	return file <= 2;
 80303c8:	2202      	movs	r2, #2
 80303ca:	2100      	movs	r1, #0
 80303cc:	0fc0      	lsrs	r0, r0, #31
 80303ce:	429a      	cmp	r2, r3
 80303d0:	4148      	adcs	r0, r1
}
 80303d2:	4770      	bx	lr

080303d4 <_kill>:
}
 80303d4:	2000      	movs	r0, #0
 80303d6:	4770      	bx	lr

080303d8 <_getpid>:
}
 80303d8:	2000      	movs	r0, #0
 80303da:	4770      	bx	lr

080303dc <_fstat>:
	st->st_mode = S_IFCHR;
 80303dc:	2380      	movs	r3, #128	; 0x80
 80303de:	019b      	lsls	r3, r3, #6
}
 80303e0:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80303e2:	604b      	str	r3, [r1, #4]
}
 80303e4:	4770      	bx	lr

080303e6 <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80303e6:	6843      	ldr	r3, [r0, #4]
}
 80303e8:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80303ea:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 80303ec:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 80303ee:	600b      	str	r3, [r1, #0]
}
 80303f0:	4770      	bx	lr

080303f2 <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80303f2:	6843      	ldr	r3, [r0, #4]
 80303f4:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 80303f6:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 80303f8:	4042      	eors	r2, r0
 80303fa:	4011      	ands	r1, r2
 80303fc:	4041      	eors	r1, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 80303fe:	6159      	str	r1, [r3, #20]
}
 8030400:	2000      	movs	r0, #0
 8030402:	4770      	bx	lr

08030404 <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8030404:	6843      	ldr	r3, [r0, #4]
}
 8030406:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8030408:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 803040a:	6199      	str	r1, [r3, #24]
}
 803040c:	4770      	bx	lr

0803040e <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 803040e:	6843      	ldr	r3, [r0, #4]
}
 8030410:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8030412:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8030414:	6299      	str	r1, [r3, #40]	; 0x28
}
 8030416:	4770      	bx	lr

08030418 <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8030418:	6843      	ldr	r3, [r0, #4]
}
 803041a:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 803041c:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 803041e:	6953      	ldr	r3, [r2, #20]
 8030420:	404b      	eors	r3, r1
 8030422:	6153      	str	r3, [r2, #20]
}
 8030424:	4770      	bx	lr

08030426 <gpio_stm32_manage_callback>:

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
	struct gpio_stm32_data *data = dev->data;
 8030426:	6903      	ldr	r3, [r0, #16]
{
 8030428:	b530      	push	{r4, r5, lr}
	return list->head;
 803042a:	6898      	ldr	r0, [r3, #8]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 803042c:	2400      	movs	r4, #0
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 803042e:	2800      	cmp	r0, #0
 8030430:	d104      	bne.n	803043c <gpio_stm32_manage_callback+0x16>
				return -EINVAL;
			}
		}
	}

	if (set) {
 8030432:	2a00      	cmp	r2, #0
 8030434:	d11a      	bne.n	803046c <gpio_stm32_manage_callback+0x46>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 8030436:	2000      	movs	r0, #0

	return gpio_manage_callback(&data->cb, callback, set);
}
 8030438:	bd30      	pop	{r4, r5, pc}
 803043a:	0028      	movs	r0, r5
 803043c:	4281      	cmp	r1, r0
 803043e:	d10f      	bne.n	8030460 <gpio_stm32_manage_callback+0x3a>
	return node->next;
 8030440:	6808      	ldr	r0, [r1, #0]
	return list->tail;
 8030442:	68dd      	ldr	r5, [r3, #12]
Z_GENLIST_REMOVE(slist, snode)
 8030444:	2c00      	cmp	r4, #0
 8030446:	d106      	bne.n	8030456 <gpio_stm32_manage_callback+0x30>
	list->head = node;
 8030448:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 803044a:	428d      	cmp	r5, r1
 803044c:	d100      	bne.n	8030450 <gpio_stm32_manage_callback+0x2a>
	list->tail = node;
 803044e:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 8030450:	2000      	movs	r0, #0
 8030452:	6008      	str	r0, [r1, #0]
 8030454:	e7ed      	b.n	8030432 <gpio_stm32_manage_callback+0xc>
 8030456:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 8030458:	428d      	cmp	r5, r1
 803045a:	d1f9      	bne.n	8030450 <gpio_stm32_manage_callback+0x2a>
	list->tail = node;
 803045c:	60dc      	str	r4, [r3, #12]
}
 803045e:	e7f7      	b.n	8030450 <gpio_stm32_manage_callback+0x2a>
	return node->next;
 8030460:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8030462:	0004      	movs	r4, r0
 8030464:	2d00      	cmp	r5, #0
 8030466:	d1e8      	bne.n	803043a <gpio_stm32_manage_callback+0x14>
			if (!set) {
 8030468:	2a00      	cmp	r2, #0
 803046a:	d007      	beq.n	803047c <gpio_stm32_manage_callback+0x56>
	parent->next = child;
 803046c:	689a      	ldr	r2, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 803046e:	68d8      	ldr	r0, [r3, #12]
	parent->next = child;
 8030470:	600a      	str	r2, [r1, #0]
	list->head = node;
 8030472:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 8030474:	2800      	cmp	r0, #0
 8030476:	d1de      	bne.n	8030436 <gpio_stm32_manage_callback+0x10>
	list->tail = node;
 8030478:	60d9      	str	r1, [r3, #12]
}
 803047a:	e7dd      	b.n	8030438 <gpio_stm32_manage_callback+0x12>
				return -EINVAL;
 803047c:	2016      	movs	r0, #22
 803047e:	4240      	negs	r0, r0
	return gpio_manage_callback(&data->cb, callback, set);
 8030480:	e7da      	b.n	8030438 <gpio_stm32_manage_callback+0x12>

08030482 <gpio_stm32_isr>:
{
 8030482:	000b      	movs	r3, r1
 8030484:	6889      	ldr	r1, [r1, #8]
 8030486:	b570      	push	{r4, r5, r6, lr}
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8030488:	2900      	cmp	r1, #0
 803048a:	d010      	beq.n	80304ae <gpio_stm32_isr+0x2c>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 803048c:	2501      	movs	r5, #1
 803048e:	4085      	lsls	r5, r0
 8030490:	685e      	ldr	r6, [r3, #4]
	return node->next;
 8030492:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
 8030494:	688b      	ldr	r3, [r1, #8]
 8030496:	001a      	movs	r2, r3
 8030498:	402a      	ands	r2, r5
 803049a:	422b      	tst	r3, r5
 803049c:	d002      	beq.n	80304a4 <gpio_stm32_isr+0x22>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 803049e:	0030      	movs	r0, r6
 80304a0:	684b      	ldr	r3, [r1, #4]
 80304a2:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 80304a4:	2c00      	cmp	r4, #0
 80304a6:	d002      	beq.n	80304ae <gpio_stm32_isr+0x2c>
 80304a8:	0021      	movs	r1, r4
 80304aa:	6824      	ldr	r4, [r4, #0]
 80304ac:	e7f2      	b.n	8030494 <gpio_stm32_isr+0x12>
}
 80304ae:	bd70      	pop	{r4, r5, r6, pc}

080304b0 <gpio_stm32_configure>:
{
 80304b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	pinval = 1 << pin;
 80304b2:	2601      	movs	r6, #1
{
 80304b4:	b085      	sub	sp, #20
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 80304b6:	2430      	movs	r4, #48	; 0x30
{
 80304b8:	9302      	str	r3, [sp, #8]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80304ba:	6843      	ldr	r3, [r0, #4]
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 80304bc:	4014      	ands	r4, r2
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80304be:	6858      	ldr	r0, [r3, #4]
	pinval = 1 << pin;
 80304c0:	0033      	movs	r3, r6
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 80304c2:	9401      	str	r4, [sp, #4]
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 80304c4:	0994      	lsrs	r4, r2, #6
	pinval = 1 << pin;
 80304c6:	408b      	lsls	r3, r1
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 80304c8:	4034      	ands	r4, r6
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80304ca:	408c      	lsls	r4, r1
 80304cc:	6845      	ldr	r5, [r0, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80304ce:	3602      	adds	r6, #2
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80304d0:	439d      	bics	r5, r3
 80304d2:	432c      	orrs	r4, r5
 80304d4:	6044      	str	r4, [r0, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80304d6:	6884      	ldr	r4, [r0, #8]
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 80304d8:	2703      	movs	r7, #3
 80304da:	46a4      	mov	ip, r4
 80304dc:	001c      	movs	r4, r3
 80304de:	408c      	lsls	r4, r1
 80304e0:	4366      	muls	r6, r4
 80304e2:	43f5      	mvns	r5, r6
 80304e4:	9503      	str	r5, [sp, #12]
 80304e6:	09d5      	lsrs	r5, r2, #7
 80304e8:	403d      	ands	r5, r7
 80304ea:	4365      	muls	r5, r4
 80304ec:	002f      	movs	r7, r5
 80304ee:	4665      	mov	r5, ip
 80304f0:	43b5      	bics	r5, r6
 80304f2:	432f      	orrs	r7, r5
 80304f4:	6087      	str	r7, [r0, #8]
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 80304f6:	2703      	movs	r7, #3
 80304f8:	0a52      	lsrs	r2, r2, #9
 80304fa:	403a      	ands	r2, r7
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80304fc:	4362      	muls	r2, r4
 80304fe:	68c5      	ldr	r5, [r0, #12]
 8030500:	43b5      	bics	r5, r6
 8030502:	432a      	orrs	r2, r5
 8030504:	60c2      	str	r2, [r0, #12]
	if (mode == STM32_MODER_ALT_MODE) {
 8030506:	9a01      	ldr	r2, [sp, #4]
 8030508:	2a20      	cmp	r2, #32
 803050a:	d10c      	bne.n	8030526 <gpio_stm32_configure+0x76>
		if (pin < 8) {
 803050c:	2907      	cmp	r1, #7
 803050e:	dc15      	bgt.n	803053c <gpio_stm32_configure+0x8c>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8030510:	0023      	movs	r3, r4
 8030512:	408b      	lsls	r3, r1
 8030514:	408b      	lsls	r3, r1
 8030516:	210f      	movs	r1, #15
 8030518:	4359      	muls	r1, r3
 803051a:	6a02      	ldr	r2, [r0, #32]
 803051c:	438a      	bics	r2, r1
 803051e:	9902      	ldr	r1, [sp, #8]
 8030520:	434b      	muls	r3, r1
 8030522:	4313      	orrs	r3, r2
 8030524:	6203      	str	r3, [r0, #32]
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8030526:	9b01      	ldr	r3, [sp, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8030528:	6802      	ldr	r2, [r0, #0]
 803052a:	091b      	lsrs	r3, r3, #4
 803052c:	435c      	muls	r4, r3
 803052e:	9b03      	ldr	r3, [sp, #12]
 8030530:	401a      	ands	r2, r3
 8030532:	4314      	orrs	r4, r2
 8030534:	6004      	str	r4, [r0, #0]
}
 8030536:	2000      	movs	r0, #0
 8030538:	b005      	add	sp, #20
 803053a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 803053c:	210f      	movs	r1, #15
 803053e:	0a1b      	lsrs	r3, r3, #8
 8030540:	435b      	muls	r3, r3
 8030542:	435b      	muls	r3, r3
 8030544:	4359      	muls	r1, r3
 8030546:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8030548:	438a      	bics	r2, r1
 803054a:	9902      	ldr	r1, [sp, #8]
 803054c:	434b      	muls	r3, r1
 803054e:	4313      	orrs	r3, r2
 8030550:	6243      	str	r3, [r0, #36]	; 0x24
}
 8030552:	e7e8      	b.n	8030526 <gpio_stm32_configure+0x76>

08030554 <gpio_stm32_config>:
{
 8030554:	b570      	push	{r4, r5, r6, lr}
	if ((flags & GPIO_OUTPUT) != 0) {
 8030556:	2480      	movs	r4, #128	; 0x80
 8030558:	00a4      	lsls	r4, r4, #2
{
 803055a:	0013      	movs	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 803055c:	4222      	tst	r2, r4
 803055e:	d018      	beq.n	8030592 <gpio_stm32_config+0x3e>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8030560:	079a      	lsls	r2, r3, #30
 8030562:	d50f      	bpl.n	8030584 <gpio_stm32_config+0x30>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 8030564:	075a      	lsls	r2, r3, #29
 8030566:	d52d      	bpl.n	80305c4 <gpio_stm32_config+0x70>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 8030568:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 803056a:	06dd      	lsls	r5, r3, #27
 803056c:	d50c      	bpl.n	8030588 <gpio_stm32_config+0x34>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 803056e:	4322      	orrs	r2, r4
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8030570:	051c      	lsls	r4, r3, #20
 8030572:	d41e      	bmi.n	80305b2 <gpio_stm32_config+0x5e>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8030574:	055b      	lsls	r3, r3, #21
 8030576:	d517      	bpl.n	80305a8 <gpio_stm32_config+0x54>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8030578:	2301      	movs	r3, #1
 803057a:	408b      	lsls	r3, r1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 803057c:	6844      	ldr	r4, [r0, #4]
 803057e:	6864      	ldr	r4, [r4, #4]
  WRITE_REG(GPIOx->BRR, PinMask);
 8030580:	62a3      	str	r3, [r4, #40]	; 0x28
	return 0;
 8030582:	e011      	b.n	80305a8 <gpio_stm32_config+0x54>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8030584:	2210      	movs	r2, #16
 8030586:	e7f0      	b.n	803056a <gpio_stm32_config+0x16>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8030588:	069c      	lsls	r4, r3, #26
 803058a:	d5f1      	bpl.n	8030570 <gpio_stm32_config+0x1c>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 803058c:	2480      	movs	r4, #128	; 0x80
 803058e:	00e4      	lsls	r4, r4, #3
 8030590:	e7ed      	b.n	803056e <gpio_stm32_config+0x1a>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8030592:	2230      	movs	r2, #48	; 0x30
	} else if  ((flags & GPIO_INPUT) != 0) {
 8030594:	05dd      	lsls	r5, r3, #23
 8030596:	d507      	bpl.n	80305a8 <gpio_stm32_config+0x54>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8030598:	0022      	movs	r2, r4
		if ((flags & GPIO_PULL_UP) != 0) {
 803059a:	06dc      	lsls	r4, r3, #27
 803059c:	d404      	bmi.n	80305a8 <gpio_stm32_config+0x54>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 803059e:	2420      	movs	r4, #32
 80305a0:	001a      	movs	r2, r3
 80305a2:	4022      	ands	r2, r4
 80305a4:	4223      	tst	r3, r4
 80305a6:	d10a      	bne.n	80305be <gpio_stm32_config+0x6a>
	gpio_stm32_configure(dev, pin, pincfg, 0);
 80305a8:	2300      	movs	r3, #0
 80305aa:	f7ff ff81 	bl	80304b0 <gpio_stm32_configure>
 80305ae:	2000      	movs	r0, #0
}
 80305b0:	bd70      	pop	{r4, r5, r6, pc}
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 80305b2:	2301      	movs	r3, #1
 80305b4:	408b      	lsls	r3, r1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80305b6:	6844      	ldr	r4, [r0, #4]
 80305b8:	6864      	ldr	r4, [r4, #4]
	WRITE_REG(gpio->BSRR, pins);
 80305ba:	61a3      	str	r3, [r4, #24]
	return 0;
 80305bc:	e7f4      	b.n	80305a8 <gpio_stm32_config+0x54>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 80305be:	2280      	movs	r2, #128	; 0x80
 80305c0:	00d2      	lsls	r2, r2, #3
 80305c2:	e7f1      	b.n	80305a8 <gpio_stm32_config+0x54>
				return -ENOTSUP;
 80305c4:	2086      	movs	r0, #134	; 0x86
 80305c6:	4240      	negs	r0, r0
	return err;
 80305c8:	e7f2      	b.n	80305b0 <gpio_stm32_config+0x5c>

080305ca <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 80305ca:	b510      	push	{r4, lr}
	struct gpio_stm32_data *data = dev->data;

	data->dev = dev;
 80305cc:	6903      	ldr	r3, [r0, #16]

	return gpio_stm32_clock_request(dev, true);
 80305ce:	2101      	movs	r1, #1
	data->dev = dev;
 80305d0:	6058      	str	r0, [r3, #4]
	return gpio_stm32_clock_request(dev, true);
 80305d2:	f7fb fdad 	bl	802c130 <gpio_stm32_clock_request>
}
 80305d6:	bd10      	pop	{r4, pc}

080305d8 <uart_stm32_poll_out>:
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 80305d8:	2280      	movs	r2, #128	; 0x80
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80305da:	6843      	ldr	r3, [r0, #4]
 80305dc:	681b      	ldr	r3, [r3, #0]
 80305de:	69d8      	ldr	r0, [r3, #28]
 80305e0:	4210      	tst	r0, r2
 80305e2:	d0fc      	beq.n	80305de <uart_stm32_poll_out+0x6>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80305e4:	2240      	movs	r2, #64	; 0x40
 80305e6:	621a      	str	r2, [r3, #32]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 80305e8:	6299      	str	r1, [r3, #40]	; 0x28
}
 80305ea:	4770      	bx	lr

080305ec <uart_stm32_err_check>:
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80305ec:	2101      	movs	r1, #1
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80305ee:	6843      	ldr	r3, [r0, #4]
{
 80305f0:	b510      	push	{r4, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80305f2:	681b      	ldr	r3, [r3, #0]
 80305f4:	2202      	movs	r2, #2
 80305f6:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 80305f8:	69dc      	ldr	r4, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80305fa:	08c0      	lsrs	r0, r0, #3
 80305fc:	4008      	ands	r0, r1
	if (LL_USART_IsActiveFlag_PE(UartInstance)) {
 80305fe:	420c      	tst	r4, r1
 8030600:	d000      	beq.n	8030604 <uart_stm32_err_check+0x18>
		err |= UART_ERROR_PARITY;
 8030602:	4310      	orrs	r0, r2
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8030604:	69d9      	ldr	r1, [r3, #28]
 8030606:	4211      	tst	r1, r2
 8030608:	d001      	beq.n	803060e <uart_stm32_err_check+0x22>
		err |= UART_ERROR_FRAMING;
 803060a:	2204      	movs	r2, #4
 803060c:	4310      	orrs	r0, r2
	if (err & UART_ERROR_OVERRUN) {
 803060e:	07c2      	lsls	r2, r0, #31
 8030610:	d501      	bpl.n	8030616 <uart_stm32_err_check+0x2a>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8030612:	2208      	movs	r2, #8
 8030614:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 8030616:	0782      	lsls	r2, r0, #30
 8030618:	d501      	bpl.n	803061e <uart_stm32_err_check+0x32>
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 803061a:	2201      	movs	r2, #1
 803061c:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 803061e:	2204      	movs	r2, #4
 8030620:	4210      	tst	r0, r2
 8030622:	d001      	beq.n	8030628 <uart_stm32_err_check+0x3c>
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8030624:	2102      	movs	r1, #2
 8030626:	6219      	str	r1, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8030628:	621a      	str	r2, [r3, #32]
}
 803062a:	bd10      	pop	{r4, pc}

0803062c <uart_stm32_pm_control>:
 */
static int uart_stm32_pm_control(const struct device *dev,
					 uint32_t ctrl_command,
					 void *context, pm_device_cb cb,
					 void *arg)
{
 803062c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uart_stm32_data *data = DEV_DATA(dev);
 803062e:	6905      	ldr	r5, [r0, #16]
{
 8030630:	001c      	movs	r4, r3

	if (ctrl_command == PM_DEVICE_STATE_SET) {
		uint32_t new_state = *((const uint32_t *)context);

		if (new_state != data->pm_state) {
 8030632:	68ab      	ldr	r3, [r5, #8]
	if (ctrl_command == PM_DEVICE_STATE_SET) {
 8030634:	2901      	cmp	r1, #1
 8030636:	d11e      	bne.n	8030676 <uart_stm32_pm_control+0x4a>
		uint32_t new_state = *((const uint32_t *)context);
 8030638:	6811      	ldr	r1, [r2, #0]
		if (new_state != data->pm_state) {
 803063a:	4299      	cmp	r1, r3
 803063c:	d014      	beq.n	8030668 <uart_stm32_pm_control+0x3c>
	if (new_state != PM_DEVICE_ACTIVE_STATE) {
 803063e:	2901      	cmp	r1, #1
 8030640:	d011      	beq.n	8030666 <uart_stm32_pm_control+0x3a>
  return ((READ_BIT(USARTx->ISR, USART_ISR_BUSY) == (USART_ISR_BUSY)) ? 1UL : 0UL);
 8030642:	2680      	movs	r6, #128	; 0x80
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8030644:	6843      	ldr	r3, [r0, #4]
 8030646:	0276      	lsls	r6, r6, #9
 8030648:	681b      	ldr	r3, [r3, #0]
 803064a:	69df      	ldr	r7, [r3, #28]
 803064c:	4237      	tst	r7, r6
 803064e:	d1fc      	bne.n	803064a <uart_stm32_pm_control+0x1e>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8030650:	2640      	movs	r6, #64	; 0x40
 8030652:	69df      	ldr	r7, [r3, #28]
 8030654:	4237      	tst	r7, r6
 8030656:	d0fc      	beq.n	8030652 <uart_stm32_pm_control+0x26>
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8030658:	2680      	movs	r6, #128	; 0x80
 803065a:	03f6      	lsls	r6, r6, #15
 803065c:	69df      	ldr	r7, [r3, #28]
 803065e:	4237      	tst	r7, r6
 8030660:	d0fc      	beq.n	803065c <uart_stm32_pm_control+0x30>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8030662:	2608      	movs	r6, #8
 8030664:	621e      	str	r6, [r3, #32]
	data->pm_state = new_state;
 8030666:	60a9      	str	r1, [r5, #8]
	} else {
		__ASSERT_NO_MSG(ctrl_command == PM_DEVICE_STATE_GET);
		*((uint32_t *)context) = data->pm_state;
	}

	if (cb) {
 8030668:	2c00      	cmp	r4, #0
 803066a:	d002      	beq.n	8030672 <uart_stm32_pm_control+0x46>
		cb(dev, 0, context, arg);
 803066c:	2100      	movs	r1, #0
 803066e:	9b06      	ldr	r3, [sp, #24]
 8030670:	47a0      	blx	r4
	}

	return 0;
}
 8030672:	2000      	movs	r0, #0
 8030674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*((uint32_t *)context) = data->pm_state;
 8030676:	6013      	str	r3, [r2, #0]
 8030678:	e7f6      	b.n	8030668 <uart_stm32_pm_control+0x3c>

0803067a <uart_stm32_poll_in>:
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 803067a:	2208      	movs	r2, #8
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 803067c:	6843      	ldr	r3, [r0, #4]
 803067e:	681b      	ldr	r3, [r3, #0]
 8030680:	69d8      	ldr	r0, [r3, #28]
 8030682:	4210      	tst	r0, r2
 8030684:	d000      	beq.n	8030688 <uart_stm32_poll_in+0xe>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8030686:	621a      	str	r2, [r3, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8030688:	69da      	ldr	r2, [r3, #28]
 803068a:	0692      	lsls	r2, r2, #26
 803068c:	d503      	bpl.n	8030696 <uart_stm32_poll_in+0x1c>
	return 0;
 803068e:	2000      	movs	r0, #0
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8030690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030692:	700b      	strb	r3, [r1, #0]
}
 8030694:	4770      	bx	lr
		return -1;
 8030696:	2001      	movs	r0, #1
 8030698:	4240      	negs	r0, r0
 803069a:	e7fb      	b.n	8030694 <uart_stm32_poll_in+0x1a>

0803069c <SUBGHZ_CheckDeviceReady>:
{
 803069c:	b570      	push	{r4, r5, r6, lr}
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 803069e:	7905      	ldrb	r5, [r0, #4]
{
 80306a0:	0004      	movs	r4, r0
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80306a2:	2d01      	cmp	r5, #1
 80306a4:	d106      	bne.n	80306b4 <SUBGHZ_CheckDeviceReady+0x18>
    LL_PWR_SelectSUBGHZSPI_NSS();
 80306a6:	f7fb ff39 	bl	802c51c <LL_PWR_SelectSUBGHZSPI_NSS>
    HAL_Delay(1);
 80306aa:	0028      	movs	r0, r5
 80306ac:	f7f2 f984 	bl	80229b8 <HAL_Delay>
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80306b0:	f7fb ff2a 	bl	802c508 <LL_PWR_UnselectSUBGHZSPI_NSS>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80306b4:	0020      	movs	r0, r4
 80306b6:	f7fc f815 	bl	802c6e4 <SUBGHZ_WaitOnBusy>
}
 80306ba:	bd70      	pop	{r4, r5, r6, pc}

080306bc <HAL_SUBGHZ_WriteRegisters>:
{
 80306bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80306be:	001f      	movs	r7, r3
 80306c0:	2302      	movs	r3, #2
 80306c2:	0015      	movs	r5, r2
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80306c4:	7982      	ldrb	r2, [r0, #6]
{
 80306c6:	0004      	movs	r4, r0
 80306c8:	000e      	movs	r6, r1
    return HAL_BUSY;
 80306ca:	0018      	movs	r0, r3
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80306cc:	b2d1      	uxtb	r1, r2
 80306ce:	2a01      	cmp	r2, #1
 80306d0:	d125      	bne.n	803071e <HAL_SUBGHZ_WriteRegisters+0x62>
    __HAL_LOCK(hsubghz);
 80306d2:	7962      	ldrb	r2, [r4, #5]
 80306d4:	2a01      	cmp	r2, #1
 80306d6:	d022      	beq.n	803071e <HAL_SUBGHZ_WriteRegisters+0x62>
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80306d8:	71a3      	strb	r3, [r4, #6]
    __HAL_LOCK(hsubghz);
 80306da:	7161      	strb	r1, [r4, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80306dc:	0020      	movs	r0, r4
 80306de:	f7ff ffdd 	bl	803069c <SUBGHZ_CheckDeviceReady>
    LL_PWR_SelectSUBGHZSPI_NSS();
 80306e2:	f7fb ff1b 	bl	802c51c <LL_PWR_SelectSUBGHZSPI_NSS>
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80306e6:	210d      	movs	r1, #13
 80306e8:	0020      	movs	r0, r4
 80306ea:	f7fb ff89 	bl	802c600 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80306ee:	0a31      	lsrs	r1, r6, #8
 80306f0:	0020      	movs	r0, r4
 80306f2:	f7fb ff85 	bl	802c600 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80306f6:	0020      	movs	r0, r4
 80306f8:	b2f1      	uxtb	r1, r6
 80306fa:	f7fb ff81 	bl	802c600 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80306fe:	19ef      	adds	r7, r5, r7
 8030700:	42bd      	cmp	r5, r7
 8030702:	d10d      	bne.n	8030720 <HAL_SUBGHZ_WriteRegisters+0x64>
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8030704:	f7fb ff00 	bl	802c508 <LL_PWR_UnselectSUBGHZSPI_NSS>
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8030708:	0020      	movs	r0, r4
 803070a:	f7fb ffeb 	bl	802c6e4 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 803070e:	68a0      	ldr	r0, [r4, #8]
 8030710:	1e43      	subs	r3, r0, #1
 8030712:	4198      	sbcs	r0, r3
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8030714:	2301      	movs	r3, #1
 8030716:	71a3      	strb	r3, [r4, #6]
    __HAL_UNLOCK(hsubghz);
 8030718:	2300      	movs	r3, #0
      status = HAL_ERROR;
 803071a:	b2c0      	uxtb	r0, r0
    __HAL_UNLOCK(hsubghz);
 803071c:	7163      	strb	r3, [r4, #5]
}
 803071e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8030720:	7829      	ldrb	r1, [r5, #0]
 8030722:	0020      	movs	r0, r4
 8030724:	f7fb ff6c 	bl	802c600 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8030728:	3501      	adds	r5, #1
 803072a:	e7e9      	b.n	8030700 <HAL_SUBGHZ_WriteRegisters+0x44>

0803072c <HAL_SUBGHZ_ReadRegisters>:
{
 803072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803072e:	001f      	movs	r7, r3
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8030730:	7983      	ldrb	r3, [r0, #6]
{
 8030732:	0004      	movs	r4, r0
 8030734:	0015      	movs	r5, r2
 8030736:	000e      	movs	r6, r1
    return HAL_BUSY;
 8030738:	2002      	movs	r0, #2
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 803073a:	b2da      	uxtb	r2, r3
 803073c:	2b01      	cmp	r3, #1
 803073e:	d128      	bne.n	8030792 <HAL_SUBGHZ_ReadRegisters+0x66>
    __HAL_LOCK(hsubghz);
 8030740:	7963      	ldrb	r3, [r4, #5]
 8030742:	2b01      	cmp	r3, #1
 8030744:	d025      	beq.n	8030792 <HAL_SUBGHZ_ReadRegisters+0x66>
 8030746:	7162      	strb	r2, [r4, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8030748:	0020      	movs	r0, r4
 803074a:	f7ff ffa7 	bl	803069c <SUBGHZ_CheckDeviceReady>
    LL_PWR_SelectSUBGHZSPI_NSS();
 803074e:	f7fb fee5 	bl	802c51c <LL_PWR_SelectSUBGHZSPI_NSS>
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8030752:	211d      	movs	r1, #29
 8030754:	0020      	movs	r0, r4
 8030756:	f7fb ff53 	bl	802c600 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 803075a:	0a31      	lsrs	r1, r6, #8
 803075c:	0020      	movs	r0, r4
 803075e:	f7fb ff4f 	bl	802c600 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8030762:	b2f1      	uxtb	r1, r6
 8030764:	0020      	movs	r0, r4
 8030766:	f7fb ff4b 	bl	802c600 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 803076a:	2100      	movs	r1, #0
 803076c:	0020      	movs	r0, r4
 803076e:	f7fb ff47 	bl	802c600 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8030772:	19ef      	adds	r7, r5, r7
 8030774:	42bd      	cmp	r5, r7
 8030776:	d10d      	bne.n	8030794 <HAL_SUBGHZ_ReadRegisters+0x68>
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8030778:	f7fb fec6 	bl	802c508 <LL_PWR_UnselectSUBGHZSPI_NSS>
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 803077c:	0020      	movs	r0, r4
 803077e:	f7fb ffb1 	bl	802c6e4 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8030782:	68a0      	ldr	r0, [r4, #8]
 8030784:	1e43      	subs	r3, r0, #1
 8030786:	4198      	sbcs	r0, r3
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8030788:	2301      	movs	r3, #1
 803078a:	71a3      	strb	r3, [r4, #6]
    __HAL_UNLOCK(hsubghz);
 803078c:	2300      	movs	r3, #0
      status = HAL_ERROR;
 803078e:	b2c0      	uxtb	r0, r0
    __HAL_UNLOCK(hsubghz);
 8030790:	7163      	strb	r3, [r4, #5]
}
 8030792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8030794:	0029      	movs	r1, r5
 8030796:	0020      	movs	r0, r4
 8030798:	f7fb ff6a 	bl	802c670 <SUBGHZSPI_Receive>
      pData++;
 803079c:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 803079e:	e7e9      	b.n	8030774 <HAL_SUBGHZ_ReadRegisters+0x48>

080307a0 <HAL_SUBGHZ_ExecSetCmd>:
{
 80307a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80307a2:	001f      	movs	r7, r3
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80307a4:	7983      	ldrb	r3, [r0, #6]
{
 80307a6:	0004      	movs	r4, r0
 80307a8:	0015      	movs	r5, r2
 80307aa:	000e      	movs	r6, r1
    return HAL_BUSY;
 80307ac:	2002      	movs	r0, #2
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80307ae:	b2da      	uxtb	r2, r3
 80307b0:	2b01      	cmp	r3, #1
 80307b2:	d126      	bne.n	8030802 <HAL_SUBGHZ_ExecSetCmd+0x62>
    __HAL_LOCK(hsubghz);
 80307b4:	7963      	ldrb	r3, [r4, #5]
 80307b6:	2b01      	cmp	r3, #1
 80307b8:	d023      	beq.n	8030802 <HAL_SUBGHZ_ExecSetCmd+0x62>
 80307ba:	7162      	strb	r2, [r4, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80307bc:	0020      	movs	r0, r4
 80307be:	f7ff ff6d 	bl	803069c <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80307c2:	2310      	movs	r3, #16
 80307c4:	0032      	movs	r2, r6
 80307c6:	439a      	bics	r2, r3
 80307c8:	0013      	movs	r3, r2
 80307ca:	3b84      	subs	r3, #132	; 0x84
 80307cc:	425a      	negs	r2, r3
 80307ce:	4153      	adcs	r3, r2
 80307d0:	7123      	strb	r3, [r4, #4]
    LL_PWR_SelectSUBGHZSPI_NSS();
 80307d2:	f7fb fea3 	bl	802c51c <LL_PWR_SelectSUBGHZSPI_NSS>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80307d6:	0031      	movs	r1, r6
 80307d8:	0020      	movs	r0, r4
 80307da:	f7fb ff11 	bl	802c600 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80307de:	19ef      	adds	r7, r5, r7
 80307e0:	42af      	cmp	r7, r5
 80307e2:	d10f      	bne.n	8030804 <HAL_SUBGHZ_ExecSetCmd+0x64>
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80307e4:	f7fb fe90 	bl	802c508 <LL_PWR_UnselectSUBGHZSPI_NSS>
    if (Command != RADIO_SET_SLEEP)
 80307e8:	2e84      	cmp	r6, #132	; 0x84
 80307ea:	d002      	beq.n	80307f2 <HAL_SUBGHZ_ExecSetCmd+0x52>
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80307ec:	0020      	movs	r0, r4
 80307ee:	f7fb ff79 	bl	802c6e4 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80307f2:	68a0      	ldr	r0, [r4, #8]
 80307f4:	1e43      	subs	r3, r0, #1
 80307f6:	4198      	sbcs	r0, r3
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80307f8:	2301      	movs	r3, #1
 80307fa:	71a3      	strb	r3, [r4, #6]
    __HAL_UNLOCK(hsubghz);
 80307fc:	2300      	movs	r3, #0
      status = HAL_ERROR;
 80307fe:	b2c0      	uxtb	r0, r0
    __HAL_UNLOCK(hsubghz);
 8030800:	7163      	strb	r3, [r4, #5]
}
 8030802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8030804:	7829      	ldrb	r1, [r5, #0]
 8030806:	0020      	movs	r0, r4
 8030808:	f7fb fefa 	bl	802c600 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 803080c:	3501      	adds	r5, #1
 803080e:	e7e7      	b.n	80307e0 <HAL_SUBGHZ_ExecSetCmd+0x40>

08030810 <HAL_SUBGHZ_ExecGetCmd>:
{
 8030810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8030812:	001e      	movs	r6, r3
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8030814:	7983      	ldrb	r3, [r0, #6]
{
 8030816:	0004      	movs	r4, r0
 8030818:	0015      	movs	r5, r2
 803081a:	000f      	movs	r7, r1
    return HAL_BUSY;
 803081c:	2002      	movs	r0, #2
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 803081e:	b2da      	uxtb	r2, r3
 8030820:	2b01      	cmp	r3, #1
 8030822:	d120      	bne.n	8030866 <HAL_SUBGHZ_ExecGetCmd+0x56>
    __HAL_LOCK(hsubghz);
 8030824:	7963      	ldrb	r3, [r4, #5]
 8030826:	2b01      	cmp	r3, #1
 8030828:	d01d      	beq.n	8030866 <HAL_SUBGHZ_ExecGetCmd+0x56>
 803082a:	7162      	strb	r2, [r4, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 803082c:	0020      	movs	r0, r4
 803082e:	f7ff ff35 	bl	803069c <SUBGHZ_CheckDeviceReady>
    LL_PWR_SelectSUBGHZSPI_NSS();
 8030832:	f7fb fe73 	bl	802c51c <LL_PWR_SelectSUBGHZSPI_NSS>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8030836:	0039      	movs	r1, r7
 8030838:	0020      	movs	r0, r4
 803083a:	f7fb fee1 	bl	802c600 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 803083e:	2100      	movs	r1, #0
 8030840:	0020      	movs	r0, r4
 8030842:	f7fb fedd 	bl	802c600 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8030846:	19ae      	adds	r6, r5, r6
 8030848:	42b5      	cmp	r5, r6
 803084a:	d10d      	bne.n	8030868 <HAL_SUBGHZ_ExecGetCmd+0x58>
    LL_PWR_UnselectSUBGHZSPI_NSS();
 803084c:	f7fb fe5c 	bl	802c508 <LL_PWR_UnselectSUBGHZSPI_NSS>
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8030850:	0020      	movs	r0, r4
 8030852:	f7fb ff47 	bl	802c6e4 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8030856:	68a0      	ldr	r0, [r4, #8]
 8030858:	1e43      	subs	r3, r0, #1
 803085a:	4198      	sbcs	r0, r3
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 803085c:	2301      	movs	r3, #1
 803085e:	71a3      	strb	r3, [r4, #6]
    __HAL_UNLOCK(hsubghz);
 8030860:	2300      	movs	r3, #0
      status = HAL_ERROR;
 8030862:	b2c0      	uxtb	r0, r0
    __HAL_UNLOCK(hsubghz);
 8030864:	7163      	strb	r3, [r4, #5]
}
 8030866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8030868:	0029      	movs	r1, r5
 803086a:	0020      	movs	r0, r4
 803086c:	f7fb ff00 	bl	802c670 <SUBGHZSPI_Receive>
      pData++;
 8030870:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8030872:	e7e9      	b.n	8030848 <HAL_SUBGHZ_ExecGetCmd+0x38>

08030874 <HAL_SUBGHZ_IRQHandler>:
{
 8030874:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t tmpisr[2] = {0};
 8030876:	2300      	movs	r3, #0
 8030878:	466a      	mov	r2, sp
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 803087a:	2112      	movs	r1, #18
  uint8_t tmpisr[2] = {0};
 803087c:	8093      	strh	r3, [r2, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 803087e:	3302      	adds	r3, #2
 8030880:	aa01      	add	r2, sp, #4
{
 8030882:	0004      	movs	r4, r0
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8030884:	f7ff ffc4 	bl	8030810 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8030888:	466b      	mov	r3, sp
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 803088a:	2601      	movs	r6, #1
 803088c:	889b      	ldrh	r3, [r3, #4]
 803088e:	ba5b      	rev16	r3, r3
 8030890:	b29d      	uxth	r5, r3
 8030892:	421e      	tst	r6, r3
 8030894:	d002      	beq.n	803089c <HAL_SUBGHZ_IRQHandler+0x28>
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8030896:	0020      	movs	r0, r4
 8030898:	f7f4 fba2 	bl	8024fe0 <HAL_SUBGHZ_TxCpltCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 803089c:	086b      	lsrs	r3, r5, #1
 803089e:	4233      	tst	r3, r6
 80308a0:	d002      	beq.n	80308a8 <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80308a2:	0020      	movs	r0, r4
 80308a4:	f7f4 fba4 	bl	8024ff0 <HAL_SUBGHZ_RxCpltCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80308a8:	2601      	movs	r6, #1
 80308aa:	076b      	lsls	r3, r5, #29
 80308ac:	d502      	bpl.n	80308b4 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80308ae:	0020      	movs	r0, r4
 80308b0:	f7f4 fbd2 	bl	8025058 <HAL_SUBGHZ_PreambleDetectedCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80308b4:	08eb      	lsrs	r3, r5, #3
 80308b6:	4233      	tst	r3, r6
 80308b8:	d002      	beq.n	80308c0 <HAL_SUBGHZ_IRQHandler+0x4c>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80308ba:	0020      	movs	r0, r4
 80308bc:	f7f4 fbd4 	bl	8025068 <HAL_SUBGHZ_SyncWordValidCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80308c0:	2601      	movs	r6, #1
 80308c2:	06eb      	lsls	r3, r5, #27
 80308c4:	d502      	bpl.n	80308cc <HAL_SUBGHZ_IRQHandler+0x58>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80308c6:	0020      	movs	r0, r4
 80308c8:	f7f4 fbd6 	bl	8025078 <HAL_SUBGHZ_HeaderValidCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80308cc:	096b      	lsrs	r3, r5, #5
 80308ce:	4233      	tst	r3, r6
 80308d0:	d002      	beq.n	80308d8 <HAL_SUBGHZ_IRQHandler+0x64>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80308d2:	0020      	movs	r0, r4
 80308d4:	f7f4 fbb8 	bl	8025048 <HAL_SUBGHZ_HeaderErrorCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80308d8:	2601      	movs	r6, #1
 80308da:	066b      	lsls	r3, r5, #25
 80308dc:	d502      	bpl.n	80308e4 <HAL_SUBGHZ_IRQHandler+0x70>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80308de:	0020      	movs	r0, r4
 80308e0:	f7f4 fb8e 	bl	8025000 <HAL_SUBGHZ_CRCErrorCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80308e4:	09eb      	lsrs	r3, r5, #7
 80308e6:	4233      	tst	r3, r6
 80308e8:	d008      	beq.n	80308fc <HAL_SUBGHZ_IRQHandler+0x88>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80308ea:	0a2b      	lsrs	r3, r5, #8
 80308ec:	0019      	movs	r1, r3
 80308ee:	4031      	ands	r1, r6
 80308f0:	4233      	tst	r3, r6
 80308f2:	d000      	beq.n	80308f6 <HAL_SUBGHZ_IRQHandler+0x82>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80308f4:	2101      	movs	r1, #1
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80308f6:	0020      	movs	r0, r4
 80308f8:	f7f4 fb8a 	bl	8025010 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80308fc:	05ab      	lsls	r3, r5, #22
 80308fe:	d502      	bpl.n	8030906 <HAL_SUBGHZ_IRQHandler+0x92>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8030900:	0020      	movs	r0, r4
 8030902:	f7f4 fb97 	bl	8025034 <HAL_SUBGHZ_RxTxTimeoutCallback>
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8030906:	2302      	movs	r3, #2
 8030908:	0020      	movs	r0, r4
 803090a:	0019      	movs	r1, r3
 803090c:	aa01      	add	r2, sp, #4
 803090e:	f7ff ff47 	bl	80307a0 <HAL_SUBGHZ_ExecSetCmd>
}
 8030912:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08030914 <HAL_SUBGHZ_WriteBuffer>:
{
 8030914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8030916:	001e      	movs	r6, r3
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8030918:	7983      	ldrb	r3, [r0, #6]
{
 803091a:	0004      	movs	r4, r0
 803091c:	0015      	movs	r5, r2
 803091e:	000f      	movs	r7, r1
    return HAL_BUSY;
 8030920:	2002      	movs	r0, #2
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8030922:	b2da      	uxtb	r2, r3
 8030924:	2b01      	cmp	r3, #1
 8030926:	d120      	bne.n	803096a <HAL_SUBGHZ_WriteBuffer+0x56>
    __HAL_LOCK(hsubghz);
 8030928:	7963      	ldrb	r3, [r4, #5]
 803092a:	2b01      	cmp	r3, #1
 803092c:	d01d      	beq.n	803096a <HAL_SUBGHZ_WriteBuffer+0x56>
 803092e:	7162      	strb	r2, [r4, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8030930:	0020      	movs	r0, r4
 8030932:	f7ff feb3 	bl	803069c <SUBGHZ_CheckDeviceReady>
    LL_PWR_SelectSUBGHZSPI_NSS();
 8030936:	f7fb fdf1 	bl	802c51c <LL_PWR_SelectSUBGHZSPI_NSS>
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 803093a:	210e      	movs	r1, #14
 803093c:	0020      	movs	r0, r4
 803093e:	f7fb fe5f 	bl	802c600 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8030942:	0039      	movs	r1, r7
 8030944:	0020      	movs	r0, r4
 8030946:	f7fb fe5b 	bl	802c600 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 803094a:	19ae      	adds	r6, r5, r6
 803094c:	42b5      	cmp	r5, r6
 803094e:	d10d      	bne.n	803096c <HAL_SUBGHZ_WriteBuffer+0x58>
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8030950:	f7fb fdda 	bl	802c508 <LL_PWR_UnselectSUBGHZSPI_NSS>
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8030954:	0020      	movs	r0, r4
 8030956:	f7fb fec5 	bl	802c6e4 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 803095a:	68a0      	ldr	r0, [r4, #8]
 803095c:	1e43      	subs	r3, r0, #1
 803095e:	4198      	sbcs	r0, r3
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8030960:	2301      	movs	r3, #1
 8030962:	71a3      	strb	r3, [r4, #6]
    __HAL_UNLOCK(hsubghz);
 8030964:	2300      	movs	r3, #0
      status = HAL_ERROR;
 8030966:	b2c0      	uxtb	r0, r0
    __HAL_UNLOCK(hsubghz);
 8030968:	7163      	strb	r3, [r4, #5]
}
 803096a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 803096c:	7829      	ldrb	r1, [r5, #0]
 803096e:	0020      	movs	r0, r4
 8030970:	f7fb fe46 	bl	802c600 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8030974:	3501      	adds	r5, #1
 8030976:	e7e9      	b.n	803094c <HAL_SUBGHZ_WriteBuffer+0x38>

08030978 <HAL_SUBGHZ_ReadBuffer>:
{
 8030978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803097a:	001e      	movs	r6, r3
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 803097c:	7983      	ldrb	r3, [r0, #6]
{
 803097e:	0004      	movs	r4, r0
 8030980:	0015      	movs	r5, r2
 8030982:	000f      	movs	r7, r1
    return HAL_BUSY;
 8030984:	2002      	movs	r0, #2
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8030986:	b2da      	uxtb	r2, r3
 8030988:	2b01      	cmp	r3, #1
 803098a:	d124      	bne.n	80309d6 <HAL_SUBGHZ_ReadBuffer+0x5e>
    __HAL_LOCK(hsubghz);
 803098c:	7963      	ldrb	r3, [r4, #5]
 803098e:	2b01      	cmp	r3, #1
 8030990:	d021      	beq.n	80309d6 <HAL_SUBGHZ_ReadBuffer+0x5e>
 8030992:	7162      	strb	r2, [r4, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8030994:	0020      	movs	r0, r4
 8030996:	f7ff fe81 	bl	803069c <SUBGHZ_CheckDeviceReady>
    LL_PWR_SelectSUBGHZSPI_NSS();
 803099a:	f7fb fdbf 	bl	802c51c <LL_PWR_SelectSUBGHZSPI_NSS>
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 803099e:	211e      	movs	r1, #30
 80309a0:	0020      	movs	r0, r4
 80309a2:	f7fb fe2d 	bl	802c600 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80309a6:	0039      	movs	r1, r7
 80309a8:	0020      	movs	r0, r4
 80309aa:	f7fb fe29 	bl	802c600 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80309ae:	2100      	movs	r1, #0
 80309b0:	0020      	movs	r0, r4
 80309b2:	f7fb fe25 	bl	802c600 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80309b6:	19ae      	adds	r6, r5, r6
 80309b8:	42b5      	cmp	r5, r6
 80309ba:	d10d      	bne.n	80309d8 <HAL_SUBGHZ_ReadBuffer+0x60>
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80309bc:	f7fb fda4 	bl	802c508 <LL_PWR_UnselectSUBGHZSPI_NSS>
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80309c0:	0020      	movs	r0, r4
 80309c2:	f7fb fe8f 	bl	802c6e4 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80309c6:	68a0      	ldr	r0, [r4, #8]
 80309c8:	1e43      	subs	r3, r0, #1
 80309ca:	4198      	sbcs	r0, r3
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80309cc:	2301      	movs	r3, #1
 80309ce:	71a3      	strb	r3, [r4, #6]
    __HAL_UNLOCK(hsubghz);
 80309d0:	2300      	movs	r3, #0
      status = HAL_ERROR;
 80309d2:	b2c0      	uxtb	r0, r0
    __HAL_UNLOCK(hsubghz);
 80309d4:	7163      	strb	r3, [r4, #5]
}
 80309d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80309d8:	0029      	movs	r1, r5
 80309da:	0020      	movs	r0, r4
 80309dc:	f7fb fe48 	bl	802c670 <SUBGHZSPI_Receive>
      pData++;
 80309e0:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80309e2:	e7e9      	b.n	80309b8 <HAL_SUBGHZ_ReadBuffer+0x40>

080309e4 <UTILS_GetPLLOutputFrequency>:
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80309e4:	680b      	ldr	r3, [r1, #0]
{
 80309e6:	b510      	push	{r4, lr}
 80309e8:	000c      	movs	r4, r1
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80309ea:	0919      	lsrs	r1, r3, #4
 80309ec:	3101      	adds	r1, #1
 80309ee:	f7ef fb8f 	bl	8020110 <__udivsi3>
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 80309f2:	237f      	movs	r3, #127	; 0x7f
 80309f4:	6862      	ldr	r2, [r4, #4]
  pllfreq = pllfreq / ((UTILS_PLLInitStruct->PLLR >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80309f6:	68a1      	ldr	r1, [r4, #8]
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 80309f8:	4013      	ands	r3, r2
  pllfreq = pllfreq / ((UTILS_PLLInitStruct->PLLR >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80309fa:	0f49      	lsrs	r1, r1, #29
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 80309fc:	4358      	muls	r0, r3
  pllfreq = pllfreq / ((UTILS_PLLInitStruct->PLLR >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80309fe:	3101      	adds	r1, #1
 8030a00:	f7ef fb86 	bl	8020110 <__udivsi3>
}
 8030a04:	bd10      	pop	{r4, pc}

08030a06 <UTILS_PLL_IsBusy>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8030a06:	23b0      	movs	r3, #176	; 0xb0
  return status;
 8030a08:	2001      	movs	r0, #1
 8030a0a:	05db      	lsls	r3, r3, #23
 8030a0c:	681b      	ldr	r3, [r3, #0]
 8030a0e:	0e5b      	lsrs	r3, r3, #25
 8030a10:	4398      	bics	r0, r3
}
 8030a12:	4770      	bx	lr

08030a14 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	return dev->state->initialized && (dev->state->init_res == 0U);
 8030a14:	68c3      	ldr	r3, [r0, #12]
 8030a16:	8818      	ldrh	r0, [r3, #0]
 8030a18:	05c0      	lsls	r0, r0, #23
 8030a1a:	0dc0      	lsrs	r0, r0, #23
 8030a1c:	3801      	subs	r0, #1
 8030a1e:	38ff      	subs	r0, #255	; 0xff
 8030a20:	4243      	negs	r3, r0
 8030a22:	4158      	adcs	r0, r3
 8030a24:	b2c0      	uxtb	r0, r0
}
 8030a26:	4770      	bx	lr

08030a28 <arch_system_halt>:
	__asm__ volatile("mrs %0, PRIMASK;"
 8030a28:	f3ef 8310 	mrs	r3, PRIMASK
 8030a2c:	b672      	cpsid	i
	for (;;) {
 8030a2e:	e7fe      	b.n	8030a2e <arch_system_halt+0x6>

08030a30 <k_mem_slab_init>:
{
 8030a30:	b570      	push	{r4, r5, r6, lr}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 8030a32:	000e      	movs	r6, r1
	slab->num_used = 0U;
 8030a34:	2400      	movs	r4, #0
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 8030a36:	4316      	orrs	r6, r2
 8030a38:	2503      	movs	r5, #3
	slab->num_used = 0U;
 8030a3a:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 8030a3c:	0034      	movs	r4, r6
	slab->num_blocks = num_blocks;
 8030a3e:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
 8030a40:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
 8030a42:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 8030a44:	402c      	ands	r4, r5
 8030a46:	422e      	tst	r6, r5
 8030a48:	d10c      	bne.n	8030a64 <k_mem_slab_init+0x34>
	slab->free_list = NULL;
 8030a4a:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
 8030a4c:	42a3      	cmp	r3, r4
 8030a4e:	d103      	bne.n	8030a58 <k_mem_slab_init+0x28>
	list->head = (sys_dnode_t *)list;
 8030a50:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
 8030a52:	6040      	str	r0, [r0, #4]
}
 8030a54:	2000      	movs	r0, #0
}
 8030a56:	bd70      	pop	{r4, r5, r6, pc}
		*(char **)p = slab->free_list;
 8030a58:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
 8030a5a:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
 8030a5c:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
 8030a5e:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
 8030a60:	1889      	adds	r1, r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
 8030a62:	e7f3      	b.n	8030a4c <k_mem_slab_init+0x1c>
		return -EINVAL;
 8030a64:	2016      	movs	r0, #22
 8030a66:	4240      	negs	r0, r0
	return rc;
 8030a68:	e7f5      	b.n	8030a56 <k_mem_slab_init+0x26>

08030a6a <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
 8030a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8030a6c:	0004      	movs	r4, r0
 8030a6e:	000d      	movs	r5, r1
 8030a70:	f3ef 8610 	mrs	r6, PRIMASK
 8030a74:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
 8030a76:	6947      	ldr	r7, [r0, #20]
 8030a78:	2f00      	cmp	r7, #0
 8030a7a:	d10e      	bne.n	8030a9a <k_mem_slab_free+0x30>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
 8030a7c:	f000 f8d2 	bl	8030c24 <z_unpend_first_thread>

		if (pending_thread != NULL) {
 8030a80:	2800      	cmp	r0, #0
 8030a82:	d00a      	beq.n	8030a9a <k_mem_slab_free+0x30>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
 8030a84:	682b      	ldr	r3, [r5, #0]
 8030a86:	6787      	str	r7, [r0, #120]	; 0x78
 8030a88:	6143      	str	r3, [r0, #20]
			z_ready_thread(pending_thread);
 8030a8a:	f000 f892 	bl	8030bb2 <z_ready_thread>
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
 8030a8e:	0020      	movs	r0, r4
			z_reschedule(&slab->lock, key);
 8030a90:	0031      	movs	r1, r6
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
 8030a92:	3008      	adds	r0, #8
			z_reschedule(&slab->lock, key);
 8030a94:	f7fc fa58 	bl	802cf48 <z_reschedule>
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&slab->lock, key);
}
 8030a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	**(char ***) mem = slab->free_list;
 8030a9a:	682b      	ldr	r3, [r5, #0]
 8030a9c:	6962      	ldr	r2, [r4, #20]
 8030a9e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
 8030aa0:	682b      	ldr	r3, [r5, #0]
 8030aa2:	6163      	str	r3, [r4, #20]
	slab->num_used--;
 8030aa4:	69a3      	ldr	r3, [r4, #24]
 8030aa6:	3b01      	subs	r3, #1
 8030aa8:	61a3      	str	r3, [r4, #24]
	if (key != 0U) {
 8030aaa:	2e00      	cmp	r6, #0
 8030aac:	d1f4      	bne.n	8030a98 <k_mem_slab_free+0x2e>
	__asm__ volatile(
 8030aae:	b662      	cpsie	i
 8030ab0:	f3bf 8f6f 	isb	sy
 8030ab4:	e7f0      	b.n	8030a98 <k_mem_slab_free+0x2e>

08030ab6 <z_impl_k_thread_name_set>:
	return -ENOSYS;
 8030ab6:	2058      	movs	r0, #88	; 0x58
}
 8030ab8:	4240      	negs	r0, r0
 8030aba:	4770      	bx	lr

08030abc <k_thread_name_get>:
}
 8030abc:	2000      	movs	r0, #0
 8030abe:	4770      	bx	lr

08030ac0 <z_pm_save_idle_exit>:
{
 8030ac0:	b510      	push	{r4, lr}
	pm_system_resume();
 8030ac2:	f7f2 fcf7 	bl	80234b4 <pm_system_resume>
	sys_clock_idle_exit();
 8030ac6:	f7fe fa1e 	bl	802ef06 <sys_clock_idle_exit>
}
 8030aca:	bd10      	pop	{r4, pc}

08030acc <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 8030acc:	2a00      	cmp	r2, #0
 8030ace:	d007      	beq.n	8030ae0 <z_impl_k_sem_init+0x14>
 8030ad0:	428a      	cmp	r2, r1
 8030ad2:	d305      	bcc.n	8030ae0 <z_impl_k_sem_init+0x14>
	sem->count = initial_count;
 8030ad4:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
 8030ad6:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
 8030ad8:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
 8030ada:	6040      	str	r0, [r0, #4]
	return 0;
 8030adc:	2000      	movs	r0, #0
}
 8030ade:	4770      	bx	lr
		return -EINVAL;
 8030ae0:	2016      	movs	r0, #22
 8030ae2:	4240      	negs	r0, r0
 8030ae4:	e7fb      	b.n	8030ade <z_impl_k_sem_init+0x12>

08030ae6 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 8030ae6:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
 8030ae8:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
 8030aea:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8030aec:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8030aee:	2300      	movs	r3, #0
 8030af0:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 8030af2:	6043      	str	r3, [r0, #4]
	sys_dnode_init(node);
}
 8030af4:	4770      	bx	lr

08030af6 <unpend_thread_no_timeout>:
{
 8030af6:	b510      	push	{r4, lr}
 8030af8:	0004      	movs	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
 8030afa:	f7ff fff4 	bl	8030ae6 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8030afe:	2202      	movs	r2, #2
 8030b00:	7b63      	ldrb	r3, [r4, #13]
 8030b02:	4393      	bics	r3, r2
 8030b04:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 8030b06:	2300      	movs	r3, #0
 8030b08:	60a3      	str	r3, [r4, #8]
}
 8030b0a:	bd10      	pop	{r4, pc}

08030b0c <z_unpend_thread_no_timeout>:
{
 8030b0c:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
 8030b0e:	f3ef 8410 	mrs	r4, PRIMASK
 8030b12:	b672      	cpsid	i
		unpend_thread_no_timeout(thread);
 8030b14:	f7ff ffef 	bl	8030af6 <unpend_thread_no_timeout>
	if (key != 0U) {
 8030b18:	2c00      	cmp	r4, #0
 8030b1a:	d102      	bne.n	8030b22 <z_unpend_thread_no_timeout+0x16>
	__asm__ volatile(
 8030b1c:	b662      	cpsie	i
 8030b1e:	f3bf 8f6f 	isb	sy
}
 8030b22:	bd10      	pop	{r4, pc}

08030b24 <z_reschedule_irqlock>:
{
 8030b24:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8030b26:	2800      	cmp	r0, #0
 8030b28:	d105      	bne.n	8030b36 <z_reschedule_irqlock+0x12>
 8030b2a:	f3ef 8005 	mrs	r0, IPSR
	if (resched(key)) {
 8030b2e:	2800      	cmp	r0, #0
 8030b30:	d102      	bne.n	8030b38 <z_reschedule_irqlock+0x14>
	ret = arch_swap(key);
 8030b32:	f7fa ff6d 	bl	802ba10 <arch_swap>
}
 8030b36:	bd10      	pop	{r4, pc}
 8030b38:	b662      	cpsie	i
 8030b3a:	f3bf 8f6f 	isb	sy
 8030b3e:	e7fa      	b.n	8030b36 <z_reschedule_irqlock+0x12>

08030b40 <z_reschedule_unlocked>:
{
 8030b40:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
 8030b42:	f3ef 8010 	mrs	r0, PRIMASK
 8030b46:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
 8030b48:	f7ff ffec 	bl	8030b24 <z_reschedule_irqlock>
}
 8030b4c:	bd10      	pop	{r4, pc}

08030b4e <z_priq_dumb_best>:
{
 8030b4e:	0003      	movs	r3, r0
	return list->head == list;
 8030b50:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8030b52:	4283      	cmp	r3, r0
 8030b54:	d100      	bne.n	8030b58 <z_priq_dumb_best+0xa>
	struct k_thread *thread = NULL;
 8030b56:	2000      	movs	r0, #0
}
 8030b58:	4770      	bx	lr

08030b5a <add_to_waitq_locked>:
{
 8030b5a:	b570      	push	{r4, r5, r6, lr}
 8030b5c:	0004      	movs	r4, r0
 8030b5e:	000d      	movs	r5, r1
	unready_thread(thread);
 8030b60:	f7fc fa34 	bl	802cfcc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 8030b64:	2302      	movs	r3, #2
 8030b66:	7b62      	ldrb	r2, [r4, #13]
 8030b68:	4313      	orrs	r3, r2
 8030b6a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 8030b6c:	2d00      	cmp	r5, #0
 8030b6e:	d013      	beq.n	8030b98 <add_to_waitq_locked+0x3e>
	return list->head == list;
 8030b70:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
 8030b72:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8030b74:	429d      	cmp	r5, r3
 8030b76:	d016      	beq.n	8030ba6 <add_to_waitq_locked+0x4c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8030b78:	2b00      	cmp	r3, #0
 8030b7a:	d014      	beq.n	8030ba6 <add_to_waitq_locked+0x4c>
	int32_t b1 = thread_1->base.prio;
 8030b7c:	210e      	movs	r1, #14
 8030b7e:	5661      	ldrsb	r1, [r4, r1]
	int32_t b2 = thread_2->base.prio;
 8030b80:	220e      	movs	r2, #14
 8030b82:	569a      	ldrsb	r2, [r3, r2]
	if (b1 != b2) {
 8030b84:	4291      	cmp	r1, r2
 8030b86:	d008      	beq.n	8030b9a <add_to_waitq_locked+0x40>
		return b2 - b1;
 8030b88:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
 8030b8a:	2a00      	cmp	r2, #0
 8030b8c:	dd05      	ble.n	8030b9a <add_to_waitq_locked+0x40>
	sys_dnode_t *const prev = successor->prev;
 8030b8e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8030b90:	6023      	str	r3, [r4, #0]
	node->prev = prev;
 8030b92:	6062      	str	r2, [r4, #4]
	prev->next = node;
 8030b94:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8030b96:	605c      	str	r4, [r3, #4]
}
 8030b98:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
 8030b9a:	686a      	ldr	r2, [r5, #4]
 8030b9c:	4293      	cmp	r3, r2
 8030b9e:	d002      	beq.n	8030ba6 <add_to_waitq_locked+0x4c>
 8030ba0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8030ba2:	2b00      	cmp	r3, #0
 8030ba4:	d1ec      	bne.n	8030b80 <add_to_waitq_locked+0x26>
	sys_dnode_t *const tail = list->tail;
 8030ba6:	686b      	ldr	r3, [r5, #4]
	node->next = list;
 8030ba8:	6025      	str	r5, [r4, #0]
	node->prev = tail;
 8030baa:	6063      	str	r3, [r4, #4]
	tail->next = node;
 8030bac:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8030bae:	606c      	str	r4, [r5, #4]
}
 8030bb0:	e7f2      	b.n	8030b98 <add_to_waitq_locked+0x3e>

08030bb2 <z_ready_thread>:
{
 8030bb2:	b510      	push	{r4, lr}
 8030bb4:	f3ef 8410 	mrs	r4, PRIMASK
 8030bb8:	b672      	cpsid	i
			ready_thread(thread);
 8030bba:	f7fc fa8d 	bl	802d0d8 <ready_thread>
	if (key != 0U) {
 8030bbe:	2c00      	cmp	r4, #0
 8030bc0:	d102      	bne.n	8030bc8 <z_ready_thread+0x16>
	__asm__ volatile(
 8030bc2:	b662      	cpsie	i
 8030bc4:	f3bf 8f6f 	isb	sy
}
 8030bc8:	bd10      	pop	{r4, pc}

08030bca <z_thread_timeout>:
	struct k_thread *thread = CONTAINER_OF(timeout,
 8030bca:	3818      	subs	r0, #24
{
 8030bcc:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = CONTAINER_OF(timeout,
 8030bce:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
 8030bd0:	f3ef 8510 	mrs	r5, PRIMASK
 8030bd4:	b672      	cpsid	i
		if (!killed) {
 8030bd6:	2328      	movs	r3, #40	; 0x28
 8030bd8:	7b42      	ldrb	r2, [r0, #13]
 8030bda:	421a      	tst	r2, r3
 8030bdc:	d10b      	bne.n	8030bf6 <z_thread_timeout+0x2c>
			if (thread->base.pended_on != NULL) {
 8030bde:	6883      	ldr	r3, [r0, #8]
 8030be0:	2b00      	cmp	r3, #0
 8030be2:	d001      	beq.n	8030be8 <z_thread_timeout+0x1e>
				unpend_thread_no_timeout(thread);
 8030be4:	f7ff ff87 	bl	8030af6 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8030be8:	2214      	movs	r2, #20
 8030bea:	7b63      	ldrb	r3, [r4, #13]
			ready_thread(thread);
 8030bec:	0020      	movs	r0, r4
 8030bee:	4393      	bics	r3, r2
 8030bf0:	7363      	strb	r3, [r4, #13]
 8030bf2:	f7fc fa71 	bl	802d0d8 <ready_thread>
	if (key != 0U) {
 8030bf6:	2d00      	cmp	r5, #0
 8030bf8:	d102      	bne.n	8030c00 <z_thread_timeout+0x36>
	__asm__ volatile(
 8030bfa:	b662      	cpsie	i
 8030bfc:	f3bf 8f6f 	isb	sy
}
 8030c00:	bd70      	pop	{r4, r5, r6, pc}

08030c02 <z_unpend1_no_timeout>:
{
 8030c02:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
 8030c04:	f3ef 8510 	mrs	r5, PRIMASK
 8030c08:	b672      	cpsid	i
		thread = _priq_wait_best(&wait_q->waitq);
 8030c0a:	f7ff ffa0 	bl	8030b4e <z_priq_dumb_best>
 8030c0e:	1e04      	subs	r4, r0, #0
		if (thread != NULL) {
 8030c10:	d001      	beq.n	8030c16 <z_unpend1_no_timeout+0x14>
			unpend_thread_no_timeout(thread);
 8030c12:	f7ff ff70 	bl	8030af6 <unpend_thread_no_timeout>
	if (key != 0U) {
 8030c16:	2d00      	cmp	r5, #0
 8030c18:	d102      	bne.n	8030c20 <z_unpend1_no_timeout+0x1e>
	__asm__ volatile(
 8030c1a:	b662      	cpsie	i
 8030c1c:	f3bf 8f6f 	isb	sy
}
 8030c20:	0020      	movs	r0, r4
 8030c22:	bd70      	pop	{r4, r5, r6, pc}

08030c24 <z_unpend_first_thread>:
{
 8030c24:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
 8030c26:	f3ef 8510 	mrs	r5, PRIMASK
 8030c2a:	b672      	cpsid	i
		thread = _priq_wait_best(&wait_q->waitq);
 8030c2c:	f7ff ff8f 	bl	8030b4e <z_priq_dumb_best>
 8030c30:	1e04      	subs	r4, r0, #0
		if (thread != NULL) {
 8030c32:	d005      	beq.n	8030c40 <z_unpend_first_thread+0x1c>
			unpend_thread_no_timeout(thread);
 8030c34:	f7ff ff5f 	bl	8030af6 <unpend_thread_no_timeout>
 8030c38:	0020      	movs	r0, r4
 8030c3a:	3018      	adds	r0, #24
 8030c3c:	f000 f807 	bl	8030c4e <z_abort_timeout>
	if (key != 0U) {
 8030c40:	2d00      	cmp	r5, #0
 8030c42:	d102      	bne.n	8030c4a <z_unpend_first_thread+0x26>
	__asm__ volatile(
 8030c44:	b662      	cpsie	i
 8030c46:	f3bf 8f6f 	isb	sy
}
 8030c4a:	0020      	movs	r0, r4
 8030c4c:	bd70      	pop	{r4, r5, r6, pc}

08030c4e <z_abort_timeout>:
{
 8030c4e:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
 8030c50:	f3ef 8410 	mrs	r4, PRIMASK
 8030c54:	b672      	cpsid	i
		if (sys_dnode_is_linked(&to->node)) {
 8030c56:	6803      	ldr	r3, [r0, #0]
 8030c58:	2b00      	cmp	r3, #0
 8030c5a:	d008      	beq.n	8030c6e <z_abort_timeout+0x20>
			remove_timeout(to);
 8030c5c:	f7fc fbd2 	bl	802d404 <remove_timeout>
			ret = 0;
 8030c60:	2000      	movs	r0, #0
	if (key != 0U) {
 8030c62:	2c00      	cmp	r4, #0
 8030c64:	d102      	bne.n	8030c6c <z_abort_timeout+0x1e>
	__asm__ volatile(
 8030c66:	b662      	cpsie	i
 8030c68:	f3bf 8f6f 	isb	sy
}
 8030c6c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 8030c6e:	2016      	movs	r0, #22
 8030c70:	4240      	negs	r0, r0
 8030c72:	e7f6      	b.n	8030c62 <z_abort_timeout+0x14>

08030c74 <z_get_next_timeout_expiry>:
{
 8030c74:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
 8030c76:	f3ef 8410 	mrs	r4, PRIMASK
 8030c7a:	b672      	cpsid	i
		ret = next_timeout();
 8030c7c:	f7fc fb9c 	bl	802d3b8 <next_timeout>
	if (key != 0U) {
 8030c80:	2c00      	cmp	r4, #0
 8030c82:	d102      	bne.n	8030c8a <z_get_next_timeout_expiry+0x16>
	__asm__ volatile(
 8030c84:	b662      	cpsie	i
 8030c86:	f3bf 8f6f 	isb	sy
}
 8030c8a:	bd10      	pop	{r4, pc}

08030c8c <z_set_timeout_expiry>:
{
 8030c8c:	b570      	push	{r4, r5, r6, lr}
 8030c8e:	0004      	movs	r4, r0
 8030c90:	000d      	movs	r5, r1
	__asm__ volatile("mrs %0, PRIMASK;"
 8030c92:	f3ef 8610 	mrs	r6, PRIMASK
 8030c96:	b672      	cpsid	i
		int next_to = next_timeout();
 8030c98:	f7fc fb8e 	bl	802d3b8 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 8030c9c:	2801      	cmp	r0, #1
 8030c9e:	dd05      	ble.n	8030cac <z_set_timeout_expiry+0x20>
 8030ca0:	42a0      	cmp	r0, r4
 8030ca2:	db03      	blt.n	8030cac <z_set_timeout_expiry+0x20>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 8030ca4:	0029      	movs	r1, r5
 8030ca6:	0020      	movs	r0, r4
 8030ca8:	f7f2 fef4 	bl	8023a94 <sys_clock_set_timeout>
	if (key != 0U) {
 8030cac:	2e00      	cmp	r6, #0
 8030cae:	d102      	bne.n	8030cb6 <z_set_timeout_expiry+0x2a>
	__asm__ volatile(
 8030cb0:	b662      	cpsie	i
 8030cb2:	f3bf 8f6f 	isb	sy
}
 8030cb6:	bd70      	pop	{r4, r5, r6, pc}

08030cb8 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
 8030cb8:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
 8030cba:	f7fc fcad 	bl	802d618 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
 8030cbe:	bd10      	pop	{r4, pc}

08030cc0 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
 8030cc0:	b510      	push	{r4, lr}
	return sys_clock_tick_get();
 8030cc2:	f7fc fca9 	bl	802d618 <sys_clock_tick_get>
}
 8030cc6:	bd10      	pop	{r4, pc}

08030cc8 <k_timer_init>:
	timer->stop_fn = stop_fn;
 8030cc8:	6242      	str	r2, [r0, #36]	; 0x24
	sys_dlist_init(&w->waitq);
 8030cca:	0002      	movs	r2, r0
	timer->status = 0U;
 8030ccc:	2300      	movs	r3, #0
 8030cce:	3218      	adds	r2, #24
	timer->expiry_fn = expiry_fn;
 8030cd0:	6201      	str	r1, [r0, #32]
	timer->status = 0U;
 8030cd2:	6303      	str	r3, [r0, #48]	; 0x30
	list->head = (sys_dnode_t *)list;
 8030cd4:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
 8030cd6:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
 8030cd8:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 8030cda:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
 8030cdc:	6343      	str	r3, [r0, #52]	; 0x34
}
 8030cde:	4770      	bx	lr

08030ce0 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 8030ce0:	b510      	push	{r4, lr}
 8030ce2:	0004      	movs	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
 8030ce4:	f7ff ffb3 	bl	8030c4e <z_abort_timeout>

	if (inactive) {
 8030ce8:	2800      	cmp	r0, #0
 8030cea:	d111      	bne.n	8030d10 <z_impl_k_timer_stop+0x30>
		return;
	}

	if (timer->stop_fn != NULL) {
 8030cec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8030cee:	2b00      	cmp	r3, #0
 8030cf0:	d001      	beq.n	8030cf6 <z_impl_k_timer_stop+0x16>
		timer->stop_fn(timer);
 8030cf2:	0020      	movs	r0, r4
 8030cf4:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 8030cf6:	0020      	movs	r0, r4
 8030cf8:	3018      	adds	r0, #24
 8030cfa:	f7ff ff82 	bl	8030c02 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 8030cfe:	2800      	cmp	r0, #0
 8030d00:	d006      	beq.n	8030d10 <z_impl_k_timer_stop+0x30>
			z_ready_thread(pending_thread);
 8030d02:	f7ff ff56 	bl	8030bb2 <z_ready_thread>
	__asm__ volatile("mrs %0, PRIMASK;"
 8030d06:	f3ef 8010 	mrs	r0, PRIMASK
 8030d0a:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
 8030d0c:	f7ff ff0a 	bl	8030b24 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
 8030d10:	bd10      	pop	{r4, pc}

08030d12 <z_impl_atomic_add>:
 * @param value the value to add
 *
 * @return The previous value from <target>
 */
atomic_val_t z_impl_atomic_add(atomic_t *target, atomic_val_t value)
{
 8030d12:	0003      	movs	r3, r0
 8030d14:	f3ef 8210 	mrs	r2, PRIMASK
 8030d18:	b672      	cpsid	i
	k_spinlock_key_t key;
	atomic_val_t ret;

	key = k_spin_lock(&lock);

	ret = *target;
 8030d1a:	6800      	ldr	r0, [r0, #0]
	*target += value;
 8030d1c:	1841      	adds	r1, r0, r1
 8030d1e:	6019      	str	r1, [r3, #0]
	if (key != 0U) {
 8030d20:	2a00      	cmp	r2, #0
 8030d22:	d102      	bne.n	8030d2a <z_impl_atomic_add+0x18>
	__asm__ volatile(
 8030d24:	b662      	cpsie	i
 8030d26:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);

	return ret;
}
 8030d2a:	4770      	bx	lr

08030d2c <z_impl_atomic_sub>:
 * @param value the value to subtract
 *
 * @return The previous value from <target>
 */
atomic_val_t z_impl_atomic_sub(atomic_t *target, atomic_val_t value)
{
 8030d2c:	0003      	movs	r3, r0
	__asm__ volatile("mrs %0, PRIMASK;"
 8030d2e:	f3ef 8210 	mrs	r2, PRIMASK
 8030d32:	b672      	cpsid	i
	k_spinlock_key_t key;
	atomic_val_t ret;

	key = k_spin_lock(&lock);

	ret = *target;
 8030d34:	6800      	ldr	r0, [r0, #0]
	*target -= value;
 8030d36:	1a41      	subs	r1, r0, r1
 8030d38:	6019      	str	r1, [r3, #0]
	if (key != 0U) {
 8030d3a:	2a00      	cmp	r2, #0
 8030d3c:	d102      	bne.n	8030d44 <z_impl_atomic_sub+0x18>
	__asm__ volatile(
 8030d3e:	b662      	cpsie	i
 8030d40:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);

	return ret;
}
 8030d44:	4770      	bx	lr

08030d46 <z_impl_atomic_set>:
 * @param value the value to write
 *
 * @return The previous value from <target>
 */
atomic_val_t z_impl_atomic_set(atomic_t *target, atomic_val_t value)
{
 8030d46:	0003      	movs	r3, r0
	__asm__ volatile("mrs %0, PRIMASK;"
 8030d48:	f3ef 8210 	mrs	r2, PRIMASK
 8030d4c:	b672      	cpsid	i
	k_spinlock_key_t key;
	atomic_val_t ret;

	key = k_spin_lock(&lock);

	ret = *target;
 8030d4e:	6800      	ldr	r0, [r0, #0]
	*target = value;
 8030d50:	6019      	str	r1, [r3, #0]
	if (key != 0U) {
 8030d52:	2a00      	cmp	r2, #0
 8030d54:	d102      	bne.n	8030d5c <z_impl_atomic_set+0x16>
	__asm__ volatile(
 8030d56:	b662      	cpsie	i
 8030d58:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);

	return ret;
}
 8030d5c:	4770      	bx	lr

08030d5e <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 8030d5e:	4770      	bx	lr

08030d60 <memcpy>:
 8030d60:	2300      	movs	r3, #0
 8030d62:	b510      	push	{r4, lr}
 8030d64:	429a      	cmp	r2, r3
 8030d66:	d100      	bne.n	8030d6a <memcpy+0xa>
 8030d68:	bd10      	pop	{r4, pc}
 8030d6a:	5ccc      	ldrb	r4, [r1, r3]
 8030d6c:	54c4      	strb	r4, [r0, r3]
 8030d6e:	3301      	adds	r3, #1
 8030d70:	e7f8      	b.n	8030d64 <memcpy+0x4>

08030d72 <memset>:
 8030d72:	0003      	movs	r3, r0
 8030d74:	1882      	adds	r2, r0, r2
 8030d76:	4293      	cmp	r3, r2
 8030d78:	d100      	bne.n	8030d7c <memset+0xa>
 8030d7a:	4770      	bx	lr
 8030d7c:	7019      	strb	r1, [r3, #0]
 8030d7e:	3301      	adds	r3, #1
 8030d80:	e7f9      	b.n	8030d76 <memset+0x4>

08030d82 <__sfputc_r>:
 8030d82:	6893      	ldr	r3, [r2, #8]
 8030d84:	b510      	push	{r4, lr}
 8030d86:	3b01      	subs	r3, #1
 8030d88:	6093      	str	r3, [r2, #8]
 8030d8a:	2b00      	cmp	r3, #0
 8030d8c:	da04      	bge.n	8030d98 <__sfputc_r+0x16>
 8030d8e:	6994      	ldr	r4, [r2, #24]
 8030d90:	42a3      	cmp	r3, r4
 8030d92:	db07      	blt.n	8030da4 <__sfputc_r+0x22>
 8030d94:	290a      	cmp	r1, #10
 8030d96:	d005      	beq.n	8030da4 <__sfputc_r+0x22>
 8030d98:	6813      	ldr	r3, [r2, #0]
 8030d9a:	1c58      	adds	r0, r3, #1
 8030d9c:	6010      	str	r0, [r2, #0]
 8030d9e:	7019      	strb	r1, [r3, #0]
 8030da0:	0008      	movs	r0, r1
 8030da2:	bd10      	pop	{r4, pc}
 8030da4:	f7fc fff4 	bl	802dd90 <__swbuf_r>
 8030da8:	0001      	movs	r1, r0
 8030daa:	e7f9      	b.n	8030da0 <__sfputc_r+0x1e>

08030dac <__sfputs_r>:
 8030dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8030dae:	0006      	movs	r6, r0
 8030db0:	000f      	movs	r7, r1
 8030db2:	0014      	movs	r4, r2
 8030db4:	18d5      	adds	r5, r2, r3
 8030db6:	42ac      	cmp	r4, r5
 8030db8:	d101      	bne.n	8030dbe <__sfputs_r+0x12>
 8030dba:	2000      	movs	r0, #0
 8030dbc:	e007      	b.n	8030dce <__sfputs_r+0x22>
 8030dbe:	7821      	ldrb	r1, [r4, #0]
 8030dc0:	003a      	movs	r2, r7
 8030dc2:	0030      	movs	r0, r6
 8030dc4:	f7ff ffdd 	bl	8030d82 <__sfputc_r>
 8030dc8:	3401      	adds	r4, #1
 8030dca:	1c43      	adds	r3, r0, #1
 8030dcc:	d1f3      	bne.n	8030db6 <__sfputs_r+0xa>
 8030dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08030dd0 <_printf_common>:
 8030dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8030dd2:	0015      	movs	r5, r2
 8030dd4:	9301      	str	r3, [sp, #4]
 8030dd6:	688a      	ldr	r2, [r1, #8]
 8030dd8:	690b      	ldr	r3, [r1, #16]
 8030dda:	000c      	movs	r4, r1
 8030ddc:	9000      	str	r0, [sp, #0]
 8030dde:	4293      	cmp	r3, r2
 8030de0:	da00      	bge.n	8030de4 <_printf_common+0x14>
 8030de2:	0013      	movs	r3, r2
 8030de4:	0022      	movs	r2, r4
 8030de6:	602b      	str	r3, [r5, #0]
 8030de8:	3243      	adds	r2, #67	; 0x43
 8030dea:	7812      	ldrb	r2, [r2, #0]
 8030dec:	2a00      	cmp	r2, #0
 8030dee:	d001      	beq.n	8030df4 <_printf_common+0x24>
 8030df0:	3301      	adds	r3, #1
 8030df2:	602b      	str	r3, [r5, #0]
 8030df4:	6823      	ldr	r3, [r4, #0]
 8030df6:	069b      	lsls	r3, r3, #26
 8030df8:	d502      	bpl.n	8030e00 <_printf_common+0x30>
 8030dfa:	682b      	ldr	r3, [r5, #0]
 8030dfc:	3302      	adds	r3, #2
 8030dfe:	602b      	str	r3, [r5, #0]
 8030e00:	6822      	ldr	r2, [r4, #0]
 8030e02:	2306      	movs	r3, #6
 8030e04:	0017      	movs	r7, r2
 8030e06:	401f      	ands	r7, r3
 8030e08:	421a      	tst	r2, r3
 8030e0a:	d027      	beq.n	8030e5c <_printf_common+0x8c>
 8030e0c:	0023      	movs	r3, r4
 8030e0e:	3343      	adds	r3, #67	; 0x43
 8030e10:	781b      	ldrb	r3, [r3, #0]
 8030e12:	1e5a      	subs	r2, r3, #1
 8030e14:	4193      	sbcs	r3, r2
 8030e16:	6822      	ldr	r2, [r4, #0]
 8030e18:	0692      	lsls	r2, r2, #26
 8030e1a:	d430      	bmi.n	8030e7e <_printf_common+0xae>
 8030e1c:	0022      	movs	r2, r4
 8030e1e:	9901      	ldr	r1, [sp, #4]
 8030e20:	9800      	ldr	r0, [sp, #0]
 8030e22:	9e08      	ldr	r6, [sp, #32]
 8030e24:	3243      	adds	r2, #67	; 0x43
 8030e26:	47b0      	blx	r6
 8030e28:	1c43      	adds	r3, r0, #1
 8030e2a:	d025      	beq.n	8030e78 <_printf_common+0xa8>
 8030e2c:	2306      	movs	r3, #6
 8030e2e:	6820      	ldr	r0, [r4, #0]
 8030e30:	682a      	ldr	r2, [r5, #0]
 8030e32:	68e1      	ldr	r1, [r4, #12]
 8030e34:	2500      	movs	r5, #0
 8030e36:	4003      	ands	r3, r0
 8030e38:	2b04      	cmp	r3, #4
 8030e3a:	d103      	bne.n	8030e44 <_printf_common+0x74>
 8030e3c:	1a8d      	subs	r5, r1, r2
 8030e3e:	43eb      	mvns	r3, r5
 8030e40:	17db      	asrs	r3, r3, #31
 8030e42:	401d      	ands	r5, r3
 8030e44:	68a3      	ldr	r3, [r4, #8]
 8030e46:	6922      	ldr	r2, [r4, #16]
 8030e48:	4293      	cmp	r3, r2
 8030e4a:	dd01      	ble.n	8030e50 <_printf_common+0x80>
 8030e4c:	1a9b      	subs	r3, r3, r2
 8030e4e:	18ed      	adds	r5, r5, r3
 8030e50:	2700      	movs	r7, #0
 8030e52:	42bd      	cmp	r5, r7
 8030e54:	d120      	bne.n	8030e98 <_printf_common+0xc8>
 8030e56:	2000      	movs	r0, #0
 8030e58:	e010      	b.n	8030e7c <_printf_common+0xac>
 8030e5a:	3701      	adds	r7, #1
 8030e5c:	68e3      	ldr	r3, [r4, #12]
 8030e5e:	682a      	ldr	r2, [r5, #0]
 8030e60:	1a9b      	subs	r3, r3, r2
 8030e62:	42bb      	cmp	r3, r7
 8030e64:	ddd2      	ble.n	8030e0c <_printf_common+0x3c>
 8030e66:	0022      	movs	r2, r4
 8030e68:	2301      	movs	r3, #1
 8030e6a:	9901      	ldr	r1, [sp, #4]
 8030e6c:	9800      	ldr	r0, [sp, #0]
 8030e6e:	9e08      	ldr	r6, [sp, #32]
 8030e70:	3219      	adds	r2, #25
 8030e72:	47b0      	blx	r6
 8030e74:	1c43      	adds	r3, r0, #1
 8030e76:	d1f0      	bne.n	8030e5a <_printf_common+0x8a>
 8030e78:	2001      	movs	r0, #1
 8030e7a:	4240      	negs	r0, r0
 8030e7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8030e7e:	2030      	movs	r0, #48	; 0x30
 8030e80:	18e1      	adds	r1, r4, r3
 8030e82:	3143      	adds	r1, #67	; 0x43
 8030e84:	7008      	strb	r0, [r1, #0]
 8030e86:	0021      	movs	r1, r4
 8030e88:	1c5a      	adds	r2, r3, #1
 8030e8a:	3145      	adds	r1, #69	; 0x45
 8030e8c:	7809      	ldrb	r1, [r1, #0]
 8030e8e:	18a2      	adds	r2, r4, r2
 8030e90:	3243      	adds	r2, #67	; 0x43
 8030e92:	3302      	adds	r3, #2
 8030e94:	7011      	strb	r1, [r2, #0]
 8030e96:	e7c1      	b.n	8030e1c <_printf_common+0x4c>
 8030e98:	0022      	movs	r2, r4
 8030e9a:	2301      	movs	r3, #1
 8030e9c:	9901      	ldr	r1, [sp, #4]
 8030e9e:	9800      	ldr	r0, [sp, #0]
 8030ea0:	9e08      	ldr	r6, [sp, #32]
 8030ea2:	321a      	adds	r2, #26
 8030ea4:	47b0      	blx	r6
 8030ea6:	1c43      	adds	r3, r0, #1
 8030ea8:	d0e6      	beq.n	8030e78 <_printf_common+0xa8>
 8030eaa:	3701      	adds	r7, #1
 8030eac:	e7d1      	b.n	8030e52 <_printf_common+0x82>

08030eae <strncpy>:
 8030eae:	0003      	movs	r3, r0
 8030eb0:	b530      	push	{r4, r5, lr}
 8030eb2:	001d      	movs	r5, r3
 8030eb4:	2a00      	cmp	r2, #0
 8030eb6:	d006      	beq.n	8030ec6 <strncpy+0x18>
 8030eb8:	780c      	ldrb	r4, [r1, #0]
 8030eba:	3a01      	subs	r2, #1
 8030ebc:	3301      	adds	r3, #1
 8030ebe:	702c      	strb	r4, [r5, #0]
 8030ec0:	3101      	adds	r1, #1
 8030ec2:	2c00      	cmp	r4, #0
 8030ec4:	d1f5      	bne.n	8030eb2 <strncpy+0x4>
 8030ec6:	2100      	movs	r1, #0
 8030ec8:	189a      	adds	r2, r3, r2
 8030eca:	4293      	cmp	r3, r2
 8030ecc:	d100      	bne.n	8030ed0 <strncpy+0x22>
 8030ece:	bd30      	pop	{r4, r5, pc}
 8030ed0:	7019      	strb	r1, [r3, #0]
 8030ed2:	3301      	adds	r3, #1
 8030ed4:	e7f9      	b.n	8030eca <strncpy+0x1c>

08030ed6 <strnlen>:
 8030ed6:	0003      	movs	r3, r0
 8030ed8:	1841      	adds	r1, r0, r1
 8030eda:	428b      	cmp	r3, r1
 8030edc:	d002      	beq.n	8030ee4 <strnlen+0xe>
 8030ede:	781a      	ldrb	r2, [r3, #0]
 8030ee0:	2a00      	cmp	r2, #0
 8030ee2:	d101      	bne.n	8030ee8 <strnlen+0x12>
 8030ee4:	1a18      	subs	r0, r3, r0
 8030ee6:	4770      	bx	lr
 8030ee8:	3301      	adds	r3, #1
 8030eea:	e7f6      	b.n	8030eda <strnlen+0x4>

08030eec <abort>:
 8030eec:	2006      	movs	r0, #6
 8030eee:	b510      	push	{r4, lr}
 8030ef0:	f7fd fada 	bl	802e4a8 <raise>
 8030ef4:	2001      	movs	r0, #1
 8030ef6:	f7fb f875 	bl	802bfe4 <_exit>

08030efa <__sfmoreglue>:
 8030efa:	b570      	push	{r4, r5, r6, lr}
 8030efc:	2568      	movs	r5, #104	; 0x68
 8030efe:	1e4a      	subs	r2, r1, #1
 8030f00:	4355      	muls	r5, r2
 8030f02:	000e      	movs	r6, r1
 8030f04:	0029      	movs	r1, r5
 8030f06:	3174      	adds	r1, #116	; 0x74
 8030f08:	f7fd fa5e 	bl	802e3c8 <_malloc_r>
 8030f0c:	1e04      	subs	r4, r0, #0
 8030f0e:	d008      	beq.n	8030f22 <__sfmoreglue+0x28>
 8030f10:	2100      	movs	r1, #0
 8030f12:	002a      	movs	r2, r5
 8030f14:	6001      	str	r1, [r0, #0]
 8030f16:	6046      	str	r6, [r0, #4]
 8030f18:	300c      	adds	r0, #12
 8030f1a:	60a0      	str	r0, [r4, #8]
 8030f1c:	3268      	adds	r2, #104	; 0x68
 8030f1e:	f7ff ff28 	bl	8030d72 <memset>
 8030f22:	0020      	movs	r0, r4
 8030f24:	bd70      	pop	{r4, r5, r6, pc}

08030f26 <_fwalk_reent>:
 8030f26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8030f28:	0004      	movs	r4, r0
 8030f2a:	0006      	movs	r6, r0
 8030f2c:	2700      	movs	r7, #0
 8030f2e:	9101      	str	r1, [sp, #4]
 8030f30:	3448      	adds	r4, #72	; 0x48
 8030f32:	6863      	ldr	r3, [r4, #4]
 8030f34:	68a5      	ldr	r5, [r4, #8]
 8030f36:	9300      	str	r3, [sp, #0]
 8030f38:	9b00      	ldr	r3, [sp, #0]
 8030f3a:	3b01      	subs	r3, #1
 8030f3c:	9300      	str	r3, [sp, #0]
 8030f3e:	d504      	bpl.n	8030f4a <_fwalk_reent+0x24>
 8030f40:	6824      	ldr	r4, [r4, #0]
 8030f42:	2c00      	cmp	r4, #0
 8030f44:	d1f5      	bne.n	8030f32 <_fwalk_reent+0xc>
 8030f46:	0038      	movs	r0, r7
 8030f48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8030f4a:	89ab      	ldrh	r3, [r5, #12]
 8030f4c:	2b01      	cmp	r3, #1
 8030f4e:	d908      	bls.n	8030f62 <_fwalk_reent+0x3c>
 8030f50:	220e      	movs	r2, #14
 8030f52:	5eab      	ldrsh	r3, [r5, r2]
 8030f54:	3301      	adds	r3, #1
 8030f56:	d004      	beq.n	8030f62 <_fwalk_reent+0x3c>
 8030f58:	0029      	movs	r1, r5
 8030f5a:	0030      	movs	r0, r6
 8030f5c:	9b01      	ldr	r3, [sp, #4]
 8030f5e:	4798      	blx	r3
 8030f60:	4307      	orrs	r7, r0
 8030f62:	3568      	adds	r5, #104	; 0x68
 8030f64:	e7e8      	b.n	8030f38 <_fwalk_reent+0x12>

08030f66 <__retarget_lock_init_recursive>:
 8030f66:	4770      	bx	lr

08030f68 <__retarget_lock_acquire_recursive>:
 8030f68:	4770      	bx	lr

08030f6a <__retarget_lock_release_recursive>:
 8030f6a:	4770      	bx	lr

08030f6c <memchr>:
 8030f6c:	b2c9      	uxtb	r1, r1
 8030f6e:	1882      	adds	r2, r0, r2
 8030f70:	4290      	cmp	r0, r2
 8030f72:	d101      	bne.n	8030f78 <memchr+0xc>
 8030f74:	2000      	movs	r0, #0
 8030f76:	4770      	bx	lr
 8030f78:	7803      	ldrb	r3, [r0, #0]
 8030f7a:	428b      	cmp	r3, r1
 8030f7c:	d0fb      	beq.n	8030f76 <memchr+0xa>
 8030f7e:	3001      	adds	r0, #1
 8030f80:	e7f6      	b.n	8030f70 <memchr+0x4>

08030f82 <_raise_r>:
 8030f82:	b570      	push	{r4, r5, r6, lr}
 8030f84:	0004      	movs	r4, r0
 8030f86:	000d      	movs	r5, r1
 8030f88:	291f      	cmp	r1, #31
 8030f8a:	d904      	bls.n	8030f96 <_raise_r+0x14>
 8030f8c:	2316      	movs	r3, #22
 8030f8e:	6003      	str	r3, [r0, #0]
 8030f90:	2001      	movs	r0, #1
 8030f92:	4240      	negs	r0, r0
 8030f94:	bd70      	pop	{r4, r5, r6, pc}
 8030f96:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8030f98:	2b00      	cmp	r3, #0
 8030f9a:	d004      	beq.n	8030fa6 <_raise_r+0x24>
 8030f9c:	008a      	lsls	r2, r1, #2
 8030f9e:	189b      	adds	r3, r3, r2
 8030fa0:	681a      	ldr	r2, [r3, #0]
 8030fa2:	2a00      	cmp	r2, #0
 8030fa4:	d108      	bne.n	8030fb8 <_raise_r+0x36>
 8030fa6:	0020      	movs	r0, r4
 8030fa8:	f000 f815 	bl	8030fd6 <_getpid_r>
 8030fac:	002a      	movs	r2, r5
 8030fae:	0001      	movs	r1, r0
 8030fb0:	0020      	movs	r0, r4
 8030fb2:	f7fd fa83 	bl	802e4bc <_kill_r>
 8030fb6:	e7ed      	b.n	8030f94 <_raise_r+0x12>
 8030fb8:	2000      	movs	r0, #0
 8030fba:	2a01      	cmp	r2, #1
 8030fbc:	d0ea      	beq.n	8030f94 <_raise_r+0x12>
 8030fbe:	1c51      	adds	r1, r2, #1
 8030fc0:	d103      	bne.n	8030fca <_raise_r+0x48>
 8030fc2:	2316      	movs	r3, #22
 8030fc4:	3001      	adds	r0, #1
 8030fc6:	6023      	str	r3, [r4, #0]
 8030fc8:	e7e4      	b.n	8030f94 <_raise_r+0x12>
 8030fca:	2400      	movs	r4, #0
 8030fcc:	0028      	movs	r0, r5
 8030fce:	601c      	str	r4, [r3, #0]
 8030fd0:	4790      	blx	r2
 8030fd2:	0020      	movs	r0, r4
 8030fd4:	e7de      	b.n	8030f94 <_raise_r+0x12>

08030fd6 <_getpid_r>:
 8030fd6:	b510      	push	{r4, lr}
 8030fd8:	f7ff f9fe 	bl	80303d8 <_getpid>
 8030fdc:	bd10      	pop	{r4, pc}

08030fde <__sclose>:
 8030fde:	b510      	push	{r4, lr}
 8030fe0:	230e      	movs	r3, #14
 8030fe2:	5ec9      	ldrsh	r1, [r1, r3]
 8030fe4:	f7fd fad6 	bl	802e594 <_close_r>
 8030fe8:	bd10      	pop	{r4, pc}
